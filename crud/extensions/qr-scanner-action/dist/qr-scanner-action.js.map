{
  "version": 3,
  "sources": ["../../../node_modules/object-assign/index.js", "../node_modules/react/cjs/react.development.js", "../node_modules/react/index.js", "../../../node_modules/@remote-ui/react/node_modules/scheduler/cjs/scheduler.development.js", "../../../node_modules/@remote-ui/react/node_modules/scheduler/index.js", "../../../node_modules/@remote-ui/react/node_modules/scheduler/cjs/scheduler-tracing.development.js", "../../../node_modules/@remote-ui/react/node_modules/scheduler/tracing.js", "../../../node_modules/@remote-ui/react/node_modules/react-reconciler/cjs/react-reconciler.development.js", "../../../node_modules/@remote-ui/react/node_modules/react-reconciler/index.js", "../../../node_modules/@remote-ui/react/node_modules/react/cjs/react-jsx-runtime.development.js", "../../../node_modules/@remote-ui/react/node_modules/react/jsx-runtime.js", "../node_modules/react/cjs/react-jsx-runtime.development.js", "../node_modules/react/jsx-runtime.js", "../../../node_modules/html5-qrcode/third_party/zxing-js.umd.js", "../src/ActionExtension.jsx", "../../../node_modules/@shopify/ui-extensions/node_modules/@remote-ui/core/build/esm/component.mjs", "../../../node_modules/@shopify/ui-extensions/node_modules/@remote-ui/core/build/esm/types.mjs", "../../../node_modules/@shopify/ui-extensions/node_modules/@remote-ui/core/build/esm/utilities.mjs", "../../../node_modules/@shopify/ui-extensions/node_modules/@remote-ui/core/build/esm/root.mjs", "../../../node_modules/@shopify/ui-extensions/build/esm/utilities/registration.mjs", "../../../node_modules/@shopify/ui-extensions/build/esm/surfaces/admin/extension.mjs", "../../../node_modules/@shopify/ui-extensions/build/esm/surfaces/admin/components/AdminAction/AdminAction.mjs", "../../../node_modules/@shopify/ui-extensions/build/esm/surfaces/admin/components/BlockStack/BlockStack.mjs", "../../../node_modules/@shopify/ui-extensions/build/esm/surfaces/admin/components/Button/Button.mjs", "../../../node_modules/@shopify/ui-extensions/build/esm/surfaces/admin/components/Text/Text.mjs", "../../../node_modules/@remote-ui/core/build/esm/types.mjs", "../../../node_modules/@remote-ui/core/build/esm/utilities.mjs", "../../../node_modules/@remote-ui/react/build/esm/reconciler.mjs", "../../../node_modules/@remote-ui/react/build/esm/context.mjs", "../../../node_modules/@remote-ui/react/build/esm/render.mjs", "../../../node_modules/@remote-ui/react/build/esm/components.mjs", "../../../node_modules/@remote-ui/react/build/esm/hooks/render.mjs", "../node_modules/@shopify/ui-extensions-react/build/esm/surfaces/admin/context.mjs", "../node_modules/@shopify/ui-extensions-react/build/esm/surfaces/admin/render.mjs", "../node_modules/@shopify/ui-extensions-react/build/esm/surfaces/admin/components/AdminAction/AdminAction.mjs", "../node_modules/@shopify/ui-extensions-react/build/esm/surfaces/admin/components/BlockStack/BlockStack.mjs", "../node_modules/@shopify/ui-extensions-react/build/esm/surfaces/admin/components/Button/Button.mjs", "../node_modules/@shopify/ui-extensions-react/build/esm/surfaces/admin/components/Text/Text.mjs", "../node_modules/@shopify/ui-extensions-react/build/esm/surfaces/admin/hooks/api.mjs", "../node_modules/@shopify/ui-extensions-react/build/esm/surfaces/admin/errors.mjs", "../../../node_modules/src/core.ts", "../../../node_modules/src/strings.ts", "../../../node_modules/src/utils.ts", "../../../node_modules/src/zxing-html5-qrcode-decoder.ts", "../../../node_modules/src/native-bar-code-detector.ts", "../../../node_modules/src/code-decoder.ts", "../../../node_modules/src/camera/core-impl.ts", "../../../node_modules/src/camera/factories.ts", "../../../node_modules/src/camera/retriever.ts", "../../../node_modules/src/state-manager.ts", "../../../node_modules/src/html5-qrcode.ts", "../../../node_modules/src/image-assets.ts", "../../../node_modules/src/storage.ts", "../../../node_modules/src/ui.ts", "../../../node_modules/src/camera/permissions.ts", "../../../node_modules/src/ui/scanner/scan-type-selector.ts", "../../../node_modules/src/ui/scanner/base.ts", "../../../node_modules/src/ui/scanner/torch-button.ts", "../../../node_modules/src/ui/scanner/file-selection-ui.ts", "../../../node_modules/src/ui/scanner/camera-selection-ui.ts", "../../../node_modules/src/ui/scanner/camera-zoom-ui.ts", "../../../node_modules/src/html5-qrcode-scanner.ts"],
  "sourceRoot": "/media/paulo/SSD1/Shopify Development/crud/extensions/qr-scanner-action/src",
  "sourcesContent": ["/*\nobject-assign\n(c) Sindre Sorhus\n@license MIT\n*/\n\n'use strict';\n/* eslint-disable no-unused-vars */\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\n\nfunction toObject(val) {\n\tif (val === null || val === undefined) {\n\t\tthrow new TypeError('Object.assign cannot be called with null or undefined');\n\t}\n\n\treturn Object(val);\n}\n\nfunction shouldUseNative() {\n\ttry {\n\t\tif (!Object.assign) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Detect buggy property enumeration order in older V8 versions.\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=4118\n\t\tvar test1 = new String('abc');  // eslint-disable-line no-new-wrappers\n\t\ttest1[5] = 'de';\n\t\tif (Object.getOwnPropertyNames(test1)[0] === '5') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test2 = {};\n\t\tfor (var i = 0; i < 10; i++) {\n\t\t\ttest2['_' + String.fromCharCode(i)] = i;\n\t\t}\n\t\tvar order2 = Object.getOwnPropertyNames(test2).map(function (n) {\n\t\t\treturn test2[n];\n\t\t});\n\t\tif (order2.join('') !== '0123456789') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test3 = {};\n\t\t'abcdefghijklmnopqrst'.split('').forEach(function (letter) {\n\t\t\ttest3[letter] = letter;\n\t\t});\n\t\tif (Object.keys(Object.assign({}, test3)).join('') !==\n\t\t\t\t'abcdefghijklmnopqrst') {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t} catch (err) {\n\t\t// We don't expect any of the above to throw, but better to be safe.\n\t\treturn false;\n\t}\n}\n\nmodule.exports = shouldUseNative() ? Object.assign : function (target, source) {\n\tvar from;\n\tvar to = toObject(target);\n\tvar symbols;\n\n\tfor (var s = 1; s < arguments.length; s++) {\n\t\tfrom = Object(arguments[s]);\n\n\t\tfor (var key in from) {\n\t\t\tif (hasOwnProperty.call(from, key)) {\n\t\t\t\tto[key] = from[key];\n\t\t\t}\n\t\t}\n\n\t\tif (getOwnPropertySymbols) {\n\t\t\tsymbols = getOwnPropertySymbols(from);\n\t\t\tfor (var i = 0; i < symbols.length; i++) {\n\t\t\t\tif (propIsEnumerable.call(from, symbols[i])) {\n\t\t\t\t\tto[symbols[i]] = from[symbols[i]];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn to;\n};\n", "/** @license React v17.0.2\n * react.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nif (process.env.NODE_ENV !== \"production\") {\n  (function() {\n'use strict';\n\nvar _assign = require('object-assign');\n\n// TODO: this is special because it gets imported during build.\nvar ReactVersion = '17.0.2';\n\n// ATTENTION\n// When adding new symbols to this file,\n// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n// The Symbol used to tag the ReactElement-like types. If there is no native Symbol\n// nor polyfill, then a plain number is used for performance.\nvar REACT_ELEMENT_TYPE = 0xeac7;\nvar REACT_PORTAL_TYPE = 0xeaca;\nexports.Fragment = 0xeacb;\nexports.StrictMode = 0xeacc;\nexports.Profiler = 0xead2;\nvar REACT_PROVIDER_TYPE = 0xeacd;\nvar REACT_CONTEXT_TYPE = 0xeace;\nvar REACT_FORWARD_REF_TYPE = 0xead0;\nexports.Suspense = 0xead1;\nvar REACT_SUSPENSE_LIST_TYPE = 0xead8;\nvar REACT_MEMO_TYPE = 0xead3;\nvar REACT_LAZY_TYPE = 0xead4;\nvar REACT_BLOCK_TYPE = 0xead9;\nvar REACT_SERVER_BLOCK_TYPE = 0xeada;\nvar REACT_FUNDAMENTAL_TYPE = 0xead5;\nvar REACT_SCOPE_TYPE = 0xead7;\nvar REACT_OPAQUE_ID_TYPE = 0xeae0;\nvar REACT_DEBUG_TRACING_MODE_TYPE = 0xeae1;\nvar REACT_OFFSCREEN_TYPE = 0xeae2;\nvar REACT_LEGACY_HIDDEN_TYPE = 0xeae3;\n\nif (typeof Symbol === 'function' && Symbol.for) {\n  var symbolFor = Symbol.for;\n  REACT_ELEMENT_TYPE = symbolFor('react.element');\n  REACT_PORTAL_TYPE = symbolFor('react.portal');\n  exports.Fragment = symbolFor('react.fragment');\n  exports.StrictMode = symbolFor('react.strict_mode');\n  exports.Profiler = symbolFor('react.profiler');\n  REACT_PROVIDER_TYPE = symbolFor('react.provider');\n  REACT_CONTEXT_TYPE = symbolFor('react.context');\n  REACT_FORWARD_REF_TYPE = symbolFor('react.forward_ref');\n  exports.Suspense = symbolFor('react.suspense');\n  REACT_SUSPENSE_LIST_TYPE = symbolFor('react.suspense_list');\n  REACT_MEMO_TYPE = symbolFor('react.memo');\n  REACT_LAZY_TYPE = symbolFor('react.lazy');\n  REACT_BLOCK_TYPE = symbolFor('react.block');\n  REACT_SERVER_BLOCK_TYPE = symbolFor('react.server.block');\n  REACT_FUNDAMENTAL_TYPE = symbolFor('react.fundamental');\n  REACT_SCOPE_TYPE = symbolFor('react.scope');\n  REACT_OPAQUE_ID_TYPE = symbolFor('react.opaque.id');\n  REACT_DEBUG_TRACING_MODE_TYPE = symbolFor('react.debug_trace_mode');\n  REACT_OFFSCREEN_TYPE = symbolFor('react.offscreen');\n  REACT_LEGACY_HIDDEN_TYPE = symbolFor('react.legacy_hidden');\n}\n\nvar MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;\nvar FAUX_ITERATOR_SYMBOL = '@@iterator';\nfunction getIteratorFn(maybeIterable) {\n  if (maybeIterable === null || typeof maybeIterable !== 'object') {\n    return null;\n  }\n\n  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\n\n  if (typeof maybeIterator === 'function') {\n    return maybeIterator;\n  }\n\n  return null;\n}\n\n/**\n * Keeps track of the current dispatcher.\n */\nvar ReactCurrentDispatcher = {\n  /**\n   * @internal\n   * @type {ReactComponent}\n   */\n  current: null\n};\n\n/**\n * Keeps track of the current batch's configuration such as how long an update\n * should suspend for if it needs to.\n */\nvar ReactCurrentBatchConfig = {\n  transition: 0\n};\n\n/**\n * Keeps track of the current owner.\n *\n * The current owner is the component who should own any components that are\n * currently being constructed.\n */\nvar ReactCurrentOwner = {\n  /**\n   * @internal\n   * @type {ReactComponent}\n   */\n  current: null\n};\n\nvar ReactDebugCurrentFrame = {};\nvar currentExtraStackFrame = null;\nfunction setExtraStackFrame(stack) {\n  {\n    currentExtraStackFrame = stack;\n  }\n}\n\n{\n  ReactDebugCurrentFrame.setExtraStackFrame = function (stack) {\n    {\n      currentExtraStackFrame = stack;\n    }\n  }; // Stack implementation injected by the current renderer.\n\n\n  ReactDebugCurrentFrame.getCurrentStack = null;\n\n  ReactDebugCurrentFrame.getStackAddendum = function () {\n    var stack = ''; // Add an extra top frame while an element is being validated\n\n    if (currentExtraStackFrame) {\n      stack += currentExtraStackFrame;\n    } // Delegate to the injected renderer-specific implementation\n\n\n    var impl = ReactDebugCurrentFrame.getCurrentStack;\n\n    if (impl) {\n      stack += impl() || '';\n    }\n\n    return stack;\n  };\n}\n\n/**\n * Used by act() to track whether you're inside an act() scope.\n */\nvar IsSomeRendererActing = {\n  current: false\n};\n\nvar ReactSharedInternals = {\n  ReactCurrentDispatcher: ReactCurrentDispatcher,\n  ReactCurrentBatchConfig: ReactCurrentBatchConfig,\n  ReactCurrentOwner: ReactCurrentOwner,\n  IsSomeRendererActing: IsSomeRendererActing,\n  // Used by renderers to avoid bundling object-assign twice in UMD bundles:\n  assign: _assign\n};\n\n{\n  ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;\n}\n\n// by calls to these methods by a Babel plugin.\n//\n// In PROD (or in packages without access to React internals),\n// they are left as they are instead.\n\nfunction warn(format) {\n  {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    printWarning('warn', format, args);\n  }\n}\nfunction error(format) {\n  {\n    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      args[_key2 - 1] = arguments[_key2];\n    }\n\n    printWarning('error', format, args);\n  }\n}\n\nfunction printWarning(level, format, args) {\n  // When changing this logic, you might want to also\n  // update consoleWithStackDev.www.js as well.\n  {\n    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n    var stack = ReactDebugCurrentFrame.getStackAddendum();\n\n    if (stack !== '') {\n      format += '%s';\n      args = args.concat([stack]);\n    }\n\n    var argsWithFormat = args.map(function (item) {\n      return '' + item;\n    }); // Careful: RN currently depends on this prefix\n\n    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it\n    // breaks IE9: https://github.com/facebook/react/issues/13610\n    // eslint-disable-next-line react-internal/no-production-logging\n\n    Function.prototype.apply.call(console[level], console, argsWithFormat);\n  }\n}\n\nvar didWarnStateUpdateForUnmountedComponent = {};\n\nfunction warnNoop(publicInstance, callerName) {\n  {\n    var _constructor = publicInstance.constructor;\n    var componentName = _constructor && (_constructor.displayName || _constructor.name) || 'ReactClass';\n    var warningKey = componentName + \".\" + callerName;\n\n    if (didWarnStateUpdateForUnmountedComponent[warningKey]) {\n      return;\n    }\n\n    error(\"Can't call %s on a component that is not yet mounted. \" + 'This is a no-op, but it might indicate a bug in your application. ' + 'Instead, assign to `this.state` directly or define a `state = {};` ' + 'class property with the desired state in the %s component.', callerName, componentName);\n\n    didWarnStateUpdateForUnmountedComponent[warningKey] = true;\n  }\n}\n/**\n * This is the abstract API for an update queue.\n */\n\n\nvar ReactNoopUpdateQueue = {\n  /**\n   * Checks whether or not this composite component is mounted.\n   * @param {ReactClass} publicInstance The instance we want to test.\n   * @return {boolean} True if mounted, false otherwise.\n   * @protected\n   * @final\n   */\n  isMounted: function (publicInstance) {\n    return false;\n  },\n\n  /**\n   * Forces an update. This should only be invoked when it is known with\n   * certainty that we are **not** in a DOM transaction.\n   *\n   * You may want to call this when you know that some deeper aspect of the\n   * component's state has changed but `setState` was not called.\n   *\n   * This will not invoke `shouldComponentUpdate`, but it will invoke\n   * `componentWillUpdate` and `componentDidUpdate`.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @param {?function} callback Called after component is updated.\n   * @param {?string} callerName name of the calling function in the public API.\n   * @internal\n   */\n  enqueueForceUpdate: function (publicInstance, callback, callerName) {\n    warnNoop(publicInstance, 'forceUpdate');\n  },\n\n  /**\n   * Replaces all of the state. Always use this or `setState` to mutate state.\n   * You should treat `this.state` as immutable.\n   *\n   * There is no guarantee that `this.state` will be immediately updated, so\n   * accessing `this.state` after calling this method may return the old value.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @param {object} completeState Next state.\n   * @param {?function} callback Called after component is updated.\n   * @param {?string} callerName name of the calling function in the public API.\n   * @internal\n   */\n  enqueueReplaceState: function (publicInstance, completeState, callback, callerName) {\n    warnNoop(publicInstance, 'replaceState');\n  },\n\n  /**\n   * Sets a subset of the state. This only exists because _pendingState is\n   * internal. This provides a merging strategy that is not available to deep\n   * properties which is confusing. TODO: Expose pendingState or don't use it\n   * during the merge.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @param {object} partialState Next partial state to be merged with state.\n   * @param {?function} callback Called after component is updated.\n   * @param {?string} Name of the calling function in the public API.\n   * @internal\n   */\n  enqueueSetState: function (publicInstance, partialState, callback, callerName) {\n    warnNoop(publicInstance, 'setState');\n  }\n};\n\nvar emptyObject = {};\n\n{\n  Object.freeze(emptyObject);\n}\n/**\n * Base class helpers for the updating state of a component.\n */\n\n\nfunction Component(props, context, updater) {\n  this.props = props;\n  this.context = context; // If a component has string refs, we will assign a different object later.\n\n  this.refs = emptyObject; // We initialize the default updater but the real one gets injected by the\n  // renderer.\n\n  this.updater = updater || ReactNoopUpdateQueue;\n}\n\nComponent.prototype.isReactComponent = {};\n/**\n * Sets a subset of the state. Always use this to mutate\n * state. You should treat `this.state` as immutable.\n *\n * There is no guarantee that `this.state` will be immediately updated, so\n * accessing `this.state` after calling this method may return the old value.\n *\n * There is no guarantee that calls to `setState` will run synchronously,\n * as they may eventually be batched together.  You can provide an optional\n * callback that will be executed when the call to setState is actually\n * completed.\n *\n * When a function is provided to setState, it will be called at some point in\n * the future (not synchronously). It will be called with the up to date\n * component arguments (state, props, context). These values can be different\n * from this.* because your function may be called after receiveProps but before\n * shouldComponentUpdate, and this new state, props, and context will not yet be\n * assigned to this.\n *\n * @param {object|function} partialState Next partial state or function to\n *        produce next partial state to be merged with current state.\n * @param {?function} callback Called after state is updated.\n * @final\n * @protected\n */\n\nComponent.prototype.setState = function (partialState, callback) {\n  if (!(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null)) {\n    {\n      throw Error( \"setState(...): takes an object of state variables to update or a function which returns an object of state variables.\" );\n    }\n  }\n\n  this.updater.enqueueSetState(this, partialState, callback, 'setState');\n};\n/**\n * Forces an update. This should only be invoked when it is known with\n * certainty that we are **not** in a DOM transaction.\n *\n * You may want to call this when you know that some deeper aspect of the\n * component's state has changed but `setState` was not called.\n *\n * This will not invoke `shouldComponentUpdate`, but it will invoke\n * `componentWillUpdate` and `componentDidUpdate`.\n *\n * @param {?function} callback Called after update is complete.\n * @final\n * @protected\n */\n\n\nComponent.prototype.forceUpdate = function (callback) {\n  this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');\n};\n/**\n * Deprecated APIs. These APIs used to exist on classic React classes but since\n * we would like to deprecate them, we're not going to move them over to this\n * modern base class. Instead, we define a getter that warns if it's accessed.\n */\n\n\n{\n  var deprecatedAPIs = {\n    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],\n    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']\n  };\n\n  var defineDeprecationWarning = function (methodName, info) {\n    Object.defineProperty(Component.prototype, methodName, {\n      get: function () {\n        warn('%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);\n\n        return undefined;\n      }\n    });\n  };\n\n  for (var fnName in deprecatedAPIs) {\n    if (deprecatedAPIs.hasOwnProperty(fnName)) {\n      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);\n    }\n  }\n}\n\nfunction ComponentDummy() {}\n\nComponentDummy.prototype = Component.prototype;\n/**\n * Convenience component with default shallow equality check for sCU.\n */\n\nfunction PureComponent(props, context, updater) {\n  this.props = props;\n  this.context = context; // If a component has string refs, we will assign a different object later.\n\n  this.refs = emptyObject;\n  this.updater = updater || ReactNoopUpdateQueue;\n}\n\nvar pureComponentPrototype = PureComponent.prototype = new ComponentDummy();\npureComponentPrototype.constructor = PureComponent; // Avoid an extra prototype jump for these methods.\n\n_assign(pureComponentPrototype, Component.prototype);\n\npureComponentPrototype.isPureReactComponent = true;\n\n// an immutable object with a single mutable value\nfunction createRef() {\n  var refObject = {\n    current: null\n  };\n\n  {\n    Object.seal(refObject);\n  }\n\n  return refObject;\n}\n\nfunction getWrappedName(outerType, innerType, wrapperName) {\n  var functionName = innerType.displayName || innerType.name || '';\n  return outerType.displayName || (functionName !== '' ? wrapperName + \"(\" + functionName + \")\" : wrapperName);\n}\n\nfunction getContextName(type) {\n  return type.displayName || 'Context';\n}\n\nfunction getComponentName(type) {\n  if (type == null) {\n    // Host root, text node or just invalid type.\n    return null;\n  }\n\n  {\n    if (typeof type.tag === 'number') {\n      error('Received an unexpected object in getComponentName(). ' + 'This is likely a bug in React. Please file an issue.');\n    }\n  }\n\n  if (typeof type === 'function') {\n    return type.displayName || type.name || null;\n  }\n\n  if (typeof type === 'string') {\n    return type;\n  }\n\n  switch (type) {\n    case exports.Fragment:\n      return 'Fragment';\n\n    case REACT_PORTAL_TYPE:\n      return 'Portal';\n\n    case exports.Profiler:\n      return 'Profiler';\n\n    case exports.StrictMode:\n      return 'StrictMode';\n\n    case exports.Suspense:\n      return 'Suspense';\n\n    case REACT_SUSPENSE_LIST_TYPE:\n      return 'SuspenseList';\n  }\n\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_CONTEXT_TYPE:\n        var context = type;\n        return getContextName(context) + '.Consumer';\n\n      case REACT_PROVIDER_TYPE:\n        var provider = type;\n        return getContextName(provider._context) + '.Provider';\n\n      case REACT_FORWARD_REF_TYPE:\n        return getWrappedName(type, type.render, 'ForwardRef');\n\n      case REACT_MEMO_TYPE:\n        return getComponentName(type.type);\n\n      case REACT_BLOCK_TYPE:\n        return getComponentName(type._render);\n\n      case REACT_LAZY_TYPE:\n        {\n          var lazyComponent = type;\n          var payload = lazyComponent._payload;\n          var init = lazyComponent._init;\n\n          try {\n            return getComponentName(init(payload));\n          } catch (x) {\n            return null;\n          }\n        }\n    }\n  }\n\n  return null;\n}\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar RESERVED_PROPS = {\n  key: true,\n  ref: true,\n  __self: true,\n  __source: true\n};\nvar specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;\n\n{\n  didWarnAboutStringRefs = {};\n}\n\nfunction hasValidRef(config) {\n  {\n    if (hasOwnProperty.call(config, 'ref')) {\n      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;\n\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n\n  return config.ref !== undefined;\n}\n\nfunction hasValidKey(config) {\n  {\n    if (hasOwnProperty.call(config, 'key')) {\n      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;\n\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n\n  return config.key !== undefined;\n}\n\nfunction defineKeyPropWarningGetter(props, displayName) {\n  var warnAboutAccessingKey = function () {\n    {\n      if (!specialPropKeyWarningShown) {\n        specialPropKeyWarningShown = true;\n\n        error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);\n      }\n    }\n  };\n\n  warnAboutAccessingKey.isReactWarning = true;\n  Object.defineProperty(props, 'key', {\n    get: warnAboutAccessingKey,\n    configurable: true\n  });\n}\n\nfunction defineRefPropWarningGetter(props, displayName) {\n  var warnAboutAccessingRef = function () {\n    {\n      if (!specialPropRefWarningShown) {\n        specialPropRefWarningShown = true;\n\n        error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);\n      }\n    }\n  };\n\n  warnAboutAccessingRef.isReactWarning = true;\n  Object.defineProperty(props, 'ref', {\n    get: warnAboutAccessingRef,\n    configurable: true\n  });\n}\n\nfunction warnIfStringRefCannotBeAutoConverted(config) {\n  {\n    if (typeof config.ref === 'string' && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {\n      var componentName = getComponentName(ReactCurrentOwner.current.type);\n\n      if (!didWarnAboutStringRefs[componentName]) {\n        error('Component \"%s\" contains the string ref \"%s\". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);\n\n        didWarnAboutStringRefs[componentName] = true;\n      }\n    }\n  }\n}\n/**\n * Factory method to create a new React element. This no longer adheres to\n * the class pattern, so do not use new to call it. Also, instanceof check\n * will not work. Instead test $$typeof field against Symbol.for('react.element') to check\n * if something is a React Element.\n *\n * @param {*} type\n * @param {*} props\n * @param {*} key\n * @param {string|object} ref\n * @param {*} owner\n * @param {*} self A *temporary* helper to detect places where `this` is\n * different from the `owner` when React.createElement is called, so that we\n * can warn. We want to get rid of owner and replace string `ref`s with arrow\n * functions, and as long as `this` and owner are the same, there will be no\n * change in behavior.\n * @param {*} source An annotation object (added by a transpiler or otherwise)\n * indicating filename, line number, and/or other information.\n * @internal\n */\n\n\nvar ReactElement = function (type, key, ref, self, source, owner, props) {\n  var element = {\n    // This tag allows us to uniquely identify this as a React Element\n    $$typeof: REACT_ELEMENT_TYPE,\n    // Built-in properties that belong on the element\n    type: type,\n    key: key,\n    ref: ref,\n    props: props,\n    // Record the component responsible for creating this element.\n    _owner: owner\n  };\n\n  {\n    // The validation flag is currently mutative. We put it on\n    // an external backing store so that we can freeze the whole object.\n    // This can be replaced with a WeakMap once they are implemented in\n    // commonly used development environments.\n    element._store = {}; // To make comparing ReactElements easier for testing purposes, we make\n    // the validation flag non-enumerable (where possible, which should\n    // include every environment we run tests in), so the test framework\n    // ignores it.\n\n    Object.defineProperty(element._store, 'validated', {\n      configurable: false,\n      enumerable: false,\n      writable: true,\n      value: false\n    }); // self and source are DEV only properties.\n\n    Object.defineProperty(element, '_self', {\n      configurable: false,\n      enumerable: false,\n      writable: false,\n      value: self\n    }); // Two elements created in two different places should be considered\n    // equal for testing purposes and therefore we hide it from enumeration.\n\n    Object.defineProperty(element, '_source', {\n      configurable: false,\n      enumerable: false,\n      writable: false,\n      value: source\n    });\n\n    if (Object.freeze) {\n      Object.freeze(element.props);\n      Object.freeze(element);\n    }\n  }\n\n  return element;\n};\n/**\n * Create and return a new ReactElement of the given type.\n * See https://reactjs.org/docs/react-api.html#createelement\n */\n\nfunction createElement(type, config, children) {\n  var propName; // Reserved names are extracted\n\n  var props = {};\n  var key = null;\n  var ref = null;\n  var self = null;\n  var source = null;\n\n  if (config != null) {\n    if (hasValidRef(config)) {\n      ref = config.ref;\n\n      {\n        warnIfStringRefCannotBeAutoConverted(config);\n      }\n    }\n\n    if (hasValidKey(config)) {\n      key = '' + config.key;\n    }\n\n    self = config.__self === undefined ? null : config.__self;\n    source = config.__source === undefined ? null : config.__source; // Remaining properties are added to a new props object\n\n    for (propName in config) {\n      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\n        props[propName] = config[propName];\n      }\n    }\n  } // Children can be more than one argument, and those are transferred onto\n  // the newly allocated props object.\n\n\n  var childrenLength = arguments.length - 2;\n\n  if (childrenLength === 1) {\n    props.children = children;\n  } else if (childrenLength > 1) {\n    var childArray = Array(childrenLength);\n\n    for (var i = 0; i < childrenLength; i++) {\n      childArray[i] = arguments[i + 2];\n    }\n\n    {\n      if (Object.freeze) {\n        Object.freeze(childArray);\n      }\n    }\n\n    props.children = childArray;\n  } // Resolve default props\n\n\n  if (type && type.defaultProps) {\n    var defaultProps = type.defaultProps;\n\n    for (propName in defaultProps) {\n      if (props[propName] === undefined) {\n        props[propName] = defaultProps[propName];\n      }\n    }\n  }\n\n  {\n    if (key || ref) {\n      var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;\n\n      if (key) {\n        defineKeyPropWarningGetter(props, displayName);\n      }\n\n      if (ref) {\n        defineRefPropWarningGetter(props, displayName);\n      }\n    }\n  }\n\n  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);\n}\nfunction cloneAndReplaceKey(oldElement, newKey) {\n  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);\n  return newElement;\n}\n/**\n * Clone and return a new ReactElement using element as the starting point.\n * See https://reactjs.org/docs/react-api.html#cloneelement\n */\n\nfunction cloneElement(element, config, children) {\n  if (!!(element === null || element === undefined)) {\n    {\n      throw Error( \"React.cloneElement(...): The argument must be a React element, but you passed \" + element + \".\" );\n    }\n  }\n\n  var propName; // Original props are copied\n\n  var props = _assign({}, element.props); // Reserved names are extracted\n\n\n  var key = element.key;\n  var ref = element.ref; // Self is preserved since the owner is preserved.\n\n  var self = element._self; // Source is preserved since cloneElement is unlikely to be targeted by a\n  // transpiler, and the original source is probably a better indicator of the\n  // true owner.\n\n  var source = element._source; // Owner will be preserved, unless ref is overridden\n\n  var owner = element._owner;\n\n  if (config != null) {\n    if (hasValidRef(config)) {\n      // Silently steal the ref from the parent.\n      ref = config.ref;\n      owner = ReactCurrentOwner.current;\n    }\n\n    if (hasValidKey(config)) {\n      key = '' + config.key;\n    } // Remaining properties override existing props\n\n\n    var defaultProps;\n\n    if (element.type && element.type.defaultProps) {\n      defaultProps = element.type.defaultProps;\n    }\n\n    for (propName in config) {\n      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\n        if (config[propName] === undefined && defaultProps !== undefined) {\n          // Resolve default props\n          props[propName] = defaultProps[propName];\n        } else {\n          props[propName] = config[propName];\n        }\n      }\n    }\n  } // Children can be more than one argument, and those are transferred onto\n  // the newly allocated props object.\n\n\n  var childrenLength = arguments.length - 2;\n\n  if (childrenLength === 1) {\n    props.children = children;\n  } else if (childrenLength > 1) {\n    var childArray = Array(childrenLength);\n\n    for (var i = 0; i < childrenLength; i++) {\n      childArray[i] = arguments[i + 2];\n    }\n\n    props.children = childArray;\n  }\n\n  return ReactElement(element.type, key, ref, self, source, owner, props);\n}\n/**\n * Verifies the object is a ReactElement.\n * See https://reactjs.org/docs/react-api.html#isvalidelement\n * @param {?object} object\n * @return {boolean} True if `object` is a ReactElement.\n * @final\n */\n\nfunction isValidElement(object) {\n  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\n}\n\nvar SEPARATOR = '.';\nvar SUBSEPARATOR = ':';\n/**\n * Escape and wrap key so it is safe to use as a reactid\n *\n * @param {string} key to be escaped.\n * @return {string} the escaped key.\n */\n\nfunction escape(key) {\n  var escapeRegex = /[=:]/g;\n  var escaperLookup = {\n    '=': '=0',\n    ':': '=2'\n  };\n  var escapedString = key.replace(escapeRegex, function (match) {\n    return escaperLookup[match];\n  });\n  return '$' + escapedString;\n}\n/**\n * TODO: Test that a single child and an array with one item have the same key\n * pattern.\n */\n\n\nvar didWarnAboutMaps = false;\nvar userProvidedKeyEscapeRegex = /\\/+/g;\n\nfunction escapeUserProvidedKey(text) {\n  return text.replace(userProvidedKeyEscapeRegex, '$&/');\n}\n/**\n * Generate a key string that identifies a element within a set.\n *\n * @param {*} element A element that could contain a manual key.\n * @param {number} index Index that is used if a manual key is not provided.\n * @return {string}\n */\n\n\nfunction getElementKey(element, index) {\n  // Do some typechecking here since we call this blindly. We want to ensure\n  // that we don't block potential future ES APIs.\n  if (typeof element === 'object' && element !== null && element.key != null) {\n    // Explicit key\n    return escape('' + element.key);\n  } // Implicit key determined by the index in the set\n\n\n  return index.toString(36);\n}\n\nfunction mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {\n  var type = typeof children;\n\n  if (type === 'undefined' || type === 'boolean') {\n    // All of the above are perceived as null.\n    children = null;\n  }\n\n  var invokeCallback = false;\n\n  if (children === null) {\n    invokeCallback = true;\n  } else {\n    switch (type) {\n      case 'string':\n      case 'number':\n        invokeCallback = true;\n        break;\n\n      case 'object':\n        switch (children.$$typeof) {\n          case REACT_ELEMENT_TYPE:\n          case REACT_PORTAL_TYPE:\n            invokeCallback = true;\n        }\n\n    }\n  }\n\n  if (invokeCallback) {\n    var _child = children;\n    var mappedChild = callback(_child); // If it's the only child, treat the name as if it was wrapped in an array\n    // so that it's consistent if the number of children grows:\n\n    var childKey = nameSoFar === '' ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;\n\n    if (Array.isArray(mappedChild)) {\n      var escapedChildKey = '';\n\n      if (childKey != null) {\n        escapedChildKey = escapeUserProvidedKey(childKey) + '/';\n      }\n\n      mapIntoArray(mappedChild, array, escapedChildKey, '', function (c) {\n        return c;\n      });\n    } else if (mappedChild != null) {\n      if (isValidElement(mappedChild)) {\n        mappedChild = cloneAndReplaceKey(mappedChild, // Keep both the (mapped) and old keys if they differ, just as\n        // traverseAllChildren used to do for objects as children\n        escapedPrefix + ( // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key\n        mappedChild.key && (!_child || _child.key !== mappedChild.key) ? // $FlowFixMe Flow incorrectly thinks existing element's key can be a number\n        escapeUserProvidedKey('' + mappedChild.key) + '/' : '') + childKey);\n      }\n\n      array.push(mappedChild);\n    }\n\n    return 1;\n  }\n\n  var child;\n  var nextName;\n  var subtreeCount = 0; // Count of children found in the current subtree.\n\n  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;\n\n  if (Array.isArray(children)) {\n    for (var i = 0; i < children.length; i++) {\n      child = children[i];\n      nextName = nextNamePrefix + getElementKey(child, i);\n      subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);\n    }\n  } else {\n    var iteratorFn = getIteratorFn(children);\n\n    if (typeof iteratorFn === 'function') {\n      var iterableChildren = children;\n\n      {\n        // Warn about using Maps as children\n        if (iteratorFn === iterableChildren.entries) {\n          if (!didWarnAboutMaps) {\n            warn('Using Maps as children is not supported. ' + 'Use an array of keyed ReactElements instead.');\n          }\n\n          didWarnAboutMaps = true;\n        }\n      }\n\n      var iterator = iteratorFn.call(iterableChildren);\n      var step;\n      var ii = 0;\n\n      while (!(step = iterator.next()).done) {\n        child = step.value;\n        nextName = nextNamePrefix + getElementKey(child, ii++);\n        subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);\n      }\n    } else if (type === 'object') {\n      var childrenString = '' + children;\n\n      {\n        {\n          throw Error( \"Objects are not valid as a React child (found: \" + (childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString) + \"). If you meant to render a collection of children, use an array instead.\" );\n        }\n      }\n    }\n  }\n\n  return subtreeCount;\n}\n\n/**\n * Maps children that are typically specified as `props.children`.\n *\n * See https://reactjs.org/docs/react-api.html#reactchildrenmap\n *\n * The provided mapFunction(child, index) will be called for each\n * leaf child.\n *\n * @param {?*} children Children tree container.\n * @param {function(*, int)} func The map function.\n * @param {*} context Context for mapFunction.\n * @return {object} Object containing the ordered map of results.\n */\nfunction mapChildren(children, func, context) {\n  if (children == null) {\n    return children;\n  }\n\n  var result = [];\n  var count = 0;\n  mapIntoArray(children, result, '', '', function (child) {\n    return func.call(context, child, count++);\n  });\n  return result;\n}\n/**\n * Count the number of children that are typically specified as\n * `props.children`.\n *\n * See https://reactjs.org/docs/react-api.html#reactchildrencount\n *\n * @param {?*} children Children tree container.\n * @return {number} The number of children.\n */\n\n\nfunction countChildren(children) {\n  var n = 0;\n  mapChildren(children, function () {\n    n++; // Don't return anything\n  });\n  return n;\n}\n\n/**\n * Iterates through children that are typically specified as `props.children`.\n *\n * See https://reactjs.org/docs/react-api.html#reactchildrenforeach\n *\n * The provided forEachFunc(child, index) will be called for each\n * leaf child.\n *\n * @param {?*} children Children tree container.\n * @param {function(*, int)} forEachFunc\n * @param {*} forEachContext Context for forEachContext.\n */\nfunction forEachChildren(children, forEachFunc, forEachContext) {\n  mapChildren(children, function () {\n    forEachFunc.apply(this, arguments); // Don't return anything.\n  }, forEachContext);\n}\n/**\n * Flatten a children object (typically specified as `props.children`) and\n * return an array with appropriately re-keyed children.\n *\n * See https://reactjs.org/docs/react-api.html#reactchildrentoarray\n */\n\n\nfunction toArray(children) {\n  return mapChildren(children, function (child) {\n    return child;\n  }) || [];\n}\n/**\n * Returns the first child in a collection of children and verifies that there\n * is only one child in the collection.\n *\n * See https://reactjs.org/docs/react-api.html#reactchildrenonly\n *\n * The current implementation of this function assumes that a single child gets\n * passed without a wrapper, but the purpose of this helper function is to\n * abstract away the particular structure of children.\n *\n * @param {?object} children Child collection structure.\n * @return {ReactElement} The first and only `ReactElement` contained in the\n * structure.\n */\n\n\nfunction onlyChild(children) {\n  if (!isValidElement(children)) {\n    {\n      throw Error( \"React.Children.only expected to receive a single React element child.\" );\n    }\n  }\n\n  return children;\n}\n\nfunction createContext(defaultValue, calculateChangedBits) {\n  if (calculateChangedBits === undefined) {\n    calculateChangedBits = null;\n  } else {\n    {\n      if (calculateChangedBits !== null && typeof calculateChangedBits !== 'function') {\n        error('createContext: Expected the optional second argument to be a ' + 'function. Instead received: %s', calculateChangedBits);\n      }\n    }\n  }\n\n  var context = {\n    $$typeof: REACT_CONTEXT_TYPE,\n    _calculateChangedBits: calculateChangedBits,\n    // As a workaround to support multiple concurrent renderers, we categorize\n    // some renderers as primary and others as secondary. We only expect\n    // there to be two concurrent renderers at most: React Native (primary) and\n    // Fabric (secondary); React DOM (primary) and React ART (secondary).\n    // Secondary renderers store their context values on separate fields.\n    _currentValue: defaultValue,\n    _currentValue2: defaultValue,\n    // Used to track how many concurrent renderers this context currently\n    // supports within in a single renderer. Such as parallel server rendering.\n    _threadCount: 0,\n    // These are circular\n    Provider: null,\n    Consumer: null\n  };\n  context.Provider = {\n    $$typeof: REACT_PROVIDER_TYPE,\n    _context: context\n  };\n  var hasWarnedAboutUsingNestedContextConsumers = false;\n  var hasWarnedAboutUsingConsumerProvider = false;\n  var hasWarnedAboutDisplayNameOnConsumer = false;\n\n  {\n    // A separate object, but proxies back to the original context object for\n    // backwards compatibility. It has a different $$typeof, so we can properly\n    // warn for the incorrect usage of Context as a Consumer.\n    var Consumer = {\n      $$typeof: REACT_CONTEXT_TYPE,\n      _context: context,\n      _calculateChangedBits: context._calculateChangedBits\n    }; // $FlowFixMe: Flow complains about not setting a value, which is intentional here\n\n    Object.defineProperties(Consumer, {\n      Provider: {\n        get: function () {\n          if (!hasWarnedAboutUsingConsumerProvider) {\n            hasWarnedAboutUsingConsumerProvider = true;\n\n            error('Rendering <Context.Consumer.Provider> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Provider> instead?');\n          }\n\n          return context.Provider;\n        },\n        set: function (_Provider) {\n          context.Provider = _Provider;\n        }\n      },\n      _currentValue: {\n        get: function () {\n          return context._currentValue;\n        },\n        set: function (_currentValue) {\n          context._currentValue = _currentValue;\n        }\n      },\n      _currentValue2: {\n        get: function () {\n          return context._currentValue2;\n        },\n        set: function (_currentValue2) {\n          context._currentValue2 = _currentValue2;\n        }\n      },\n      _threadCount: {\n        get: function () {\n          return context._threadCount;\n        },\n        set: function (_threadCount) {\n          context._threadCount = _threadCount;\n        }\n      },\n      Consumer: {\n        get: function () {\n          if (!hasWarnedAboutUsingNestedContextConsumers) {\n            hasWarnedAboutUsingNestedContextConsumers = true;\n\n            error('Rendering <Context.Consumer.Consumer> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');\n          }\n\n          return context.Consumer;\n        }\n      },\n      displayName: {\n        get: function () {\n          return context.displayName;\n        },\n        set: function (displayName) {\n          if (!hasWarnedAboutDisplayNameOnConsumer) {\n            warn('Setting `displayName` on Context.Consumer has no effect. ' + \"You should set it directly on the context with Context.displayName = '%s'.\", displayName);\n\n            hasWarnedAboutDisplayNameOnConsumer = true;\n          }\n        }\n      }\n    }); // $FlowFixMe: Flow complains about missing properties because it doesn't understand defineProperty\n\n    context.Consumer = Consumer;\n  }\n\n  {\n    context._currentRenderer = null;\n    context._currentRenderer2 = null;\n  }\n\n  return context;\n}\n\nvar Uninitialized = -1;\nvar Pending = 0;\nvar Resolved = 1;\nvar Rejected = 2;\n\nfunction lazyInitializer(payload) {\n  if (payload._status === Uninitialized) {\n    var ctor = payload._result;\n    var thenable = ctor(); // Transition to the next state.\n\n    var pending = payload;\n    pending._status = Pending;\n    pending._result = thenable;\n    thenable.then(function (moduleObject) {\n      if (payload._status === Pending) {\n        var defaultExport = moduleObject.default;\n\n        {\n          if (defaultExport === undefined) {\n            error('lazy: Expected the result of a dynamic import() call. ' + 'Instead received: %s\\n\\nYour code should look like: \\n  ' + // Break up imports to avoid accidentally parsing them as dependencies.\n            'const MyComponent = lazy(() => imp' + \"ort('./MyComponent'))\", moduleObject);\n          }\n        } // Transition to the next state.\n\n\n        var resolved = payload;\n        resolved._status = Resolved;\n        resolved._result = defaultExport;\n      }\n    }, function (error) {\n      if (payload._status === Pending) {\n        // Transition to the next state.\n        var rejected = payload;\n        rejected._status = Rejected;\n        rejected._result = error;\n      }\n    });\n  }\n\n  if (payload._status === Resolved) {\n    return payload._result;\n  } else {\n    throw payload._result;\n  }\n}\n\nfunction lazy(ctor) {\n  var payload = {\n    // We use these fields to store the result.\n    _status: -1,\n    _result: ctor\n  };\n  var lazyType = {\n    $$typeof: REACT_LAZY_TYPE,\n    _payload: payload,\n    _init: lazyInitializer\n  };\n\n  {\n    // In production, this would just set it on the object.\n    var defaultProps;\n    var propTypes; // $FlowFixMe\n\n    Object.defineProperties(lazyType, {\n      defaultProps: {\n        configurable: true,\n        get: function () {\n          return defaultProps;\n        },\n        set: function (newDefaultProps) {\n          error('React.lazy(...): It is not supported to assign `defaultProps` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');\n\n          defaultProps = newDefaultProps; // Match production behavior more closely:\n          // $FlowFixMe\n\n          Object.defineProperty(lazyType, 'defaultProps', {\n            enumerable: true\n          });\n        }\n      },\n      propTypes: {\n        configurable: true,\n        get: function () {\n          return propTypes;\n        },\n        set: function (newPropTypes) {\n          error('React.lazy(...): It is not supported to assign `propTypes` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');\n\n          propTypes = newPropTypes; // Match production behavior more closely:\n          // $FlowFixMe\n\n          Object.defineProperty(lazyType, 'propTypes', {\n            enumerable: true\n          });\n        }\n      }\n    });\n  }\n\n  return lazyType;\n}\n\nfunction forwardRef(render) {\n  {\n    if (render != null && render.$$typeof === REACT_MEMO_TYPE) {\n      error('forwardRef requires a render function but received a `memo` ' + 'component. Instead of forwardRef(memo(...)), use ' + 'memo(forwardRef(...)).');\n    } else if (typeof render !== 'function') {\n      error('forwardRef requires a render function but was given %s.', render === null ? 'null' : typeof render);\n    } else {\n      if (render.length !== 0 && render.length !== 2) {\n        error('forwardRef render functions accept exactly two parameters: props and ref. %s', render.length === 1 ? 'Did you forget to use the ref parameter?' : 'Any additional parameter will be undefined.');\n      }\n    }\n\n    if (render != null) {\n      if (render.defaultProps != null || render.propTypes != null) {\n        error('forwardRef render functions do not support propTypes or defaultProps. ' + 'Did you accidentally pass a React component?');\n      }\n    }\n  }\n\n  var elementType = {\n    $$typeof: REACT_FORWARD_REF_TYPE,\n    render: render\n  };\n\n  {\n    var ownName;\n    Object.defineProperty(elementType, 'displayName', {\n      enumerable: false,\n      configurable: true,\n      get: function () {\n        return ownName;\n      },\n      set: function (name) {\n        ownName = name;\n\n        if (render.displayName == null) {\n          render.displayName = name;\n        }\n      }\n    });\n  }\n\n  return elementType;\n}\n\n// Filter certain DOM attributes (e.g. src, href) if their values are empty strings.\n\nvar enableScopeAPI = false; // Experimental Create Event Handle API.\n\nfunction isValidElementType(type) {\n  if (typeof type === 'string' || typeof type === 'function') {\n    return true;\n  } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).\n\n\n  if (type === exports.Fragment || type === exports.Profiler || type === REACT_DEBUG_TRACING_MODE_TYPE || type === exports.StrictMode || type === exports.Suspense || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI ) {\n    return true;\n  }\n\n  if (typeof type === 'object' && type !== null) {\n    if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_BLOCK_TYPE || type[0] === REACT_SERVER_BLOCK_TYPE) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction memo(type, compare) {\n  {\n    if (!isValidElementType(type)) {\n      error('memo: The first argument must be a component. Instead ' + 'received: %s', type === null ? 'null' : typeof type);\n    }\n  }\n\n  var elementType = {\n    $$typeof: REACT_MEMO_TYPE,\n    type: type,\n    compare: compare === undefined ? null : compare\n  };\n\n  {\n    var ownName;\n    Object.defineProperty(elementType, 'displayName', {\n      enumerable: false,\n      configurable: true,\n      get: function () {\n        return ownName;\n      },\n      set: function (name) {\n        ownName = name;\n\n        if (type.displayName == null) {\n          type.displayName = name;\n        }\n      }\n    });\n  }\n\n  return elementType;\n}\n\nfunction resolveDispatcher() {\n  var dispatcher = ReactCurrentDispatcher.current;\n\n  if (!(dispatcher !== null)) {\n    {\n      throw Error( \"Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\\n1. You might have mismatching versions of React and the renderer (such as React DOM)\\n2. You might be breaking the Rules of Hooks\\n3. You might have more than one copy of React in the same app\\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.\" );\n    }\n  }\n\n  return dispatcher;\n}\n\nfunction useContext(Context, unstable_observedBits) {\n  var dispatcher = resolveDispatcher();\n\n  {\n    if (unstable_observedBits !== undefined) {\n      error('useContext() second argument is reserved for future ' + 'use in React. Passing it is not supported. ' + 'You passed: %s.%s', unstable_observedBits, typeof unstable_observedBits === 'number' && Array.isArray(arguments[2]) ? '\\n\\nDid you call array.map(useContext)? ' + 'Calling Hooks inside a loop is not supported. ' + 'Learn more at https://reactjs.org/link/rules-of-hooks' : '');\n    } // TODO: add a more generic warning for invalid values.\n\n\n    if (Context._context !== undefined) {\n      var realContext = Context._context; // Don't deduplicate because this legitimately causes bugs\n      // and nobody should be using this in existing code.\n\n      if (realContext.Consumer === Context) {\n        error('Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be ' + 'removed in a future major release. Did you mean to call useContext(Context) instead?');\n      } else if (realContext.Provider === Context) {\n        error('Calling useContext(Context.Provider) is not supported. ' + 'Did you mean to call useContext(Context) instead?');\n      }\n    }\n  }\n\n  return dispatcher.useContext(Context, unstable_observedBits);\n}\nfunction useState(initialState) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useState(initialState);\n}\nfunction useReducer(reducer, initialArg, init) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useReducer(reducer, initialArg, init);\n}\nfunction useRef(initialValue) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useRef(initialValue);\n}\nfunction useEffect(create, deps) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useEffect(create, deps);\n}\nfunction useLayoutEffect(create, deps) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useLayoutEffect(create, deps);\n}\nfunction useCallback(callback, deps) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useCallback(callback, deps);\n}\nfunction useMemo(create, deps) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useMemo(create, deps);\n}\nfunction useImperativeHandle(ref, create, deps) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useImperativeHandle(ref, create, deps);\n}\nfunction useDebugValue(value, formatterFn) {\n  {\n    var dispatcher = resolveDispatcher();\n    return dispatcher.useDebugValue(value, formatterFn);\n  }\n}\n\n// Helpers to patch console.logs to avoid logging during side-effect free\n// replaying on render function. This currently only patches the object\n// lazily which won't cover if the log function was extracted eagerly.\n// We could also eagerly patch the method.\nvar disabledDepth = 0;\nvar prevLog;\nvar prevInfo;\nvar prevWarn;\nvar prevError;\nvar prevGroup;\nvar prevGroupCollapsed;\nvar prevGroupEnd;\n\nfunction disabledLog() {}\n\ndisabledLog.__reactDisabledLog = true;\nfunction disableLogs() {\n  {\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      prevLog = console.log;\n      prevInfo = console.info;\n      prevWarn = console.warn;\n      prevError = console.error;\n      prevGroup = console.group;\n      prevGroupCollapsed = console.groupCollapsed;\n      prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099\n\n      var props = {\n        configurable: true,\n        enumerable: true,\n        value: disabledLog,\n        writable: true\n      }; // $FlowFixMe Flow thinks console is immutable.\n\n      Object.defineProperties(console, {\n        info: props,\n        log: props,\n        warn: props,\n        error: props,\n        group: props,\n        groupCollapsed: props,\n        groupEnd: props\n      });\n      /* eslint-enable react-internal/no-production-logging */\n    }\n\n    disabledDepth++;\n  }\n}\nfunction reenableLogs() {\n  {\n    disabledDepth--;\n\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      var props = {\n        configurable: true,\n        enumerable: true,\n        writable: true\n      }; // $FlowFixMe Flow thinks console is immutable.\n\n      Object.defineProperties(console, {\n        log: _assign({}, props, {\n          value: prevLog\n        }),\n        info: _assign({}, props, {\n          value: prevInfo\n        }),\n        warn: _assign({}, props, {\n          value: prevWarn\n        }),\n        error: _assign({}, props, {\n          value: prevError\n        }),\n        group: _assign({}, props, {\n          value: prevGroup\n        }),\n        groupCollapsed: _assign({}, props, {\n          value: prevGroupCollapsed\n        }),\n        groupEnd: _assign({}, props, {\n          value: prevGroupEnd\n        })\n      });\n      /* eslint-enable react-internal/no-production-logging */\n    }\n\n    if (disabledDepth < 0) {\n      error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');\n    }\n  }\n}\n\nvar ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;\nvar prefix;\nfunction describeBuiltInComponentFrame(name, source, ownerFn) {\n  {\n    if (prefix === undefined) {\n      // Extract the VM specific prefix used by each line.\n      try {\n        throw Error();\n      } catch (x) {\n        var match = x.stack.trim().match(/\\n( *(at )?)/);\n        prefix = match && match[1] || '';\n      }\n    } // We use the prefix to ensure our stacks line up with native stack frames.\n\n\n    return '\\n' + prefix + name;\n  }\n}\nvar reentry = false;\nvar componentFrameCache;\n\n{\n  var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;\n  componentFrameCache = new PossiblyWeakMap();\n}\n\nfunction describeNativeComponentFrame(fn, construct) {\n  // If something asked for a stack inside a fake render, it should get ignored.\n  if (!fn || reentry) {\n    return '';\n  }\n\n  {\n    var frame = componentFrameCache.get(fn);\n\n    if (frame !== undefined) {\n      return frame;\n    }\n  }\n\n  var control;\n  reentry = true;\n  var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.\n\n  Error.prepareStackTrace = undefined;\n  var previousDispatcher;\n\n  {\n    previousDispatcher = ReactCurrentDispatcher$1.current; // Set the dispatcher in DEV because this might be call in the render function\n    // for warnings.\n\n    ReactCurrentDispatcher$1.current = null;\n    disableLogs();\n  }\n\n  try {\n    // This should throw.\n    if (construct) {\n      // Something should be setting the props in the constructor.\n      var Fake = function () {\n        throw Error();\n      }; // $FlowFixMe\n\n\n      Object.defineProperty(Fake.prototype, 'props', {\n        set: function () {\n          // We use a throwing setter instead of frozen or non-writable props\n          // because that won't throw in a non-strict mode function.\n          throw Error();\n        }\n      });\n\n      if (typeof Reflect === 'object' && Reflect.construct) {\n        // We construct a different control for this case to include any extra\n        // frames added by the construct call.\n        try {\n          Reflect.construct(Fake, []);\n        } catch (x) {\n          control = x;\n        }\n\n        Reflect.construct(fn, [], Fake);\n      } else {\n        try {\n          Fake.call();\n        } catch (x) {\n          control = x;\n        }\n\n        fn.call(Fake.prototype);\n      }\n    } else {\n      try {\n        throw Error();\n      } catch (x) {\n        control = x;\n      }\n\n      fn();\n    }\n  } catch (sample) {\n    // This is inlined manually because closure doesn't do it for us.\n    if (sample && control && typeof sample.stack === 'string') {\n      // This extracts the first frame from the sample that isn't also in the control.\n      // Skipping one frame that we assume is the frame that calls the two.\n      var sampleLines = sample.stack.split('\\n');\n      var controlLines = control.stack.split('\\n');\n      var s = sampleLines.length - 1;\n      var c = controlLines.length - 1;\n\n      while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {\n        // We expect at least one stack frame to be shared.\n        // Typically this will be the root most one. However, stack frames may be\n        // cut off due to maximum stack limits. In this case, one maybe cut off\n        // earlier than the other. We assume that the sample is longer or the same\n        // and there for cut off earlier. So we should find the root most frame in\n        // the sample somewhere in the control.\n        c--;\n      }\n\n      for (; s >= 1 && c >= 0; s--, c--) {\n        // Next we find the first one that isn't the same which should be the\n        // frame that called our sample function and the control.\n        if (sampleLines[s] !== controlLines[c]) {\n          // In V8, the first line is describing the message but other VMs don't.\n          // If we're about to return the first line, and the control is also on the same\n          // line, that's a pretty good indicator that our sample threw at same line as\n          // the control. I.e. before we entered the sample frame. So we ignore this result.\n          // This can happen if you passed a class to function component, or non-function.\n          if (s !== 1 || c !== 1) {\n            do {\n              s--;\n              c--; // We may still have similar intermediate frames from the construct call.\n              // The next one that isn't the same should be our match though.\n\n              if (c < 0 || sampleLines[s] !== controlLines[c]) {\n                // V8 adds a \"new\" prefix for native classes. Let's remove it to make it prettier.\n                var _frame = '\\n' + sampleLines[s].replace(' at new ', ' at ');\n\n                {\n                  if (typeof fn === 'function') {\n                    componentFrameCache.set(fn, _frame);\n                  }\n                } // Return the line we found.\n\n\n                return _frame;\n              }\n            } while (s >= 1 && c >= 0);\n          }\n\n          break;\n        }\n      }\n    }\n  } finally {\n    reentry = false;\n\n    {\n      ReactCurrentDispatcher$1.current = previousDispatcher;\n      reenableLogs();\n    }\n\n    Error.prepareStackTrace = previousPrepareStackTrace;\n  } // Fallback to just using the name if we couldn't make it throw.\n\n\n  var name = fn ? fn.displayName || fn.name : '';\n  var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';\n\n  {\n    if (typeof fn === 'function') {\n      componentFrameCache.set(fn, syntheticFrame);\n    }\n  }\n\n  return syntheticFrame;\n}\nfunction describeFunctionComponentFrame(fn, source, ownerFn) {\n  {\n    return describeNativeComponentFrame(fn, false);\n  }\n}\n\nfunction shouldConstruct(Component) {\n  var prototype = Component.prototype;\n  return !!(prototype && prototype.isReactComponent);\n}\n\nfunction describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {\n\n  if (type == null) {\n    return '';\n  }\n\n  if (typeof type === 'function') {\n    {\n      return describeNativeComponentFrame(type, shouldConstruct(type));\n    }\n  }\n\n  if (typeof type === 'string') {\n    return describeBuiltInComponentFrame(type);\n  }\n\n  switch (type) {\n    case exports.Suspense:\n      return describeBuiltInComponentFrame('Suspense');\n\n    case REACT_SUSPENSE_LIST_TYPE:\n      return describeBuiltInComponentFrame('SuspenseList');\n  }\n\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_FORWARD_REF_TYPE:\n        return describeFunctionComponentFrame(type.render);\n\n      case REACT_MEMO_TYPE:\n        // Memo may contain any component type so we recursively resolve it.\n        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);\n\n      case REACT_BLOCK_TYPE:\n        return describeFunctionComponentFrame(type._render);\n\n      case REACT_LAZY_TYPE:\n        {\n          var lazyComponent = type;\n          var payload = lazyComponent._payload;\n          var init = lazyComponent._init;\n\n          try {\n            // Lazy may contain any component type so we recursively resolve it.\n            return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);\n          } catch (x) {}\n        }\n    }\n  }\n\n  return '';\n}\n\nvar loggedTypeFailures = {};\nvar ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;\n\nfunction setCurrentlyValidatingElement(element) {\n  {\n    if (element) {\n      var owner = element._owner;\n      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n      ReactDebugCurrentFrame$1.setExtraStackFrame(stack);\n    } else {\n      ReactDebugCurrentFrame$1.setExtraStackFrame(null);\n    }\n  }\n}\n\nfunction checkPropTypes(typeSpecs, values, location, componentName, element) {\n  {\n    // $FlowFixMe This is okay but Flow doesn't know it.\n    var has = Function.call.bind(Object.prototype.hasOwnProperty);\n\n    for (var typeSpecName in typeSpecs) {\n      if (has(typeSpecs, typeSpecName)) {\n        var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to\n        // fail the render phase where it didn't fail before. So we log it.\n        // After these have been cleaned up, we'll let them throw.\n\n        try {\n          // This is intentionally an invariant that gets caught. It's the same\n          // behavior as without this statement except with a better message.\n          if (typeof typeSpecs[typeSpecName] !== 'function') {\n            var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');\n            err.name = 'Invariant Violation';\n            throw err;\n          }\n\n          error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');\n        } catch (ex) {\n          error$1 = ex;\n        }\n\n        if (error$1 && !(error$1 instanceof Error)) {\n          setCurrentlyValidatingElement(element);\n\n          error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);\n\n          setCurrentlyValidatingElement(null);\n        }\n\n        if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {\n          // Only monitor this failure once because there tends to be a lot of the\n          // same error.\n          loggedTypeFailures[error$1.message] = true;\n          setCurrentlyValidatingElement(element);\n\n          error('Failed %s type: %s', location, error$1.message);\n\n          setCurrentlyValidatingElement(null);\n        }\n      }\n    }\n  }\n}\n\nfunction setCurrentlyValidatingElement$1(element) {\n  {\n    if (element) {\n      var owner = element._owner;\n      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n      setExtraStackFrame(stack);\n    } else {\n      setExtraStackFrame(null);\n    }\n  }\n}\n\nvar propTypesMisspellWarningShown;\n\n{\n  propTypesMisspellWarningShown = false;\n}\n\nfunction getDeclarationErrorAddendum() {\n  if (ReactCurrentOwner.current) {\n    var name = getComponentName(ReactCurrentOwner.current.type);\n\n    if (name) {\n      return '\\n\\nCheck the render method of `' + name + '`.';\n    }\n  }\n\n  return '';\n}\n\nfunction getSourceInfoErrorAddendum(source) {\n  if (source !== undefined) {\n    var fileName = source.fileName.replace(/^.*[\\\\\\/]/, '');\n    var lineNumber = source.lineNumber;\n    return '\\n\\nCheck your code at ' + fileName + ':' + lineNumber + '.';\n  }\n\n  return '';\n}\n\nfunction getSourceInfoErrorAddendumForProps(elementProps) {\n  if (elementProps !== null && elementProps !== undefined) {\n    return getSourceInfoErrorAddendum(elementProps.__source);\n  }\n\n  return '';\n}\n/**\n * Warn if there's no key explicitly set on dynamic arrays of children or\n * object keys are not valid. This allows us to keep track of children between\n * updates.\n */\n\n\nvar ownerHasKeyUseWarning = {};\n\nfunction getCurrentComponentErrorInfo(parentType) {\n  var info = getDeclarationErrorAddendum();\n\n  if (!info) {\n    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;\n\n    if (parentName) {\n      info = \"\\n\\nCheck the top-level render call using <\" + parentName + \">.\";\n    }\n  }\n\n  return info;\n}\n/**\n * Warn if the element doesn't have an explicit key assigned to it.\n * This element is in an array. The array could grow and shrink or be\n * reordered. All children that haven't already been validated are required to\n * have a \"key\" property assigned to it. Error statuses are cached so a warning\n * will only be shown once.\n *\n * @internal\n * @param {ReactElement} element Element that requires a key.\n * @param {*} parentType element's parent's type.\n */\n\n\nfunction validateExplicitKey(element, parentType) {\n  if (!element._store || element._store.validated || element.key != null) {\n    return;\n  }\n\n  element._store.validated = true;\n  var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);\n\n  if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {\n    return;\n  }\n\n  ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a\n  // property, it may be the creator of the child that's responsible for\n  // assigning it a key.\n\n  var childOwner = '';\n\n  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {\n    // Give the component that originally created this child.\n    childOwner = \" It was passed a child from \" + getComponentName(element._owner.type) + \".\";\n  }\n\n  {\n    setCurrentlyValidatingElement$1(element);\n\n    error('Each child in a list should have a unique \"key\" prop.' + '%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);\n\n    setCurrentlyValidatingElement$1(null);\n  }\n}\n/**\n * Ensure that every element either is passed in a static location, in an\n * array with an explicit keys property defined, or in an object literal\n * with valid key property.\n *\n * @internal\n * @param {ReactNode} node Statically passed child of any type.\n * @param {*} parentType node's parent's type.\n */\n\n\nfunction validateChildKeys(node, parentType) {\n  if (typeof node !== 'object') {\n    return;\n  }\n\n  if (Array.isArray(node)) {\n    for (var i = 0; i < node.length; i++) {\n      var child = node[i];\n\n      if (isValidElement(child)) {\n        validateExplicitKey(child, parentType);\n      }\n    }\n  } else if (isValidElement(node)) {\n    // This element was passed in a valid location.\n    if (node._store) {\n      node._store.validated = true;\n    }\n  } else if (node) {\n    var iteratorFn = getIteratorFn(node);\n\n    if (typeof iteratorFn === 'function') {\n      // Entry iterators used to provide implicit keys,\n      // but now we print a separate warning for them later.\n      if (iteratorFn !== node.entries) {\n        var iterator = iteratorFn.call(node);\n        var step;\n\n        while (!(step = iterator.next()).done) {\n          if (isValidElement(step.value)) {\n            validateExplicitKey(step.value, parentType);\n          }\n        }\n      }\n    }\n  }\n}\n/**\n * Given an element, validate that its props follow the propTypes definition,\n * provided by the type.\n *\n * @param {ReactElement} element\n */\n\n\nfunction validatePropTypes(element) {\n  {\n    var type = element.type;\n\n    if (type === null || type === undefined || typeof type === 'string') {\n      return;\n    }\n\n    var propTypes;\n\n    if (typeof type === 'function') {\n      propTypes = type.propTypes;\n    } else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.\n    // Inner props are checked in the reconciler.\n    type.$$typeof === REACT_MEMO_TYPE)) {\n      propTypes = type.propTypes;\n    } else {\n      return;\n    }\n\n    if (propTypes) {\n      // Intentionally inside to avoid triggering lazy initializers:\n      var name = getComponentName(type);\n      checkPropTypes(propTypes, element.props, 'prop', name, element);\n    } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {\n      propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:\n\n      var _name = getComponentName(type);\n\n      error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', _name || 'Unknown');\n    }\n\n    if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) {\n      error('getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');\n    }\n  }\n}\n/**\n * Given a fragment, validate that it can only be provided with fragment props\n * @param {ReactElement} fragment\n */\n\n\nfunction validateFragmentProps(fragment) {\n  {\n    var keys = Object.keys(fragment.props);\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n\n      if (key !== 'children' && key !== 'key') {\n        setCurrentlyValidatingElement$1(fragment);\n\n        error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);\n\n        setCurrentlyValidatingElement$1(null);\n        break;\n      }\n    }\n\n    if (fragment.ref !== null) {\n      setCurrentlyValidatingElement$1(fragment);\n\n      error('Invalid attribute `ref` supplied to `React.Fragment`.');\n\n      setCurrentlyValidatingElement$1(null);\n    }\n  }\n}\nfunction createElementWithValidation(type, props, children) {\n  var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to\n  // succeed and there will likely be errors in render.\n\n  if (!validType) {\n    var info = '';\n\n    if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {\n      info += ' You likely forgot to export your component from the file ' + \"it's defined in, or you might have mixed up default and named imports.\";\n    }\n\n    var sourceInfo = getSourceInfoErrorAddendumForProps(props);\n\n    if (sourceInfo) {\n      info += sourceInfo;\n    } else {\n      info += getDeclarationErrorAddendum();\n    }\n\n    var typeString;\n\n    if (type === null) {\n      typeString = 'null';\n    } else if (Array.isArray(type)) {\n      typeString = 'array';\n    } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {\n      typeString = \"<\" + (getComponentName(type.type) || 'Unknown') + \" />\";\n      info = ' Did you accidentally export a JSX literal instead of a component?';\n    } else {\n      typeString = typeof type;\n    }\n\n    {\n      error('React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);\n    }\n  }\n\n  var element = createElement.apply(this, arguments); // The result can be nullish if a mock or a custom function is used.\n  // TODO: Drop this when these are no longer allowed as the type argument.\n\n  if (element == null) {\n    return element;\n  } // Skip key warning if the type isn't valid since our key validation logic\n  // doesn't expect a non-string/function type and can throw confusing errors.\n  // We don't want exception behavior to differ between dev and prod.\n  // (Rendering will throw with a helpful message and as soon as the type is\n  // fixed, the key warnings will appear.)\n\n\n  if (validType) {\n    for (var i = 2; i < arguments.length; i++) {\n      validateChildKeys(arguments[i], type);\n    }\n  }\n\n  if (type === exports.Fragment) {\n    validateFragmentProps(element);\n  } else {\n    validatePropTypes(element);\n  }\n\n  return element;\n}\nvar didWarnAboutDeprecatedCreateFactory = false;\nfunction createFactoryWithValidation(type) {\n  var validatedFactory = createElementWithValidation.bind(null, type);\n  validatedFactory.type = type;\n\n  {\n    if (!didWarnAboutDeprecatedCreateFactory) {\n      didWarnAboutDeprecatedCreateFactory = true;\n\n      warn('React.createFactory() is deprecated and will be removed in ' + 'a future major release. Consider using JSX ' + 'or use React.createElement() directly instead.');\n    } // Legacy hook: remove it\n\n\n    Object.defineProperty(validatedFactory, 'type', {\n      enumerable: false,\n      get: function () {\n        warn('Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.');\n\n        Object.defineProperty(this, 'type', {\n          value: type\n        });\n        return type;\n      }\n    });\n  }\n\n  return validatedFactory;\n}\nfunction cloneElementWithValidation(element, props, children) {\n  var newElement = cloneElement.apply(this, arguments);\n\n  for (var i = 2; i < arguments.length; i++) {\n    validateChildKeys(arguments[i], newElement.type);\n  }\n\n  validatePropTypes(newElement);\n  return newElement;\n}\n\n{\n\n  try {\n    var frozenObject = Object.freeze({});\n    /* eslint-disable no-new */\n\n    new Map([[frozenObject, null]]);\n    new Set([frozenObject]);\n    /* eslint-enable no-new */\n  } catch (e) {\n  }\n}\n\nvar createElement$1 =  createElementWithValidation ;\nvar cloneElement$1 =  cloneElementWithValidation ;\nvar createFactory =  createFactoryWithValidation ;\nvar Children = {\n  map: mapChildren,\n  forEach: forEachChildren,\n  count: countChildren,\n  toArray: toArray,\n  only: onlyChild\n};\n\nexports.Children = Children;\nexports.Component = Component;\nexports.PureComponent = PureComponent;\nexports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;\nexports.cloneElement = cloneElement$1;\nexports.createContext = createContext;\nexports.createElement = createElement$1;\nexports.createFactory = createFactory;\nexports.createRef = createRef;\nexports.forwardRef = forwardRef;\nexports.isValidElement = isValidElement;\nexports.lazy = lazy;\nexports.memo = memo;\nexports.useCallback = useCallback;\nexports.useContext = useContext;\nexports.useDebugValue = useDebugValue;\nexports.useEffect = useEffect;\nexports.useImperativeHandle = useImperativeHandle;\nexports.useLayoutEffect = useLayoutEffect;\nexports.useMemo = useMemo;\nexports.useReducer = useReducer;\nexports.useRef = useRef;\nexports.useState = useState;\nexports.version = ReactVersion;\n  })();\n}\n", "'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react.production.min.js');\n} else {\n  module.exports = require('./cjs/react.development.js');\n}\n", "/** @license React v0.20.2\n * scheduler.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nif (process.env.NODE_ENV !== \"production\") {\n  (function() {\n'use strict';\n\nvar enableSchedulerDebugging = false;\nvar enableProfiling = false;\n\nvar requestHostCallback;\nvar requestHostTimeout;\nvar cancelHostTimeout;\nvar requestPaint;\nvar hasPerformanceNow = typeof performance === 'object' && typeof performance.now === 'function';\n\nif (hasPerformanceNow) {\n  var localPerformance = performance;\n\n  exports.unstable_now = function () {\n    return localPerformance.now();\n  };\n} else {\n  var localDate = Date;\n  var initialTime = localDate.now();\n\n  exports.unstable_now = function () {\n    return localDate.now() - initialTime;\n  };\n}\n\nif ( // If Scheduler runs in a non-DOM environment, it falls back to a naive\n// implementation using setTimeout.\ntypeof window === 'undefined' || // Check if MessageChannel is supported, too.\ntypeof MessageChannel !== 'function') {\n  // If this accidentally gets imported in a non-browser environment, e.g. JavaScriptCore,\n  // fallback to a naive implementation.\n  var _callback = null;\n  var _timeoutID = null;\n\n  var _flushCallback = function () {\n    if (_callback !== null) {\n      try {\n        var currentTime = exports.unstable_now();\n        var hasRemainingTime = true;\n\n        _callback(hasRemainingTime, currentTime);\n\n        _callback = null;\n      } catch (e) {\n        setTimeout(_flushCallback, 0);\n        throw e;\n      }\n    }\n  };\n\n  requestHostCallback = function (cb) {\n    if (_callback !== null) {\n      // Protect against re-entrancy.\n      setTimeout(requestHostCallback, 0, cb);\n    } else {\n      _callback = cb;\n      setTimeout(_flushCallback, 0);\n    }\n  };\n\n  requestHostTimeout = function (cb, ms) {\n    _timeoutID = setTimeout(cb, ms);\n  };\n\n  cancelHostTimeout = function () {\n    clearTimeout(_timeoutID);\n  };\n\n  exports.unstable_shouldYield = function () {\n    return false;\n  };\n\n  requestPaint = exports.unstable_forceFrameRate = function () {};\n} else {\n  // Capture local references to native APIs, in case a polyfill overrides them.\n  var _setTimeout = window.setTimeout;\n  var _clearTimeout = window.clearTimeout;\n\n  if (typeof console !== 'undefined') {\n    // TODO: Scheduler no longer requires these methods to be polyfilled. But\n    // maybe we want to continue warning if they don't exist, to preserve the\n    // option to rely on it in the future?\n    var requestAnimationFrame = window.requestAnimationFrame;\n    var cancelAnimationFrame = window.cancelAnimationFrame;\n\n    if (typeof requestAnimationFrame !== 'function') {\n      // Using console['error'] to evade Babel and ESLint\n      console['error'](\"This browser doesn't support requestAnimationFrame. \" + 'Make sure that you load a ' + 'polyfill in older browsers. https://reactjs.org/link/react-polyfills');\n    }\n\n    if (typeof cancelAnimationFrame !== 'function') {\n      // Using console['error'] to evade Babel and ESLint\n      console['error'](\"This browser doesn't support cancelAnimationFrame. \" + 'Make sure that you load a ' + 'polyfill in older browsers. https://reactjs.org/link/react-polyfills');\n    }\n  }\n\n  var isMessageLoopRunning = false;\n  var scheduledHostCallback = null;\n  var taskTimeoutID = -1; // Scheduler periodically yields in case there is other work on the main\n  // thread, like user events. By default, it yields multiple times per frame.\n  // It does not attempt to align with frame boundaries, since most tasks don't\n  // need to be frame aligned; for those that do, use requestAnimationFrame.\n\n  var yieldInterval = 5;\n  var deadline = 0; // TODO: Make this configurable\n\n  {\n    // `isInputPending` is not available. Since we have no way of knowing if\n    // there's pending input, always yield at the end of the frame.\n    exports.unstable_shouldYield = function () {\n      return exports.unstable_now() >= deadline;\n    }; // Since we yield every frame regardless, `requestPaint` has no effect.\n\n\n    requestPaint = function () {};\n  }\n\n  exports.unstable_forceFrameRate = function (fps) {\n    if (fps < 0 || fps > 125) {\n      // Using console['error'] to evade Babel and ESLint\n      console['error']('forceFrameRate takes a positive int between 0 and 125, ' + 'forcing frame rates higher than 125 fps is not supported');\n      return;\n    }\n\n    if (fps > 0) {\n      yieldInterval = Math.floor(1000 / fps);\n    } else {\n      // reset the framerate\n      yieldInterval = 5;\n    }\n  };\n\n  var performWorkUntilDeadline = function () {\n    if (scheduledHostCallback !== null) {\n      var currentTime = exports.unstable_now(); // Yield after `yieldInterval` ms, regardless of where we are in the vsync\n      // cycle. This means there's always time remaining at the beginning of\n      // the message event.\n\n      deadline = currentTime + yieldInterval;\n      var hasTimeRemaining = true;\n\n      try {\n        var hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);\n\n        if (!hasMoreWork) {\n          isMessageLoopRunning = false;\n          scheduledHostCallback = null;\n        } else {\n          // If there's more work, schedule the next message event at the end\n          // of the preceding one.\n          port.postMessage(null);\n        }\n      } catch (error) {\n        // If a scheduler task throws, exit the current browser task so the\n        // error can be observed.\n        port.postMessage(null);\n        throw error;\n      }\n    } else {\n      isMessageLoopRunning = false;\n    } // Yielding to the browser will give it a chance to paint, so we can\n  };\n\n  var channel = new MessageChannel();\n  var port = channel.port2;\n  channel.port1.onmessage = performWorkUntilDeadline;\n\n  requestHostCallback = function (callback) {\n    scheduledHostCallback = callback;\n\n    if (!isMessageLoopRunning) {\n      isMessageLoopRunning = true;\n      port.postMessage(null);\n    }\n  };\n\n  requestHostTimeout = function (callback, ms) {\n    taskTimeoutID = _setTimeout(function () {\n      callback(exports.unstable_now());\n    }, ms);\n  };\n\n  cancelHostTimeout = function () {\n    _clearTimeout(taskTimeoutID);\n\n    taskTimeoutID = -1;\n  };\n}\n\nfunction push(heap, node) {\n  var index = heap.length;\n  heap.push(node);\n  siftUp(heap, node, index);\n}\nfunction peek(heap) {\n  var first = heap[0];\n  return first === undefined ? null : first;\n}\nfunction pop(heap) {\n  var first = heap[0];\n\n  if (first !== undefined) {\n    var last = heap.pop();\n\n    if (last !== first) {\n      heap[0] = last;\n      siftDown(heap, last, 0);\n    }\n\n    return first;\n  } else {\n    return null;\n  }\n}\n\nfunction siftUp(heap, node, i) {\n  var index = i;\n\n  while (true) {\n    var parentIndex = index - 1 >>> 1;\n    var parent = heap[parentIndex];\n\n    if (parent !== undefined && compare(parent, node) > 0) {\n      // The parent is larger. Swap positions.\n      heap[parentIndex] = node;\n      heap[index] = parent;\n      index = parentIndex;\n    } else {\n      // The parent is smaller. Exit.\n      return;\n    }\n  }\n}\n\nfunction siftDown(heap, node, i) {\n  var index = i;\n  var length = heap.length;\n\n  while (index < length) {\n    var leftIndex = (index + 1) * 2 - 1;\n    var left = heap[leftIndex];\n    var rightIndex = leftIndex + 1;\n    var right = heap[rightIndex]; // If the left or right node is smaller, swap with the smaller of those.\n\n    if (left !== undefined && compare(left, node) < 0) {\n      if (right !== undefined && compare(right, left) < 0) {\n        heap[index] = right;\n        heap[rightIndex] = node;\n        index = rightIndex;\n      } else {\n        heap[index] = left;\n        heap[leftIndex] = node;\n        index = leftIndex;\n      }\n    } else if (right !== undefined && compare(right, node) < 0) {\n      heap[index] = right;\n      heap[rightIndex] = node;\n      index = rightIndex;\n    } else {\n      // Neither child is smaller. Exit.\n      return;\n    }\n  }\n}\n\nfunction compare(a, b) {\n  // Compare sort index first, then task id.\n  var diff = a.sortIndex - b.sortIndex;\n  return diff !== 0 ? diff : a.id - b.id;\n}\n\n// TODO: Use symbols?\nvar ImmediatePriority = 1;\nvar UserBlockingPriority = 2;\nvar NormalPriority = 3;\nvar LowPriority = 4;\nvar IdlePriority = 5;\n\nfunction markTaskErrored(task, ms) {\n}\n\n/* eslint-disable no-var */\n// Math.pow(2, 30) - 1\n// 0b111111111111111111111111111111\n\nvar maxSigned31BitInt = 1073741823; // Times out immediately\n\nvar IMMEDIATE_PRIORITY_TIMEOUT = -1; // Eventually times out\n\nvar USER_BLOCKING_PRIORITY_TIMEOUT = 250;\nvar NORMAL_PRIORITY_TIMEOUT = 5000;\nvar LOW_PRIORITY_TIMEOUT = 10000; // Never times out\n\nvar IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt; // Tasks are stored on a min heap\n\nvar taskQueue = [];\nvar timerQueue = []; // Incrementing id counter. Used to maintain insertion order.\n\nvar taskIdCounter = 1; // Pausing the scheduler is useful for debugging.\nvar currentTask = null;\nvar currentPriorityLevel = NormalPriority; // This is set while performing work, to prevent re-entrancy.\n\nvar isPerformingWork = false;\nvar isHostCallbackScheduled = false;\nvar isHostTimeoutScheduled = false;\n\nfunction advanceTimers(currentTime) {\n  // Check for tasks that are no longer delayed and add them to the queue.\n  var timer = peek(timerQueue);\n\n  while (timer !== null) {\n    if (timer.callback === null) {\n      // Timer was cancelled.\n      pop(timerQueue);\n    } else if (timer.startTime <= currentTime) {\n      // Timer fired. Transfer to the task queue.\n      pop(timerQueue);\n      timer.sortIndex = timer.expirationTime;\n      push(taskQueue, timer);\n    } else {\n      // Remaining timers are pending.\n      return;\n    }\n\n    timer = peek(timerQueue);\n  }\n}\n\nfunction handleTimeout(currentTime) {\n  isHostTimeoutScheduled = false;\n  advanceTimers(currentTime);\n\n  if (!isHostCallbackScheduled) {\n    if (peek(taskQueue) !== null) {\n      isHostCallbackScheduled = true;\n      requestHostCallback(flushWork);\n    } else {\n      var firstTimer = peek(timerQueue);\n\n      if (firstTimer !== null) {\n        requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);\n      }\n    }\n  }\n}\n\nfunction flushWork(hasTimeRemaining, initialTime) {\n\n\n  isHostCallbackScheduled = false;\n\n  if (isHostTimeoutScheduled) {\n    // We scheduled a timeout but it's no longer needed. Cancel it.\n    isHostTimeoutScheduled = false;\n    cancelHostTimeout();\n  }\n\n  isPerformingWork = true;\n  var previousPriorityLevel = currentPriorityLevel;\n\n  try {\n    if (enableProfiling) {\n      try {\n        return workLoop(hasTimeRemaining, initialTime);\n      } catch (error) {\n        if (currentTask !== null) {\n          var currentTime = exports.unstable_now();\n          markTaskErrored(currentTask, currentTime);\n          currentTask.isQueued = false;\n        }\n\n        throw error;\n      }\n    } else {\n      // No catch in prod code path.\n      return workLoop(hasTimeRemaining, initialTime);\n    }\n  } finally {\n    currentTask = null;\n    currentPriorityLevel = previousPriorityLevel;\n    isPerformingWork = false;\n  }\n}\n\nfunction workLoop(hasTimeRemaining, initialTime) {\n  var currentTime = initialTime;\n  advanceTimers(currentTime);\n  currentTask = peek(taskQueue);\n\n  while (currentTask !== null && !(enableSchedulerDebugging )) {\n    if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || exports.unstable_shouldYield())) {\n      // This currentTask hasn't expired, and we've reached the deadline.\n      break;\n    }\n\n    var callback = currentTask.callback;\n\n    if (typeof callback === 'function') {\n      currentTask.callback = null;\n      currentPriorityLevel = currentTask.priorityLevel;\n      var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;\n\n      var continuationCallback = callback(didUserCallbackTimeout);\n      currentTime = exports.unstable_now();\n\n      if (typeof continuationCallback === 'function') {\n        currentTask.callback = continuationCallback;\n      } else {\n\n        if (currentTask === peek(taskQueue)) {\n          pop(taskQueue);\n        }\n      }\n\n      advanceTimers(currentTime);\n    } else {\n      pop(taskQueue);\n    }\n\n    currentTask = peek(taskQueue);\n  } // Return whether there's additional work\n\n\n  if (currentTask !== null) {\n    return true;\n  } else {\n    var firstTimer = peek(timerQueue);\n\n    if (firstTimer !== null) {\n      requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);\n    }\n\n    return false;\n  }\n}\n\nfunction unstable_runWithPriority(priorityLevel, eventHandler) {\n  switch (priorityLevel) {\n    case ImmediatePriority:\n    case UserBlockingPriority:\n    case NormalPriority:\n    case LowPriority:\n    case IdlePriority:\n      break;\n\n    default:\n      priorityLevel = NormalPriority;\n  }\n\n  var previousPriorityLevel = currentPriorityLevel;\n  currentPriorityLevel = priorityLevel;\n\n  try {\n    return eventHandler();\n  } finally {\n    currentPriorityLevel = previousPriorityLevel;\n  }\n}\n\nfunction unstable_next(eventHandler) {\n  var priorityLevel;\n\n  switch (currentPriorityLevel) {\n    case ImmediatePriority:\n    case UserBlockingPriority:\n    case NormalPriority:\n      // Shift down to normal priority\n      priorityLevel = NormalPriority;\n      break;\n\n    default:\n      // Anything lower than normal priority should remain at the current level.\n      priorityLevel = currentPriorityLevel;\n      break;\n  }\n\n  var previousPriorityLevel = currentPriorityLevel;\n  currentPriorityLevel = priorityLevel;\n\n  try {\n    return eventHandler();\n  } finally {\n    currentPriorityLevel = previousPriorityLevel;\n  }\n}\n\nfunction unstable_wrapCallback(callback) {\n  var parentPriorityLevel = currentPriorityLevel;\n  return function () {\n    // This is a fork of runWithPriority, inlined for performance.\n    var previousPriorityLevel = currentPriorityLevel;\n    currentPriorityLevel = parentPriorityLevel;\n\n    try {\n      return callback.apply(this, arguments);\n    } finally {\n      currentPriorityLevel = previousPriorityLevel;\n    }\n  };\n}\n\nfunction unstable_scheduleCallback(priorityLevel, callback, options) {\n  var currentTime = exports.unstable_now();\n  var startTime;\n\n  if (typeof options === 'object' && options !== null) {\n    var delay = options.delay;\n\n    if (typeof delay === 'number' && delay > 0) {\n      startTime = currentTime + delay;\n    } else {\n      startTime = currentTime;\n    }\n  } else {\n    startTime = currentTime;\n  }\n\n  var timeout;\n\n  switch (priorityLevel) {\n    case ImmediatePriority:\n      timeout = IMMEDIATE_PRIORITY_TIMEOUT;\n      break;\n\n    case UserBlockingPriority:\n      timeout = USER_BLOCKING_PRIORITY_TIMEOUT;\n      break;\n\n    case IdlePriority:\n      timeout = IDLE_PRIORITY_TIMEOUT;\n      break;\n\n    case LowPriority:\n      timeout = LOW_PRIORITY_TIMEOUT;\n      break;\n\n    case NormalPriority:\n    default:\n      timeout = NORMAL_PRIORITY_TIMEOUT;\n      break;\n  }\n\n  var expirationTime = startTime + timeout;\n  var newTask = {\n    id: taskIdCounter++,\n    callback: callback,\n    priorityLevel: priorityLevel,\n    startTime: startTime,\n    expirationTime: expirationTime,\n    sortIndex: -1\n  };\n\n  if (startTime > currentTime) {\n    // This is a delayed task.\n    newTask.sortIndex = startTime;\n    push(timerQueue, newTask);\n\n    if (peek(taskQueue) === null && newTask === peek(timerQueue)) {\n      // All tasks are delayed, and this is the task with the earliest delay.\n      if (isHostTimeoutScheduled) {\n        // Cancel an existing timeout.\n        cancelHostTimeout();\n      } else {\n        isHostTimeoutScheduled = true;\n      } // Schedule a timeout.\n\n\n      requestHostTimeout(handleTimeout, startTime - currentTime);\n    }\n  } else {\n    newTask.sortIndex = expirationTime;\n    push(taskQueue, newTask);\n    // wait until the next time we yield.\n\n\n    if (!isHostCallbackScheduled && !isPerformingWork) {\n      isHostCallbackScheduled = true;\n      requestHostCallback(flushWork);\n    }\n  }\n\n  return newTask;\n}\n\nfunction unstable_pauseExecution() {\n}\n\nfunction unstable_continueExecution() {\n\n  if (!isHostCallbackScheduled && !isPerformingWork) {\n    isHostCallbackScheduled = true;\n    requestHostCallback(flushWork);\n  }\n}\n\nfunction unstable_getFirstCallbackNode() {\n  return peek(taskQueue);\n}\n\nfunction unstable_cancelCallback(task) {\n  // remove from the queue because you can't remove arbitrary nodes from an\n  // array based heap, only the first one.)\n\n\n  task.callback = null;\n}\n\nfunction unstable_getCurrentPriorityLevel() {\n  return currentPriorityLevel;\n}\n\nvar unstable_requestPaint = requestPaint;\nvar unstable_Profiling =  null;\n\nexports.unstable_IdlePriority = IdlePriority;\nexports.unstable_ImmediatePriority = ImmediatePriority;\nexports.unstable_LowPriority = LowPriority;\nexports.unstable_NormalPriority = NormalPriority;\nexports.unstable_Profiling = unstable_Profiling;\nexports.unstable_UserBlockingPriority = UserBlockingPriority;\nexports.unstable_cancelCallback = unstable_cancelCallback;\nexports.unstable_continueExecution = unstable_continueExecution;\nexports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;\nexports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;\nexports.unstable_next = unstable_next;\nexports.unstable_pauseExecution = unstable_pauseExecution;\nexports.unstable_requestPaint = unstable_requestPaint;\nexports.unstable_runWithPriority = unstable_runWithPriority;\nexports.unstable_scheduleCallback = unstable_scheduleCallback;\nexports.unstable_wrapCallback = unstable_wrapCallback;\n  })();\n}\n", "'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/scheduler.production.min.js');\n} else {\n  module.exports = require('./cjs/scheduler.development.js');\n}\n", "/** @license React v0.20.2\n * scheduler-tracing.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nif (process.env.NODE_ENV !== \"production\") {\n  (function() {\n'use strict';\n\nvar DEFAULT_THREAD_ID = 0; // Counters used to generate unique IDs.\n\nvar interactionIDCounter = 0;\nvar threadIDCounter = 0; // Set of currently traced interactions.\n// Interactions \"stack\"\u2013\n// Meaning that newly traced interactions are appended to the previously active set.\n// When an interaction goes out of scope, the previous set (if any) is restored.\n\nexports.__interactionsRef = null; // Listener(s) to notify when interactions begin and end.\n\nexports.__subscriberRef = null;\n\n{\n  exports.__interactionsRef = {\n    current: new Set()\n  };\n  exports.__subscriberRef = {\n    current: null\n  };\n}\nfunction unstable_clear(callback) {\n\n  var prevInteractions = exports.__interactionsRef.current;\n  exports.__interactionsRef.current = new Set();\n\n  try {\n    return callback();\n  } finally {\n    exports.__interactionsRef.current = prevInteractions;\n  }\n}\nfunction unstable_getCurrent() {\n  {\n    return exports.__interactionsRef.current;\n  }\n}\nfunction unstable_getThreadID() {\n  return ++threadIDCounter;\n}\nfunction unstable_trace(name, timestamp, callback) {\n  var threadID = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : DEFAULT_THREAD_ID;\n\n  var interaction = {\n    __count: 1,\n    id: interactionIDCounter++,\n    name: name,\n    timestamp: timestamp\n  };\n  var prevInteractions = exports.__interactionsRef.current; // Traced interactions should stack/accumulate.\n  // To do that, clone the current interactions.\n  // The previous set will be restored upon completion.\n\n  var interactions = new Set(prevInteractions);\n  interactions.add(interaction);\n  exports.__interactionsRef.current = interactions;\n  var subscriber = exports.__subscriberRef.current;\n  var returnValue;\n\n  try {\n    if (subscriber !== null) {\n      subscriber.onInteractionTraced(interaction);\n    }\n  } finally {\n    try {\n      if (subscriber !== null) {\n        subscriber.onWorkStarted(interactions, threadID);\n      }\n    } finally {\n      try {\n        returnValue = callback();\n      } finally {\n        exports.__interactionsRef.current = prevInteractions;\n\n        try {\n          if (subscriber !== null) {\n            subscriber.onWorkStopped(interactions, threadID);\n          }\n        } finally {\n          interaction.__count--; // If no async work was scheduled for this interaction,\n          // Notify subscribers that it's completed.\n\n          if (subscriber !== null && interaction.__count === 0) {\n            subscriber.onInteractionScheduledWorkCompleted(interaction);\n          }\n        }\n      }\n    }\n  }\n\n  return returnValue;\n}\nfunction unstable_wrap(callback) {\n  var threadID = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_THREAD_ID;\n\n  var wrappedInteractions = exports.__interactionsRef.current;\n  var subscriber = exports.__subscriberRef.current;\n\n  if (subscriber !== null) {\n    subscriber.onWorkScheduled(wrappedInteractions, threadID);\n  } // Update the pending async work count for the current interactions.\n  // Update after calling subscribers in case of error.\n\n\n  wrappedInteractions.forEach(function (interaction) {\n    interaction.__count++;\n  });\n  var hasRun = false;\n\n  function wrapped() {\n    var prevInteractions = exports.__interactionsRef.current;\n    exports.__interactionsRef.current = wrappedInteractions;\n    subscriber = exports.__subscriberRef.current;\n\n    try {\n      var returnValue;\n\n      try {\n        if (subscriber !== null) {\n          subscriber.onWorkStarted(wrappedInteractions, threadID);\n        }\n      } finally {\n        try {\n          returnValue = callback.apply(undefined, arguments);\n        } finally {\n          exports.__interactionsRef.current = prevInteractions;\n\n          if (subscriber !== null) {\n            subscriber.onWorkStopped(wrappedInteractions, threadID);\n          }\n        }\n      }\n\n      return returnValue;\n    } finally {\n      if (!hasRun) {\n        // We only expect a wrapped function to be executed once,\n        // But in the event that it's executed more than once\u2013\n        // Only decrement the outstanding interaction counts once.\n        hasRun = true; // Update pending async counts for all wrapped interactions.\n        // If this was the last scheduled async work for any of them,\n        // Mark them as completed.\n\n        wrappedInteractions.forEach(function (interaction) {\n          interaction.__count--;\n\n          if (subscriber !== null && interaction.__count === 0) {\n            subscriber.onInteractionScheduledWorkCompleted(interaction);\n          }\n        });\n      }\n    }\n  }\n\n  wrapped.cancel = function cancel() {\n    subscriber = exports.__subscriberRef.current;\n\n    try {\n      if (subscriber !== null) {\n        subscriber.onWorkCanceled(wrappedInteractions, threadID);\n      }\n    } finally {\n      // Update pending async counts for all wrapped interactions.\n      // If this was the last scheduled async work for any of them,\n      // Mark them as completed.\n      wrappedInteractions.forEach(function (interaction) {\n        interaction.__count--;\n\n        if (subscriber && interaction.__count === 0) {\n          subscriber.onInteractionScheduledWorkCompleted(interaction);\n        }\n      });\n    }\n  };\n\n  return wrapped;\n}\n\nvar subscribers = null;\n\n{\n  subscribers = new Set();\n}\n\nfunction unstable_subscribe(subscriber) {\n  {\n    subscribers.add(subscriber);\n\n    if (subscribers.size === 1) {\n      exports.__subscriberRef.current = {\n        onInteractionScheduledWorkCompleted: onInteractionScheduledWorkCompleted,\n        onInteractionTraced: onInteractionTraced,\n        onWorkCanceled: onWorkCanceled,\n        onWorkScheduled: onWorkScheduled,\n        onWorkStarted: onWorkStarted,\n        onWorkStopped: onWorkStopped\n      };\n    }\n  }\n}\nfunction unstable_unsubscribe(subscriber) {\n  {\n    subscribers.delete(subscriber);\n\n    if (subscribers.size === 0) {\n      exports.__subscriberRef.current = null;\n    }\n  }\n}\n\nfunction onInteractionTraced(interaction) {\n  var didCatchError = false;\n  var caughtError = null;\n  subscribers.forEach(function (subscriber) {\n    try {\n      subscriber.onInteractionTraced(interaction);\n    } catch (error) {\n      if (!didCatchError) {\n        didCatchError = true;\n        caughtError = error;\n      }\n    }\n  });\n\n  if (didCatchError) {\n    throw caughtError;\n  }\n}\n\nfunction onInteractionScheduledWorkCompleted(interaction) {\n  var didCatchError = false;\n  var caughtError = null;\n  subscribers.forEach(function (subscriber) {\n    try {\n      subscriber.onInteractionScheduledWorkCompleted(interaction);\n    } catch (error) {\n      if (!didCatchError) {\n        didCatchError = true;\n        caughtError = error;\n      }\n    }\n  });\n\n  if (didCatchError) {\n    throw caughtError;\n  }\n}\n\nfunction onWorkScheduled(interactions, threadID) {\n  var didCatchError = false;\n  var caughtError = null;\n  subscribers.forEach(function (subscriber) {\n    try {\n      subscriber.onWorkScheduled(interactions, threadID);\n    } catch (error) {\n      if (!didCatchError) {\n        didCatchError = true;\n        caughtError = error;\n      }\n    }\n  });\n\n  if (didCatchError) {\n    throw caughtError;\n  }\n}\n\nfunction onWorkStarted(interactions, threadID) {\n  var didCatchError = false;\n  var caughtError = null;\n  subscribers.forEach(function (subscriber) {\n    try {\n      subscriber.onWorkStarted(interactions, threadID);\n    } catch (error) {\n      if (!didCatchError) {\n        didCatchError = true;\n        caughtError = error;\n      }\n    }\n  });\n\n  if (didCatchError) {\n    throw caughtError;\n  }\n}\n\nfunction onWorkStopped(interactions, threadID) {\n  var didCatchError = false;\n  var caughtError = null;\n  subscribers.forEach(function (subscriber) {\n    try {\n      subscriber.onWorkStopped(interactions, threadID);\n    } catch (error) {\n      if (!didCatchError) {\n        didCatchError = true;\n        caughtError = error;\n      }\n    }\n  });\n\n  if (didCatchError) {\n    throw caughtError;\n  }\n}\n\nfunction onWorkCanceled(interactions, threadID) {\n  var didCatchError = false;\n  var caughtError = null;\n  subscribers.forEach(function (subscriber) {\n    try {\n      subscriber.onWorkCanceled(interactions, threadID);\n    } catch (error) {\n      if (!didCatchError) {\n        didCatchError = true;\n        caughtError = error;\n      }\n    }\n  });\n\n  if (didCatchError) {\n    throw caughtError;\n  }\n}\n\nexports.unstable_clear = unstable_clear;\nexports.unstable_getCurrent = unstable_getCurrent;\nexports.unstable_getThreadID = unstable_getThreadID;\nexports.unstable_subscribe = unstable_subscribe;\nexports.unstable_trace = unstable_trace;\nexports.unstable_unsubscribe = unstable_unsubscribe;\nexports.unstable_wrap = unstable_wrap;\n  })();\n}\n", "'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/scheduler-tracing.production.min.js');\n} else {\n  module.exports = require('./cjs/scheduler-tracing.development.js');\n}\n", "/** @license React v0.26.2\n * react-reconciler.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nif (process.env.NODE_ENV !== \"production\") {\n  module.exports = function $$$reconciler($$$hostConfig) {\n    var exports = {};\n'use strict';\n\nvar React = require('react');\nvar _assign = require('object-assign');\nvar Scheduler = require('scheduler');\nvar tracing = require('scheduler/tracing');\n\nvar ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n\n// by calls to these methods by a Babel plugin.\n//\n// In PROD (or in packages without access to React internals),\n// they are left as they are instead.\n\nfunction warn(format) {\n  {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    printWarning('warn', format, args);\n  }\n}\nfunction error(format) {\n  {\n    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      args[_key2 - 1] = arguments[_key2];\n    }\n\n    printWarning('error', format, args);\n  }\n}\n\nfunction printWarning(level, format, args) {\n  // When changing this logic, you might want to also\n  // update consoleWithStackDev.www.js as well.\n  {\n    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n    var stack = ReactDebugCurrentFrame.getStackAddendum();\n\n    if (stack !== '') {\n      format += '%s';\n      args = args.concat([stack]);\n    }\n\n    var argsWithFormat = args.map(function (item) {\n      return '' + item;\n    }); // Careful: RN currently depends on this prefix\n\n    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it\n    // breaks IE9: https://github.com/facebook/react/issues/13610\n    // eslint-disable-next-line react-internal/no-production-logging\n\n    Function.prototype.apply.call(console[level], console, argsWithFormat);\n  }\n}\n\nvar FunctionComponent = 0;\nvar ClassComponent = 1;\nvar IndeterminateComponent = 2; // Before we know whether it is function or class\n\nvar HostRoot = 3; // Root of a host tree. Could be nested inside another node.\n\nvar HostPortal = 4; // A subtree. Could be an entry point to a different renderer.\n\nvar HostComponent = 5;\nvar HostText = 6;\nvar Fragment = 7;\nvar Mode = 8;\nvar ContextConsumer = 9;\nvar ContextProvider = 10;\nvar ForwardRef = 11;\nvar Profiler = 12;\nvar SuspenseComponent = 13;\nvar MemoComponent = 14;\nvar SimpleMemoComponent = 15;\nvar LazyComponent = 16;\nvar IncompleteClassComponent = 17;\nvar DehydratedFragment = 18;\nvar SuspenseListComponent = 19;\nvar FundamentalComponent = 20;\nvar ScopeComponent = 21;\nvar Block = 22;\nvar OffscreenComponent = 23;\nvar LegacyHiddenComponent = 24;\n\n/**\n * `ReactInstanceMap` maintains a mapping from a public facing stateful\n * instance (key) and the internal representation (value). This allows public\n * methods to accept the user facing instance as an argument and map them back\n * to internal methods.\n *\n * Note that this module is currently shared and assumed to be stateless.\n * If this becomes an actual Map, that will break.\n */\nfunction get(key) {\n  return key._reactInternals;\n}\nfunction set(key, value) {\n  key._reactInternals = value;\n}\n\n// ATTENTION\n// When adding new symbols to this file,\n// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n// The Symbol used to tag the ReactElement-like types. If there is no native Symbol\n// nor polyfill, then a plain number is used for performance.\nvar REACT_ELEMENT_TYPE = 0xeac7;\nvar REACT_PORTAL_TYPE = 0xeaca;\nvar REACT_FRAGMENT_TYPE = 0xeacb;\nvar REACT_STRICT_MODE_TYPE = 0xeacc;\nvar REACT_PROFILER_TYPE = 0xead2;\nvar REACT_PROVIDER_TYPE = 0xeacd;\nvar REACT_CONTEXT_TYPE = 0xeace;\nvar REACT_FORWARD_REF_TYPE = 0xead0;\nvar REACT_SUSPENSE_TYPE = 0xead1;\nvar REACT_SUSPENSE_LIST_TYPE = 0xead8;\nvar REACT_MEMO_TYPE = 0xead3;\nvar REACT_LAZY_TYPE = 0xead4;\nvar REACT_BLOCK_TYPE = 0xead9;\nvar REACT_SERVER_BLOCK_TYPE = 0xeada;\nvar REACT_FUNDAMENTAL_TYPE = 0xead5;\nvar REACT_SCOPE_TYPE = 0xead7;\nvar REACT_OPAQUE_ID_TYPE = 0xeae0;\nvar REACT_DEBUG_TRACING_MODE_TYPE = 0xeae1;\nvar REACT_OFFSCREEN_TYPE = 0xeae2;\nvar REACT_LEGACY_HIDDEN_TYPE = 0xeae3;\n\nif (typeof Symbol === 'function' && Symbol.for) {\n  var symbolFor = Symbol.for;\n  REACT_ELEMENT_TYPE = symbolFor('react.element');\n  REACT_PORTAL_TYPE = symbolFor('react.portal');\n  REACT_FRAGMENT_TYPE = symbolFor('react.fragment');\n  REACT_STRICT_MODE_TYPE = symbolFor('react.strict_mode');\n  REACT_PROFILER_TYPE = symbolFor('react.profiler');\n  REACT_PROVIDER_TYPE = symbolFor('react.provider');\n  REACT_CONTEXT_TYPE = symbolFor('react.context');\n  REACT_FORWARD_REF_TYPE = symbolFor('react.forward_ref');\n  REACT_SUSPENSE_TYPE = symbolFor('react.suspense');\n  REACT_SUSPENSE_LIST_TYPE = symbolFor('react.suspense_list');\n  REACT_MEMO_TYPE = symbolFor('react.memo');\n  REACT_LAZY_TYPE = symbolFor('react.lazy');\n  REACT_BLOCK_TYPE = symbolFor('react.block');\n  REACT_SERVER_BLOCK_TYPE = symbolFor('react.server.block');\n  REACT_FUNDAMENTAL_TYPE = symbolFor('react.fundamental');\n  REACT_SCOPE_TYPE = symbolFor('react.scope');\n  REACT_OPAQUE_ID_TYPE = symbolFor('react.opaque.id');\n  REACT_DEBUG_TRACING_MODE_TYPE = symbolFor('react.debug_trace_mode');\n  REACT_OFFSCREEN_TYPE = symbolFor('react.offscreen');\n  REACT_LEGACY_HIDDEN_TYPE = symbolFor('react.legacy_hidden');\n}\n\nvar MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;\nvar FAUX_ITERATOR_SYMBOL = '@@iterator';\nfunction getIteratorFn(maybeIterable) {\n  if (maybeIterable === null || typeof maybeIterable !== 'object') {\n    return null;\n  }\n\n  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\n\n  if (typeof maybeIterator === 'function') {\n    return maybeIterator;\n  }\n\n  return null;\n}\n\nfunction getWrappedName(outerType, innerType, wrapperName) {\n  var functionName = innerType.displayName || innerType.name || '';\n  return outerType.displayName || (functionName !== '' ? wrapperName + \"(\" + functionName + \")\" : wrapperName);\n}\n\nfunction getContextName(type) {\n  return type.displayName || 'Context';\n}\n\nfunction getComponentName(type) {\n  if (type == null) {\n    // Host root, text node or just invalid type.\n    return null;\n  }\n\n  {\n    if (typeof type.tag === 'number') {\n      error('Received an unexpected object in getComponentName(). ' + 'This is likely a bug in React. Please file an issue.');\n    }\n  }\n\n  if (typeof type === 'function') {\n    return type.displayName || type.name || null;\n  }\n\n  if (typeof type === 'string') {\n    return type;\n  }\n\n  switch (type) {\n    case REACT_FRAGMENT_TYPE:\n      return 'Fragment';\n\n    case REACT_PORTAL_TYPE:\n      return 'Portal';\n\n    case REACT_PROFILER_TYPE:\n      return 'Profiler';\n\n    case REACT_STRICT_MODE_TYPE:\n      return 'StrictMode';\n\n    case REACT_SUSPENSE_TYPE:\n      return 'Suspense';\n\n    case REACT_SUSPENSE_LIST_TYPE:\n      return 'SuspenseList';\n  }\n\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_CONTEXT_TYPE:\n        var context = type;\n        return getContextName(context) + '.Consumer';\n\n      case REACT_PROVIDER_TYPE:\n        var provider = type;\n        return getContextName(provider._context) + '.Provider';\n\n      case REACT_FORWARD_REF_TYPE:\n        return getWrappedName(type, type.render, 'ForwardRef');\n\n      case REACT_MEMO_TYPE:\n        return getComponentName(type.type);\n\n      case REACT_BLOCK_TYPE:\n        return getComponentName(type._render);\n\n      case REACT_LAZY_TYPE:\n        {\n          var lazyComponent = type;\n          var payload = lazyComponent._payload;\n          var init = lazyComponent._init;\n\n          try {\n            return getComponentName(init(payload));\n          } catch (x) {\n            return null;\n          }\n        }\n    }\n  }\n\n  return null;\n}\n\n// Don't change these two values. They're used by React Dev Tools.\nvar NoFlags =\n/*                      */\n0;\nvar PerformedWork =\n/*                */\n1; // You can change the rest (and add more).\n\nvar Placement =\n/*                    */\n2;\nvar Update =\n/*                       */\n4;\nvar PlacementAndUpdate =\n/*           */\n6;\nvar Deletion =\n/*                     */\n8;\nvar ContentReset =\n/*                 */\n16;\nvar Callback =\n/*                     */\n32;\nvar DidCapture =\n/*                   */\n64;\nvar Ref =\n/*                          */\n128;\nvar Snapshot =\n/*                     */\n256;\nvar Passive =\n/*                      */\n512; // TODO (effects) Remove this bit once the new reconciler is synced to the old.\n\nvar PassiveUnmountPendingDev =\n/*     */\n8192;\nvar Hydrating =\n/*                    */\n1024;\nvar HydratingAndUpdate =\n/*           */\n1028; // Passive & Update & Callback & Ref & Snapshot\n\nvar LifecycleEffectMask =\n/*          */\n932; // Union of all host effects\n\nvar HostEffectMask =\n/*               */\n2047; // These are not really side effects, but we still reuse this field.\n\nvar Incomplete =\n/*                   */\n2048;\nvar ShouldCapture =\n/*                */\n4096;\nvar ForceUpdateForLegacySuspense =\n/* */\n16384; // Static tags describe aspects of a fiber that are not specific to a render,\n\n// Filter certain DOM attributes (e.g. src, href) if their values are empty strings.\n\nvar enableProfilerTimer = true; // Record durations for commit and passive effects phases.\n\nvar enableFundamentalAPI = false; // Experimental Scope support.\nvar enableNewReconciler = false; // Errors that are thrown while unmounting (or after in the case of passive effects)\nvar warnAboutStringRefs = false;\n\nvar ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;\nfunction getNearestMountedFiber(fiber) {\n  var node = fiber;\n  var nearestMounted = fiber;\n\n  if (!fiber.alternate) {\n    // If there is no alternate, this might be a new tree that isn't inserted\n    // yet. If it is, then it will have a pending insertion effect on it.\n    var nextNode = node;\n\n    do {\n      node = nextNode;\n\n      if ((node.flags & (Placement | Hydrating)) !== NoFlags) {\n        // This is an insertion or in-progress hydration. The nearest possible\n        // mounted fiber is the parent but we need to continue to figure out\n        // if that one is still mounted.\n        nearestMounted = node.return;\n      }\n\n      nextNode = node.return;\n    } while (nextNode);\n  } else {\n    while (node.return) {\n      node = node.return;\n    }\n  }\n\n  if (node.tag === HostRoot) {\n    // TODO: Check if this was a nested HostRoot when used with\n    // renderContainerIntoSubtree.\n    return nearestMounted;\n  } // If we didn't hit the root, that means that we're in an disconnected tree\n  // that has been unmounted.\n\n\n  return null;\n}\nfunction isFiberMounted(fiber) {\n  return getNearestMountedFiber(fiber) === fiber;\n}\nfunction isMounted(component) {\n  {\n    var owner = ReactCurrentOwner.current;\n\n    if (owner !== null && owner.tag === ClassComponent) {\n      var ownerFiber = owner;\n      var instance = ownerFiber.stateNode;\n\n      if (!instance._warnedAboutRefsInRender) {\n        error('%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentName(ownerFiber.type) || 'A component');\n      }\n\n      instance._warnedAboutRefsInRender = true;\n    }\n  }\n\n  var fiber = get(component);\n\n  if (!fiber) {\n    return false;\n  }\n\n  return getNearestMountedFiber(fiber) === fiber;\n}\n\nfunction assertIsMounted(fiber) {\n  if (!(getNearestMountedFiber(fiber) === fiber)) {\n    {\n      throw Error( \"Unable to find node on an unmounted component.\" );\n    }\n  }\n}\n\nfunction findCurrentFiberUsingSlowPath(fiber) {\n  var alternate = fiber.alternate;\n\n  if (!alternate) {\n    // If there is no alternate, then we only need to check if it is mounted.\n    var nearestMounted = getNearestMountedFiber(fiber);\n\n    if (!(nearestMounted !== null)) {\n      {\n        throw Error( \"Unable to find node on an unmounted component.\" );\n      }\n    }\n\n    if (nearestMounted !== fiber) {\n      return null;\n    }\n\n    return fiber;\n  } // If we have two possible branches, we'll walk backwards up to the root\n  // to see what path the root points to. On the way we may hit one of the\n  // special cases and we'll deal with them.\n\n\n  var a = fiber;\n  var b = alternate;\n\n  while (true) {\n    var parentA = a.return;\n\n    if (parentA === null) {\n      // We're at the root.\n      break;\n    }\n\n    var parentB = parentA.alternate;\n\n    if (parentB === null) {\n      // There is no alternate. This is an unusual case. Currently, it only\n      // happens when a Suspense component is hidden. An extra fragment fiber\n      // is inserted in between the Suspense fiber and its children. Skip\n      // over this extra fragment fiber and proceed to the next parent.\n      var nextParent = parentA.return;\n\n      if (nextParent !== null) {\n        a = b = nextParent;\n        continue;\n      } // If there's no parent, we're at the root.\n\n\n      break;\n    } // If both copies of the parent fiber point to the same child, we can\n    // assume that the child is current. This happens when we bailout on low\n    // priority: the bailed out fiber's child reuses the current child.\n\n\n    if (parentA.child === parentB.child) {\n      var child = parentA.child;\n\n      while (child) {\n        if (child === a) {\n          // We've determined that A is the current branch.\n          assertIsMounted(parentA);\n          return fiber;\n        }\n\n        if (child === b) {\n          // We've determined that B is the current branch.\n          assertIsMounted(parentA);\n          return alternate;\n        }\n\n        child = child.sibling;\n      } // We should never have an alternate for any mounting node. So the only\n      // way this could possibly happen is if this was unmounted, if at all.\n\n\n      {\n        {\n          throw Error( \"Unable to find node on an unmounted component.\" );\n        }\n      }\n    }\n\n    if (a.return !== b.return) {\n      // The return pointer of A and the return pointer of B point to different\n      // fibers. We assume that return pointers never criss-cross, so A must\n      // belong to the child set of A.return, and B must belong to the child\n      // set of B.return.\n      a = parentA;\n      b = parentB;\n    } else {\n      // The return pointers point to the same fiber. We'll have to use the\n      // default, slow path: scan the child sets of each parent alternate to see\n      // which child belongs to which set.\n      //\n      // Search parent A's child set\n      var didFindChild = false;\n      var _child = parentA.child;\n\n      while (_child) {\n        if (_child === a) {\n          didFindChild = true;\n          a = parentA;\n          b = parentB;\n          break;\n        }\n\n        if (_child === b) {\n          didFindChild = true;\n          b = parentA;\n          a = parentB;\n          break;\n        }\n\n        _child = _child.sibling;\n      }\n\n      if (!didFindChild) {\n        // Search parent B's child set\n        _child = parentB.child;\n\n        while (_child) {\n          if (_child === a) {\n            didFindChild = true;\n            a = parentB;\n            b = parentA;\n            break;\n          }\n\n          if (_child === b) {\n            didFindChild = true;\n            b = parentB;\n            a = parentA;\n            break;\n          }\n\n          _child = _child.sibling;\n        }\n\n        if (!didFindChild) {\n          {\n            throw Error( \"Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.\" );\n          }\n        }\n      }\n    }\n\n    if (!(a.alternate === b)) {\n      {\n        throw Error( \"Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.\" );\n      }\n    }\n  } // If the root is not a host container, we're in a disconnected tree. I.e.\n  // unmounted.\n\n\n  if (!(a.tag === HostRoot)) {\n    {\n      throw Error( \"Unable to find node on an unmounted component.\" );\n    }\n  }\n\n  if (a.stateNode.current === a) {\n    // We've determined that A is the current branch.\n    return fiber;\n  } // Otherwise B has to be current branch.\n\n\n  return alternate;\n}\nfunction findCurrentHostFiber(parent) {\n  var currentParent = findCurrentFiberUsingSlowPath(parent);\n\n  if (!currentParent) {\n    return null;\n  } // Next we'll drill down this component to find the first HostComponent/Text.\n\n\n  var node = currentParent;\n\n  while (true) {\n    if (node.tag === HostComponent || node.tag === HostText) {\n      return node;\n    } else if (node.child) {\n      node.child.return = node;\n      node = node.child;\n      continue;\n    }\n\n    if (node === currentParent) {\n      return null;\n    }\n\n    while (!node.sibling) {\n      if (!node.return || node.return === currentParent) {\n        return null;\n      }\n\n      node = node.return;\n    }\n\n    node.sibling.return = node.return;\n    node = node.sibling;\n  } // Flow needs the return null here, but ESLint complains about it.\n  // eslint-disable-next-line no-unreachable\n\n\n  return null;\n}\nfunction findCurrentHostFiberWithNoPortals(parent) {\n  var currentParent = findCurrentFiberUsingSlowPath(parent);\n\n  if (!currentParent) {\n    return null;\n  } // Next we'll drill down this component to find the first HostComponent/Text.\n\n\n  var node = currentParent;\n\n  while (true) {\n    if (node.tag === HostComponent || node.tag === HostText || enableFundamentalAPI ) {\n      return node;\n    } else if (node.child && node.tag !== HostPortal) {\n      node.child.return = node;\n      node = node.child;\n      continue;\n    }\n\n    if (node === currentParent) {\n      return null;\n    }\n\n    while (!node.sibling) {\n      if (!node.return || node.return === currentParent) {\n        return null;\n      }\n\n      node = node.return;\n    }\n\n    node.sibling.return = node.return;\n    node = node.sibling;\n  } // Flow needs the return null here, but ESLint complains about it.\n  // eslint-disable-next-line no-unreachable\n\n\n  return null;\n}\nfunction doesFiberContain(parentFiber, childFiber) {\n  var node = childFiber;\n  var parentFiberAlternate = parentFiber.alternate;\n\n  while (node !== null) {\n    if (node === parentFiber || node === parentFiberAlternate) {\n      return true;\n    }\n\n    node = node.return;\n  }\n\n  return false;\n}\n\n// This is a host config that's used for the `react-reconciler` package on npm.\n// It is only used by third-party renderers.\n//\n// Its API lets you pass the host config as an argument.\n// However, inside the `react-reconciler` we treat host config as a module.\n// This file is a shim between two worlds.\n//\n// It works because the `react-reconciler` bundle is wrapped in something like:\n//\n// module.exports = function ($$$config) {\n//   /* reconciler code */\n// }\n//\n// So `$$$config` looks like a global variable, but it's\n// really an argument to a top-level wrapping function.\n// eslint-disable-line no-undef\n// eslint-disable-line no-undef\n// eslint-disable-line no-undef\n// eslint-disable-line no-undef\n// eslint-disable-line no-undef\n// eslint-disable-line no-undef\n// eslint-disable-line no-undef\n// eslint-disable-line no-undef\n// eslint-disable-line no-undef\n// eslint-disable-line no-undef\n// eslint-disable-line no-undef\n// eslint-disable-line no-undef\n// eslint-disable-line no-undef\n// eslint-disable-line no-undef\nvar getPublicInstance = $$$hostConfig.getPublicInstance;\nvar getRootHostContext = $$$hostConfig.getRootHostContext;\nvar getChildHostContext = $$$hostConfig.getChildHostContext;\nvar prepareForCommit = $$$hostConfig.prepareForCommit;\nvar resetAfterCommit = $$$hostConfig.resetAfterCommit;\nvar createInstance = $$$hostConfig.createInstance;\nvar appendInitialChild = $$$hostConfig.appendInitialChild;\nvar finalizeInitialChildren = $$$hostConfig.finalizeInitialChildren;\nvar prepareUpdate = $$$hostConfig.prepareUpdate;\nvar shouldSetTextContent = $$$hostConfig.shouldSetTextContent;\nvar createTextInstance = $$$hostConfig.createTextInstance;\nvar scheduleTimeout = $$$hostConfig.scheduleTimeout;\nvar cancelTimeout = $$$hostConfig.cancelTimeout;\nvar noTimeout = $$$hostConfig.noTimeout;\nvar now = $$$hostConfig.now;\nvar isPrimaryRenderer = $$$hostConfig.isPrimaryRenderer;\nvar warnsIfNotActing = $$$hostConfig.warnsIfNotActing;\nvar supportsMutation = $$$hostConfig.supportsMutation;\nvar supportsPersistence = $$$hostConfig.supportsPersistence;\nvar supportsHydration = $$$hostConfig.supportsHydration;\nvar getFundamentalComponentInstance = $$$hostConfig.getFundamentalComponentInstance;\nvar mountFundamentalComponent = $$$hostConfig.mountFundamentalComponent;\nvar shouldUpdateFundamentalComponent = $$$hostConfig.shouldUpdateFundamentalComponent;\nvar getInstanceFromNode = $$$hostConfig.getInstanceFromNode;\nvar isOpaqueHydratingObject = $$$hostConfig.isOpaqueHydratingObject;\nvar makeOpaqueHydratingObject = $$$hostConfig.makeOpaqueHydratingObject;\nvar makeClientId = $$$hostConfig.makeClientId;\nvar makeClientIdInDEV = $$$hostConfig.makeClientIdInDEV;\nvar beforeActiveInstanceBlur = $$$hostConfig.beforeActiveInstanceBlur;\nvar afterActiveInstanceBlur = $$$hostConfig.afterActiveInstanceBlur;\nvar preparePortalMount = $$$hostConfig.preparePortalMount;\nvar prepareScopeUpdate = $$$hostConfig.preparePortalMount;\nvar getInstanceFromScope = $$$hostConfig.getInstanceFromScope; // -------------------\n//      Test selectors\n//     (optional)\n// -------------------\n\nvar supportsTestSelectors = $$$hostConfig.supportsTestSelectors;\nvar findFiberRoot = $$$hostConfig.findFiberRoot;\nvar getBoundingRect = $$$hostConfig.getBoundingRect;\nvar getTextContent = $$$hostConfig.getTextContent;\nvar isHiddenSubtree = $$$hostConfig.isHiddenSubtree;\nvar matchAccessibilityRole = $$$hostConfig.matchAccessibilityRole;\nvar setFocusIfFocusable = $$$hostConfig.setFocusIfFocusable;\nvar setupIntersectionObserver = $$$hostConfig.setupIntersectionObserver; // -------------------\n//      Mutation\n//     (optional)\n// -------------------\n\nvar appendChild = $$$hostConfig.appendChild;\nvar appendChildToContainer = $$$hostConfig.appendChildToContainer;\nvar commitTextUpdate = $$$hostConfig.commitTextUpdate;\nvar commitMount = $$$hostConfig.commitMount;\nvar commitUpdate = $$$hostConfig.commitUpdate;\nvar insertBefore = $$$hostConfig.insertBefore;\nvar insertInContainerBefore = $$$hostConfig.insertInContainerBefore;\nvar removeChild = $$$hostConfig.removeChild;\nvar removeChildFromContainer = $$$hostConfig.removeChildFromContainer;\nvar resetTextContent = $$$hostConfig.resetTextContent;\nvar hideInstance = $$$hostConfig.hideInstance;\nvar hideTextInstance = $$$hostConfig.hideTextInstance;\nvar unhideInstance = $$$hostConfig.unhideInstance;\nvar unhideTextInstance = $$$hostConfig.unhideTextInstance;\nvar updateFundamentalComponent = $$$hostConfig.updateFundamentalComponent;\nvar unmountFundamentalComponent = $$$hostConfig.unmountFundamentalComponent;\nvar clearContainer = $$$hostConfig.clearContainer; // -------------------\n//     Persistence\n//     (optional)\n// -------------------\n\nvar cloneInstance = $$$hostConfig.cloneInstance;\nvar createContainerChildSet = $$$hostConfig.createContainerChildSet;\nvar appendChildToContainerChildSet = $$$hostConfig.appendChildToContainerChildSet;\nvar finalizeContainerChildren = $$$hostConfig.finalizeContainerChildren;\nvar replaceContainerChildren = $$$hostConfig.replaceContainerChildren;\nvar cloneHiddenInstance = $$$hostConfig.cloneHiddenInstance;\nvar cloneHiddenTextInstance = $$$hostConfig.cloneHiddenTextInstance;\nvar cloneFundamentalInstance = $$$hostConfig.cloneInstance; // -------------------\n//     Hydration\n//     (optional)\n// -------------------\n\nvar canHydrateInstance = $$$hostConfig.canHydrateInstance;\nvar canHydrateTextInstance = $$$hostConfig.canHydrateTextInstance;\nvar canHydrateSuspenseInstance = $$$hostConfig.canHydrateSuspenseInstance;\nvar isSuspenseInstancePending = $$$hostConfig.isSuspenseInstancePending;\nvar isSuspenseInstanceFallback = $$$hostConfig.isSuspenseInstanceFallback;\nvar registerSuspenseInstanceRetry = $$$hostConfig.registerSuspenseInstanceRetry;\nvar getNextHydratableSibling = $$$hostConfig.getNextHydratableSibling;\nvar getFirstHydratableChild = $$$hostConfig.getFirstHydratableChild;\nvar hydrateInstance = $$$hostConfig.hydrateInstance;\nvar hydrateTextInstance = $$$hostConfig.hydrateTextInstance;\nvar hydrateSuspenseInstance = $$$hostConfig.hydrateSuspenseInstance;\nvar getNextHydratableInstanceAfterSuspenseInstance = $$$hostConfig.getNextHydratableInstanceAfterSuspenseInstance;\nvar commitHydratedContainer = $$$hostConfig.commitHydratedContainer;\nvar commitHydratedSuspenseInstance = $$$hostConfig.commitHydratedSuspenseInstance;\nvar clearSuspenseBoundary = $$$hostConfig.clearSuspenseBoundary;\nvar clearSuspenseBoundaryFromContainer = $$$hostConfig.clearSuspenseBoundaryFromContainer;\nvar didNotMatchHydratedContainerTextInstance = $$$hostConfig.didNotMatchHydratedContainerTextInstance;\nvar didNotMatchHydratedTextInstance = $$$hostConfig.didNotMatchHydratedTextInstance;\nvar didNotHydrateContainerInstance = $$$hostConfig.didNotHydrateContainerInstance;\nvar didNotHydrateInstance = $$$hostConfig.didNotHydrateInstance;\nvar didNotFindHydratableContainerInstance = $$$hostConfig.didNotFindHydratableContainerInstance;\nvar didNotFindHydratableContainerTextInstance = $$$hostConfig.didNotFindHydratableContainerTextInstance;\nvar didNotFindHydratableContainerSuspenseInstance = $$$hostConfig.didNotFindHydratableContainerSuspenseInstance;\nvar didNotFindHydratableInstance = $$$hostConfig.didNotFindHydratableInstance;\nvar didNotFindHydratableTextInstance = $$$hostConfig.didNotFindHydratableTextInstance;\nvar didNotFindHydratableSuspenseInstance = $$$hostConfig.didNotFindHydratableSuspenseInstance;\n\n// Helpers to patch console.logs to avoid logging during side-effect free\n// replaying on render function. This currently only patches the object\n// lazily which won't cover if the log function was extracted eagerly.\n// We could also eagerly patch the method.\nvar disabledDepth = 0;\nvar prevLog;\nvar prevInfo;\nvar prevWarn;\nvar prevError;\nvar prevGroup;\nvar prevGroupCollapsed;\nvar prevGroupEnd;\n\nfunction disabledLog() {}\n\ndisabledLog.__reactDisabledLog = true;\nfunction disableLogs() {\n  {\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      prevLog = console.log;\n      prevInfo = console.info;\n      prevWarn = console.warn;\n      prevError = console.error;\n      prevGroup = console.group;\n      prevGroupCollapsed = console.groupCollapsed;\n      prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099\n\n      var props = {\n        configurable: true,\n        enumerable: true,\n        value: disabledLog,\n        writable: true\n      }; // $FlowFixMe Flow thinks console is immutable.\n\n      Object.defineProperties(console, {\n        info: props,\n        log: props,\n        warn: props,\n        error: props,\n        group: props,\n        groupCollapsed: props,\n        groupEnd: props\n      });\n      /* eslint-enable react-internal/no-production-logging */\n    }\n\n    disabledDepth++;\n  }\n}\nfunction reenableLogs() {\n  {\n    disabledDepth--;\n\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      var props = {\n        configurable: true,\n        enumerable: true,\n        writable: true\n      }; // $FlowFixMe Flow thinks console is immutable.\n\n      Object.defineProperties(console, {\n        log: _assign({}, props, {\n          value: prevLog\n        }),\n        info: _assign({}, props, {\n          value: prevInfo\n        }),\n        warn: _assign({}, props, {\n          value: prevWarn\n        }),\n        error: _assign({}, props, {\n          value: prevError\n        }),\n        group: _assign({}, props, {\n          value: prevGroup\n        }),\n        groupCollapsed: _assign({}, props, {\n          value: prevGroupCollapsed\n        }),\n        groupEnd: _assign({}, props, {\n          value: prevGroupEnd\n        })\n      });\n      /* eslint-enable react-internal/no-production-logging */\n    }\n\n    if (disabledDepth < 0) {\n      error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');\n    }\n  }\n}\n\nvar ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;\nvar prefix;\nfunction describeBuiltInComponentFrame(name, source, ownerFn) {\n  {\n    if (prefix === undefined) {\n      // Extract the VM specific prefix used by each line.\n      try {\n        throw Error();\n      } catch (x) {\n        var match = x.stack.trim().match(/\\n( *(at )?)/);\n        prefix = match && match[1] || '';\n      }\n    } // We use the prefix to ensure our stacks line up with native stack frames.\n\n\n    return '\\n' + prefix + name;\n  }\n}\nvar reentry = false;\nvar componentFrameCache;\n\n{\n  var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;\n  componentFrameCache = new PossiblyWeakMap();\n}\n\nfunction describeNativeComponentFrame(fn, construct) {\n  // If something asked for a stack inside a fake render, it should get ignored.\n  if (!fn || reentry) {\n    return '';\n  }\n\n  {\n    var frame = componentFrameCache.get(fn);\n\n    if (frame !== undefined) {\n      return frame;\n    }\n  }\n\n  var control;\n  reentry = true;\n  var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.\n\n  Error.prepareStackTrace = undefined;\n  var previousDispatcher;\n\n  {\n    previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function\n    // for warnings.\n\n    ReactCurrentDispatcher.current = null;\n    disableLogs();\n  }\n\n  try {\n    // This should throw.\n    if (construct) {\n      // Something should be setting the props in the constructor.\n      var Fake = function () {\n        throw Error();\n      }; // $FlowFixMe\n\n\n      Object.defineProperty(Fake.prototype, 'props', {\n        set: function () {\n          // We use a throwing setter instead of frozen or non-writable props\n          // because that won't throw in a non-strict mode function.\n          throw Error();\n        }\n      });\n\n      if (typeof Reflect === 'object' && Reflect.construct) {\n        // We construct a different control for this case to include any extra\n        // frames added by the construct call.\n        try {\n          Reflect.construct(Fake, []);\n        } catch (x) {\n          control = x;\n        }\n\n        Reflect.construct(fn, [], Fake);\n      } else {\n        try {\n          Fake.call();\n        } catch (x) {\n          control = x;\n        }\n\n        fn.call(Fake.prototype);\n      }\n    } else {\n      try {\n        throw Error();\n      } catch (x) {\n        control = x;\n      }\n\n      fn();\n    }\n  } catch (sample) {\n    // This is inlined manually because closure doesn't do it for us.\n    if (sample && control && typeof sample.stack === 'string') {\n      // This extracts the first frame from the sample that isn't also in the control.\n      // Skipping one frame that we assume is the frame that calls the two.\n      var sampleLines = sample.stack.split('\\n');\n      var controlLines = control.stack.split('\\n');\n      var s = sampleLines.length - 1;\n      var c = controlLines.length - 1;\n\n      while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {\n        // We expect at least one stack frame to be shared.\n        // Typically this will be the root most one. However, stack frames may be\n        // cut off due to maximum stack limits. In this case, one maybe cut off\n        // earlier than the other. We assume that the sample is longer or the same\n        // and there for cut off earlier. So we should find the root most frame in\n        // the sample somewhere in the control.\n        c--;\n      }\n\n      for (; s >= 1 && c >= 0; s--, c--) {\n        // Next we find the first one that isn't the same which should be the\n        // frame that called our sample function and the control.\n        if (sampleLines[s] !== controlLines[c]) {\n          // In V8, the first line is describing the message but other VMs don't.\n          // If we're about to return the first line, and the control is also on the same\n          // line, that's a pretty good indicator that our sample threw at same line as\n          // the control. I.e. before we entered the sample frame. So we ignore this result.\n          // This can happen if you passed a class to function component, or non-function.\n          if (s !== 1 || c !== 1) {\n            do {\n              s--;\n              c--; // We may still have similar intermediate frames from the construct call.\n              // The next one that isn't the same should be our match though.\n\n              if (c < 0 || sampleLines[s] !== controlLines[c]) {\n                // V8 adds a \"new\" prefix for native classes. Let's remove it to make it prettier.\n                var _frame = '\\n' + sampleLines[s].replace(' at new ', ' at ');\n\n                {\n                  if (typeof fn === 'function') {\n                    componentFrameCache.set(fn, _frame);\n                  }\n                } // Return the line we found.\n\n\n                return _frame;\n              }\n            } while (s >= 1 && c >= 0);\n          }\n\n          break;\n        }\n      }\n    }\n  } finally {\n    reentry = false;\n\n    {\n      ReactCurrentDispatcher.current = previousDispatcher;\n      reenableLogs();\n    }\n\n    Error.prepareStackTrace = previousPrepareStackTrace;\n  } // Fallback to just using the name if we couldn't make it throw.\n\n\n  var name = fn ? fn.displayName || fn.name : '';\n  var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';\n\n  {\n    if (typeof fn === 'function') {\n      componentFrameCache.set(fn, syntheticFrame);\n    }\n  }\n\n  return syntheticFrame;\n}\n\nfunction describeClassComponentFrame(ctor, source, ownerFn) {\n  {\n    return describeNativeComponentFrame(ctor, true);\n  }\n}\nfunction describeFunctionComponentFrame(fn, source, ownerFn) {\n  {\n    return describeNativeComponentFrame(fn, false);\n  }\n}\n\nfunction shouldConstruct(Component) {\n  var prototype = Component.prototype;\n  return !!(prototype && prototype.isReactComponent);\n}\n\nfunction describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {\n\n  if (type == null) {\n    return '';\n  }\n\n  if (typeof type === 'function') {\n    {\n      return describeNativeComponentFrame(type, shouldConstruct(type));\n    }\n  }\n\n  if (typeof type === 'string') {\n    return describeBuiltInComponentFrame(type);\n  }\n\n  switch (type) {\n    case REACT_SUSPENSE_TYPE:\n      return describeBuiltInComponentFrame('Suspense');\n\n    case REACT_SUSPENSE_LIST_TYPE:\n      return describeBuiltInComponentFrame('SuspenseList');\n  }\n\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_FORWARD_REF_TYPE:\n        return describeFunctionComponentFrame(type.render);\n\n      case REACT_MEMO_TYPE:\n        // Memo may contain any component type so we recursively resolve it.\n        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);\n\n      case REACT_BLOCK_TYPE:\n        return describeFunctionComponentFrame(type._render);\n\n      case REACT_LAZY_TYPE:\n        {\n          var lazyComponent = type;\n          var payload = lazyComponent._payload;\n          var init = lazyComponent._init;\n\n          try {\n            // Lazy may contain any component type so we recursively resolve it.\n            return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);\n          } catch (x) {}\n        }\n    }\n  }\n\n  return '';\n}\n\nvar loggedTypeFailures = {};\nvar ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n\nfunction setCurrentlyValidatingElement(element) {\n  {\n    if (element) {\n      var owner = element._owner;\n      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n      ReactDebugCurrentFrame.setExtraStackFrame(stack);\n    } else {\n      ReactDebugCurrentFrame.setExtraStackFrame(null);\n    }\n  }\n}\n\nfunction checkPropTypes(typeSpecs, values, location, componentName, element) {\n  {\n    // $FlowFixMe This is okay but Flow doesn't know it.\n    var has = Function.call.bind(Object.prototype.hasOwnProperty);\n\n    for (var typeSpecName in typeSpecs) {\n      if (has(typeSpecs, typeSpecName)) {\n        var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to\n        // fail the render phase where it didn't fail before. So we log it.\n        // After these have been cleaned up, we'll let them throw.\n\n        try {\n          // This is intentionally an invariant that gets caught. It's the same\n          // behavior as without this statement except with a better message.\n          if (typeof typeSpecs[typeSpecName] !== 'function') {\n            var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');\n            err.name = 'Invariant Violation';\n            throw err;\n          }\n\n          error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');\n        } catch (ex) {\n          error$1 = ex;\n        }\n\n        if (error$1 && !(error$1 instanceof Error)) {\n          setCurrentlyValidatingElement(element);\n\n          error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);\n\n          setCurrentlyValidatingElement(null);\n        }\n\n        if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {\n          // Only monitor this failure once because there tends to be a lot of the\n          // same error.\n          loggedTypeFailures[error$1.message] = true;\n          setCurrentlyValidatingElement(element);\n\n          error('Failed %s type: %s', location, error$1.message);\n\n          setCurrentlyValidatingElement(null);\n        }\n      }\n    }\n  }\n}\n\nvar valueStack = [];\nvar fiberStack;\n\n{\n  fiberStack = [];\n}\n\nvar index = -1;\n\nfunction createCursor(defaultValue) {\n  return {\n    current: defaultValue\n  };\n}\n\nfunction pop(cursor, fiber) {\n  if (index < 0) {\n    {\n      error('Unexpected pop.');\n    }\n\n    return;\n  }\n\n  {\n    if (fiber !== fiberStack[index]) {\n      error('Unexpected Fiber popped.');\n    }\n  }\n\n  cursor.current = valueStack[index];\n  valueStack[index] = null;\n\n  {\n    fiberStack[index] = null;\n  }\n\n  index--;\n}\n\nfunction push(cursor, value, fiber) {\n  index++;\n  valueStack[index] = cursor.current;\n\n  {\n    fiberStack[index] = fiber;\n  }\n\n  cursor.current = value;\n}\n\nvar warnedAboutMissingGetChildContext;\n\n{\n  warnedAboutMissingGetChildContext = {};\n}\n\nvar emptyContextObject = {};\n\n{\n  Object.freeze(emptyContextObject);\n} // A cursor to the current merged context object on the stack.\n\n\nvar contextStackCursor = createCursor(emptyContextObject); // A cursor to a boolean indicating whether the context has changed.\n\nvar didPerformWorkStackCursor = createCursor(false); // Keep track of the previous context object that was on the stack.\n// We use this to get access to the parent context after we have already\n// pushed the next context provider, and now need to merge their contexts.\n\nvar previousContext = emptyContextObject;\n\nfunction getUnmaskedContext(workInProgress, Component, didPushOwnContextIfProvider) {\n  {\n    if (didPushOwnContextIfProvider && isContextProvider(Component)) {\n      // If the fiber is a context provider itself, when we read its context\n      // we may have already pushed its own child context on the stack. A context\n      // provider should not \"see\" its own child context. Therefore we read the\n      // previous (parent) context instead for a context provider.\n      return previousContext;\n    }\n\n    return contextStackCursor.current;\n  }\n}\n\nfunction cacheContext(workInProgress, unmaskedContext, maskedContext) {\n  {\n    var instance = workInProgress.stateNode;\n    instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;\n    instance.__reactInternalMemoizedMaskedChildContext = maskedContext;\n  }\n}\n\nfunction getMaskedContext(workInProgress, unmaskedContext) {\n  {\n    var type = workInProgress.type;\n    var contextTypes = type.contextTypes;\n\n    if (!contextTypes) {\n      return emptyContextObject;\n    } // Avoid recreating masked context unless unmasked context has changed.\n    // Failing to do this will result in unnecessary calls to componentWillReceiveProps.\n    // This may trigger infinite loops if componentWillReceiveProps calls setState.\n\n\n    var instance = workInProgress.stateNode;\n\n    if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {\n      return instance.__reactInternalMemoizedMaskedChildContext;\n    }\n\n    var context = {};\n\n    for (var key in contextTypes) {\n      context[key] = unmaskedContext[key];\n    }\n\n    {\n      var name = getComponentName(type) || 'Unknown';\n      checkPropTypes(contextTypes, context, 'context', name);\n    } // Cache unmasked context so we can avoid recreating masked context unless necessary.\n    // Context is created before the class component is instantiated so check for instance.\n\n\n    if (instance) {\n      cacheContext(workInProgress, unmaskedContext, context);\n    }\n\n    return context;\n  }\n}\n\nfunction hasContextChanged() {\n  {\n    return didPerformWorkStackCursor.current;\n  }\n}\n\nfunction isContextProvider(type) {\n  {\n    var childContextTypes = type.childContextTypes;\n    return childContextTypes !== null && childContextTypes !== undefined;\n  }\n}\n\nfunction popContext(fiber) {\n  {\n    pop(didPerformWorkStackCursor, fiber);\n    pop(contextStackCursor, fiber);\n  }\n}\n\nfunction popTopLevelContextObject(fiber) {\n  {\n    pop(didPerformWorkStackCursor, fiber);\n    pop(contextStackCursor, fiber);\n  }\n}\n\nfunction pushTopLevelContextObject(fiber, context, didChange) {\n  {\n    if (!(contextStackCursor.current === emptyContextObject)) {\n      {\n        throw Error( \"Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.\" );\n      }\n    }\n\n    push(contextStackCursor, context, fiber);\n    push(didPerformWorkStackCursor, didChange, fiber);\n  }\n}\n\nfunction processChildContext(fiber, type, parentContext) {\n  {\n    var instance = fiber.stateNode;\n    var childContextTypes = type.childContextTypes; // TODO (bvaughn) Replace this behavior with an invariant() in the future.\n    // It has only been added in Fiber to match the (unintentional) behavior in Stack.\n\n    if (typeof instance.getChildContext !== 'function') {\n      {\n        var componentName = getComponentName(type) || 'Unknown';\n\n        if (!warnedAboutMissingGetChildContext[componentName]) {\n          warnedAboutMissingGetChildContext[componentName] = true;\n\n          error('%s.childContextTypes is specified but there is no getChildContext() method ' + 'on the instance. You can either define getChildContext() on %s or remove ' + 'childContextTypes from it.', componentName, componentName);\n        }\n      }\n\n      return parentContext;\n    }\n\n    var childContext = instance.getChildContext();\n\n    for (var contextKey in childContext) {\n      if (!(contextKey in childContextTypes)) {\n        {\n          throw Error( (getComponentName(type) || 'Unknown') + \".getChildContext(): key \\\"\" + contextKey + \"\\\" is not defined in childContextTypes.\" );\n        }\n      }\n    }\n\n    {\n      var name = getComponentName(type) || 'Unknown';\n      checkPropTypes(childContextTypes, childContext, 'child context', name);\n    }\n\n    return _assign({}, parentContext, childContext);\n  }\n}\n\nfunction pushContextProvider(workInProgress) {\n  {\n    var instance = workInProgress.stateNode; // We push the context as early as possible to ensure stack integrity.\n    // If the instance does not exist yet, we will push null at first,\n    // and replace it on the stack later when invalidating the context.\n\n    var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject; // Remember the parent context so we can merge with it later.\n    // Inherit the parent's did-perform-work value to avoid inadvertently blocking updates.\n\n    previousContext = contextStackCursor.current;\n    push(contextStackCursor, memoizedMergedChildContext, workInProgress);\n    push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);\n    return true;\n  }\n}\n\nfunction invalidateContextProvider(workInProgress, type, didChange) {\n  {\n    var instance = workInProgress.stateNode;\n\n    if (!instance) {\n      {\n        throw Error( \"Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.\" );\n      }\n    }\n\n    if (didChange) {\n      // Merge parent and own context.\n      // Skip this if we're not updating due to sCU.\n      // This avoids unnecessarily recomputing memoized values.\n      var mergedContext = processChildContext(workInProgress, type, previousContext);\n      instance.__reactInternalMemoizedMergedChildContext = mergedContext; // Replace the old (or empty) context with the new one.\n      // It is important to unwind the context in the reverse order.\n\n      pop(didPerformWorkStackCursor, workInProgress);\n      pop(contextStackCursor, workInProgress); // Now push the new context and mark that it has changed.\n\n      push(contextStackCursor, mergedContext, workInProgress);\n      push(didPerformWorkStackCursor, didChange, workInProgress);\n    } else {\n      pop(didPerformWorkStackCursor, workInProgress);\n      push(didPerformWorkStackCursor, didChange, workInProgress);\n    }\n  }\n}\n\nfunction findCurrentUnmaskedContext(fiber) {\n  {\n    // Currently this is only used with renderSubtreeIntoContainer; not sure if it\n    // makes sense elsewhere\n    if (!(isFiberMounted(fiber) && fiber.tag === ClassComponent)) {\n      {\n        throw Error( \"Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.\" );\n      }\n    }\n\n    var node = fiber;\n\n    do {\n      switch (node.tag) {\n        case HostRoot:\n          return node.stateNode.context;\n\n        case ClassComponent:\n          {\n            var Component = node.type;\n\n            if (isContextProvider(Component)) {\n              return node.stateNode.__reactInternalMemoizedMergedChildContext;\n            }\n\n            break;\n          }\n      }\n\n      node = node.return;\n    } while (node !== null);\n\n    {\n      {\n        throw Error( \"Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.\" );\n      }\n    }\n  }\n}\n\nvar LegacyRoot = 0;\nvar BlockingRoot = 1;\nvar ConcurrentRoot = 2;\n\nvar rendererID = null;\nvar injectedHook = null;\nvar hasLoggedError = false;\nvar isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined';\nfunction injectInternals(internals) {\n  if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {\n    // No DevTools\n    return false;\n  }\n\n  var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;\n\n  if (hook.isDisabled) {\n    // This isn't a real property on the hook, but it can be set to opt out\n    // of DevTools integration and associated warnings and logs.\n    // https://github.com/facebook/react/issues/3877\n    return true;\n  }\n\n  if (!hook.supportsFiber) {\n    {\n      error('The installed version of React DevTools is too old and will not work ' + 'with the current version of React. Please update React DevTools. ' + 'https://reactjs.org/link/react-devtools');\n    } // DevTools exists, even though it doesn't support Fiber.\n\n\n    return true;\n  }\n\n  try {\n    rendererID = hook.inject(internals); // We have successfully injected, so now it is safe to set up hooks.\n\n    injectedHook = hook;\n  } catch (err) {\n    // Catch all errors because it is unsafe to throw during initialization.\n    {\n      error('React instrumentation encountered an error: %s.', err);\n    }\n  } // DevTools exists\n\n\n  return true;\n}\nfunction onScheduleRoot(root, children) {\n  {\n    if (injectedHook && typeof injectedHook.onScheduleFiberRoot === 'function') {\n      try {\n        injectedHook.onScheduleFiberRoot(rendererID, root, children);\n      } catch (err) {\n        if ( !hasLoggedError) {\n          hasLoggedError = true;\n\n          error('React instrumentation encountered an error: %s', err);\n        }\n      }\n    }\n  }\n}\nfunction onCommitRoot(root, priorityLevel) {\n  if (injectedHook && typeof injectedHook.onCommitFiberRoot === 'function') {\n    try {\n      var didError = (root.current.flags & DidCapture) === DidCapture;\n\n      if (enableProfilerTimer) {\n        injectedHook.onCommitFiberRoot(rendererID, root, priorityLevel, didError);\n      } else {\n        injectedHook.onCommitFiberRoot(rendererID, root, undefined, didError);\n      }\n    } catch (err) {\n      {\n        if (!hasLoggedError) {\n          hasLoggedError = true;\n\n          error('React instrumentation encountered an error: %s', err);\n        }\n      }\n    }\n  }\n}\nfunction onCommitUnmount(fiber) {\n  if (injectedHook && typeof injectedHook.onCommitFiberUnmount === 'function') {\n    try {\n      injectedHook.onCommitFiberUnmount(rendererID, fiber);\n    } catch (err) {\n      {\n        if (!hasLoggedError) {\n          hasLoggedError = true;\n\n          error('React instrumentation encountered an error: %s', err);\n        }\n      }\n    }\n  }\n}\n\nvar Scheduler_now = Scheduler.unstable_now;\n\n{\n  // Provide explicit error message when production+profiling bundle of e.g.\n  // react-dom is used with production (non-profiling) bundle of\n  // scheduler/tracing\n  if (!(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null)) {\n    {\n      throw Error( \"It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at https://reactjs.org/link/profiling\" );\n    }\n  }\n}\n// ascending numbers so we can compare them like numbers. They start at 90 to\n// avoid clashing with Scheduler's priorities.\n\nvar ImmediatePriority = 99;\nvar UserBlockingPriority = 98;\nvar NormalPriority = 97;\nvar LowPriority = 96;\nvar IdlePriority = 95; // NoPriority is the absence of priority. Also React-only.\n\nvar NoPriority = 90;\nvar initialTimeMs = Scheduler_now(); // If the initial timestamp is reasonably small, use Scheduler's `now` directly.\n\nvar SyncLanePriority = 15;\nvar SyncBatchedLanePriority = 14;\nvar InputDiscreteHydrationLanePriority = 13;\nvar InputDiscreteLanePriority = 12;\nvar InputContinuousHydrationLanePriority = 11;\nvar InputContinuousLanePriority = 10;\nvar DefaultHydrationLanePriority = 9;\nvar DefaultLanePriority = 8;\nvar TransitionHydrationPriority = 7;\nvar TransitionPriority = 6;\nvar RetryLanePriority = 5;\nvar SelectiveHydrationLanePriority = 4;\nvar IdleHydrationLanePriority = 3;\nvar IdleLanePriority = 2;\nvar OffscreenLanePriority = 1;\nvar NoLanePriority = 0;\nvar TotalLanes = 31;\nvar NoLanes =\n/*                        */\n0;\nvar NoLane =\n/*                          */\n0;\nvar SyncLane =\n/*                        */\n1;\nvar SyncBatchedLane =\n/*                 */\n2;\nvar InputDiscreteHydrationLane =\n/*      */\n4;\nvar InputDiscreteLanes =\n/*                    */\n24;\nvar InputContinuousHydrationLane =\n/*           */\n32;\nvar InputContinuousLanes =\n/*                  */\n192;\nvar DefaultHydrationLane =\n/*            */\n256;\nvar DefaultLanes =\n/*                   */\n3584;\nvar TransitionHydrationLane =\n/*                */\n4096;\nvar TransitionLanes =\n/*                       */\n4186112;\nvar RetryLanes =\n/*                            */\n62914560;\nvar SomeRetryLane =\n/*                  */\n33554432;\nvar SelectiveHydrationLane =\n/*          */\n67108864;\nvar NonIdleLanes =\n/*                                 */\n134217727;\nvar IdleHydrationLane =\n/*               */\n134217728;\nvar IdleLanes =\n/*                             */\n805306368;\nvar OffscreenLane =\n/*                   */\n1073741824;\nvar NoTimestamp = -1;\nvar currentUpdateLanePriority = NoLanePriority;\nfunction getCurrentUpdateLanePriority() {\n  return currentUpdateLanePriority;\n}\nfunction setCurrentUpdateLanePriority(newLanePriority) {\n  currentUpdateLanePriority = newLanePriority;\n} // \"Registers\" used to \"return\" multiple values\n// Used by getHighestPriorityLanes and getNextLanes:\n\nvar return_highestLanePriority = DefaultLanePriority;\n\nfunction getHighestPriorityLanes(lanes) {\n  if ((SyncLane & lanes) !== NoLanes) {\n    return_highestLanePriority = SyncLanePriority;\n    return SyncLane;\n  }\n\n  if ((SyncBatchedLane & lanes) !== NoLanes) {\n    return_highestLanePriority = SyncBatchedLanePriority;\n    return SyncBatchedLane;\n  }\n\n  if ((InputDiscreteHydrationLane & lanes) !== NoLanes) {\n    return_highestLanePriority = InputDiscreteHydrationLanePriority;\n    return InputDiscreteHydrationLane;\n  }\n\n  var inputDiscreteLanes = InputDiscreteLanes & lanes;\n\n  if (inputDiscreteLanes !== NoLanes) {\n    return_highestLanePriority = InputDiscreteLanePriority;\n    return inputDiscreteLanes;\n  }\n\n  if ((lanes & InputContinuousHydrationLane) !== NoLanes) {\n    return_highestLanePriority = InputContinuousHydrationLanePriority;\n    return InputContinuousHydrationLane;\n  }\n\n  var inputContinuousLanes = InputContinuousLanes & lanes;\n\n  if (inputContinuousLanes !== NoLanes) {\n    return_highestLanePriority = InputContinuousLanePriority;\n    return inputContinuousLanes;\n  }\n\n  if ((lanes & DefaultHydrationLane) !== NoLanes) {\n    return_highestLanePriority = DefaultHydrationLanePriority;\n    return DefaultHydrationLane;\n  }\n\n  var defaultLanes = DefaultLanes & lanes;\n\n  if (defaultLanes !== NoLanes) {\n    return_highestLanePriority = DefaultLanePriority;\n    return defaultLanes;\n  }\n\n  if ((lanes & TransitionHydrationLane) !== NoLanes) {\n    return_highestLanePriority = TransitionHydrationPriority;\n    return TransitionHydrationLane;\n  }\n\n  var transitionLanes = TransitionLanes & lanes;\n\n  if (transitionLanes !== NoLanes) {\n    return_highestLanePriority = TransitionPriority;\n    return transitionLanes;\n  }\n\n  var retryLanes = RetryLanes & lanes;\n\n  if (retryLanes !== NoLanes) {\n    return_highestLanePriority = RetryLanePriority;\n    return retryLanes;\n  }\n\n  if (lanes & SelectiveHydrationLane) {\n    return_highestLanePriority = SelectiveHydrationLanePriority;\n    return SelectiveHydrationLane;\n  }\n\n  if ((lanes & IdleHydrationLane) !== NoLanes) {\n    return_highestLanePriority = IdleHydrationLanePriority;\n    return IdleHydrationLane;\n  }\n\n  var idleLanes = IdleLanes & lanes;\n\n  if (idleLanes !== NoLanes) {\n    return_highestLanePriority = IdleLanePriority;\n    return idleLanes;\n  }\n\n  if ((OffscreenLane & lanes) !== NoLanes) {\n    return_highestLanePriority = OffscreenLanePriority;\n    return OffscreenLane;\n  }\n\n  {\n    error('Should have found matching lanes. This is a bug in React.');\n  } // This shouldn't be reachable, but as a fallback, return the entire bitmask.\n\n\n  return_highestLanePriority = DefaultLanePriority;\n  return lanes;\n}\n\nfunction schedulerPriorityToLanePriority(schedulerPriorityLevel) {\n  switch (schedulerPriorityLevel) {\n    case ImmediatePriority:\n      return SyncLanePriority;\n\n    case UserBlockingPriority:\n      return InputContinuousLanePriority;\n\n    case NormalPriority:\n    case LowPriority:\n      // TODO: Handle LowSchedulerPriority, somehow. Maybe the same lane as hydration.\n      return DefaultLanePriority;\n\n    case IdlePriority:\n      return IdleLanePriority;\n\n    default:\n      return NoLanePriority;\n  }\n}\nfunction lanePriorityToSchedulerPriority(lanePriority) {\n  switch (lanePriority) {\n    case SyncLanePriority:\n    case SyncBatchedLanePriority:\n      return ImmediatePriority;\n\n    case InputDiscreteHydrationLanePriority:\n    case InputDiscreteLanePriority:\n    case InputContinuousHydrationLanePriority:\n    case InputContinuousLanePriority:\n      return UserBlockingPriority;\n\n    case DefaultHydrationLanePriority:\n    case DefaultLanePriority:\n    case TransitionHydrationPriority:\n    case TransitionPriority:\n    case SelectiveHydrationLanePriority:\n    case RetryLanePriority:\n      return NormalPriority;\n\n    case IdleHydrationLanePriority:\n    case IdleLanePriority:\n    case OffscreenLanePriority:\n      return IdlePriority;\n\n    case NoLanePriority:\n      return NoPriority;\n\n    default:\n      {\n        {\n          throw Error( \"Invalid update priority: \" + lanePriority + \". This is a bug in React.\" );\n        }\n      }\n\n  }\n}\nfunction getNextLanes(root, wipLanes) {\n  // Early bailout if there's no pending work left.\n  var pendingLanes = root.pendingLanes;\n\n  if (pendingLanes === NoLanes) {\n    return_highestLanePriority = NoLanePriority;\n    return NoLanes;\n  }\n\n  var nextLanes = NoLanes;\n  var nextLanePriority = NoLanePriority;\n  var expiredLanes = root.expiredLanes;\n  var suspendedLanes = root.suspendedLanes;\n  var pingedLanes = root.pingedLanes; // Check if any work has expired.\n\n  if (expiredLanes !== NoLanes) {\n    nextLanes = expiredLanes;\n    nextLanePriority = return_highestLanePriority = SyncLanePriority;\n  } else {\n    // Do not work on any idle work until all the non-idle work has finished,\n    // even if the work is suspended.\n    var nonIdlePendingLanes = pendingLanes & NonIdleLanes;\n\n    if (nonIdlePendingLanes !== NoLanes) {\n      var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;\n\n      if (nonIdleUnblockedLanes !== NoLanes) {\n        nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);\n        nextLanePriority = return_highestLanePriority;\n      } else {\n        var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;\n\n        if (nonIdlePingedLanes !== NoLanes) {\n          nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);\n          nextLanePriority = return_highestLanePriority;\n        }\n      }\n    } else {\n      // The only remaining work is Idle.\n      var unblockedLanes = pendingLanes & ~suspendedLanes;\n\n      if (unblockedLanes !== NoLanes) {\n        nextLanes = getHighestPriorityLanes(unblockedLanes);\n        nextLanePriority = return_highestLanePriority;\n      } else {\n        if (pingedLanes !== NoLanes) {\n          nextLanes = getHighestPriorityLanes(pingedLanes);\n          nextLanePriority = return_highestLanePriority;\n        }\n      }\n    }\n  }\n\n  if (nextLanes === NoLanes) {\n    // This should only be reachable if we're suspended\n    // TODO: Consider warning in this path if a fallback timer is not scheduled.\n    return NoLanes;\n  } // If there are higher priority lanes, we'll include them even if they\n  // are suspended.\n\n\n  nextLanes = pendingLanes & getEqualOrHigherPriorityLanes(nextLanes); // If we're already in the middle of a render, switching lanes will interrupt\n  // it and we'll lose our progress. We should only do this if the new lanes are\n  // higher priority.\n\n  if (wipLanes !== NoLanes && wipLanes !== nextLanes && // If we already suspended with a delay, then interrupting is fine. Don't\n  // bother waiting until the root is complete.\n  (wipLanes & suspendedLanes) === NoLanes) {\n    getHighestPriorityLanes(wipLanes);\n    var wipLanePriority = return_highestLanePriority;\n\n    if (nextLanePriority <= wipLanePriority) {\n      return wipLanes;\n    } else {\n      return_highestLanePriority = nextLanePriority;\n    }\n  } // Check for entangled lanes and add them to the batch.\n  //\n  // A lane is said to be entangled with another when it's not allowed to render\n  // in a batch that does not also include the other lane. Typically we do this\n  // when multiple updates have the same source, and we only want to respond to\n  // the most recent event from that source.\n  //\n  // Note that we apply entanglements *after* checking for partial work above.\n  // This means that if a lane is entangled during an interleaved event while\n  // it's already rendering, we won't interrupt it. This is intentional, since\n  // entanglement is usually \"best effort\": we'll try our best to render the\n  // lanes in the same batch, but it's not worth throwing out partially\n  // completed work in order to do it.\n  //\n  // For those exceptions where entanglement is semantically important, like\n  // useMutableSource, we should ensure that there is no partial work at the\n  // time we apply the entanglement.\n\n\n  var entangledLanes = root.entangledLanes;\n\n  if (entangledLanes !== NoLanes) {\n    var entanglements = root.entanglements;\n    var lanes = nextLanes & entangledLanes;\n\n    while (lanes > 0) {\n      var index = pickArbitraryLaneIndex(lanes);\n      var lane = 1 << index;\n      nextLanes |= entanglements[index];\n      lanes &= ~lane;\n    }\n  }\n\n  return nextLanes;\n}\nfunction getMostRecentEventTime(root, lanes) {\n  var eventTimes = root.eventTimes;\n  var mostRecentEventTime = NoTimestamp;\n\n  while (lanes > 0) {\n    var index = pickArbitraryLaneIndex(lanes);\n    var lane = 1 << index;\n    var eventTime = eventTimes[index];\n\n    if (eventTime > mostRecentEventTime) {\n      mostRecentEventTime = eventTime;\n    }\n\n    lanes &= ~lane;\n  }\n\n  return mostRecentEventTime;\n}\n\nfunction computeExpirationTime(lane, currentTime) {\n  // TODO: Expiration heuristic is constant per lane, so could use a map.\n  getHighestPriorityLanes(lane);\n  var priority = return_highestLanePriority;\n\n  if (priority >= InputContinuousLanePriority) {\n    // User interactions should expire slightly more quickly.\n    //\n    // NOTE: This is set to the corresponding constant as in Scheduler.js. When\n    // we made it larger, a product metric in www regressed, suggesting there's\n    // a user interaction that's being starved by a series of synchronous\n    // updates. If that theory is correct, the proper solution is to fix the\n    // starvation. However, this scenario supports the idea that expiration\n    // times are an important safeguard when starvation does happen.\n    //\n    // Also note that, in the case of user input specifically, this will soon no\n    // longer be an issue because we plan to make user input synchronous by\n    // default (until you enter `startTransition`, of course.)\n    //\n    // If weren't planning to make these updates synchronous soon anyway, I\n    // would probably make this number a configurable parameter.\n    return currentTime + 250;\n  } else if (priority >= TransitionPriority) {\n    return currentTime + 5000;\n  } else {\n    // Anything idle priority or lower should never expire.\n    return NoTimestamp;\n  }\n}\n\nfunction markStarvedLanesAsExpired(root, currentTime) {\n  // TODO: This gets called every time we yield. We can optimize by storing\n  // the earliest expiration time on the root. Then use that to quickly bail out\n  // of this function.\n  var pendingLanes = root.pendingLanes;\n  var suspendedLanes = root.suspendedLanes;\n  var pingedLanes = root.pingedLanes;\n  var expirationTimes = root.expirationTimes; // Iterate through the pending lanes and check if we've reached their\n  // expiration time. If so, we'll assume the update is being starved and mark\n  // it as expired to force it to finish.\n\n  var lanes = pendingLanes;\n\n  while (lanes > 0) {\n    var index = pickArbitraryLaneIndex(lanes);\n    var lane = 1 << index;\n    var expirationTime = expirationTimes[index];\n\n    if (expirationTime === NoTimestamp) {\n      // Found a pending lane with no expiration time. If it's not suspended, or\n      // if it's pinged, assume it's CPU-bound. Compute a new expiration time\n      // using the current time.\n      if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {\n        // Assumes timestamps are monotonically increasing.\n        expirationTimes[index] = computeExpirationTime(lane, currentTime);\n      }\n    } else if (expirationTime <= currentTime) {\n      // This lane expired\n      root.expiredLanes |= lane;\n    }\n\n    lanes &= ~lane;\n  }\n} // This returns the highest priority pending lanes regardless of whether they\n// are suspended.\n\nfunction getHighestPriorityPendingLanes(root) {\n  return getHighestPriorityLanes(root.pendingLanes);\n}\nfunction getLanesToRetrySynchronouslyOnError(root) {\n  var everythingButOffscreen = root.pendingLanes & ~OffscreenLane;\n\n  if (everythingButOffscreen !== NoLanes) {\n    return everythingButOffscreen;\n  }\n\n  if (everythingButOffscreen & OffscreenLane) {\n    return OffscreenLane;\n  }\n\n  return NoLanes;\n}\nfunction returnNextLanesPriority() {\n  return return_highestLanePriority;\n}\nfunction includesNonIdleWork(lanes) {\n  return (lanes & NonIdleLanes) !== NoLanes;\n}\nfunction includesOnlyRetries(lanes) {\n  return (lanes & RetryLanes) === lanes;\n}\nfunction includesOnlyTransitions(lanes) {\n  return (lanes & TransitionLanes) === lanes;\n} // To ensure consistency across multiple updates in the same event, this should\n// be a pure function, so that it always returns the same lane for given inputs.\n\nfunction findUpdateLane(lanePriority, wipLanes) {\n  switch (lanePriority) {\n    case NoLanePriority:\n      break;\n\n    case SyncLanePriority:\n      return SyncLane;\n\n    case SyncBatchedLanePriority:\n      return SyncBatchedLane;\n\n    case InputDiscreteLanePriority:\n      {\n        var _lane = pickArbitraryLane(InputDiscreteLanes & ~wipLanes);\n\n        if (_lane === NoLane) {\n          // Shift to the next priority level\n          return findUpdateLane(InputContinuousLanePriority, wipLanes);\n        }\n\n        return _lane;\n      }\n\n    case InputContinuousLanePriority:\n      {\n        var _lane2 = pickArbitraryLane(InputContinuousLanes & ~wipLanes);\n\n        if (_lane2 === NoLane) {\n          // Shift to the next priority level\n          return findUpdateLane(DefaultLanePriority, wipLanes);\n        }\n\n        return _lane2;\n      }\n\n    case DefaultLanePriority:\n      {\n        var _lane3 = pickArbitraryLane(DefaultLanes & ~wipLanes);\n\n        if (_lane3 === NoLane) {\n          // If all the default lanes are already being worked on, look for a\n          // lane in the transition range.\n          _lane3 = pickArbitraryLane(TransitionLanes & ~wipLanes);\n\n          if (_lane3 === NoLane) {\n            // All the transition lanes are taken, too. This should be very\n            // rare, but as a last resort, pick a default lane. This will have\n            // the effect of interrupting the current work-in-progress render.\n            _lane3 = pickArbitraryLane(DefaultLanes);\n          }\n        }\n\n        return _lane3;\n      }\n\n    case TransitionPriority: // Should be handled by findTransitionLane instead\n\n    case RetryLanePriority:\n      // Should be handled by findRetryLane instead\n      break;\n\n    case IdleLanePriority:\n      var lane = pickArbitraryLane(IdleLanes & ~wipLanes);\n\n      if (lane === NoLane) {\n        lane = pickArbitraryLane(IdleLanes);\n      }\n\n      return lane;\n  }\n\n  {\n    {\n      throw Error( \"Invalid update priority: \" + lanePriority + \". This is a bug in React.\" );\n    }\n  }\n} // To ensure consistency across multiple updates in the same event, this should\n// be pure function, so that it always returns the same lane for given inputs.\n\nfunction findTransitionLane(wipLanes, pendingLanes) {\n  // First look for lanes that are completely unclaimed, i.e. have no\n  // pending work.\n  var lane = pickArbitraryLane(TransitionLanes & ~pendingLanes);\n\n  if (lane === NoLane) {\n    // If all lanes have pending work, look for a lane that isn't currently\n    // being worked on.\n    lane = pickArbitraryLane(TransitionLanes & ~wipLanes);\n\n    if (lane === NoLane) {\n      // If everything is being worked on, pick any lane. This has the\n      // effect of interrupting the current work-in-progress.\n      lane = pickArbitraryLane(TransitionLanes);\n    }\n  }\n\n  return lane;\n} // To ensure consistency across multiple updates in the same event, this should\n// be pure function, so that it always returns the same lane for given inputs.\n\nfunction findRetryLane(wipLanes) {\n  // This is a fork of `findUpdateLane` designed specifically for Suspense\n  // \"retries\" \u2014 a special update that attempts to flip a Suspense boundary\n  // from its placeholder state to its primary/resolved state.\n  var lane = pickArbitraryLane(RetryLanes & ~wipLanes);\n\n  if (lane === NoLane) {\n    lane = pickArbitraryLane(RetryLanes);\n  }\n\n  return lane;\n}\n\nfunction getHighestPriorityLane(lanes) {\n  return lanes & -lanes;\n}\n\nfunction getLowestPriorityLane(lanes) {\n  // This finds the most significant non-zero bit.\n  var index = 31 - clz32(lanes);\n  return index < 0 ? NoLanes : 1 << index;\n}\n\nfunction getEqualOrHigherPriorityLanes(lanes) {\n  return (getLowestPriorityLane(lanes) << 1) - 1;\n}\n\nfunction pickArbitraryLane(lanes) {\n  // This wrapper function gets inlined. Only exists so to communicate that it\n  // doesn't matter which bit is selected; you can pick any bit without\n  // affecting the algorithms where its used. Here I'm using\n  // getHighestPriorityLane because it requires the fewest operations.\n  return getHighestPriorityLane(lanes);\n}\n\nfunction pickArbitraryLaneIndex(lanes) {\n  return 31 - clz32(lanes);\n}\n\nfunction laneToIndex(lane) {\n  return pickArbitraryLaneIndex(lane);\n}\n\nfunction includesSomeLane(a, b) {\n  return (a & b) !== NoLanes;\n}\nfunction isSubsetOfLanes(set, subset) {\n  return (set & subset) === subset;\n}\nfunction mergeLanes(a, b) {\n  return a | b;\n}\nfunction removeLanes(set, subset) {\n  return set & ~subset;\n} // Seems redundant, but it changes the type from a single lane (used for\n// updates) to a group of lanes (used for flushing work).\n\nfunction laneToLanes(lane) {\n  return lane;\n}\nfunction higherPriorityLane(a, b) {\n  // This works because the bit ranges decrease in priority as you go left.\n  return a !== NoLane && a < b ? a : b;\n}\nfunction createLaneMap(initial) {\n  // Intentionally pushing one by one.\n  // https://v8.dev/blog/elements-kinds#avoid-creating-holes\n  var laneMap = [];\n\n  for (var i = 0; i < TotalLanes; i++) {\n    laneMap.push(initial);\n  }\n\n  return laneMap;\n}\nfunction markRootUpdated(root, updateLane, eventTime) {\n  root.pendingLanes |= updateLane; // TODO: Theoretically, any update to any lane can unblock any other lane. But\n  // it's not practical to try every single possible combination. We need a\n  // heuristic to decide which lanes to attempt to render, and in which batches.\n  // For now, we use the same heuristic as in the old ExpirationTimes model:\n  // retry any lane at equal or lower priority, but don't try updates at higher\n  // priority without also including the lower priority updates. This works well\n  // when considering updates across different priority levels, but isn't\n  // sufficient for updates within the same priority, since we want to treat\n  // those updates as parallel.\n  // Unsuspend any update at equal or lower priority.\n\n  var higherPriorityLanes = updateLane - 1; // Turns 0b1000 into 0b0111\n\n  root.suspendedLanes &= higherPriorityLanes;\n  root.pingedLanes &= higherPriorityLanes;\n  var eventTimes = root.eventTimes;\n  var index = laneToIndex(updateLane); // We can always overwrite an existing timestamp because we prefer the most\n  // recent event, and we assume time is monotonically increasing.\n\n  eventTimes[index] = eventTime;\n}\nfunction markRootSuspended(root, suspendedLanes) {\n  root.suspendedLanes |= suspendedLanes;\n  root.pingedLanes &= ~suspendedLanes; // The suspended lanes are no longer CPU-bound. Clear their expiration times.\n\n  var expirationTimes = root.expirationTimes;\n  var lanes = suspendedLanes;\n\n  while (lanes > 0) {\n    var index = pickArbitraryLaneIndex(lanes);\n    var lane = 1 << index;\n    expirationTimes[index] = NoTimestamp;\n    lanes &= ~lane;\n  }\n}\nfunction markRootPinged(root, pingedLanes, eventTime) {\n  root.pingedLanes |= root.suspendedLanes & pingedLanes;\n}\nfunction markRootExpired(root, expiredLanes) {\n  root.expiredLanes |= expiredLanes & root.pendingLanes;\n}\nfunction markDiscreteUpdatesExpired(root) {\n  root.expiredLanes |= InputDiscreteLanes & root.pendingLanes;\n}\nfunction hasDiscreteLanes(lanes) {\n  return (lanes & InputDiscreteLanes) !== NoLanes;\n}\nfunction markRootMutableRead(root, updateLane) {\n  root.mutableReadLanes |= updateLane & root.pendingLanes;\n}\nfunction markRootFinished(root, remainingLanes) {\n  var noLongerPendingLanes = root.pendingLanes & ~remainingLanes;\n  root.pendingLanes = remainingLanes; // Let's try everything again\n\n  root.suspendedLanes = 0;\n  root.pingedLanes = 0;\n  root.expiredLanes &= remainingLanes;\n  root.mutableReadLanes &= remainingLanes;\n  root.entangledLanes &= remainingLanes;\n  var entanglements = root.entanglements;\n  var eventTimes = root.eventTimes;\n  var expirationTimes = root.expirationTimes; // Clear the lanes that no longer have pending work\n\n  var lanes = noLongerPendingLanes;\n\n  while (lanes > 0) {\n    var index = pickArbitraryLaneIndex(lanes);\n    var lane = 1 << index;\n    entanglements[index] = NoLanes;\n    eventTimes[index] = NoTimestamp;\n    expirationTimes[index] = NoTimestamp;\n    lanes &= ~lane;\n  }\n}\nfunction markRootEntangled(root, entangledLanes) {\n  root.entangledLanes |= entangledLanes;\n  var entanglements = root.entanglements;\n  var lanes = entangledLanes;\n\n  while (lanes > 0) {\n    var index = pickArbitraryLaneIndex(lanes);\n    var lane = 1 << index;\n    entanglements[index] |= entangledLanes;\n    lanes &= ~lane;\n  }\n}\nvar clz32 = Math.clz32 ? Math.clz32 : clz32Fallback; // Count leading zeros. Only used on lanes, so assume input is an integer.\n// Based on:\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32\n\nvar log = Math.log;\nvar LN2 = Math.LN2;\n\nfunction clz32Fallback(lanes) {\n  if (lanes === 0) {\n    return 32;\n  }\n\n  return 31 - (log(lanes) / LN2 | 0) | 0;\n}\n\nvar Scheduler_runWithPriority = Scheduler.unstable_runWithPriority,\n    Scheduler_scheduleCallback = Scheduler.unstable_scheduleCallback,\n    Scheduler_cancelCallback = Scheduler.unstable_cancelCallback,\n    Scheduler_shouldYield = Scheduler.unstable_shouldYield,\n    Scheduler_requestPaint = Scheduler.unstable_requestPaint,\n    Scheduler_now$1 = Scheduler.unstable_now,\n    Scheduler_getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel,\n    Scheduler_ImmediatePriority = Scheduler.unstable_ImmediatePriority,\n    Scheduler_UserBlockingPriority = Scheduler.unstable_UserBlockingPriority,\n    Scheduler_NormalPriority = Scheduler.unstable_NormalPriority,\n    Scheduler_LowPriority = Scheduler.unstable_LowPriority,\n    Scheduler_IdlePriority = Scheduler.unstable_IdlePriority;\n\n{\n  // Provide explicit error message when production+profiling bundle of e.g.\n  // react-dom is used with production (non-profiling) bundle of\n  // scheduler/tracing\n  if (!(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null)) {\n    {\n      throw Error( \"It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at https://reactjs.org/link/profiling\" );\n    }\n  }\n}\n\nvar fakeCallbackNode = {}; // Except for NoPriority, these correspond to Scheduler priorities. We use\n// ascending numbers so we can compare them like numbers. They start at 90 to\n// avoid clashing with Scheduler's priorities.\n\nvar ImmediatePriority$1 = 99;\nvar UserBlockingPriority$1 = 98;\nvar NormalPriority$1 = 97;\nvar LowPriority$1 = 96;\nvar IdlePriority$1 = 95; // NoPriority is the absence of priority. Also React-only.\n\nvar NoPriority$1 = 90;\nvar shouldYield = Scheduler_shouldYield;\nvar requestPaint = // Fall back gracefully if we're running an older version of Scheduler.\nScheduler_requestPaint !== undefined ? Scheduler_requestPaint : function () {};\nvar syncQueue = null;\nvar immediateQueueCallbackNode = null;\nvar isFlushingSyncQueue = false;\nvar initialTimeMs$1 = Scheduler_now$1(); // If the initial timestamp is reasonably small, use Scheduler's `now` directly.\n// This will be the case for modern browsers that support `performance.now`. In\n// older browsers, Scheduler falls back to `Date.now`, which returns a Unix\n// timestamp. In that case, subtract the module initialization time to simulate\n// the behavior of performance.now and keep our times small enough to fit\n// within 32 bits.\n// TODO: Consider lifting this into Scheduler.\n\nvar now$1 = initialTimeMs$1 < 10000 ? Scheduler_now$1 : function () {\n  return Scheduler_now$1() - initialTimeMs$1;\n};\nfunction getCurrentPriorityLevel() {\n  switch (Scheduler_getCurrentPriorityLevel()) {\n    case Scheduler_ImmediatePriority:\n      return ImmediatePriority$1;\n\n    case Scheduler_UserBlockingPriority:\n      return UserBlockingPriority$1;\n\n    case Scheduler_NormalPriority:\n      return NormalPriority$1;\n\n    case Scheduler_LowPriority:\n      return LowPriority$1;\n\n    case Scheduler_IdlePriority:\n      return IdlePriority$1;\n\n    default:\n      {\n        {\n          throw Error( \"Unknown priority level.\" );\n        }\n      }\n\n  }\n}\n\nfunction reactPriorityToSchedulerPriority(reactPriorityLevel) {\n  switch (reactPriorityLevel) {\n    case ImmediatePriority$1:\n      return Scheduler_ImmediatePriority;\n\n    case UserBlockingPriority$1:\n      return Scheduler_UserBlockingPriority;\n\n    case NormalPriority$1:\n      return Scheduler_NormalPriority;\n\n    case LowPriority$1:\n      return Scheduler_LowPriority;\n\n    case IdlePriority$1:\n      return Scheduler_IdlePriority;\n\n    default:\n      {\n        {\n          throw Error( \"Unknown priority level.\" );\n        }\n      }\n\n  }\n}\n\nfunction runWithPriority(reactPriorityLevel, fn) {\n  var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);\n  return Scheduler_runWithPriority(priorityLevel, fn);\n}\nfunction scheduleCallback(reactPriorityLevel, callback, options) {\n  var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);\n  return Scheduler_scheduleCallback(priorityLevel, callback, options);\n}\nfunction scheduleSyncCallback(callback) {\n  // Push this callback into an internal queue. We'll flush these either in\n  // the next tick, or earlier if something calls `flushSyncCallbackQueue`.\n  if (syncQueue === null) {\n    syncQueue = [callback]; // Flush the queue in the next tick, at the earliest.\n\n    immediateQueueCallbackNode = Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueueImpl);\n  } else {\n    // Push onto existing queue. Don't need to schedule a callback because\n    // we already scheduled one when we created the queue.\n    syncQueue.push(callback);\n  }\n\n  return fakeCallbackNode;\n}\nfunction cancelCallback(callbackNode) {\n  if (callbackNode !== fakeCallbackNode) {\n    Scheduler_cancelCallback(callbackNode);\n  }\n}\nfunction flushSyncCallbackQueue() {\n  if (immediateQueueCallbackNode !== null) {\n    var node = immediateQueueCallbackNode;\n    immediateQueueCallbackNode = null;\n    Scheduler_cancelCallback(node);\n  }\n\n  flushSyncCallbackQueueImpl();\n}\n\nfunction flushSyncCallbackQueueImpl() {\n  if (!isFlushingSyncQueue && syncQueue !== null) {\n    // Prevent re-entrancy.\n    isFlushingSyncQueue = true;\n    var i = 0;\n\n    {\n      try {\n        var _isSync2 = true;\n        var _queue = syncQueue;\n        runWithPriority(ImmediatePriority$1, function () {\n          for (; i < _queue.length; i++) {\n            var callback = _queue[i];\n\n            do {\n              callback = callback(_isSync2);\n            } while (callback !== null);\n          }\n        });\n        syncQueue = null;\n      } catch (error) {\n        // If something throws, leave the remaining callbacks on the queue.\n        if (syncQueue !== null) {\n          syncQueue = syncQueue.slice(i + 1);\n        } // Resume flushing in the next tick\n\n\n        Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueue);\n        throw error;\n      } finally {\n        isFlushingSyncQueue = false;\n      }\n    }\n  }\n}\n\nvar NoMode = 0;\nvar StrictMode = 1; // TODO: Remove BlockingMode and ConcurrentMode by reading from the root\n// tag instead\n\nvar BlockingMode = 2;\nvar ConcurrentMode = 4;\nvar ProfileMode = 8;\nvar DebugTracingMode = 16;\n\nvar ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;\nvar NoTransition = 0;\nfunction requestCurrentTransition() {\n  return ReactCurrentBatchConfig.transition;\n}\n\n/**\n * inlined Object.is polyfill to avoid requiring consumers ship their own\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n */\nfunction is(x, y) {\n  return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y // eslint-disable-line no-self-compare\n  ;\n}\n\nvar objectIs = typeof Object.is === 'function' ? Object.is : is;\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n/**\n * Performs equality by iterating through keys on an object and returning false\n * when any key has values which are not strictly equal between the arguments.\n * Returns true when the values of all keys are strictly equal.\n */\n\nfunction shallowEqual(objA, objB) {\n  if (objectIs(objA, objB)) {\n    return true;\n  }\n\n  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {\n    return false;\n  }\n\n  var keysA = Object.keys(objA);\n  var keysB = Object.keys(objB);\n\n  if (keysA.length !== keysB.length) {\n    return false;\n  } // Test for A's keys different from B.\n\n\n  for (var i = 0; i < keysA.length; i++) {\n    if (!hasOwnProperty.call(objB, keysA[i]) || !objectIs(objA[keysA[i]], objB[keysA[i]])) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction describeFiber(fiber) {\n  var owner =  fiber._debugOwner ? fiber._debugOwner.type : null ;\n  var source =  fiber._debugSource ;\n\n  switch (fiber.tag) {\n    case HostComponent:\n      return describeBuiltInComponentFrame(fiber.type);\n\n    case LazyComponent:\n      return describeBuiltInComponentFrame('Lazy');\n\n    case SuspenseComponent:\n      return describeBuiltInComponentFrame('Suspense');\n\n    case SuspenseListComponent:\n      return describeBuiltInComponentFrame('SuspenseList');\n\n    case FunctionComponent:\n    case IndeterminateComponent:\n    case SimpleMemoComponent:\n      return describeFunctionComponentFrame(fiber.type);\n\n    case ForwardRef:\n      return describeFunctionComponentFrame(fiber.type.render);\n\n    case Block:\n      return describeFunctionComponentFrame(fiber.type._render);\n\n    case ClassComponent:\n      return describeClassComponentFrame(fiber.type);\n\n    default:\n      return '';\n  }\n}\n\nfunction getStackByFiberInDevAndProd(workInProgress) {\n  try {\n    var info = '';\n    var node = workInProgress;\n\n    do {\n      info += describeFiber(node);\n      node = node.return;\n    } while (node);\n\n    return info;\n  } catch (x) {\n    return '\\nError generating stack: ' + x.message + '\\n' + x.stack;\n  }\n}\n\nvar ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;\nvar current = null;\nvar isRendering = false;\nfunction getCurrentFiberOwnerNameInDevOrNull() {\n  {\n    if (current === null) {\n      return null;\n    }\n\n    var owner = current._debugOwner;\n\n    if (owner !== null && typeof owner !== 'undefined') {\n      return getComponentName(owner.type);\n    }\n  }\n\n  return null;\n}\n\nfunction getCurrentFiberStackInDev() {\n  {\n    if (current === null) {\n      return '';\n    } // Safe because if current fiber exists, we are reconciling,\n    // and it is guaranteed to be the work-in-progress version.\n\n\n    return getStackByFiberInDevAndProd(current);\n  }\n}\n\nfunction resetCurrentFiber() {\n  {\n    ReactDebugCurrentFrame$1.getCurrentStack = null;\n    current = null;\n    isRendering = false;\n  }\n}\nfunction setCurrentFiber(fiber) {\n  {\n    ReactDebugCurrentFrame$1.getCurrentStack = getCurrentFiberStackInDev;\n    current = fiber;\n    isRendering = false;\n  }\n}\nfunction setIsRendering(rendering) {\n  {\n    isRendering = rendering;\n  }\n}\nfunction getIsRendering() {\n  {\n    return isRendering;\n  }\n}\n\nvar ReactStrictModeWarnings = {\n  recordUnsafeLifecycleWarnings: function (fiber, instance) {},\n  flushPendingUnsafeLifecycleWarnings: function () {},\n  recordLegacyContextWarning: function (fiber, instance) {},\n  flushLegacyContextWarning: function () {},\n  discardPendingWarnings: function () {}\n};\n\n{\n  var findStrictRoot = function (fiber) {\n    var maybeStrictRoot = null;\n    var node = fiber;\n\n    while (node !== null) {\n      if (node.mode & StrictMode) {\n        maybeStrictRoot = node;\n      }\n\n      node = node.return;\n    }\n\n    return maybeStrictRoot;\n  };\n\n  var setToSortedString = function (set) {\n    var array = [];\n    set.forEach(function (value) {\n      array.push(value);\n    });\n    return array.sort().join(', ');\n  };\n\n  var pendingComponentWillMountWarnings = [];\n  var pendingUNSAFE_ComponentWillMountWarnings = [];\n  var pendingComponentWillReceivePropsWarnings = [];\n  var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];\n  var pendingComponentWillUpdateWarnings = [];\n  var pendingUNSAFE_ComponentWillUpdateWarnings = []; // Tracks components we have already warned about.\n\n  var didWarnAboutUnsafeLifecycles = new Set();\n\n  ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function (fiber, instance) {\n    // Dedup strategy: Warn once per component.\n    if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {\n      return;\n    }\n\n    if (typeof instance.componentWillMount === 'function' && // Don't warn about react-lifecycles-compat polyfilled components.\n    instance.componentWillMount.__suppressDeprecationWarning !== true) {\n      pendingComponentWillMountWarnings.push(fiber);\n    }\n\n    if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillMount === 'function') {\n      pendingUNSAFE_ComponentWillMountWarnings.push(fiber);\n    }\n\n    if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {\n      pendingComponentWillReceivePropsWarnings.push(fiber);\n    }\n\n    if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillReceiveProps === 'function') {\n      pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);\n    }\n\n    if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {\n      pendingComponentWillUpdateWarnings.push(fiber);\n    }\n\n    if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillUpdate === 'function') {\n      pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);\n    }\n  };\n\n  ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function () {\n    // We do an initial pass to gather component names\n    var componentWillMountUniqueNames = new Set();\n\n    if (pendingComponentWillMountWarnings.length > 0) {\n      pendingComponentWillMountWarnings.forEach(function (fiber) {\n        componentWillMountUniqueNames.add(getComponentName(fiber.type) || 'Component');\n        didWarnAboutUnsafeLifecycles.add(fiber.type);\n      });\n      pendingComponentWillMountWarnings = [];\n    }\n\n    var UNSAFE_componentWillMountUniqueNames = new Set();\n\n    if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {\n      pendingUNSAFE_ComponentWillMountWarnings.forEach(function (fiber) {\n        UNSAFE_componentWillMountUniqueNames.add(getComponentName(fiber.type) || 'Component');\n        didWarnAboutUnsafeLifecycles.add(fiber.type);\n      });\n      pendingUNSAFE_ComponentWillMountWarnings = [];\n    }\n\n    var componentWillReceivePropsUniqueNames = new Set();\n\n    if (pendingComponentWillReceivePropsWarnings.length > 0) {\n      pendingComponentWillReceivePropsWarnings.forEach(function (fiber) {\n        componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || 'Component');\n        didWarnAboutUnsafeLifecycles.add(fiber.type);\n      });\n      pendingComponentWillReceivePropsWarnings = [];\n    }\n\n    var UNSAFE_componentWillReceivePropsUniqueNames = new Set();\n\n    if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {\n      pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function (fiber) {\n        UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || 'Component');\n        didWarnAboutUnsafeLifecycles.add(fiber.type);\n      });\n      pendingUNSAFE_ComponentWillReceivePropsWarnings = [];\n    }\n\n    var componentWillUpdateUniqueNames = new Set();\n\n    if (pendingComponentWillUpdateWarnings.length > 0) {\n      pendingComponentWillUpdateWarnings.forEach(function (fiber) {\n        componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || 'Component');\n        didWarnAboutUnsafeLifecycles.add(fiber.type);\n      });\n      pendingComponentWillUpdateWarnings = [];\n    }\n\n    var UNSAFE_componentWillUpdateUniqueNames = new Set();\n\n    if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {\n      pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function (fiber) {\n        UNSAFE_componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || 'Component');\n        didWarnAboutUnsafeLifecycles.add(fiber.type);\n      });\n      pendingUNSAFE_ComponentWillUpdateWarnings = [];\n    } // Finally, we flush all the warnings\n    // UNSAFE_ ones before the deprecated ones, since they'll be 'louder'\n\n\n    if (UNSAFE_componentWillMountUniqueNames.size > 0) {\n      var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);\n\n      error('Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' + '* Move code with side effects to componentDidMount, and set initial state in the constructor.\\n' + '\\nPlease update the following components: %s', sortedNames);\n    }\n\n    if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {\n      var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);\n\n      error('Using UNSAFE_componentWillReceiveProps in strict mode is not recommended ' + 'and may indicate bugs in your code. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' + '* Move data fetching code or side effects to componentDidUpdate.\\n' + \"* If you're updating state whenever props change, \" + 'refactor your code to use memoization techniques or move it to ' + 'static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\\n' + '\\nPlease update the following components: %s', _sortedNames);\n    }\n\n    if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {\n      var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);\n\n      error('Using UNSAFE_componentWillUpdate in strict mode is not recommended ' + 'and may indicate bugs in your code. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' + '* Move data fetching code or side effects to componentDidUpdate.\\n' + '\\nPlease update the following components: %s', _sortedNames2);\n    }\n\n    if (componentWillMountUniqueNames.size > 0) {\n      var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);\n\n      warn('componentWillMount has been renamed, and is not recommended for use. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' + '* Move code with side effects to componentDidMount, and set initial state in the constructor.\\n' + '* Rename componentWillMount to UNSAFE_componentWillMount to suppress ' + 'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\\n' + '\\nPlease update the following components: %s', _sortedNames3);\n    }\n\n    if (componentWillReceivePropsUniqueNames.size > 0) {\n      var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);\n\n      warn('componentWillReceiveProps has been renamed, and is not recommended for use. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' + '* Move data fetching code or side effects to componentDidUpdate.\\n' + \"* If you're updating state whenever props change, refactor your \" + 'code to use memoization techniques or move it to ' + 'static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\\n' + '* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress ' + 'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\\n' + '\\nPlease update the following components: %s', _sortedNames4);\n    }\n\n    if (componentWillUpdateUniqueNames.size > 0) {\n      var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);\n\n      warn('componentWillUpdate has been renamed, and is not recommended for use. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' + '* Move data fetching code or side effects to componentDidUpdate.\\n' + '* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress ' + 'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\\n' + '\\nPlease update the following components: %s', _sortedNames5);\n    }\n  };\n\n  var pendingLegacyContextWarning = new Map(); // Tracks components we have already warned about.\n\n  var didWarnAboutLegacyContext = new Set();\n\n  ReactStrictModeWarnings.recordLegacyContextWarning = function (fiber, instance) {\n    var strictRoot = findStrictRoot(fiber);\n\n    if (strictRoot === null) {\n      error('Expected to find a StrictMode component in a strict mode tree. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n\n      return;\n    } // Dedup strategy: Warn once per component.\n\n\n    if (didWarnAboutLegacyContext.has(fiber.type)) {\n      return;\n    }\n\n    var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);\n\n    if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === 'function') {\n      if (warningsForRoot === undefined) {\n        warningsForRoot = [];\n        pendingLegacyContextWarning.set(strictRoot, warningsForRoot);\n      }\n\n      warningsForRoot.push(fiber);\n    }\n  };\n\n  ReactStrictModeWarnings.flushLegacyContextWarning = function () {\n    pendingLegacyContextWarning.forEach(function (fiberArray, strictRoot) {\n      if (fiberArray.length === 0) {\n        return;\n      }\n\n      var firstFiber = fiberArray[0];\n      var uniqueNames = new Set();\n      fiberArray.forEach(function (fiber) {\n        uniqueNames.add(getComponentName(fiber.type) || 'Component');\n        didWarnAboutLegacyContext.add(fiber.type);\n      });\n      var sortedNames = setToSortedString(uniqueNames);\n\n      try {\n        setCurrentFiber(firstFiber);\n\n        error('Legacy context API has been detected within a strict-mode tree.' + '\\n\\nThe old API will be supported in all 16.x releases, but applications ' + 'using it should migrate to the new version.' + '\\n\\nPlease update the following components: %s' + '\\n\\nLearn more about this warning here: https://reactjs.org/link/legacy-context', sortedNames);\n      } finally {\n        resetCurrentFiber();\n      }\n    });\n  };\n\n  ReactStrictModeWarnings.discardPendingWarnings = function () {\n    pendingComponentWillMountWarnings = [];\n    pendingUNSAFE_ComponentWillMountWarnings = [];\n    pendingComponentWillReceivePropsWarnings = [];\n    pendingUNSAFE_ComponentWillReceivePropsWarnings = [];\n    pendingComponentWillUpdateWarnings = [];\n    pendingUNSAFE_ComponentWillUpdateWarnings = [];\n    pendingLegacyContextWarning = new Map();\n  };\n}\n\nfunction resolveDefaultProps(Component, baseProps) {\n  if (Component && Component.defaultProps) {\n    // Resolve default props. Taken from ReactElement\n    var props = _assign({}, baseProps);\n\n    var defaultProps = Component.defaultProps;\n\n    for (var propName in defaultProps) {\n      if (props[propName] === undefined) {\n        props[propName] = defaultProps[propName];\n      }\n    }\n\n    return props;\n  }\n\n  return baseProps;\n}\n\n// Max 31 bit integer. The max integer size in V8 for 32-bit systems.\n// Math.pow(2, 30) - 1\n// 0b111111111111111111111111111111\nvar MAX_SIGNED_31_BIT_INT = 1073741823;\n\nvar valueCursor = createCursor(null);\nvar rendererSigil;\n\n{\n  // Use this to detect multiple renderers using the same context\n  rendererSigil = {};\n}\n\nvar currentlyRenderingFiber = null;\nvar lastContextDependency = null;\nvar lastContextWithAllBitsObserved = null;\nvar isDisallowedContextReadInDEV = false;\nfunction resetContextDependencies() {\n  // This is called right before React yields execution, to ensure `readContext`\n  // cannot be called outside the render phase.\n  currentlyRenderingFiber = null;\n  lastContextDependency = null;\n  lastContextWithAllBitsObserved = null;\n\n  {\n    isDisallowedContextReadInDEV = false;\n  }\n}\nfunction enterDisallowedContextReadInDEV() {\n  {\n    isDisallowedContextReadInDEV = true;\n  }\n}\nfunction exitDisallowedContextReadInDEV() {\n  {\n    isDisallowedContextReadInDEV = false;\n  }\n}\nfunction pushProvider(providerFiber, nextValue) {\n  var context = providerFiber.type._context;\n\n  if (isPrimaryRenderer) {\n    push(valueCursor, context._currentValue, providerFiber);\n    context._currentValue = nextValue;\n\n    {\n      if (context._currentRenderer !== undefined && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {\n        error('Detected multiple renderers concurrently rendering the ' + 'same context provider. This is currently unsupported.');\n      }\n\n      context._currentRenderer = rendererSigil;\n    }\n  } else {\n    push(valueCursor, context._currentValue2, providerFiber);\n    context._currentValue2 = nextValue;\n\n    {\n      if (context._currentRenderer2 !== undefined && context._currentRenderer2 !== null && context._currentRenderer2 !== rendererSigil) {\n        error('Detected multiple renderers concurrently rendering the ' + 'same context provider. This is currently unsupported.');\n      }\n\n      context._currentRenderer2 = rendererSigil;\n    }\n  }\n}\nfunction popProvider(providerFiber) {\n  var currentValue = valueCursor.current;\n  pop(valueCursor, providerFiber);\n  var context = providerFiber.type._context;\n\n  if (isPrimaryRenderer) {\n    context._currentValue = currentValue;\n  } else {\n    context._currentValue2 = currentValue;\n  }\n}\nfunction calculateChangedBits(context, newValue, oldValue) {\n  if (objectIs(oldValue, newValue)) {\n    // No change\n    return 0;\n  } else {\n    var changedBits = typeof context._calculateChangedBits === 'function' ? context._calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT;\n\n    {\n      if ((changedBits & MAX_SIGNED_31_BIT_INT) !== changedBits) {\n        error('calculateChangedBits: Expected the return value to be a ' + '31-bit integer. Instead received: %s', changedBits);\n      }\n    }\n\n    return changedBits | 0;\n  }\n}\nfunction scheduleWorkOnParentPath(parent, renderLanes) {\n  // Update the child lanes of all the ancestors, including the alternates.\n  var node = parent;\n\n  while (node !== null) {\n    var alternate = node.alternate;\n\n    if (!isSubsetOfLanes(node.childLanes, renderLanes)) {\n      node.childLanes = mergeLanes(node.childLanes, renderLanes);\n\n      if (alternate !== null) {\n        alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);\n      }\n    } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes)) {\n      alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);\n    } else {\n      // Neither alternate was updated, which means the rest of the\n      // ancestor path already has sufficient priority.\n      break;\n    }\n\n    node = node.return;\n  }\n}\nfunction propagateContextChange(workInProgress, context, changedBits, renderLanes) {\n  var fiber = workInProgress.child;\n\n  if (fiber !== null) {\n    // Set the return pointer of the child to the work-in-progress fiber.\n    fiber.return = workInProgress;\n  }\n\n  while (fiber !== null) {\n    var nextFiber = void 0; // Visit this fiber.\n\n    var list = fiber.dependencies;\n\n    if (list !== null) {\n      nextFiber = fiber.child;\n      var dependency = list.firstContext;\n\n      while (dependency !== null) {\n        // Check if the context matches.\n        if (dependency.context === context && (dependency.observedBits & changedBits) !== 0) {\n          // Match! Schedule an update on this fiber.\n          if (fiber.tag === ClassComponent) {\n            // Schedule a force update on the work-in-progress.\n            var update = createUpdate(NoTimestamp, pickArbitraryLane(renderLanes));\n            update.tag = ForceUpdate; // TODO: Because we don't have a work-in-progress, this will add the\n            // update to the current fiber, too, which means it will persist even if\n            // this render is thrown away. Since it's a race condition, not sure it's\n            // worth fixing.\n\n            enqueueUpdate(fiber, update);\n          }\n\n          fiber.lanes = mergeLanes(fiber.lanes, renderLanes);\n          var alternate = fiber.alternate;\n\n          if (alternate !== null) {\n            alternate.lanes = mergeLanes(alternate.lanes, renderLanes);\n          }\n\n          scheduleWorkOnParentPath(fiber.return, renderLanes); // Mark the updated lanes on the list, too.\n\n          list.lanes = mergeLanes(list.lanes, renderLanes); // Since we already found a match, we can stop traversing the\n          // dependency list.\n\n          break;\n        }\n\n        dependency = dependency.next;\n      }\n    } else if (fiber.tag === ContextProvider) {\n      // Don't scan deeper if this is a matching provider\n      nextFiber = fiber.type === workInProgress.type ? null : fiber.child;\n    } else {\n      // Traverse down.\n      nextFiber = fiber.child;\n    }\n\n    if (nextFiber !== null) {\n      // Set the return pointer of the child to the work-in-progress fiber.\n      nextFiber.return = fiber;\n    } else {\n      // No child. Traverse to next sibling.\n      nextFiber = fiber;\n\n      while (nextFiber !== null) {\n        if (nextFiber === workInProgress) {\n          // We're back to the root of this subtree. Exit.\n          nextFiber = null;\n          break;\n        }\n\n        var sibling = nextFiber.sibling;\n\n        if (sibling !== null) {\n          // Set the return pointer of the sibling to the work-in-progress fiber.\n          sibling.return = nextFiber.return;\n          nextFiber = sibling;\n          break;\n        } // No more siblings. Traverse up.\n\n\n        nextFiber = nextFiber.return;\n      }\n    }\n\n    fiber = nextFiber;\n  }\n}\nfunction prepareToReadContext(workInProgress, renderLanes) {\n  currentlyRenderingFiber = workInProgress;\n  lastContextDependency = null;\n  lastContextWithAllBitsObserved = null;\n  var dependencies = workInProgress.dependencies;\n\n  if (dependencies !== null) {\n    var firstContext = dependencies.firstContext;\n\n    if (firstContext !== null) {\n      if (includesSomeLane(dependencies.lanes, renderLanes)) {\n        // Context list has a pending update. Mark that this fiber performed work.\n        markWorkInProgressReceivedUpdate();\n      } // Reset the work-in-progress list\n\n\n      dependencies.firstContext = null;\n    }\n  }\n}\nfunction readContext(context, observedBits) {\n  {\n    // This warning would fire if you read context inside a Hook like useMemo.\n    // Unlike the class check below, it's not enforced in production for perf.\n    if (isDisallowedContextReadInDEV) {\n      error('Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');\n    }\n  }\n\n  if (lastContextWithAllBitsObserved === context) ; else if (observedBits === false || observedBits === 0) ; else {\n    var resolvedObservedBits; // Avoid deopting on observable arguments or heterogeneous types.\n\n    if (typeof observedBits !== 'number' || observedBits === MAX_SIGNED_31_BIT_INT) {\n      // Observe all updates.\n      lastContextWithAllBitsObserved = context;\n      resolvedObservedBits = MAX_SIGNED_31_BIT_INT;\n    } else {\n      resolvedObservedBits = observedBits;\n    }\n\n    var contextItem = {\n      context: context,\n      observedBits: resolvedObservedBits,\n      next: null\n    };\n\n    if (lastContextDependency === null) {\n      if (!(currentlyRenderingFiber !== null)) {\n        {\n          throw Error( \"Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().\" );\n        }\n      } // This is the first dependency for this component. Create a new list.\n\n\n      lastContextDependency = contextItem;\n      currentlyRenderingFiber.dependencies = {\n        lanes: NoLanes,\n        firstContext: contextItem,\n        responders: null\n      };\n    } else {\n      // Append a new context item.\n      lastContextDependency = lastContextDependency.next = contextItem;\n    }\n  }\n\n  return isPrimaryRenderer ? context._currentValue : context._currentValue2;\n}\n\nvar UpdateState = 0;\nvar ReplaceState = 1;\nvar ForceUpdate = 2;\nvar CaptureUpdate = 3; // Global state that is reset at the beginning of calling `processUpdateQueue`.\n// It should only be read right after calling `processUpdateQueue`, via\n// `checkHasForceUpdateAfterProcessing`.\n\nvar hasForceUpdate = false;\nvar didWarnUpdateInsideUpdate;\nvar currentlyProcessingQueue;\n\n{\n  didWarnUpdateInsideUpdate = false;\n  currentlyProcessingQueue = null;\n}\n\nfunction initializeUpdateQueue(fiber) {\n  var queue = {\n    baseState: fiber.memoizedState,\n    firstBaseUpdate: null,\n    lastBaseUpdate: null,\n    shared: {\n      pending: null\n    },\n    effects: null\n  };\n  fiber.updateQueue = queue;\n}\nfunction cloneUpdateQueue(current, workInProgress) {\n  // Clone the update queue from current. Unless it's already a clone.\n  var queue = workInProgress.updateQueue;\n  var currentQueue = current.updateQueue;\n\n  if (queue === currentQueue) {\n    var clone = {\n      baseState: currentQueue.baseState,\n      firstBaseUpdate: currentQueue.firstBaseUpdate,\n      lastBaseUpdate: currentQueue.lastBaseUpdate,\n      shared: currentQueue.shared,\n      effects: currentQueue.effects\n    };\n    workInProgress.updateQueue = clone;\n  }\n}\nfunction createUpdate(eventTime, lane) {\n  var update = {\n    eventTime: eventTime,\n    lane: lane,\n    tag: UpdateState,\n    payload: null,\n    callback: null,\n    next: null\n  };\n  return update;\n}\nfunction enqueueUpdate(fiber, update) {\n  var updateQueue = fiber.updateQueue;\n\n  if (updateQueue === null) {\n    // Only occurs if the fiber has been unmounted.\n    return;\n  }\n\n  var sharedQueue = updateQueue.shared;\n  var pending = sharedQueue.pending;\n\n  if (pending === null) {\n    // This is the first update. Create a circular list.\n    update.next = update;\n  } else {\n    update.next = pending.next;\n    pending.next = update;\n  }\n\n  sharedQueue.pending = update;\n\n  {\n    if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {\n      error('An update (setState, replaceState, or forceUpdate) was scheduled ' + 'from inside an update function. Update functions should be pure, ' + 'with zero side-effects. Consider using componentDidUpdate or a ' + 'callback.');\n\n      didWarnUpdateInsideUpdate = true;\n    }\n  }\n}\nfunction enqueueCapturedUpdate(workInProgress, capturedUpdate) {\n  // Captured updates are updates that are thrown by a child during the render\n  // phase. They should be discarded if the render is aborted. Therefore,\n  // we should only put them on the work-in-progress queue, not the current one.\n  var queue = workInProgress.updateQueue; // Check if the work-in-progress queue is a clone.\n\n  var current = workInProgress.alternate;\n\n  if (current !== null) {\n    var currentQueue = current.updateQueue;\n\n    if (queue === currentQueue) {\n      // The work-in-progress queue is the same as current. This happens when\n      // we bail out on a parent fiber that then captures an error thrown by\n      // a child. Since we want to append the update only to the work-in\n      // -progress queue, we need to clone the updates. We usually clone during\n      // processUpdateQueue, but that didn't happen in this case because we\n      // skipped over the parent when we bailed out.\n      var newFirst = null;\n      var newLast = null;\n      var firstBaseUpdate = queue.firstBaseUpdate;\n\n      if (firstBaseUpdate !== null) {\n        // Loop through the updates and clone them.\n        var update = firstBaseUpdate;\n\n        do {\n          var clone = {\n            eventTime: update.eventTime,\n            lane: update.lane,\n            tag: update.tag,\n            payload: update.payload,\n            callback: update.callback,\n            next: null\n          };\n\n          if (newLast === null) {\n            newFirst = newLast = clone;\n          } else {\n            newLast.next = clone;\n            newLast = clone;\n          }\n\n          update = update.next;\n        } while (update !== null); // Append the captured update the end of the cloned list.\n\n\n        if (newLast === null) {\n          newFirst = newLast = capturedUpdate;\n        } else {\n          newLast.next = capturedUpdate;\n          newLast = capturedUpdate;\n        }\n      } else {\n        // There are no base updates.\n        newFirst = newLast = capturedUpdate;\n      }\n\n      queue = {\n        baseState: currentQueue.baseState,\n        firstBaseUpdate: newFirst,\n        lastBaseUpdate: newLast,\n        shared: currentQueue.shared,\n        effects: currentQueue.effects\n      };\n      workInProgress.updateQueue = queue;\n      return;\n    }\n  } // Append the update to the end of the list.\n\n\n  var lastBaseUpdate = queue.lastBaseUpdate;\n\n  if (lastBaseUpdate === null) {\n    queue.firstBaseUpdate = capturedUpdate;\n  } else {\n    lastBaseUpdate.next = capturedUpdate;\n  }\n\n  queue.lastBaseUpdate = capturedUpdate;\n}\n\nfunction getStateFromUpdate(workInProgress, queue, update, prevState, nextProps, instance) {\n  switch (update.tag) {\n    case ReplaceState:\n      {\n        var payload = update.payload;\n\n        if (typeof payload === 'function') {\n          // Updater function\n          {\n            enterDisallowedContextReadInDEV();\n          }\n\n          var nextState = payload.call(instance, prevState, nextProps);\n\n          {\n            if ( workInProgress.mode & StrictMode) {\n              disableLogs();\n\n              try {\n                payload.call(instance, prevState, nextProps);\n              } finally {\n                reenableLogs();\n              }\n            }\n\n            exitDisallowedContextReadInDEV();\n          }\n\n          return nextState;\n        } // State object\n\n\n        return payload;\n      }\n\n    case CaptureUpdate:\n      {\n        workInProgress.flags = workInProgress.flags & ~ShouldCapture | DidCapture;\n      }\n    // Intentional fallthrough\n\n    case UpdateState:\n      {\n        var _payload = update.payload;\n        var partialState;\n\n        if (typeof _payload === 'function') {\n          // Updater function\n          {\n            enterDisallowedContextReadInDEV();\n          }\n\n          partialState = _payload.call(instance, prevState, nextProps);\n\n          {\n            if ( workInProgress.mode & StrictMode) {\n              disableLogs();\n\n              try {\n                _payload.call(instance, prevState, nextProps);\n              } finally {\n                reenableLogs();\n              }\n            }\n\n            exitDisallowedContextReadInDEV();\n          }\n        } else {\n          // Partial state object\n          partialState = _payload;\n        }\n\n        if (partialState === null || partialState === undefined) {\n          // Null and undefined are treated as no-ops.\n          return prevState;\n        } // Merge the partial state and the previous state.\n\n\n        return _assign({}, prevState, partialState);\n      }\n\n    case ForceUpdate:\n      {\n        hasForceUpdate = true;\n        return prevState;\n      }\n  }\n\n  return prevState;\n}\n\nfunction processUpdateQueue(workInProgress, props, instance, renderLanes) {\n  // This is always non-null on a ClassComponent or HostRoot\n  var queue = workInProgress.updateQueue;\n  hasForceUpdate = false;\n\n  {\n    currentlyProcessingQueue = queue.shared;\n  }\n\n  var firstBaseUpdate = queue.firstBaseUpdate;\n  var lastBaseUpdate = queue.lastBaseUpdate; // Check if there are pending updates. If so, transfer them to the base queue.\n\n  var pendingQueue = queue.shared.pending;\n\n  if (pendingQueue !== null) {\n    queue.shared.pending = null; // The pending queue is circular. Disconnect the pointer between first\n    // and last so that it's non-circular.\n\n    var lastPendingUpdate = pendingQueue;\n    var firstPendingUpdate = lastPendingUpdate.next;\n    lastPendingUpdate.next = null; // Append pending updates to base queue\n\n    if (lastBaseUpdate === null) {\n      firstBaseUpdate = firstPendingUpdate;\n    } else {\n      lastBaseUpdate.next = firstPendingUpdate;\n    }\n\n    lastBaseUpdate = lastPendingUpdate; // If there's a current queue, and it's different from the base queue, then\n    // we need to transfer the updates to that queue, too. Because the base\n    // queue is a singly-linked list with no cycles, we can append to both\n    // lists and take advantage of structural sharing.\n    // TODO: Pass `current` as argument\n\n    var current = workInProgress.alternate;\n\n    if (current !== null) {\n      // This is always non-null on a ClassComponent or HostRoot\n      var currentQueue = current.updateQueue;\n      var currentLastBaseUpdate = currentQueue.lastBaseUpdate;\n\n      if (currentLastBaseUpdate !== lastBaseUpdate) {\n        if (currentLastBaseUpdate === null) {\n          currentQueue.firstBaseUpdate = firstPendingUpdate;\n        } else {\n          currentLastBaseUpdate.next = firstPendingUpdate;\n        }\n\n        currentQueue.lastBaseUpdate = lastPendingUpdate;\n      }\n    }\n  } // These values may change as we process the queue.\n\n\n  if (firstBaseUpdate !== null) {\n    // Iterate through the list of updates to compute the result.\n    var newState = queue.baseState; // TODO: Don't need to accumulate this. Instead, we can remove renderLanes\n    // from the original lanes.\n\n    var newLanes = NoLanes;\n    var newBaseState = null;\n    var newFirstBaseUpdate = null;\n    var newLastBaseUpdate = null;\n    var update = firstBaseUpdate;\n\n    do {\n      var updateLane = update.lane;\n      var updateEventTime = update.eventTime;\n\n      if (!isSubsetOfLanes(renderLanes, updateLane)) {\n        // Priority is insufficient. Skip this update. If this is the first\n        // skipped update, the previous update/state is the new base\n        // update/state.\n        var clone = {\n          eventTime: updateEventTime,\n          lane: updateLane,\n          tag: update.tag,\n          payload: update.payload,\n          callback: update.callback,\n          next: null\n        };\n\n        if (newLastBaseUpdate === null) {\n          newFirstBaseUpdate = newLastBaseUpdate = clone;\n          newBaseState = newState;\n        } else {\n          newLastBaseUpdate = newLastBaseUpdate.next = clone;\n        } // Update the remaining priority in the queue.\n\n\n        newLanes = mergeLanes(newLanes, updateLane);\n      } else {\n        // This update does have sufficient priority.\n        if (newLastBaseUpdate !== null) {\n          var _clone = {\n            eventTime: updateEventTime,\n            // This update is going to be committed so we never want uncommit\n            // it. Using NoLane works because 0 is a subset of all bitmasks, so\n            // this will never be skipped by the check above.\n            lane: NoLane,\n            tag: update.tag,\n            payload: update.payload,\n            callback: update.callback,\n            next: null\n          };\n          newLastBaseUpdate = newLastBaseUpdate.next = _clone;\n        } // Process this update.\n\n\n        newState = getStateFromUpdate(workInProgress, queue, update, newState, props, instance);\n        var callback = update.callback;\n\n        if (callback !== null) {\n          workInProgress.flags |= Callback;\n          var effects = queue.effects;\n\n          if (effects === null) {\n            queue.effects = [update];\n          } else {\n            effects.push(update);\n          }\n        }\n      }\n\n      update = update.next;\n\n      if (update === null) {\n        pendingQueue = queue.shared.pending;\n\n        if (pendingQueue === null) {\n          break;\n        } else {\n          // An update was scheduled from inside a reducer. Add the new\n          // pending updates to the end of the list and keep processing.\n          var _lastPendingUpdate = pendingQueue; // Intentionally unsound. Pending updates form a circular list, but we\n          // unravel them when transferring them to the base queue.\n\n          var _firstPendingUpdate = _lastPendingUpdate.next;\n          _lastPendingUpdate.next = null;\n          update = _firstPendingUpdate;\n          queue.lastBaseUpdate = _lastPendingUpdate;\n          queue.shared.pending = null;\n        }\n      }\n    } while (true);\n\n    if (newLastBaseUpdate === null) {\n      newBaseState = newState;\n    }\n\n    queue.baseState = newBaseState;\n    queue.firstBaseUpdate = newFirstBaseUpdate;\n    queue.lastBaseUpdate = newLastBaseUpdate; // Set the remaining expiration time to be whatever is remaining in the queue.\n    // This should be fine because the only two other things that contribute to\n    // expiration time are props and context. We're already in the middle of the\n    // begin phase by the time we start processing the queue, so we've already\n    // dealt with the props. Context in components that specify\n    // shouldComponentUpdate is tricky; but we'll have to account for\n    // that regardless.\n\n    markSkippedUpdateLanes(newLanes);\n    workInProgress.lanes = newLanes;\n    workInProgress.memoizedState = newState;\n  }\n\n  {\n    currentlyProcessingQueue = null;\n  }\n}\n\nfunction callCallback(callback, context) {\n  if (!(typeof callback === 'function')) {\n    {\n      throw Error( \"Invalid argument passed as callback. Expected a function. Instead received: \" + callback );\n    }\n  }\n\n  callback.call(context);\n}\n\nfunction resetHasForceUpdateBeforeProcessing() {\n  hasForceUpdate = false;\n}\nfunction checkHasForceUpdateAfterProcessing() {\n  return hasForceUpdate;\n}\nfunction commitUpdateQueue(finishedWork, finishedQueue, instance) {\n  // Commit the effects\n  var effects = finishedQueue.effects;\n  finishedQueue.effects = null;\n\n  if (effects !== null) {\n    for (var i = 0; i < effects.length; i++) {\n      var effect = effects[i];\n      var callback = effect.callback;\n\n      if (callback !== null) {\n        effect.callback = null;\n        callCallback(callback, instance);\n      }\n    }\n  }\n}\n\nvar fakeInternalInstance = {};\nvar isArray = Array.isArray; // React.Component uses a shared frozen object by default.\n// We'll use it to determine whether we need to initialize legacy refs.\n\nvar emptyRefsObject = new React.Component().refs;\nvar didWarnAboutStateAssignmentForComponent;\nvar didWarnAboutUninitializedState;\nvar didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;\nvar didWarnAboutLegacyLifecyclesAndDerivedState;\nvar didWarnAboutUndefinedDerivedState;\nvar warnOnUndefinedDerivedState;\nvar warnOnInvalidCallback;\nvar didWarnAboutDirectlyAssigningPropsToState;\nvar didWarnAboutContextTypeAndContextTypes;\nvar didWarnAboutInvalidateContextType;\n\n{\n  didWarnAboutStateAssignmentForComponent = new Set();\n  didWarnAboutUninitializedState = new Set();\n  didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();\n  didWarnAboutLegacyLifecyclesAndDerivedState = new Set();\n  didWarnAboutDirectlyAssigningPropsToState = new Set();\n  didWarnAboutUndefinedDerivedState = new Set();\n  didWarnAboutContextTypeAndContextTypes = new Set();\n  didWarnAboutInvalidateContextType = new Set();\n  var didWarnOnInvalidCallback = new Set();\n\n  warnOnInvalidCallback = function (callback, callerName) {\n    if (callback === null || typeof callback === 'function') {\n      return;\n    }\n\n    var key = callerName + '_' + callback;\n\n    if (!didWarnOnInvalidCallback.has(key)) {\n      didWarnOnInvalidCallback.add(key);\n\n      error('%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, callback);\n    }\n  };\n\n  warnOnUndefinedDerivedState = function (type, partialState) {\n    if (partialState === undefined) {\n      var componentName = getComponentName(type) || 'Component';\n\n      if (!didWarnAboutUndefinedDerivedState.has(componentName)) {\n        didWarnAboutUndefinedDerivedState.add(componentName);\n\n        error('%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. ' + 'You have returned undefined.', componentName);\n      }\n    }\n  }; // This is so gross but it's at least non-critical and can be removed if\n  // it causes problems. This is meant to give a nicer error message for\n  // ReactDOM15.unstable_renderSubtreeIntoContainer(reactDOM16Component,\n  // ...)) which otherwise throws a \"_processChildContext is not a function\"\n  // exception.\n\n\n  Object.defineProperty(fakeInternalInstance, '_processChildContext', {\n    enumerable: false,\n    value: function () {\n      {\n        {\n          throw Error( \"_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).\" );\n        }\n      }\n    }\n  });\n  Object.freeze(fakeInternalInstance);\n}\n\nfunction applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, nextProps) {\n  var prevState = workInProgress.memoizedState;\n\n  {\n    if ( workInProgress.mode & StrictMode) {\n      disableLogs();\n\n      try {\n        // Invoke the function an extra time to help detect side-effects.\n        getDerivedStateFromProps(nextProps, prevState);\n      } finally {\n        reenableLogs();\n      }\n    }\n  }\n\n  var partialState = getDerivedStateFromProps(nextProps, prevState);\n\n  {\n    warnOnUndefinedDerivedState(ctor, partialState);\n  } // Merge the partial state and the previous state.\n\n\n  var memoizedState = partialState === null || partialState === undefined ? prevState : _assign({}, prevState, partialState);\n  workInProgress.memoizedState = memoizedState; // Once the update queue is empty, persist the derived state onto the\n  // base state.\n\n  if (workInProgress.lanes === NoLanes) {\n    // Queue is always non-null for classes\n    var updateQueue = workInProgress.updateQueue;\n    updateQueue.baseState = memoizedState;\n  }\n}\nvar classComponentUpdater = {\n  isMounted: isMounted,\n  enqueueSetState: function (inst, payload, callback) {\n    var fiber = get(inst);\n    var eventTime = requestEventTime();\n    var lane = requestUpdateLane(fiber);\n    var update = createUpdate(eventTime, lane);\n    update.payload = payload;\n\n    if (callback !== undefined && callback !== null) {\n      {\n        warnOnInvalidCallback(callback, 'setState');\n      }\n\n      update.callback = callback;\n    }\n\n    enqueueUpdate(fiber, update);\n    scheduleUpdateOnFiber(fiber, lane, eventTime);\n  },\n  enqueueReplaceState: function (inst, payload, callback) {\n    var fiber = get(inst);\n    var eventTime = requestEventTime();\n    var lane = requestUpdateLane(fiber);\n    var update = createUpdate(eventTime, lane);\n    update.tag = ReplaceState;\n    update.payload = payload;\n\n    if (callback !== undefined && callback !== null) {\n      {\n        warnOnInvalidCallback(callback, 'replaceState');\n      }\n\n      update.callback = callback;\n    }\n\n    enqueueUpdate(fiber, update);\n    scheduleUpdateOnFiber(fiber, lane, eventTime);\n  },\n  enqueueForceUpdate: function (inst, callback) {\n    var fiber = get(inst);\n    var eventTime = requestEventTime();\n    var lane = requestUpdateLane(fiber);\n    var update = createUpdate(eventTime, lane);\n    update.tag = ForceUpdate;\n\n    if (callback !== undefined && callback !== null) {\n      {\n        warnOnInvalidCallback(callback, 'forceUpdate');\n      }\n\n      update.callback = callback;\n    }\n\n    enqueueUpdate(fiber, update);\n    scheduleUpdateOnFiber(fiber, lane, eventTime);\n  }\n};\n\nfunction checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) {\n  var instance = workInProgress.stateNode;\n\n  if (typeof instance.shouldComponentUpdate === 'function') {\n    {\n      if ( workInProgress.mode & StrictMode) {\n        disableLogs();\n\n        try {\n          // Invoke the function an extra time to help detect side-effects.\n          instance.shouldComponentUpdate(newProps, newState, nextContext);\n        } finally {\n          reenableLogs();\n        }\n      }\n    }\n\n    var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);\n\n    {\n      if (shouldUpdate === undefined) {\n        error('%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', getComponentName(ctor) || 'Component');\n      }\n    }\n\n    return shouldUpdate;\n  }\n\n  if (ctor.prototype && ctor.prototype.isPureReactComponent) {\n    return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);\n  }\n\n  return true;\n}\n\nfunction checkClassInstance(workInProgress, ctor, newProps) {\n  var instance = workInProgress.stateNode;\n\n  {\n    var name = getComponentName(ctor) || 'Component';\n    var renderPresent = instance.render;\n\n    if (!renderPresent) {\n      if (ctor.prototype && typeof ctor.prototype.render === 'function') {\n        error('%s(...): No `render` method found on the returned component ' + 'instance: did you accidentally return an object from the constructor?', name);\n      } else {\n        error('%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', name);\n      }\n    }\n\n    if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {\n      error('getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', name);\n    }\n\n    if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {\n      error('getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', name);\n    }\n\n    if (instance.propTypes) {\n      error('propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', name);\n    }\n\n    if (instance.contextType) {\n      error('contextType was defined as an instance property on %s. Use a static ' + 'property to define contextType instead.', name);\n    }\n\n    {\n      if (instance.contextTypes) {\n        error('contextTypes was defined as an instance property on %s. Use a static ' + 'property to define contextTypes instead.', name);\n      }\n\n      if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {\n        didWarnAboutContextTypeAndContextTypes.add(ctor);\n\n        error('%s declares both contextTypes and contextType static properties. ' + 'The legacy contextTypes property will be ignored.', name);\n      }\n    }\n\n    if (typeof instance.componentShouldUpdate === 'function') {\n      error('%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', name);\n    }\n\n    if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== 'undefined') {\n      error('%s has a method called shouldComponentUpdate(). ' + 'shouldComponentUpdate should not be used when extending React.PureComponent. ' + 'Please extend React.Component if shouldComponentUpdate is used.', getComponentName(ctor) || 'A pure component');\n    }\n\n    if (typeof instance.componentDidUnmount === 'function') {\n      error('%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', name);\n    }\n\n    if (typeof instance.componentDidReceiveProps === 'function') {\n      error('%s has a method called ' + 'componentDidReceiveProps(). But there is no such lifecycle method. ' + 'If you meant to update the state in response to changing props, ' + 'use componentWillReceiveProps(). If you meant to fetch data or ' + 'run side-effects or mutations after React has updated the UI, use componentDidUpdate().', name);\n    }\n\n    if (typeof instance.componentWillRecieveProps === 'function') {\n      error('%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', name);\n    }\n\n    if (typeof instance.UNSAFE_componentWillRecieveProps === 'function') {\n      error('%s has a method called ' + 'UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?', name);\n    }\n\n    var hasMutatedProps = instance.props !== newProps;\n\n    if (instance.props !== undefined && hasMutatedProps) {\n      error('%s(...): When calling super() in `%s`, make sure to pass ' + \"up the same props that your component's constructor was passed.\", name, name);\n    }\n\n    if (instance.defaultProps) {\n      error('Setting defaultProps as an instance property on %s is not supported and will be ignored.' + ' Instead, define defaultProps as a static property on %s.', name, name);\n    }\n\n    if (typeof instance.getSnapshotBeforeUpdate === 'function' && typeof instance.componentDidUpdate !== 'function' && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {\n      didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);\n\n      error('%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). ' + 'This component defines getSnapshotBeforeUpdate() only.', getComponentName(ctor));\n    }\n\n    if (typeof instance.getDerivedStateFromProps === 'function') {\n      error('%s: getDerivedStateFromProps() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name);\n    }\n\n    if (typeof instance.getDerivedStateFromError === 'function') {\n      error('%s: getDerivedStateFromError() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name);\n    }\n\n    if (typeof ctor.getSnapshotBeforeUpdate === 'function') {\n      error('%s: getSnapshotBeforeUpdate() is defined as a static method ' + 'and will be ignored. Instead, declare it as an instance method.', name);\n    }\n\n    var _state = instance.state;\n\n    if (_state && (typeof _state !== 'object' || isArray(_state))) {\n      error('%s.state: must be set to an object or null', name);\n    }\n\n    if (typeof instance.getChildContext === 'function' && typeof ctor.childContextTypes !== 'object') {\n      error('%s.getChildContext(): childContextTypes must be defined in order to ' + 'use getChildContext().', name);\n    }\n  }\n}\n\nfunction adoptClassInstance(workInProgress, instance) {\n  instance.updater = classComponentUpdater;\n  workInProgress.stateNode = instance; // The instance needs access to the fiber so that it can schedule updates\n\n  set(instance, workInProgress);\n\n  {\n    instance._reactInternalInstance = fakeInternalInstance;\n  }\n}\n\nfunction constructClassInstance(workInProgress, ctor, props) {\n  var isLegacyContextConsumer = false;\n  var unmaskedContext = emptyContextObject;\n  var context = emptyContextObject;\n  var contextType = ctor.contextType;\n\n  {\n    if ('contextType' in ctor) {\n      var isValid = // Allow null for conditional declaration\n      contextType === null || contextType !== undefined && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === undefined; // Not a <Context.Consumer>\n\n      if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {\n        didWarnAboutInvalidateContextType.add(ctor);\n        var addendum = '';\n\n        if (contextType === undefined) {\n          addendum = ' However, it is set to undefined. ' + 'This can be caused by a typo or by mixing up named and default imports. ' + 'This can also happen due to a circular dependency, so ' + 'try moving the createContext() call to a separate file.';\n        } else if (typeof contextType !== 'object') {\n          addendum = ' However, it is set to a ' + typeof contextType + '.';\n        } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {\n          addendum = ' Did you accidentally pass the Context.Provider instead?';\n        } else if (contextType._context !== undefined) {\n          // <Context.Consumer>\n          addendum = ' Did you accidentally pass the Context.Consumer instead?';\n        } else {\n          addendum = ' However, it is set to an object with keys {' + Object.keys(contextType).join(', ') + '}.';\n        }\n\n        error('%s defines an invalid contextType. ' + 'contextType should point to the Context object returned by React.createContext().%s', getComponentName(ctor) || 'Component', addendum);\n      }\n    }\n  }\n\n  if (typeof contextType === 'object' && contextType !== null) {\n    context = readContext(contextType);\n  } else {\n    unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);\n    var contextTypes = ctor.contextTypes;\n    isLegacyContextConsumer = contextTypes !== null && contextTypes !== undefined;\n    context = isLegacyContextConsumer ? getMaskedContext(workInProgress, unmaskedContext) : emptyContextObject;\n  } // Instantiate twice to help detect side-effects.\n\n\n  {\n    if ( workInProgress.mode & StrictMode) {\n      disableLogs();\n\n      try {\n        new ctor(props, context); // eslint-disable-line no-new\n      } finally {\n        reenableLogs();\n      }\n    }\n  }\n\n  var instance = new ctor(props, context);\n  var state = workInProgress.memoizedState = instance.state !== null && instance.state !== undefined ? instance.state : null;\n  adoptClassInstance(workInProgress, instance);\n\n  {\n    if (typeof ctor.getDerivedStateFromProps === 'function' && state === null) {\n      var componentName = getComponentName(ctor) || 'Component';\n\n      if (!didWarnAboutUninitializedState.has(componentName)) {\n        didWarnAboutUninitializedState.add(componentName);\n\n        error('`%s` uses `getDerivedStateFromProps` but its initial state is ' + '%s. This is not recommended. Instead, define the initial state by ' + 'assigning an object to `this.state` in the constructor of `%s`. ' + 'This ensures that `getDerivedStateFromProps` arguments have a consistent shape.', componentName, instance.state === null ? 'null' : 'undefined', componentName);\n      }\n    } // If new component APIs are defined, \"unsafe\" lifecycles won't be called.\n    // Warn about these lifecycles if they are present.\n    // Don't warn about react-lifecycles-compat polyfilled methods though.\n\n\n    if (typeof ctor.getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function') {\n      var foundWillMountName = null;\n      var foundWillReceivePropsName = null;\n      var foundWillUpdateName = null;\n\n      if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true) {\n        foundWillMountName = 'componentWillMount';\n      } else if (typeof instance.UNSAFE_componentWillMount === 'function') {\n        foundWillMountName = 'UNSAFE_componentWillMount';\n      }\n\n      if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {\n        foundWillReceivePropsName = 'componentWillReceiveProps';\n      } else if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {\n        foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';\n      }\n\n      if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {\n        foundWillUpdateName = 'componentWillUpdate';\n      } else if (typeof instance.UNSAFE_componentWillUpdate === 'function') {\n        foundWillUpdateName = 'UNSAFE_componentWillUpdate';\n      }\n\n      if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {\n        var _componentName = getComponentName(ctor) || 'Component';\n\n        var newApiName = typeof ctor.getDerivedStateFromProps === 'function' ? 'getDerivedStateFromProps()' : 'getSnapshotBeforeUpdate()';\n\n        if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {\n          didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);\n\n          error('Unsafe legacy lifecycles will not be called for components using new component APIs.\\n\\n' + '%s uses %s but also contains the following legacy lifecycles:%s%s%s\\n\\n' + 'The above lifecycles should be removed. Learn more about this warning here:\\n' + 'https://reactjs.org/link/unsafe-component-lifecycles', _componentName, newApiName, foundWillMountName !== null ? \"\\n  \" + foundWillMountName : '', foundWillReceivePropsName !== null ? \"\\n  \" + foundWillReceivePropsName : '', foundWillUpdateName !== null ? \"\\n  \" + foundWillUpdateName : '');\n        }\n      }\n    }\n  } // Cache unmasked context so we can avoid recreating masked context unless necessary.\n  // ReactFiberContext usually updates this cache but can't for newly-created instances.\n\n\n  if (isLegacyContextConsumer) {\n    cacheContext(workInProgress, unmaskedContext, context);\n  }\n\n  return instance;\n}\n\nfunction callComponentWillMount(workInProgress, instance) {\n  var oldState = instance.state;\n\n  if (typeof instance.componentWillMount === 'function') {\n    instance.componentWillMount();\n  }\n\n  if (typeof instance.UNSAFE_componentWillMount === 'function') {\n    instance.UNSAFE_componentWillMount();\n  }\n\n  if (oldState !== instance.state) {\n    {\n      error('%s.componentWillMount(): Assigning directly to this.state is ' + \"deprecated (except inside a component's \" + 'constructor). Use setState instead.', getComponentName(workInProgress.type) || 'Component');\n    }\n\n    classComponentUpdater.enqueueReplaceState(instance, instance.state, null);\n  }\n}\n\nfunction callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext) {\n  var oldState = instance.state;\n\n  if (typeof instance.componentWillReceiveProps === 'function') {\n    instance.componentWillReceiveProps(newProps, nextContext);\n  }\n\n  if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {\n    instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);\n  }\n\n  if (instance.state !== oldState) {\n    {\n      var componentName = getComponentName(workInProgress.type) || 'Component';\n\n      if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {\n        didWarnAboutStateAssignmentForComponent.add(componentName);\n\n        error('%s.componentWillReceiveProps(): Assigning directly to ' + \"this.state is deprecated (except inside a component's \" + 'constructor). Use setState instead.', componentName);\n      }\n    }\n\n    classComponentUpdater.enqueueReplaceState(instance, instance.state, null);\n  }\n} // Invokes the mount life-cycles on a previously never rendered instance.\n\n\nfunction mountClassInstance(workInProgress, ctor, newProps, renderLanes) {\n  {\n    checkClassInstance(workInProgress, ctor, newProps);\n  }\n\n  var instance = workInProgress.stateNode;\n  instance.props = newProps;\n  instance.state = workInProgress.memoizedState;\n  instance.refs = emptyRefsObject;\n  initializeUpdateQueue(workInProgress);\n  var contextType = ctor.contextType;\n\n  if (typeof contextType === 'object' && contextType !== null) {\n    instance.context = readContext(contextType);\n  } else {\n    var unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);\n    instance.context = getMaskedContext(workInProgress, unmaskedContext);\n  }\n\n  {\n    if (instance.state === newProps) {\n      var componentName = getComponentName(ctor) || 'Component';\n\n      if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {\n        didWarnAboutDirectlyAssigningPropsToState.add(componentName);\n\n        error('%s: It is not recommended to assign props directly to state ' + \"because updates to props won't be reflected in state. \" + 'In most cases, it is better to use props directly.', componentName);\n      }\n    }\n\n    if (workInProgress.mode & StrictMode) {\n      ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, instance);\n    }\n\n    {\n      ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress, instance);\n    }\n  }\n\n  processUpdateQueue(workInProgress, newProps, instance, renderLanes);\n  instance.state = workInProgress.memoizedState;\n  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;\n\n  if (typeof getDerivedStateFromProps === 'function') {\n    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);\n    instance.state = workInProgress.memoizedState;\n  } // In order to support react-lifecycles-compat polyfilled components,\n  // Unsafe lifecycles should not be invoked for components using the new APIs.\n\n\n  if (typeof ctor.getDerivedStateFromProps !== 'function' && typeof instance.getSnapshotBeforeUpdate !== 'function' && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {\n    callComponentWillMount(workInProgress, instance); // If we had additional state updates during this life-cycle, let's\n    // process them now.\n\n    processUpdateQueue(workInProgress, newProps, instance, renderLanes);\n    instance.state = workInProgress.memoizedState;\n  }\n\n  if (typeof instance.componentDidMount === 'function') {\n    workInProgress.flags |= Update;\n  }\n}\n\nfunction resumeMountClassInstance(workInProgress, ctor, newProps, renderLanes) {\n  var instance = workInProgress.stateNode;\n  var oldProps = workInProgress.memoizedProps;\n  instance.props = oldProps;\n  var oldContext = instance.context;\n  var contextType = ctor.contextType;\n  var nextContext = emptyContextObject;\n\n  if (typeof contextType === 'object' && contextType !== null) {\n    nextContext = readContext(contextType);\n  } else {\n    var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);\n    nextContext = getMaskedContext(workInProgress, nextLegacyUnmaskedContext);\n  }\n\n  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;\n  var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what\n  // ever the previously attempted to render - not the \"current\". However,\n  // during componentDidUpdate we pass the \"current\" props.\n  // In order to support react-lifecycles-compat polyfilled components,\n  // Unsafe lifecycles should not be invoked for components using the new APIs.\n\n  if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {\n    if (oldProps !== newProps || oldContext !== nextContext) {\n      callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);\n    }\n  }\n\n  resetHasForceUpdateBeforeProcessing();\n  var oldState = workInProgress.memoizedState;\n  var newState = instance.state = oldState;\n  processUpdateQueue(workInProgress, newProps, instance, renderLanes);\n  newState = workInProgress.memoizedState;\n\n  if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {\n    // If an update was already in progress, we should schedule an Update\n    // effect even though we're bailing out, so that cWU/cDU are called.\n    if (typeof instance.componentDidMount === 'function') {\n      workInProgress.flags |= Update;\n    }\n\n    return false;\n  }\n\n  if (typeof getDerivedStateFromProps === 'function') {\n    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);\n    newState = workInProgress.memoizedState;\n  }\n\n  var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);\n\n  if (shouldUpdate) {\n    // In order to support react-lifecycles-compat polyfilled components,\n    // Unsafe lifecycles should not be invoked for components using the new APIs.\n    if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {\n      if (typeof instance.componentWillMount === 'function') {\n        instance.componentWillMount();\n      }\n\n      if (typeof instance.UNSAFE_componentWillMount === 'function') {\n        instance.UNSAFE_componentWillMount();\n      }\n    }\n\n    if (typeof instance.componentDidMount === 'function') {\n      workInProgress.flags |= Update;\n    }\n  } else {\n    // If an update was already in progress, we should schedule an Update\n    // effect even though we're bailing out, so that cWU/cDU are called.\n    if (typeof instance.componentDidMount === 'function') {\n      workInProgress.flags |= Update;\n    } // If shouldComponentUpdate returned false, we should still update the\n    // memoized state to indicate that this work can be reused.\n\n\n    workInProgress.memoizedProps = newProps;\n    workInProgress.memoizedState = newState;\n  } // Update the existing instance's state, props, and context pointers even\n  // if shouldComponentUpdate returns false.\n\n\n  instance.props = newProps;\n  instance.state = newState;\n  instance.context = nextContext;\n  return shouldUpdate;\n} // Invokes the update life-cycles and returns false if it shouldn't rerender.\n\n\nfunction updateClassInstance(current, workInProgress, ctor, newProps, renderLanes) {\n  var instance = workInProgress.stateNode;\n  cloneUpdateQueue(current, workInProgress);\n  var unresolvedOldProps = workInProgress.memoizedProps;\n  var oldProps = workInProgress.type === workInProgress.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress.type, unresolvedOldProps);\n  instance.props = oldProps;\n  var unresolvedNewProps = workInProgress.pendingProps;\n  var oldContext = instance.context;\n  var contextType = ctor.contextType;\n  var nextContext = emptyContextObject;\n\n  if (typeof contextType === 'object' && contextType !== null) {\n    nextContext = readContext(contextType);\n  } else {\n    var nextUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);\n    nextContext = getMaskedContext(workInProgress, nextUnmaskedContext);\n  }\n\n  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;\n  var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what\n  // ever the previously attempted to render - not the \"current\". However,\n  // during componentDidUpdate we pass the \"current\" props.\n  // In order to support react-lifecycles-compat polyfilled components,\n  // Unsafe lifecycles should not be invoked for components using the new APIs.\n\n  if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {\n    if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {\n      callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);\n    }\n  }\n\n  resetHasForceUpdateBeforeProcessing();\n  var oldState = workInProgress.memoizedState;\n  var newState = instance.state = oldState;\n  processUpdateQueue(workInProgress, newProps, instance, renderLanes);\n  newState = workInProgress.memoizedState;\n\n  if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {\n    // If an update was already in progress, we should schedule an Update\n    // effect even though we're bailing out, so that cWU/cDU are called.\n    if (typeof instance.componentDidUpdate === 'function') {\n      if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {\n        workInProgress.flags |= Update;\n      }\n    }\n\n    if (typeof instance.getSnapshotBeforeUpdate === 'function') {\n      if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {\n        workInProgress.flags |= Snapshot;\n      }\n    }\n\n    return false;\n  }\n\n  if (typeof getDerivedStateFromProps === 'function') {\n    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);\n    newState = workInProgress.memoizedState;\n  }\n\n  var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);\n\n  if (shouldUpdate) {\n    // In order to support react-lifecycles-compat polyfilled components,\n    // Unsafe lifecycles should not be invoked for components using the new APIs.\n    if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === 'function' || typeof instance.componentWillUpdate === 'function')) {\n      if (typeof instance.componentWillUpdate === 'function') {\n        instance.componentWillUpdate(newProps, newState, nextContext);\n      }\n\n      if (typeof instance.UNSAFE_componentWillUpdate === 'function') {\n        instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);\n      }\n    }\n\n    if (typeof instance.componentDidUpdate === 'function') {\n      workInProgress.flags |= Update;\n    }\n\n    if (typeof instance.getSnapshotBeforeUpdate === 'function') {\n      workInProgress.flags |= Snapshot;\n    }\n  } else {\n    // If an update was already in progress, we should schedule an Update\n    // effect even though we're bailing out, so that cWU/cDU are called.\n    if (typeof instance.componentDidUpdate === 'function') {\n      if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {\n        workInProgress.flags |= Update;\n      }\n    }\n\n    if (typeof instance.getSnapshotBeforeUpdate === 'function') {\n      if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {\n        workInProgress.flags |= Snapshot;\n      }\n    } // If shouldComponentUpdate returned false, we should still update the\n    // memoized props/state to indicate that this work can be reused.\n\n\n    workInProgress.memoizedProps = newProps;\n    workInProgress.memoizedState = newState;\n  } // Update the existing instance's state, props, and context pointers even\n  // if shouldComponentUpdate returns false.\n\n\n  instance.props = newProps;\n  instance.state = newState;\n  instance.context = nextContext;\n  return shouldUpdate;\n}\n\nvar didWarnAboutMaps;\nvar didWarnAboutGenerators;\nvar didWarnAboutStringRefs;\nvar ownerHasKeyUseWarning;\nvar ownerHasFunctionTypeWarning;\n\nvar warnForMissingKey = function (child, returnFiber) {};\n\n{\n  didWarnAboutMaps = false;\n  didWarnAboutGenerators = false;\n  didWarnAboutStringRefs = {};\n  /**\n   * Warn if there's no key explicitly set on dynamic arrays of children or\n   * object keys are not valid. This allows us to keep track of children between\n   * updates.\n   */\n\n  ownerHasKeyUseWarning = {};\n  ownerHasFunctionTypeWarning = {};\n\n  warnForMissingKey = function (child, returnFiber) {\n    if (child === null || typeof child !== 'object') {\n      return;\n    }\n\n    if (!child._store || child._store.validated || child.key != null) {\n      return;\n    }\n\n    if (!(typeof child._store === 'object')) {\n      {\n        throw Error( \"React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.\" );\n      }\n    }\n\n    child._store.validated = true;\n    var componentName = getComponentName(returnFiber.type) || 'Component';\n\n    if (ownerHasKeyUseWarning[componentName]) {\n      return;\n    }\n\n    ownerHasKeyUseWarning[componentName] = true;\n\n    error('Each child in a list should have a unique ' + '\"key\" prop. See https://reactjs.org/link/warning-keys for ' + 'more information.');\n  };\n}\n\nvar isArray$1 = Array.isArray;\n\nfunction coerceRef(returnFiber, current, element) {\n  var mixedRef = element.ref;\n\n  if (mixedRef !== null && typeof mixedRef !== 'function' && typeof mixedRef !== 'object') {\n    {\n      // TODO: Clean this up once we turn on the string ref warning for\n      // everyone, because the strict mode case will no longer be relevant\n      if ((returnFiber.mode & StrictMode || warnAboutStringRefs) && // We warn in ReactElement.js if owner and self are equal for string refs\n      // because these cannot be automatically converted to an arrow function\n      // using a codemod. Therefore, we don't have to warn about string refs again.\n      !(element._owner && element._self && element._owner.stateNode !== element._self)) {\n        var componentName = getComponentName(returnFiber.type) || 'Component';\n\n        if (!didWarnAboutStringRefs[componentName]) {\n          {\n            error('A string ref, \"%s\", has been found within a strict mode tree. ' + 'String refs are a source of potential bugs and should be avoided. ' + 'We recommend using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', mixedRef);\n          }\n\n          didWarnAboutStringRefs[componentName] = true;\n        }\n      }\n    }\n\n    if (element._owner) {\n      var owner = element._owner;\n      var inst;\n\n      if (owner) {\n        var ownerFiber = owner;\n\n        if (!(ownerFiber.tag === ClassComponent)) {\n          {\n            throw Error( \"Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref\" );\n          }\n        }\n\n        inst = ownerFiber.stateNode;\n      }\n\n      if (!inst) {\n        {\n          throw Error( \"Missing owner for string ref \" + mixedRef + \". This error is likely caused by a bug in React. Please file an issue.\" );\n        }\n      }\n\n      var stringRef = '' + mixedRef; // Check if previous string ref matches new string ref\n\n      if (current !== null && current.ref !== null && typeof current.ref === 'function' && current.ref._stringRef === stringRef) {\n        return current.ref;\n      }\n\n      var ref = function (value) {\n        var refs = inst.refs;\n\n        if (refs === emptyRefsObject) {\n          // This is a lazy pooled frozen object, so we need to initialize.\n          refs = inst.refs = {};\n        }\n\n        if (value === null) {\n          delete refs[stringRef];\n        } else {\n          refs[stringRef] = value;\n        }\n      };\n\n      ref._stringRef = stringRef;\n      return ref;\n    } else {\n      if (!(typeof mixedRef === 'string')) {\n        {\n          throw Error( \"Expected ref to be a function, a string, an object returned by React.createRef(), or null.\" );\n        }\n      }\n\n      if (!element._owner) {\n        {\n          throw Error( \"Element ref was specified as a string (\" + mixedRef + \") but no owner was set. This could happen for one of the following reasons:\\n1. You may be adding a ref to a function component\\n2. You may be adding a ref to a component that was not created inside a component's render method\\n3. You have multiple copies of React loaded\\nSee https://reactjs.org/link/refs-must-have-owner for more information.\" );\n        }\n      }\n    }\n  }\n\n  return mixedRef;\n}\n\nfunction throwOnInvalidObjectType(returnFiber, newChild) {\n  if (returnFiber.type !== 'textarea') {\n    {\n      {\n        throw Error( \"Objects are not valid as a React child (found: \" + (Object.prototype.toString.call(newChild) === '[object Object]' ? 'object with keys {' + Object.keys(newChild).join(', ') + '}' : newChild) + \"). If you meant to render a collection of children, use an array instead.\" );\n      }\n    }\n  }\n}\n\nfunction warnOnFunctionType(returnFiber) {\n  {\n    var componentName = getComponentName(returnFiber.type) || 'Component';\n\n    if (ownerHasFunctionTypeWarning[componentName]) {\n      return;\n    }\n\n    ownerHasFunctionTypeWarning[componentName] = true;\n\n    error('Functions are not valid as a React child. This may happen if ' + 'you return a Component instead of <Component /> from render. ' + 'Or maybe you meant to call this function rather than return it.');\n  }\n} // We avoid inlining this to avoid potential deopts from using try/catch.\n// to be able to optimize each path individually by branching early. This needs\n// a compiler or we can do it manually. Helpers that don't need this branching\n// live outside of this function.\n\n\nfunction ChildReconciler(shouldTrackSideEffects) {\n  function deleteChild(returnFiber, childToDelete) {\n    if (!shouldTrackSideEffects) {\n      // Noop.\n      return;\n    } // Deletions are added in reversed order so we add it to the front.\n    // At this point, the return fiber's effect list is empty except for\n    // deletions, so we can just append the deletion to the list. The remaining\n    // effects aren't added until the complete phase. Once we implement\n    // resuming, this may not be true.\n\n\n    var last = returnFiber.lastEffect;\n\n    if (last !== null) {\n      last.nextEffect = childToDelete;\n      returnFiber.lastEffect = childToDelete;\n    } else {\n      returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;\n    }\n\n    childToDelete.nextEffect = null;\n    childToDelete.flags = Deletion;\n  }\n\n  function deleteRemainingChildren(returnFiber, currentFirstChild) {\n    if (!shouldTrackSideEffects) {\n      // Noop.\n      return null;\n    } // TODO: For the shouldClone case, this could be micro-optimized a bit by\n    // assuming that after the first child we've already added everything.\n\n\n    var childToDelete = currentFirstChild;\n\n    while (childToDelete !== null) {\n      deleteChild(returnFiber, childToDelete);\n      childToDelete = childToDelete.sibling;\n    }\n\n    return null;\n  }\n\n  function mapRemainingChildren(returnFiber, currentFirstChild) {\n    // Add the remaining children to a temporary map so that we can find them by\n    // keys quickly. Implicit (null) keys get added to this set with their index\n    // instead.\n    var existingChildren = new Map();\n    var existingChild = currentFirstChild;\n\n    while (existingChild !== null) {\n      if (existingChild.key !== null) {\n        existingChildren.set(existingChild.key, existingChild);\n      } else {\n        existingChildren.set(existingChild.index, existingChild);\n      }\n\n      existingChild = existingChild.sibling;\n    }\n\n    return existingChildren;\n  }\n\n  function useFiber(fiber, pendingProps) {\n    // We currently set sibling to null and index to 0 here because it is easy\n    // to forget to do before returning it. E.g. for the single child case.\n    var clone = createWorkInProgress(fiber, pendingProps);\n    clone.index = 0;\n    clone.sibling = null;\n    return clone;\n  }\n\n  function placeChild(newFiber, lastPlacedIndex, newIndex) {\n    newFiber.index = newIndex;\n\n    if (!shouldTrackSideEffects) {\n      // Noop.\n      return lastPlacedIndex;\n    }\n\n    var current = newFiber.alternate;\n\n    if (current !== null) {\n      var oldIndex = current.index;\n\n      if (oldIndex < lastPlacedIndex) {\n        // This is a move.\n        newFiber.flags = Placement;\n        return lastPlacedIndex;\n      } else {\n        // This item can stay in place.\n        return oldIndex;\n      }\n    } else {\n      // This is an insertion.\n      newFiber.flags = Placement;\n      return lastPlacedIndex;\n    }\n  }\n\n  function placeSingleChild(newFiber) {\n    // This is simpler for the single child case. We only need to do a\n    // placement for inserting new children.\n    if (shouldTrackSideEffects && newFiber.alternate === null) {\n      newFiber.flags = Placement;\n    }\n\n    return newFiber;\n  }\n\n  function updateTextNode(returnFiber, current, textContent, lanes) {\n    if (current === null || current.tag !== HostText) {\n      // Insert\n      var created = createFiberFromText(textContent, returnFiber.mode, lanes);\n      created.return = returnFiber;\n      return created;\n    } else {\n      // Update\n      var existing = useFiber(current, textContent);\n      existing.return = returnFiber;\n      return existing;\n    }\n  }\n\n  function updateElement(returnFiber, current, element, lanes) {\n    if (current !== null) {\n      if (current.elementType === element.type || ( // Keep this check inline so it only runs on the false path:\n       isCompatibleFamilyForHotReloading(current, element) )) {\n        // Move based on index\n        var existing = useFiber(current, element.props);\n        existing.ref = coerceRef(returnFiber, current, element);\n        existing.return = returnFiber;\n\n        {\n          existing._debugSource = element._source;\n          existing._debugOwner = element._owner;\n        }\n\n        return existing;\n      }\n    } // Insert\n\n\n    var created = createFiberFromElement(element, returnFiber.mode, lanes);\n    created.ref = coerceRef(returnFiber, current, element);\n    created.return = returnFiber;\n    return created;\n  }\n\n  function updatePortal(returnFiber, current, portal, lanes) {\n    if (current === null || current.tag !== HostPortal || current.stateNode.containerInfo !== portal.containerInfo || current.stateNode.implementation !== portal.implementation) {\n      // Insert\n      var created = createFiberFromPortal(portal, returnFiber.mode, lanes);\n      created.return = returnFiber;\n      return created;\n    } else {\n      // Update\n      var existing = useFiber(current, portal.children || []);\n      existing.return = returnFiber;\n      return existing;\n    }\n  }\n\n  function updateFragment(returnFiber, current, fragment, lanes, key) {\n    if (current === null || current.tag !== Fragment) {\n      // Insert\n      var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);\n      created.return = returnFiber;\n      return created;\n    } else {\n      // Update\n      var existing = useFiber(current, fragment);\n      existing.return = returnFiber;\n      return existing;\n    }\n  }\n\n  function createChild(returnFiber, newChild, lanes) {\n    if (typeof newChild === 'string' || typeof newChild === 'number') {\n      // Text nodes don't have keys. If the previous node is implicitly keyed\n      // we can continue to replace it without aborting even if it is not a text\n      // node.\n      var created = createFiberFromText('' + newChild, returnFiber.mode, lanes);\n      created.return = returnFiber;\n      return created;\n    }\n\n    if (typeof newChild === 'object' && newChild !== null) {\n      switch (newChild.$$typeof) {\n        case REACT_ELEMENT_TYPE:\n          {\n            var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);\n\n            _created.ref = coerceRef(returnFiber, null, newChild);\n            _created.return = returnFiber;\n            return _created;\n          }\n\n        case REACT_PORTAL_TYPE:\n          {\n            var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);\n\n            _created2.return = returnFiber;\n            return _created2;\n          }\n      }\n\n      if (isArray$1(newChild) || getIteratorFn(newChild)) {\n        var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);\n\n        _created3.return = returnFiber;\n        return _created3;\n      }\n\n      throwOnInvalidObjectType(returnFiber, newChild);\n    }\n\n    {\n      if (typeof newChild === 'function') {\n        warnOnFunctionType(returnFiber);\n      }\n    }\n\n    return null;\n  }\n\n  function updateSlot(returnFiber, oldFiber, newChild, lanes) {\n    // Update the fiber if the keys match, otherwise return null.\n    var key = oldFiber !== null ? oldFiber.key : null;\n\n    if (typeof newChild === 'string' || typeof newChild === 'number') {\n      // Text nodes don't have keys. If the previous node is implicitly keyed\n      // we can continue to replace it without aborting even if it is not a text\n      // node.\n      if (key !== null) {\n        return null;\n      }\n\n      return updateTextNode(returnFiber, oldFiber, '' + newChild, lanes);\n    }\n\n    if (typeof newChild === 'object' && newChild !== null) {\n      switch (newChild.$$typeof) {\n        case REACT_ELEMENT_TYPE:\n          {\n            if (newChild.key === key) {\n              if (newChild.type === REACT_FRAGMENT_TYPE) {\n                return updateFragment(returnFiber, oldFiber, newChild.props.children, lanes, key);\n              }\n\n              return updateElement(returnFiber, oldFiber, newChild, lanes);\n            } else {\n              return null;\n            }\n          }\n\n        case REACT_PORTAL_TYPE:\n          {\n            if (newChild.key === key) {\n              return updatePortal(returnFiber, oldFiber, newChild, lanes);\n            } else {\n              return null;\n            }\n          }\n      }\n\n      if (isArray$1(newChild) || getIteratorFn(newChild)) {\n        if (key !== null) {\n          return null;\n        }\n\n        return updateFragment(returnFiber, oldFiber, newChild, lanes, null);\n      }\n\n      throwOnInvalidObjectType(returnFiber, newChild);\n    }\n\n    {\n      if (typeof newChild === 'function') {\n        warnOnFunctionType(returnFiber);\n      }\n    }\n\n    return null;\n  }\n\n  function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {\n    if (typeof newChild === 'string' || typeof newChild === 'number') {\n      // Text nodes don't have keys, so we neither have to check the old nor\n      // new node for the key. If both are text nodes, they match.\n      var matchedFiber = existingChildren.get(newIdx) || null;\n      return updateTextNode(returnFiber, matchedFiber, '' + newChild, lanes);\n    }\n\n    if (typeof newChild === 'object' && newChild !== null) {\n      switch (newChild.$$typeof) {\n        case REACT_ELEMENT_TYPE:\n          {\n            var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;\n\n            if (newChild.type === REACT_FRAGMENT_TYPE) {\n              return updateFragment(returnFiber, _matchedFiber, newChild.props.children, lanes, newChild.key);\n            }\n\n            return updateElement(returnFiber, _matchedFiber, newChild, lanes);\n          }\n\n        case REACT_PORTAL_TYPE:\n          {\n            var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;\n\n            return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);\n          }\n\n      }\n\n      if (isArray$1(newChild) || getIteratorFn(newChild)) {\n        var _matchedFiber3 = existingChildren.get(newIdx) || null;\n\n        return updateFragment(returnFiber, _matchedFiber3, newChild, lanes, null);\n      }\n\n      throwOnInvalidObjectType(returnFiber, newChild);\n    }\n\n    {\n      if (typeof newChild === 'function') {\n        warnOnFunctionType(returnFiber);\n      }\n    }\n\n    return null;\n  }\n  /**\n   * Warns if there is a duplicate or missing key\n   */\n\n\n  function warnOnInvalidKey(child, knownKeys, returnFiber) {\n    {\n      if (typeof child !== 'object' || child === null) {\n        return knownKeys;\n      }\n\n      switch (child.$$typeof) {\n        case REACT_ELEMENT_TYPE:\n        case REACT_PORTAL_TYPE:\n          warnForMissingKey(child, returnFiber);\n          var key = child.key;\n\n          if (typeof key !== 'string') {\n            break;\n          }\n\n          if (knownKeys === null) {\n            knownKeys = new Set();\n            knownKeys.add(key);\n            break;\n          }\n\n          if (!knownKeys.has(key)) {\n            knownKeys.add(key);\n            break;\n          }\n\n          error('Encountered two children with the same key, `%s`. ' + 'Keys should be unique so that components maintain their identity ' + 'across updates. Non-unique keys may cause children to be ' + 'duplicated and/or omitted \u2014 the behavior is unsupported and ' + 'could change in a future version.', key);\n\n          break;\n      }\n    }\n\n    return knownKeys;\n  }\n\n  function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {\n    // This algorithm can't optimize by searching from both ends since we\n    // don't have backpointers on fibers. I'm trying to see how far we can get\n    // with that model. If it ends up not being worth the tradeoffs, we can\n    // add it later.\n    // Even with a two ended optimization, we'd want to optimize for the case\n    // where there are few changes and brute force the comparison instead of\n    // going for the Map. It'd like to explore hitting that path first in\n    // forward-only mode and only go for the Map once we notice that we need\n    // lots of look ahead. This doesn't handle reversal as well as two ended\n    // search but that's unusual. Besides, for the two ended optimization to\n    // work on Iterables, we'd need to copy the whole set.\n    // In this first iteration, we'll just live with hitting the bad case\n    // (adding everything to a Map) in for every insert/move.\n    // If you change this code, also update reconcileChildrenIterator() which\n    // uses the same algorithm.\n    {\n      // First, validate keys.\n      var knownKeys = null;\n\n      for (var i = 0; i < newChildren.length; i++) {\n        var child = newChildren[i];\n        knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);\n      }\n    }\n\n    var resultingFirstChild = null;\n    var previousNewFiber = null;\n    var oldFiber = currentFirstChild;\n    var lastPlacedIndex = 0;\n    var newIdx = 0;\n    var nextOldFiber = null;\n\n    for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {\n      if (oldFiber.index > newIdx) {\n        nextOldFiber = oldFiber;\n        oldFiber = null;\n      } else {\n        nextOldFiber = oldFiber.sibling;\n      }\n\n      var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);\n\n      if (newFiber === null) {\n        // TODO: This breaks on empty slots like null children. That's\n        // unfortunate because it triggers the slow path all the time. We need\n        // a better way to communicate whether this was a miss or null,\n        // boolean, undefined, etc.\n        if (oldFiber === null) {\n          oldFiber = nextOldFiber;\n        }\n\n        break;\n      }\n\n      if (shouldTrackSideEffects) {\n        if (oldFiber && newFiber.alternate === null) {\n          // We matched the slot, but we didn't reuse the existing fiber, so we\n          // need to delete the existing child.\n          deleteChild(returnFiber, oldFiber);\n        }\n      }\n\n      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n\n      if (previousNewFiber === null) {\n        // TODO: Move out of the loop. This only happens for the first run.\n        resultingFirstChild = newFiber;\n      } else {\n        // TODO: Defer siblings if we're not at the right index for this slot.\n        // I.e. if we had null values before, then we want to defer this\n        // for each null value. However, we also don't want to call updateSlot\n        // with the previous one.\n        previousNewFiber.sibling = newFiber;\n      }\n\n      previousNewFiber = newFiber;\n      oldFiber = nextOldFiber;\n    }\n\n    if (newIdx === newChildren.length) {\n      // We've reached the end of the new children. We can delete the rest.\n      deleteRemainingChildren(returnFiber, oldFiber);\n      return resultingFirstChild;\n    }\n\n    if (oldFiber === null) {\n      // If we don't have any more existing children we can choose a fast path\n      // since the rest will all be insertions.\n      for (; newIdx < newChildren.length; newIdx++) {\n        var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);\n\n        if (_newFiber === null) {\n          continue;\n        }\n\n        lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);\n\n        if (previousNewFiber === null) {\n          // TODO: Move out of the loop. This only happens for the first run.\n          resultingFirstChild = _newFiber;\n        } else {\n          previousNewFiber.sibling = _newFiber;\n        }\n\n        previousNewFiber = _newFiber;\n      }\n\n      return resultingFirstChild;\n    } // Add all children to a key map for quick lookups.\n\n\n    var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.\n\n    for (; newIdx < newChildren.length; newIdx++) {\n      var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);\n\n      if (_newFiber2 !== null) {\n        if (shouldTrackSideEffects) {\n          if (_newFiber2.alternate !== null) {\n            // The new fiber is a work in progress, but if there exists a\n            // current, that means that we reused the fiber. We need to delete\n            // it from the child list so that we don't add it to the deletion\n            // list.\n            existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);\n          }\n        }\n\n        lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);\n\n        if (previousNewFiber === null) {\n          resultingFirstChild = _newFiber2;\n        } else {\n          previousNewFiber.sibling = _newFiber2;\n        }\n\n        previousNewFiber = _newFiber2;\n      }\n    }\n\n    if (shouldTrackSideEffects) {\n      // Any existing children that weren't consumed above were deleted. We need\n      // to add them to the deletion list.\n      existingChildren.forEach(function (child) {\n        return deleteChild(returnFiber, child);\n      });\n    }\n\n    return resultingFirstChild;\n  }\n\n  function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {\n    // This is the same implementation as reconcileChildrenArray(),\n    // but using the iterator instead.\n    var iteratorFn = getIteratorFn(newChildrenIterable);\n\n    if (!(typeof iteratorFn === 'function')) {\n      {\n        throw Error( \"An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.\" );\n      }\n    }\n\n    {\n      // We don't support rendering Generators because it's a mutation.\n      // See https://github.com/facebook/react/issues/12995\n      if (typeof Symbol === 'function' && // $FlowFixMe Flow doesn't know about toStringTag\n      newChildrenIterable[Symbol.toStringTag] === 'Generator') {\n        if (!didWarnAboutGenerators) {\n          error('Using Generators as children is unsupported and will likely yield ' + 'unexpected results because enumerating a generator mutates it. ' + 'You may convert it to an array with `Array.from()` or the ' + '`[...spread]` operator before rendering. Keep in mind ' + 'you might need to polyfill these features for older browsers.');\n        }\n\n        didWarnAboutGenerators = true;\n      } // Warn about using Maps as children\n\n\n      if (newChildrenIterable.entries === iteratorFn) {\n        if (!didWarnAboutMaps) {\n          error('Using Maps as children is not supported. ' + 'Use an array of keyed ReactElements instead.');\n        }\n\n        didWarnAboutMaps = true;\n      } // First, validate keys.\n      // We'll get a different iterator later for the main pass.\n\n\n      var _newChildren = iteratorFn.call(newChildrenIterable);\n\n      if (_newChildren) {\n        var knownKeys = null;\n\n        var _step = _newChildren.next();\n\n        for (; !_step.done; _step = _newChildren.next()) {\n          var child = _step.value;\n          knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);\n        }\n      }\n    }\n\n    var newChildren = iteratorFn.call(newChildrenIterable);\n\n    if (!(newChildren != null)) {\n      {\n        throw Error( \"An iterable object provided no iterator.\" );\n      }\n    }\n\n    var resultingFirstChild = null;\n    var previousNewFiber = null;\n    var oldFiber = currentFirstChild;\n    var lastPlacedIndex = 0;\n    var newIdx = 0;\n    var nextOldFiber = null;\n    var step = newChildren.next();\n\n    for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {\n      if (oldFiber.index > newIdx) {\n        nextOldFiber = oldFiber;\n        oldFiber = null;\n      } else {\n        nextOldFiber = oldFiber.sibling;\n      }\n\n      var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);\n\n      if (newFiber === null) {\n        // TODO: This breaks on empty slots like null children. That's\n        // unfortunate because it triggers the slow path all the time. We need\n        // a better way to communicate whether this was a miss or null,\n        // boolean, undefined, etc.\n        if (oldFiber === null) {\n          oldFiber = nextOldFiber;\n        }\n\n        break;\n      }\n\n      if (shouldTrackSideEffects) {\n        if (oldFiber && newFiber.alternate === null) {\n          // We matched the slot, but we didn't reuse the existing fiber, so we\n          // need to delete the existing child.\n          deleteChild(returnFiber, oldFiber);\n        }\n      }\n\n      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n\n      if (previousNewFiber === null) {\n        // TODO: Move out of the loop. This only happens for the first run.\n        resultingFirstChild = newFiber;\n      } else {\n        // TODO: Defer siblings if we're not at the right index for this slot.\n        // I.e. if we had null values before, then we want to defer this\n        // for each null value. However, we also don't want to call updateSlot\n        // with the previous one.\n        previousNewFiber.sibling = newFiber;\n      }\n\n      previousNewFiber = newFiber;\n      oldFiber = nextOldFiber;\n    }\n\n    if (step.done) {\n      // We've reached the end of the new children. We can delete the rest.\n      deleteRemainingChildren(returnFiber, oldFiber);\n      return resultingFirstChild;\n    }\n\n    if (oldFiber === null) {\n      // If we don't have any more existing children we can choose a fast path\n      // since the rest will all be insertions.\n      for (; !step.done; newIdx++, step = newChildren.next()) {\n        var _newFiber3 = createChild(returnFiber, step.value, lanes);\n\n        if (_newFiber3 === null) {\n          continue;\n        }\n\n        lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);\n\n        if (previousNewFiber === null) {\n          // TODO: Move out of the loop. This only happens for the first run.\n          resultingFirstChild = _newFiber3;\n        } else {\n          previousNewFiber.sibling = _newFiber3;\n        }\n\n        previousNewFiber = _newFiber3;\n      }\n\n      return resultingFirstChild;\n    } // Add all children to a key map for quick lookups.\n\n\n    var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.\n\n    for (; !step.done; newIdx++, step = newChildren.next()) {\n      var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);\n\n      if (_newFiber4 !== null) {\n        if (shouldTrackSideEffects) {\n          if (_newFiber4.alternate !== null) {\n            // The new fiber is a work in progress, but if there exists a\n            // current, that means that we reused the fiber. We need to delete\n            // it from the child list so that we don't add it to the deletion\n            // list.\n            existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);\n          }\n        }\n\n        lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);\n\n        if (previousNewFiber === null) {\n          resultingFirstChild = _newFiber4;\n        } else {\n          previousNewFiber.sibling = _newFiber4;\n        }\n\n        previousNewFiber = _newFiber4;\n      }\n    }\n\n    if (shouldTrackSideEffects) {\n      // Any existing children that weren't consumed above were deleted. We need\n      // to add them to the deletion list.\n      existingChildren.forEach(function (child) {\n        return deleteChild(returnFiber, child);\n      });\n    }\n\n    return resultingFirstChild;\n  }\n\n  function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {\n    // There's no need to check for keys on text nodes since we don't have a\n    // way to define them.\n    if (currentFirstChild !== null && currentFirstChild.tag === HostText) {\n      // We already have an existing node so let's just update it and delete\n      // the rest.\n      deleteRemainingChildren(returnFiber, currentFirstChild.sibling);\n      var existing = useFiber(currentFirstChild, textContent);\n      existing.return = returnFiber;\n      return existing;\n    } // The existing first child is not a text node so we need to create one\n    // and delete the existing ones.\n\n\n    deleteRemainingChildren(returnFiber, currentFirstChild);\n    var created = createFiberFromText(textContent, returnFiber.mode, lanes);\n    created.return = returnFiber;\n    return created;\n  }\n\n  function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {\n    var key = element.key;\n    var child = currentFirstChild;\n\n    while (child !== null) {\n      // TODO: If key === null and child.key === null, then this only applies to\n      // the first item in the list.\n      if (child.key === key) {\n        switch (child.tag) {\n          case Fragment:\n            {\n              if (element.type === REACT_FRAGMENT_TYPE) {\n                deleteRemainingChildren(returnFiber, child.sibling);\n                var existing = useFiber(child, element.props.children);\n                existing.return = returnFiber;\n\n                {\n                  existing._debugSource = element._source;\n                  existing._debugOwner = element._owner;\n                }\n\n                return existing;\n              }\n\n              break;\n            }\n\n          case Block:\n\n          // We intentionally fallthrough here if enableBlocksAPI is not on.\n          // eslint-disable-next-lined no-fallthrough\n\n          default:\n            {\n              if (child.elementType === element.type || ( // Keep this check inline so it only runs on the false path:\n               isCompatibleFamilyForHotReloading(child, element) )) {\n                deleteRemainingChildren(returnFiber, child.sibling);\n\n                var _existing3 = useFiber(child, element.props);\n\n                _existing3.ref = coerceRef(returnFiber, child, element);\n                _existing3.return = returnFiber;\n\n                {\n                  _existing3._debugSource = element._source;\n                  _existing3._debugOwner = element._owner;\n                }\n\n                return _existing3;\n              }\n\n              break;\n            }\n        } // Didn't match.\n\n\n        deleteRemainingChildren(returnFiber, child);\n        break;\n      } else {\n        deleteChild(returnFiber, child);\n      }\n\n      child = child.sibling;\n    }\n\n    if (element.type === REACT_FRAGMENT_TYPE) {\n      var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);\n      created.return = returnFiber;\n      return created;\n    } else {\n      var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);\n\n      _created4.ref = coerceRef(returnFiber, currentFirstChild, element);\n      _created4.return = returnFiber;\n      return _created4;\n    }\n  }\n\n  function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {\n    var key = portal.key;\n    var child = currentFirstChild;\n\n    while (child !== null) {\n      // TODO: If key === null and child.key === null, then this only applies to\n      // the first item in the list.\n      if (child.key === key) {\n        if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {\n          deleteRemainingChildren(returnFiber, child.sibling);\n          var existing = useFiber(child, portal.children || []);\n          existing.return = returnFiber;\n          return existing;\n        } else {\n          deleteRemainingChildren(returnFiber, child);\n          break;\n        }\n      } else {\n        deleteChild(returnFiber, child);\n      }\n\n      child = child.sibling;\n    }\n\n    var created = createFiberFromPortal(portal, returnFiber.mode, lanes);\n    created.return = returnFiber;\n    return created;\n  } // This API will tag the children with the side-effect of the reconciliation\n  // itself. They will be added to the side-effect list as we pass through the\n  // children and the parent.\n\n\n  function reconcileChildFibers(returnFiber, currentFirstChild, newChild, lanes) {\n    // This function is not recursive.\n    // If the top level item is an array, we treat it as a set of children,\n    // not as a fragment. Nested arrays on the other hand will be treated as\n    // fragment nodes. Recursion happens at the normal flow.\n    // Handle top level unkeyed fragments as if they were arrays.\n    // This leads to an ambiguity between <>{[...]}</> and <>...</>.\n    // We treat the ambiguous cases above the same.\n    var isUnkeyedTopLevelFragment = typeof newChild === 'object' && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;\n\n    if (isUnkeyedTopLevelFragment) {\n      newChild = newChild.props.children;\n    } // Handle object types\n\n\n    var isObject = typeof newChild === 'object' && newChild !== null;\n\n    if (isObject) {\n      switch (newChild.$$typeof) {\n        case REACT_ELEMENT_TYPE:\n          return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));\n\n        case REACT_PORTAL_TYPE:\n          return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));\n\n      }\n    }\n\n    if (typeof newChild === 'string' || typeof newChild === 'number') {\n      return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, '' + newChild, lanes));\n    }\n\n    if (isArray$1(newChild)) {\n      return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);\n    }\n\n    if (getIteratorFn(newChild)) {\n      return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);\n    }\n\n    if (isObject) {\n      throwOnInvalidObjectType(returnFiber, newChild);\n    }\n\n    {\n      if (typeof newChild === 'function') {\n        warnOnFunctionType(returnFiber);\n      }\n    }\n\n    if (typeof newChild === 'undefined' && !isUnkeyedTopLevelFragment) {\n      // If the new child is undefined, and the return fiber is a composite\n      // component, throw an error. If Fiber return types are disabled,\n      // we already threw above.\n      switch (returnFiber.tag) {\n        case ClassComponent:\n          {\n            {\n              var instance = returnFiber.stateNode;\n\n              if (instance.render._isMockFunction) {\n                // We allow auto-mocks to proceed as if they're returning null.\n                break;\n              }\n            }\n          }\n        // Intentionally fall through to the next case, which handles both\n        // functions and classes\n        // eslint-disable-next-lined no-fallthrough\n\n        case Block:\n        case FunctionComponent:\n        case ForwardRef:\n        case SimpleMemoComponent:\n          {\n            {\n              {\n                throw Error( (getComponentName(returnFiber.type) || 'Component') + \"(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.\" );\n              }\n            }\n          }\n      }\n    } // Remaining cases are all treated as empty.\n\n\n    return deleteRemainingChildren(returnFiber, currentFirstChild);\n  }\n\n  return reconcileChildFibers;\n}\n\nvar reconcileChildFibers = ChildReconciler(true);\nvar mountChildFibers = ChildReconciler(false);\nfunction cloneChildFibers(current, workInProgress) {\n  if (!(current === null || workInProgress.child === current.child)) {\n    {\n      throw Error( \"Resuming work not yet implemented.\" );\n    }\n  }\n\n  if (workInProgress.child === null) {\n    return;\n  }\n\n  var currentChild = workInProgress.child;\n  var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);\n  workInProgress.child = newChild;\n  newChild.return = workInProgress;\n\n  while (currentChild.sibling !== null) {\n    currentChild = currentChild.sibling;\n    newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);\n    newChild.return = workInProgress;\n  }\n\n  newChild.sibling = null;\n} // Reset a workInProgress child set to prepare it for a second pass.\n\nfunction resetChildFibers(workInProgress, lanes) {\n  var child = workInProgress.child;\n\n  while (child !== null) {\n    resetWorkInProgress(child, lanes);\n    child = child.sibling;\n  }\n}\n\nvar NO_CONTEXT = {};\nvar contextStackCursor$1 = createCursor(NO_CONTEXT);\nvar contextFiberStackCursor = createCursor(NO_CONTEXT);\nvar rootInstanceStackCursor = createCursor(NO_CONTEXT);\n\nfunction requiredContext(c) {\n  if (!(c !== NO_CONTEXT)) {\n    {\n      throw Error( \"Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.\" );\n    }\n  }\n\n  return c;\n}\n\nfunction getRootHostContainer() {\n  var rootInstance = requiredContext(rootInstanceStackCursor.current);\n  return rootInstance;\n}\n\nfunction pushHostContainer(fiber, nextRootInstance) {\n  // Push current root instance onto the stack;\n  // This allows us to reset root when portals are popped.\n  push(rootInstanceStackCursor, nextRootInstance, fiber); // Track the context and the Fiber that provided it.\n  // This enables us to pop only Fibers that provide unique contexts.\n\n  push(contextFiberStackCursor, fiber, fiber); // Finally, we need to push the host context to the stack.\n  // However, we can't just call getRootHostContext() and push it because\n  // we'd have a different number of entries on the stack depending on\n  // whether getRootHostContext() throws somewhere in renderer code or not.\n  // So we push an empty value first. This lets us safely unwind on errors.\n\n  push(contextStackCursor$1, NO_CONTEXT, fiber);\n  var nextRootContext = getRootHostContext(nextRootInstance); // Now that we know this function doesn't throw, replace it.\n\n  pop(contextStackCursor$1, fiber);\n  push(contextStackCursor$1, nextRootContext, fiber);\n}\n\nfunction popHostContainer(fiber) {\n  pop(contextStackCursor$1, fiber);\n  pop(contextFiberStackCursor, fiber);\n  pop(rootInstanceStackCursor, fiber);\n}\n\nfunction getHostContext() {\n  var context = requiredContext(contextStackCursor$1.current);\n  return context;\n}\n\nfunction pushHostContext(fiber) {\n  var rootInstance = requiredContext(rootInstanceStackCursor.current);\n  var context = requiredContext(contextStackCursor$1.current);\n  var nextContext = getChildHostContext(context, fiber.type, rootInstance); // Don't push this Fiber's context unless it's unique.\n\n  if (context === nextContext) {\n    return;\n  } // Track the context and the Fiber that provided it.\n  // This enables us to pop only Fibers that provide unique contexts.\n\n\n  push(contextFiberStackCursor, fiber, fiber);\n  push(contextStackCursor$1, nextContext, fiber);\n}\n\nfunction popHostContext(fiber) {\n  // Do not pop unless this Fiber provided the current context.\n  // pushHostContext() only pushes Fibers that provide unique contexts.\n  if (contextFiberStackCursor.current !== fiber) {\n    return;\n  }\n\n  pop(contextStackCursor$1, fiber);\n  pop(contextFiberStackCursor, fiber);\n}\n\nvar DefaultSuspenseContext = 0; // The Suspense Context is split into two parts. The lower bits is\n// inherited deeply down the subtree. The upper bits only affect\n// this immediate suspense boundary and gets reset each new\n// boundary or suspense list.\n\nvar SubtreeSuspenseContextMask = 1; // Subtree Flags:\n// InvisibleParentSuspenseContext indicates that one of our parent Suspense\n// boundaries is not currently showing visible main content.\n// Either because it is already showing a fallback or is not mounted at all.\n// We can use this to determine if it is desirable to trigger a fallback at\n// the parent. If not, then we might need to trigger undesirable boundaries\n// and/or suspend the commit to avoid hiding the parent content.\n\nvar InvisibleParentSuspenseContext = 1; // Shallow Flags:\n// ForceSuspenseFallback can be used by SuspenseList to force newly added\n// items into their fallback state during one of the render passes.\n\nvar ForceSuspenseFallback = 2;\nvar suspenseStackCursor = createCursor(DefaultSuspenseContext);\nfunction hasSuspenseContext(parentContext, flag) {\n  return (parentContext & flag) !== 0;\n}\nfunction setDefaultShallowSuspenseContext(parentContext) {\n  return parentContext & SubtreeSuspenseContextMask;\n}\nfunction setShallowSuspenseContext(parentContext, shallowContext) {\n  return parentContext & SubtreeSuspenseContextMask | shallowContext;\n}\nfunction addSubtreeSuspenseContext(parentContext, subtreeContext) {\n  return parentContext | subtreeContext;\n}\nfunction pushSuspenseContext(fiber, newContext) {\n  push(suspenseStackCursor, newContext, fiber);\n}\nfunction popSuspenseContext(fiber) {\n  pop(suspenseStackCursor, fiber);\n}\n\nfunction shouldCaptureSuspense(workInProgress, hasInvisibleParent) {\n  // If it was the primary children that just suspended, capture and render the\n  // fallback. Otherwise, don't capture and bubble to the next boundary.\n  var nextState = workInProgress.memoizedState;\n\n  if (nextState !== null) {\n    if (nextState.dehydrated !== null) {\n      // A dehydrated boundary always captures.\n      return true;\n    }\n\n    return false;\n  }\n\n  var props = workInProgress.memoizedProps; // In order to capture, the Suspense component must have a fallback prop.\n\n  if (props.fallback === undefined) {\n    return false;\n  } // Regular boundaries always capture.\n\n\n  if (props.unstable_avoidThisFallback !== true) {\n    return true;\n  } // If it's a boundary we should avoid, then we prefer to bubble up to the\n  // parent boundary if it is currently invisible.\n\n\n  if (hasInvisibleParent) {\n    return false;\n  } // If the parent is not able to handle it, we must handle it.\n\n\n  return true;\n}\nfunction findFirstSuspended(row) {\n  var node = row;\n\n  while (node !== null) {\n    if (node.tag === SuspenseComponent) {\n      var state = node.memoizedState;\n\n      if (state !== null) {\n        var dehydrated = state.dehydrated;\n\n        if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {\n          return node;\n        }\n      }\n    } else if (node.tag === SuspenseListComponent && // revealOrder undefined can't be trusted because it don't\n    // keep track of whether it suspended or not.\n    node.memoizedProps.revealOrder !== undefined) {\n      var didSuspend = (node.flags & DidCapture) !== NoFlags;\n\n      if (didSuspend) {\n        return node;\n      }\n    } else if (node.child !== null) {\n      node.child.return = node;\n      node = node.child;\n      continue;\n    }\n\n    if (node === row) {\n      return null;\n    }\n\n    while (node.sibling === null) {\n      if (node.return === null || node.return === row) {\n        return null;\n      }\n\n      node = node.return;\n    }\n\n    node.sibling.return = node.return;\n    node = node.sibling;\n  }\n\n  return null;\n}\n\nvar NoFlags$1 =\n/*  */\n0; // Represents whether effect should fire.\n\nvar HasEffect =\n/* */\n1; // Represents the phase in which the effect (not the clean-up) fires.\n\nvar Layout =\n/*    */\n2;\nvar Passive$1 =\n/*   */\n4;\n\n// This may have been an insertion or a hydration.\n\nvar hydrationParentFiber = null;\nvar nextHydratableInstance = null;\nvar isHydrating = false;\n\nfunction enterHydrationState(fiber) {\n  if (!supportsHydration) {\n    return false;\n  }\n\n  var parentInstance = fiber.stateNode.containerInfo;\n  nextHydratableInstance = getFirstHydratableChild(parentInstance);\n  hydrationParentFiber = fiber;\n  isHydrating = true;\n  return true;\n}\n\nfunction deleteHydratableInstance(returnFiber, instance) {\n  {\n    switch (returnFiber.tag) {\n      case HostRoot:\n        didNotHydrateContainerInstance(returnFiber.stateNode.containerInfo, instance);\n        break;\n\n      case HostComponent:\n        didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance);\n        break;\n    }\n  }\n\n  var childToDelete = createFiberFromHostInstanceForDeletion();\n  childToDelete.stateNode = instance;\n  childToDelete.return = returnFiber;\n  childToDelete.flags = Deletion; // This might seem like it belongs on progressedFirstDeletion. However,\n  // these children are not part of the reconciliation list of children.\n  // Even if we abort and rereconcile the children, that will try to hydrate\n  // again and the nodes are still in the host tree so these will be\n  // recreated.\n\n  if (returnFiber.lastEffect !== null) {\n    returnFiber.lastEffect.nextEffect = childToDelete;\n    returnFiber.lastEffect = childToDelete;\n  } else {\n    returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;\n  }\n}\n\nfunction insertNonHydratedInstance(returnFiber, fiber) {\n  fiber.flags = fiber.flags & ~Hydrating | Placement;\n\n  {\n    switch (returnFiber.tag) {\n      case HostRoot:\n        {\n          var parentContainer = returnFiber.stateNode.containerInfo;\n\n          switch (fiber.tag) {\n            case HostComponent:\n              var type = fiber.type;\n              var props = fiber.pendingProps;\n              didNotFindHydratableContainerInstance(parentContainer, type, props);\n              break;\n\n            case HostText:\n              var text = fiber.pendingProps;\n              didNotFindHydratableContainerTextInstance(parentContainer, text);\n              break;\n\n            case SuspenseComponent:\n              didNotFindHydratableContainerSuspenseInstance(parentContainer);\n              break;\n          }\n\n          break;\n        }\n\n      case HostComponent:\n        {\n          var parentType = returnFiber.type;\n          var parentProps = returnFiber.memoizedProps;\n          var parentInstance = returnFiber.stateNode;\n\n          switch (fiber.tag) {\n            case HostComponent:\n              var _type = fiber.type;\n              var _props = fiber.pendingProps;\n              didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type, _props);\n              break;\n\n            case HostText:\n              var _text = fiber.pendingProps;\n              didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text);\n              break;\n\n            case SuspenseComponent:\n              didNotFindHydratableSuspenseInstance(parentType, parentProps, parentInstance);\n              break;\n          }\n\n          break;\n        }\n\n      default:\n        return;\n    }\n  }\n}\n\nfunction tryHydrate(fiber, nextInstance) {\n  switch (fiber.tag) {\n    case HostComponent:\n      {\n        var type = fiber.type;\n        var props = fiber.pendingProps;\n        var instance = canHydrateInstance(nextInstance, type, props);\n\n        if (instance !== null) {\n          fiber.stateNode = instance;\n          return true;\n        }\n\n        return false;\n      }\n\n    case HostText:\n      {\n        var text = fiber.pendingProps;\n        var textInstance = canHydrateTextInstance(nextInstance, text);\n\n        if (textInstance !== null) {\n          fiber.stateNode = textInstance;\n          return true;\n        }\n\n        return false;\n      }\n\n    case SuspenseComponent:\n      {\n\n        return false;\n      }\n\n    default:\n      return false;\n  }\n}\n\nfunction tryToClaimNextHydratableInstance(fiber) {\n  if (!isHydrating) {\n    return;\n  }\n\n  var nextInstance = nextHydratableInstance;\n\n  if (!nextInstance) {\n    // Nothing to hydrate. Make it an insertion.\n    insertNonHydratedInstance(hydrationParentFiber, fiber);\n    isHydrating = false;\n    hydrationParentFiber = fiber;\n    return;\n  }\n\n  var firstAttemptedInstance = nextInstance;\n\n  if (!tryHydrate(fiber, nextInstance)) {\n    // If we can't hydrate this instance let's try the next one.\n    // We use this as a heuristic. It's based on intuition and not data so it\n    // might be flawed or unnecessary.\n    nextInstance = getNextHydratableSibling(firstAttemptedInstance);\n\n    if (!nextInstance || !tryHydrate(fiber, nextInstance)) {\n      // Nothing to hydrate. Make it an insertion.\n      insertNonHydratedInstance(hydrationParentFiber, fiber);\n      isHydrating = false;\n      hydrationParentFiber = fiber;\n      return;\n    } // We matched the next one, we'll now assume that the first one was\n    // superfluous and we'll delete it. Since we can't eagerly delete it\n    // we'll have to schedule a deletion. To do that, this node needs a dummy\n    // fiber associated with it.\n\n\n    deleteHydratableInstance(hydrationParentFiber, firstAttemptedInstance);\n  }\n\n  hydrationParentFiber = fiber;\n  nextHydratableInstance = getFirstHydratableChild(nextInstance);\n}\n\nfunction prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {\n  if (!supportsHydration) {\n    {\n      {\n        throw Error( \"Expected prepareToHydrateHostInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.\" );\n      }\n    }\n  }\n\n  var instance = fiber.stateNode;\n  var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber); // TODO: Type this specific to this type of component.\n\n  fiber.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there\n  // is a new ref we mark this as an update.\n\n  if (updatePayload !== null) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction prepareToHydrateHostTextInstance(fiber) {\n  if (!supportsHydration) {\n    {\n      {\n        throw Error( \"Expected prepareToHydrateHostTextInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.\" );\n      }\n    }\n  }\n\n  var textInstance = fiber.stateNode;\n  var textContent = fiber.memoizedProps;\n  var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);\n\n  {\n    if (shouldUpdate) {\n      // We assume that prepareToHydrateHostTextInstance is called in a context where the\n      // hydration parent is the parent host component of this host text.\n      var returnFiber = hydrationParentFiber;\n\n      if (returnFiber !== null) {\n        switch (returnFiber.tag) {\n          case HostRoot:\n            {\n              var parentContainer = returnFiber.stateNode.containerInfo;\n              didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent);\n              break;\n            }\n\n          case HostComponent:\n            {\n              var parentType = returnFiber.type;\n              var parentProps = returnFiber.memoizedProps;\n              var parentInstance = returnFiber.stateNode;\n              didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent);\n              break;\n            }\n        }\n      }\n    }\n  }\n\n  return shouldUpdate;\n}\n\nfunction skipPastDehydratedSuspenseInstance(fiber) {\n  if (!supportsHydration) {\n    {\n      {\n        throw Error( \"Expected skipPastDehydratedSuspenseInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.\" );\n      }\n    }\n  }\n\n  var suspenseState = fiber.memoizedState;\n  var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;\n\n  if (!suspenseInstance) {\n    {\n      throw Error( \"Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.\" );\n    }\n  }\n\n  return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);\n}\n\nfunction popToNextHostParent(fiber) {\n  var parent = fiber.return;\n\n  while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {\n    parent = parent.return;\n  }\n\n  hydrationParentFiber = parent;\n}\n\nfunction popHydrationState(fiber) {\n  if (!supportsHydration) {\n    return false;\n  }\n\n  if (fiber !== hydrationParentFiber) {\n    // We're deeper than the current hydration context, inside an inserted\n    // tree.\n    return false;\n  }\n\n  if (!isHydrating) {\n    // If we're not currently hydrating but we're in a hydration context, then\n    // we were an insertion and now need to pop up reenter hydration of our\n    // siblings.\n    popToNextHostParent(fiber);\n    isHydrating = true;\n    return false;\n  }\n\n  var type = fiber.type; // If we have any remaining hydratable nodes, we need to delete them now.\n  // We only do this deeper than head and body since they tend to have random\n  // other nodes in them. We also ignore components with pure text content in\n  // side of them.\n  // TODO: Better heuristic.\n\n  if (fiber.tag !== HostComponent || type !== 'head' && type !== 'body' && !shouldSetTextContent(type, fiber.memoizedProps)) {\n    var nextInstance = nextHydratableInstance;\n\n    while (nextInstance) {\n      deleteHydratableInstance(fiber, nextInstance);\n      nextInstance = getNextHydratableSibling(nextInstance);\n    }\n  }\n\n  popToNextHostParent(fiber);\n\n  if (fiber.tag === SuspenseComponent) {\n    nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);\n  } else {\n    nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;\n  }\n\n  return true;\n}\n\nfunction resetHydrationState() {\n  if (!supportsHydration) {\n    return;\n  }\n\n  hydrationParentFiber = null;\n  nextHydratableInstance = null;\n  isHydrating = false;\n}\n\nfunction getIsHydrating() {\n  return isHydrating;\n}\n\n// and should be reset before starting a new render.\n// This tracks which mutable sources need to be reset after a render.\n\nvar workInProgressSources = [];\nvar rendererSigil$1;\n\n{\n  // Used to detect multiple renderers using the same mutable source.\n  rendererSigil$1 = {};\n}\n\nfunction markSourceAsDirty(mutableSource) {\n  workInProgressSources.push(mutableSource);\n}\nfunction resetWorkInProgressVersions() {\n  for (var i = 0; i < workInProgressSources.length; i++) {\n    var mutableSource = workInProgressSources[i];\n\n    if (isPrimaryRenderer) {\n      mutableSource._workInProgressVersionPrimary = null;\n    } else {\n      mutableSource._workInProgressVersionSecondary = null;\n    }\n  }\n\n  workInProgressSources.length = 0;\n}\nfunction getWorkInProgressVersion(mutableSource) {\n  if (isPrimaryRenderer) {\n    return mutableSource._workInProgressVersionPrimary;\n  } else {\n    return mutableSource._workInProgressVersionSecondary;\n  }\n}\nfunction setWorkInProgressVersion(mutableSource, version) {\n  if (isPrimaryRenderer) {\n    mutableSource._workInProgressVersionPrimary = version;\n  } else {\n    mutableSource._workInProgressVersionSecondary = version;\n  }\n\n  workInProgressSources.push(mutableSource);\n}\nfunction warnAboutMultipleRenderersDEV(mutableSource) {\n  {\n    if (isPrimaryRenderer) {\n      if (mutableSource._currentPrimaryRenderer == null) {\n        mutableSource._currentPrimaryRenderer = rendererSigil$1;\n      } else if (mutableSource._currentPrimaryRenderer !== rendererSigil$1) {\n        error('Detected multiple renderers concurrently rendering the ' + 'same mutable source. This is currently unsupported.');\n      }\n    } else {\n      if (mutableSource._currentSecondaryRenderer == null) {\n        mutableSource._currentSecondaryRenderer = rendererSigil$1;\n      } else if (mutableSource._currentSecondaryRenderer !== rendererSigil$1) {\n        error('Detected multiple renderers concurrently rendering the ' + 'same mutable source. This is currently unsupported.');\n      }\n    }\n  }\n} // Eager reads the version of a mutable source and stores it on the root.\n\nvar ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher,\n    ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;\nvar didWarnAboutMismatchedHooksForComponent;\nvar didWarnAboutUseOpaqueIdentifier;\n\n{\n  didWarnAboutUseOpaqueIdentifier = {};\n  didWarnAboutMismatchedHooksForComponent = new Set();\n}\n\n// These are set right before calling the component.\nvar renderLanes = NoLanes; // The work-in-progress fiber. I've named it differently to distinguish it from\n// the work-in-progress hook.\n\nvar currentlyRenderingFiber$1 = null; // Hooks are stored as a linked list on the fiber's memoizedState field. The\n// current hook list is the list that belongs to the current fiber. The\n// work-in-progress hook list is a new list that will be added to the\n// work-in-progress fiber.\n\nvar currentHook = null;\nvar workInProgressHook = null; // Whether an update was scheduled at any point during the render phase. This\n// does not get reset if we do another render pass; only when we're completely\n// finished evaluating this component. This is an optimization so we know\n// whether we need to clear render phase updates after a throw.\n\nvar didScheduleRenderPhaseUpdate = false; // Where an update was scheduled only during the current render pass. This\n// gets reset after each attempt.\n// TODO: Maybe there's some way to consolidate this with\n// `didScheduleRenderPhaseUpdate`. Or with `numberOfReRenders`.\n\nvar didScheduleRenderPhaseUpdateDuringThisPass = false;\nvar RE_RENDER_LIMIT = 25; // In DEV, this is the name of the currently executing primitive hook\n\nvar currentHookNameInDev = null; // In DEV, this list ensures that hooks are called in the same order between renders.\n// The list stores the order of hooks used during the initial render (mount).\n// Subsequent renders (updates) reference this list.\n\nvar hookTypesDev = null;\nvar hookTypesUpdateIndexDev = -1; // In DEV, this tracks whether currently rendering component needs to ignore\n// the dependencies for Hooks that need them (e.g. useEffect or useMemo).\n// When true, such Hooks will always be \"remounted\". Only used during hot reload.\n\nvar ignorePreviousDependencies = false;\n\nfunction mountHookTypesDev() {\n  {\n    var hookName = currentHookNameInDev;\n\n    if (hookTypesDev === null) {\n      hookTypesDev = [hookName];\n    } else {\n      hookTypesDev.push(hookName);\n    }\n  }\n}\n\nfunction updateHookTypesDev() {\n  {\n    var hookName = currentHookNameInDev;\n\n    if (hookTypesDev !== null) {\n      hookTypesUpdateIndexDev++;\n\n      if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {\n        warnOnHookMismatchInDev(hookName);\n      }\n    }\n  }\n}\n\nfunction checkDepsAreArrayDev(deps) {\n  {\n    if (deps !== undefined && deps !== null && !Array.isArray(deps)) {\n      // Verify deps, but only on mount to avoid extra checks.\n      // It's unlikely their type would change as usually you define them inline.\n      error('%s received a final argument that is not an array (instead, received `%s`). When ' + 'specified, the final argument must be an array.', currentHookNameInDev, typeof deps);\n    }\n  }\n}\n\nfunction warnOnHookMismatchInDev(currentHookName) {\n  {\n    var componentName = getComponentName(currentlyRenderingFiber$1.type);\n\n    if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {\n      didWarnAboutMismatchedHooksForComponent.add(componentName);\n\n      if (hookTypesDev !== null) {\n        var table = '';\n        var secondColumnStart = 30;\n\n        for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {\n          var oldHookName = hookTypesDev[i];\n          var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;\n          var row = i + 1 + \". \" + oldHookName; // Extra space so second column lines up\n          // lol @ IE not supporting String#repeat\n\n          while (row.length < secondColumnStart) {\n            row += ' ';\n          }\n\n          row += newHookName + '\\n';\n          table += row;\n        }\n\n        error('React has detected a change in the order of Hooks called by %s. ' + 'This will lead to bugs and errors if not fixed. ' + 'For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\\n\\n' + '   Previous render            Next render\\n' + '   ------------------------------------------------------\\n' + '%s' + '   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n', componentName, table);\n      }\n    }\n  }\n}\n\nfunction throwInvalidHookError() {\n  {\n    {\n      throw Error( \"Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\\n1. You might have mismatching versions of React and the renderer (such as React DOM)\\n2. You might be breaking the Rules of Hooks\\n3. You might have more than one copy of React in the same app\\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.\" );\n    }\n  }\n}\n\nfunction areHookInputsEqual(nextDeps, prevDeps) {\n  {\n    if (ignorePreviousDependencies) {\n      // Only true when this component is being hot reloaded.\n      return false;\n    }\n  }\n\n  if (prevDeps === null) {\n    {\n      error('%s received a final argument during this render, but not during ' + 'the previous render. Even though the final argument is optional, ' + 'its type cannot change between renders.', currentHookNameInDev);\n    }\n\n    return false;\n  }\n\n  {\n    // Don't bother comparing lengths in prod because these arrays should be\n    // passed inline.\n    if (nextDeps.length !== prevDeps.length) {\n      error('The final argument passed to %s changed size between renders. The ' + 'order and size of this array must remain constant.\\n\\n' + 'Previous: %s\\n' + 'Incoming: %s', currentHookNameInDev, \"[\" + prevDeps.join(', ') + \"]\", \"[\" + nextDeps.join(', ') + \"]\");\n    }\n  }\n\n  for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {\n    if (objectIs(nextDeps[i], prevDeps[i])) {\n      continue;\n    }\n\n    return false;\n  }\n\n  return true;\n}\n\nfunction renderWithHooks(current, workInProgress, Component, props, secondArg, nextRenderLanes) {\n  renderLanes = nextRenderLanes;\n  currentlyRenderingFiber$1 = workInProgress;\n\n  {\n    hookTypesDev = current !== null ? current._debugHookTypes : null;\n    hookTypesUpdateIndexDev = -1; // Used for hot reloading:\n\n    ignorePreviousDependencies = current !== null && current.type !== workInProgress.type;\n  }\n\n  workInProgress.memoizedState = null;\n  workInProgress.updateQueue = null;\n  workInProgress.lanes = NoLanes; // The following should have already been reset\n  // currentHook = null;\n  // workInProgressHook = null;\n  // didScheduleRenderPhaseUpdate = false;\n  // TODO Warn if no hooks are used at all during mount, then some are used during update.\n  // Currently we will identify the update render as a mount because memoizedState === null.\n  // This is tricky because it's valid for certain types of components (e.g. React.lazy)\n  // Using memoizedState to differentiate between mount/update only works if at least one stateful hook is used.\n  // Non-stateful hooks (e.g. context) don't get added to memoizedState,\n  // so memoizedState would be null during updates and mounts.\n\n  {\n    if (current !== null && current.memoizedState !== null) {\n      ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;\n    } else if (hookTypesDev !== null) {\n      // This dispatcher handles an edge case where a component is updating,\n      // but no stateful hooks have been used.\n      // We want to match the production code behavior (which will use HooksDispatcherOnMount),\n      // but with the extra DEV validation to ensure hooks ordering hasn't changed.\n      // This dispatcher does that.\n      ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;\n    } else {\n      ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;\n    }\n  }\n\n  var children = Component(props, secondArg); // Check if there was a render phase update\n\n  if (didScheduleRenderPhaseUpdateDuringThisPass) {\n    // Keep rendering in a loop for as long as render phase updates continue to\n    // be scheduled. Use a counter to prevent infinite loops.\n    var numberOfReRenders = 0;\n\n    do {\n      didScheduleRenderPhaseUpdateDuringThisPass = false;\n\n      if (!(numberOfReRenders < RE_RENDER_LIMIT)) {\n        {\n          throw Error( \"Too many re-renders. React limits the number of renders to prevent an infinite loop.\" );\n        }\n      }\n\n      numberOfReRenders += 1;\n\n      {\n        // Even when hot reloading, allow dependencies to stabilize\n        // after first render to prevent infinite render phase updates.\n        ignorePreviousDependencies = false;\n      } // Start over from the beginning of the list\n\n\n      currentHook = null;\n      workInProgressHook = null;\n      workInProgress.updateQueue = null;\n\n      {\n        // Also validate hook order for cascading updates.\n        hookTypesUpdateIndexDev = -1;\n      }\n\n      ReactCurrentDispatcher$1.current =  HooksDispatcherOnRerenderInDEV ;\n      children = Component(props, secondArg);\n    } while (didScheduleRenderPhaseUpdateDuringThisPass);\n  } // We can assume the previous dispatcher is always this one, since we set it\n  // at the beginning of the render phase and there's no re-entrancy.\n\n\n  ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;\n\n  {\n    workInProgress._debugHookTypes = hookTypesDev;\n  } // This check uses currentHook so that it works the same in DEV and prod bundles.\n  // hookTypesDev could catch more cases (e.g. context) but only in DEV bundles.\n\n\n  var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;\n  renderLanes = NoLanes;\n  currentlyRenderingFiber$1 = null;\n  currentHook = null;\n  workInProgressHook = null;\n\n  {\n    currentHookNameInDev = null;\n    hookTypesDev = null;\n    hookTypesUpdateIndexDev = -1;\n  }\n\n  didScheduleRenderPhaseUpdate = false;\n\n  if (!!didRenderTooFewHooks) {\n    {\n      throw Error( \"Rendered fewer hooks than expected. This may be caused by an accidental early return statement.\" );\n    }\n  }\n\n  return children;\n}\nfunction bailoutHooks(current, workInProgress, lanes) {\n  workInProgress.updateQueue = current.updateQueue;\n  workInProgress.flags &= ~(Passive | Update);\n  current.lanes = removeLanes(current.lanes, lanes);\n}\nfunction resetHooksAfterThrow() {\n  // We can assume the previous dispatcher is always this one, since we set it\n  // at the beginning of the render phase and there's no re-entrancy.\n  ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;\n\n  if (didScheduleRenderPhaseUpdate) {\n    // There were render phase updates. These are only valid for this render\n    // phase, which we are now aborting. Remove the updates from the queues so\n    // they do not persist to the next render. Do not remove updates from hooks\n    // that weren't processed.\n    //\n    // Only reset the updates from the queue if it has a clone. If it does\n    // not have a clone, that means it wasn't processed, and the updates were\n    // scheduled before we entered the render phase.\n    var hook = currentlyRenderingFiber$1.memoizedState;\n\n    while (hook !== null) {\n      var queue = hook.queue;\n\n      if (queue !== null) {\n        queue.pending = null;\n      }\n\n      hook = hook.next;\n    }\n\n    didScheduleRenderPhaseUpdate = false;\n  }\n\n  renderLanes = NoLanes;\n  currentlyRenderingFiber$1 = null;\n  currentHook = null;\n  workInProgressHook = null;\n\n  {\n    hookTypesDev = null;\n    hookTypesUpdateIndexDev = -1;\n    currentHookNameInDev = null;\n    isUpdatingOpaqueValueInRenderPhase = false;\n  }\n\n  didScheduleRenderPhaseUpdateDuringThisPass = false;\n}\n\nfunction mountWorkInProgressHook() {\n  var hook = {\n    memoizedState: null,\n    baseState: null,\n    baseQueue: null,\n    queue: null,\n    next: null\n  };\n\n  if (workInProgressHook === null) {\n    // This is the first hook in the list\n    currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;\n  } else {\n    // Append to the end of the list\n    workInProgressHook = workInProgressHook.next = hook;\n  }\n\n  return workInProgressHook;\n}\n\nfunction updateWorkInProgressHook() {\n  // This function is used both for updates and for re-renders triggered by a\n  // render phase update. It assumes there is either a current hook we can\n  // clone, or a work-in-progress hook from a previous render pass that we can\n  // use as a base. When we reach the end of the base list, we must switch to\n  // the dispatcher used for mounts.\n  var nextCurrentHook;\n\n  if (currentHook === null) {\n    var current = currentlyRenderingFiber$1.alternate;\n\n    if (current !== null) {\n      nextCurrentHook = current.memoizedState;\n    } else {\n      nextCurrentHook = null;\n    }\n  } else {\n    nextCurrentHook = currentHook.next;\n  }\n\n  var nextWorkInProgressHook;\n\n  if (workInProgressHook === null) {\n    nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;\n  } else {\n    nextWorkInProgressHook = workInProgressHook.next;\n  }\n\n  if (nextWorkInProgressHook !== null) {\n    // There's already a work-in-progress. Reuse it.\n    workInProgressHook = nextWorkInProgressHook;\n    nextWorkInProgressHook = workInProgressHook.next;\n    currentHook = nextCurrentHook;\n  } else {\n    // Clone from the current hook.\n    if (!(nextCurrentHook !== null)) {\n      {\n        throw Error( \"Rendered more hooks than during the previous render.\" );\n      }\n    }\n\n    currentHook = nextCurrentHook;\n    var newHook = {\n      memoizedState: currentHook.memoizedState,\n      baseState: currentHook.baseState,\n      baseQueue: currentHook.baseQueue,\n      queue: currentHook.queue,\n      next: null\n    };\n\n    if (workInProgressHook === null) {\n      // This is the first hook in the list.\n      currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;\n    } else {\n      // Append to the end of the list.\n      workInProgressHook = workInProgressHook.next = newHook;\n    }\n  }\n\n  return workInProgressHook;\n}\n\nfunction createFunctionComponentUpdateQueue() {\n  return {\n    lastEffect: null\n  };\n}\n\nfunction basicStateReducer(state, action) {\n  // $FlowFixMe: Flow doesn't like mixed types\n  return typeof action === 'function' ? action(state) : action;\n}\n\nfunction mountReducer(reducer, initialArg, init) {\n  var hook = mountWorkInProgressHook();\n  var initialState;\n\n  if (init !== undefined) {\n    initialState = init(initialArg);\n  } else {\n    initialState = initialArg;\n  }\n\n  hook.memoizedState = hook.baseState = initialState;\n  var queue = hook.queue = {\n    pending: null,\n    dispatch: null,\n    lastRenderedReducer: reducer,\n    lastRenderedState: initialState\n  };\n  var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);\n  return [hook.memoizedState, dispatch];\n}\n\nfunction updateReducer(reducer, initialArg, init) {\n  var hook = updateWorkInProgressHook();\n  var queue = hook.queue;\n\n  if (!(queue !== null)) {\n    {\n      throw Error( \"Should have a queue. This is likely a bug in React. Please file an issue.\" );\n    }\n  }\n\n  queue.lastRenderedReducer = reducer;\n  var current = currentHook; // The last rebase update that is NOT part of the base state.\n\n  var baseQueue = current.baseQueue; // The last pending update that hasn't been processed yet.\n\n  var pendingQueue = queue.pending;\n\n  if (pendingQueue !== null) {\n    // We have new updates that haven't been processed yet.\n    // We'll add them to the base queue.\n    if (baseQueue !== null) {\n      // Merge the pending queue and the base queue.\n      var baseFirst = baseQueue.next;\n      var pendingFirst = pendingQueue.next;\n      baseQueue.next = pendingFirst;\n      pendingQueue.next = baseFirst;\n    }\n\n    {\n      if (current.baseQueue !== baseQueue) {\n        // Internal invariant that should never happen, but feasibly could in\n        // the future if we implement resuming, or some form of that.\n        error('Internal error: Expected work-in-progress queue to be a clone. ' + 'This is a bug in React.');\n      }\n    }\n\n    current.baseQueue = baseQueue = pendingQueue;\n    queue.pending = null;\n  }\n\n  if (baseQueue !== null) {\n    // We have a queue to process.\n    var first = baseQueue.next;\n    var newState = current.baseState;\n    var newBaseState = null;\n    var newBaseQueueFirst = null;\n    var newBaseQueueLast = null;\n    var update = first;\n\n    do {\n      var updateLane = update.lane;\n\n      if (!isSubsetOfLanes(renderLanes, updateLane)) {\n        // Priority is insufficient. Skip this update. If this is the first\n        // skipped update, the previous update/state is the new base\n        // update/state.\n        var clone = {\n          lane: updateLane,\n          action: update.action,\n          eagerReducer: update.eagerReducer,\n          eagerState: update.eagerState,\n          next: null\n        };\n\n        if (newBaseQueueLast === null) {\n          newBaseQueueFirst = newBaseQueueLast = clone;\n          newBaseState = newState;\n        } else {\n          newBaseQueueLast = newBaseQueueLast.next = clone;\n        } // Update the remaining priority in the queue.\n        // TODO: Don't need to accumulate this. Instead, we can remove\n        // renderLanes from the original lanes.\n\n\n        currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);\n        markSkippedUpdateLanes(updateLane);\n      } else {\n        // This update does have sufficient priority.\n        if (newBaseQueueLast !== null) {\n          var _clone = {\n            // This update is going to be committed so we never want uncommit\n            // it. Using NoLane works because 0 is a subset of all bitmasks, so\n            // this will never be skipped by the check above.\n            lane: NoLane,\n            action: update.action,\n            eagerReducer: update.eagerReducer,\n            eagerState: update.eagerState,\n            next: null\n          };\n          newBaseQueueLast = newBaseQueueLast.next = _clone;\n        } // Process this update.\n\n\n        if (update.eagerReducer === reducer) {\n          // If this update was processed eagerly, and its reducer matches the\n          // current reducer, we can use the eagerly computed state.\n          newState = update.eagerState;\n        } else {\n          var action = update.action;\n          newState = reducer(newState, action);\n        }\n      }\n\n      update = update.next;\n    } while (update !== null && update !== first);\n\n    if (newBaseQueueLast === null) {\n      newBaseState = newState;\n    } else {\n      newBaseQueueLast.next = newBaseQueueFirst;\n    } // Mark that the fiber performed work, but only if the new state is\n    // different from the current state.\n\n\n    if (!objectIs(newState, hook.memoizedState)) {\n      markWorkInProgressReceivedUpdate();\n    }\n\n    hook.memoizedState = newState;\n    hook.baseState = newBaseState;\n    hook.baseQueue = newBaseQueueLast;\n    queue.lastRenderedState = newState;\n  }\n\n  var dispatch = queue.dispatch;\n  return [hook.memoizedState, dispatch];\n}\n\nfunction rerenderReducer(reducer, initialArg, init) {\n  var hook = updateWorkInProgressHook();\n  var queue = hook.queue;\n\n  if (!(queue !== null)) {\n    {\n      throw Error( \"Should have a queue. This is likely a bug in React. Please file an issue.\" );\n    }\n  }\n\n  queue.lastRenderedReducer = reducer; // This is a re-render. Apply the new render phase updates to the previous\n  // work-in-progress hook.\n\n  var dispatch = queue.dispatch;\n  var lastRenderPhaseUpdate = queue.pending;\n  var newState = hook.memoizedState;\n\n  if (lastRenderPhaseUpdate !== null) {\n    // The queue doesn't persist past this render pass.\n    queue.pending = null;\n    var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;\n    var update = firstRenderPhaseUpdate;\n\n    do {\n      // Process this render phase update. We don't have to check the\n      // priority because it will always be the same as the current\n      // render's.\n      var action = update.action;\n      newState = reducer(newState, action);\n      update = update.next;\n    } while (update !== firstRenderPhaseUpdate); // Mark that the fiber performed work, but only if the new state is\n    // different from the current state.\n\n\n    if (!objectIs(newState, hook.memoizedState)) {\n      markWorkInProgressReceivedUpdate();\n    }\n\n    hook.memoizedState = newState; // Don't persist the state accumulated from the render phase updates to\n    // the base state unless the queue is empty.\n    // TODO: Not sure if this is the desired semantics, but it's what we\n    // do for gDSFP. I can't remember why.\n\n    if (hook.baseQueue === null) {\n      hook.baseState = newState;\n    }\n\n    queue.lastRenderedState = newState;\n  }\n\n  return [newState, dispatch];\n}\n\nfunction readFromUnsubcribedMutableSource(root, source, getSnapshot) {\n  {\n    warnAboutMultipleRenderersDEV(source);\n  }\n\n  var getVersion = source._getVersion;\n  var version = getVersion(source._source); // Is it safe for this component to read from this source during the current render?\n\n  var isSafeToReadFromSource = false; // Check the version first.\n  // If this render has already been started with a specific version,\n  // we can use it alone to determine if we can safely read from the source.\n\n  var currentRenderVersion = getWorkInProgressVersion(source);\n\n  if (currentRenderVersion !== null) {\n    // It's safe to read if the store hasn't been mutated since the last time\n    // we read something.\n    isSafeToReadFromSource = currentRenderVersion === version;\n  } else {\n    // If there's no version, then this is the first time we've read from the\n    // source during the current render pass, so we need to do a bit more work.\n    // What we need to determine is if there are any hooks that already\n    // subscribed to the source, and if so, whether there are any pending\n    // mutations that haven't been synchronized yet.\n    //\n    // If there are no pending mutations, then `root.mutableReadLanes` will be\n    // empty, and we know we can safely read.\n    //\n    // If there *are* pending mutations, we may still be able to safely read\n    // if the currently rendering lanes are inclusive of the pending mutation\n    // lanes, since that guarantees that the value we're about to read from\n    // the source is consistent with the values that we read during the most\n    // recent mutation.\n    isSafeToReadFromSource = isSubsetOfLanes(renderLanes, root.mutableReadLanes);\n\n    if (isSafeToReadFromSource) {\n      // If it's safe to read from this source during the current render,\n      // store the version in case other components read from it.\n      // A changed version number will let those components know to throw and restart the render.\n      setWorkInProgressVersion(source, version);\n    }\n  }\n\n  if (isSafeToReadFromSource) {\n    var snapshot = getSnapshot(source._source);\n\n    {\n      if (typeof snapshot === 'function') {\n        error('Mutable source should not return a function as the snapshot value. ' + 'Functions may close over mutable values and cause tearing.');\n      }\n    }\n\n    return snapshot;\n  } else {\n    // This handles the special case of a mutable source being shared between renderers.\n    // In that case, if the source is mutated between the first and second renderer,\n    // The second renderer don't know that it needs to reset the WIP version during unwind,\n    // (because the hook only marks sources as dirty if it's written to their WIP version).\n    // That would cause this tear check to throw again and eventually be visible to the user.\n    // We can avoid this infinite loop by explicitly marking the source as dirty.\n    //\n    // This can lead to tearing in the first renderer when it resumes,\n    // but there's nothing we can do about that (short of throwing here and refusing to continue the render).\n    markSourceAsDirty(source);\n\n    {\n      {\n        throw Error( \"Cannot read from mutable source during the current render without tearing. This is a bug in React. Please file an issue.\" );\n      }\n    }\n  }\n}\n\nfunction useMutableSource(hook, source, getSnapshot, subscribe) {\n  var root = getWorkInProgressRoot();\n\n  if (!(root !== null)) {\n    {\n      throw Error( \"Expected a work-in-progress root. This is a bug in React. Please file an issue.\" );\n    }\n  }\n\n  var getVersion = source._getVersion;\n  var version = getVersion(source._source);\n  var dispatcher = ReactCurrentDispatcher$1.current; // eslint-disable-next-line prefer-const\n\n  var _dispatcher$useState = dispatcher.useState(function () {\n    return readFromUnsubcribedMutableSource(root, source, getSnapshot);\n  }),\n      currentSnapshot = _dispatcher$useState[0],\n      setSnapshot = _dispatcher$useState[1];\n\n  var snapshot = currentSnapshot; // Grab a handle to the state hook as well.\n  // We use it to clear the pending update queue if we have a new source.\n\n  var stateHook = workInProgressHook;\n  var memoizedState = hook.memoizedState;\n  var refs = memoizedState.refs;\n  var prevGetSnapshot = refs.getSnapshot;\n  var prevSource = memoizedState.source;\n  var prevSubscribe = memoizedState.subscribe;\n  var fiber = currentlyRenderingFiber$1;\n  hook.memoizedState = {\n    refs: refs,\n    source: source,\n    subscribe: subscribe\n  }; // Sync the values needed by our subscription handler after each commit.\n\n  dispatcher.useEffect(function () {\n    refs.getSnapshot = getSnapshot; // Normally the dispatch function for a state hook never changes,\n    // but this hook recreates the queue in certain cases  to avoid updates from stale sources.\n    // handleChange() below needs to reference the dispatch function without re-subscribing,\n    // so we use a ref to ensure that it always has the latest version.\n\n    refs.setSnapshot = setSnapshot; // Check for a possible change between when we last rendered now.\n\n    var maybeNewVersion = getVersion(source._source);\n\n    if (!objectIs(version, maybeNewVersion)) {\n      var maybeNewSnapshot = getSnapshot(source._source);\n\n      {\n        if (typeof maybeNewSnapshot === 'function') {\n          error('Mutable source should not return a function as the snapshot value. ' + 'Functions may close over mutable values and cause tearing.');\n        }\n      }\n\n      if (!objectIs(snapshot, maybeNewSnapshot)) {\n        setSnapshot(maybeNewSnapshot);\n        var lane = requestUpdateLane(fiber);\n        markRootMutableRead(root, lane);\n      } // If the source mutated between render and now,\n      // there may be state updates already scheduled from the old source.\n      // Entangle the updates so that they render in the same batch.\n\n\n      markRootEntangled(root, root.mutableReadLanes);\n    }\n  }, [getSnapshot, source, subscribe]); // If we got a new source or subscribe function, re-subscribe in a passive effect.\n\n  dispatcher.useEffect(function () {\n    var handleChange = function () {\n      var latestGetSnapshot = refs.getSnapshot;\n      var latestSetSnapshot = refs.setSnapshot;\n\n      try {\n        latestSetSnapshot(latestGetSnapshot(source._source)); // Record a pending mutable source update with the same expiration time.\n\n        var lane = requestUpdateLane(fiber);\n        markRootMutableRead(root, lane);\n      } catch (error) {\n        // A selector might throw after a source mutation.\n        // e.g. it might try to read from a part of the store that no longer exists.\n        // In this case we should still schedule an update with React.\n        // Worst case the selector will throw again and then an error boundary will handle it.\n        latestSetSnapshot(function () {\n          throw error;\n        });\n      }\n    };\n\n    var unsubscribe = subscribe(source._source, handleChange);\n\n    {\n      if (typeof unsubscribe !== 'function') {\n        error('Mutable source subscribe function must return an unsubscribe function.');\n      }\n    }\n\n    return unsubscribe;\n  }, [source, subscribe]); // If any of the inputs to useMutableSource change, reading is potentially unsafe.\n  //\n  // If either the source or the subscription have changed we can't can't trust the update queue.\n  // Maybe the source changed in a way that the old subscription ignored but the new one depends on.\n  //\n  // If the getSnapshot function changed, we also shouldn't rely on the update queue.\n  // It's possible that the underlying source was mutated between the when the last \"change\" event fired,\n  // and when the current render (with the new getSnapshot function) is processed.\n  //\n  // In both cases, we need to throw away pending updates (since they are no longer relevant)\n  // and treat reading from the source as we do in the mount case.\n\n  if (!objectIs(prevGetSnapshot, getSnapshot) || !objectIs(prevSource, source) || !objectIs(prevSubscribe, subscribe)) {\n    // Create a new queue and setState method,\n    // So if there are interleaved updates, they get pushed to the older queue.\n    // When this becomes current, the previous queue and dispatch method will be discarded,\n    // including any interleaving updates that occur.\n    var newQueue = {\n      pending: null,\n      dispatch: null,\n      lastRenderedReducer: basicStateReducer,\n      lastRenderedState: snapshot\n    };\n    newQueue.dispatch = setSnapshot = dispatchAction.bind(null, currentlyRenderingFiber$1, newQueue);\n    stateHook.queue = newQueue;\n    stateHook.baseQueue = null;\n    snapshot = readFromUnsubcribedMutableSource(root, source, getSnapshot);\n    stateHook.memoizedState = stateHook.baseState = snapshot;\n  }\n\n  return snapshot;\n}\n\nfunction mountMutableSource(source, getSnapshot, subscribe) {\n  var hook = mountWorkInProgressHook();\n  hook.memoizedState = {\n    refs: {\n      getSnapshot: getSnapshot,\n      setSnapshot: null\n    },\n    source: source,\n    subscribe: subscribe\n  };\n  return useMutableSource(hook, source, getSnapshot, subscribe);\n}\n\nfunction updateMutableSource(source, getSnapshot, subscribe) {\n  var hook = updateWorkInProgressHook();\n  return useMutableSource(hook, source, getSnapshot, subscribe);\n}\n\nfunction mountState(initialState) {\n  var hook = mountWorkInProgressHook();\n\n  if (typeof initialState === 'function') {\n    // $FlowFixMe: Flow doesn't like mixed types\n    initialState = initialState();\n  }\n\n  hook.memoizedState = hook.baseState = initialState;\n  var queue = hook.queue = {\n    pending: null,\n    dispatch: null,\n    lastRenderedReducer: basicStateReducer,\n    lastRenderedState: initialState\n  };\n  var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);\n  return [hook.memoizedState, dispatch];\n}\n\nfunction updateState(initialState) {\n  return updateReducer(basicStateReducer);\n}\n\nfunction rerenderState(initialState) {\n  return rerenderReducer(basicStateReducer);\n}\n\nfunction pushEffect(tag, create, destroy, deps) {\n  var effect = {\n    tag: tag,\n    create: create,\n    destroy: destroy,\n    deps: deps,\n    // Circular\n    next: null\n  };\n  var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;\n\n  if (componentUpdateQueue === null) {\n    componentUpdateQueue = createFunctionComponentUpdateQueue();\n    currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;\n    componentUpdateQueue.lastEffect = effect.next = effect;\n  } else {\n    var lastEffect = componentUpdateQueue.lastEffect;\n\n    if (lastEffect === null) {\n      componentUpdateQueue.lastEffect = effect.next = effect;\n    } else {\n      var firstEffect = lastEffect.next;\n      lastEffect.next = effect;\n      effect.next = firstEffect;\n      componentUpdateQueue.lastEffect = effect;\n    }\n  }\n\n  return effect;\n}\n\nfunction mountRef(initialValue) {\n  var hook = mountWorkInProgressHook();\n  var ref = {\n    current: initialValue\n  };\n\n  {\n    Object.seal(ref);\n  }\n\n  hook.memoizedState = ref;\n  return ref;\n}\n\nfunction updateRef(initialValue) {\n  var hook = updateWorkInProgressHook();\n  return hook.memoizedState;\n}\n\nfunction mountEffectImpl(fiberFlags, hookFlags, create, deps) {\n  var hook = mountWorkInProgressHook();\n  var nextDeps = deps === undefined ? null : deps;\n  currentlyRenderingFiber$1.flags |= fiberFlags;\n  hook.memoizedState = pushEffect(HasEffect | hookFlags, create, undefined, nextDeps);\n}\n\nfunction updateEffectImpl(fiberFlags, hookFlags, create, deps) {\n  var hook = updateWorkInProgressHook();\n  var nextDeps = deps === undefined ? null : deps;\n  var destroy = undefined;\n\n  if (currentHook !== null) {\n    var prevEffect = currentHook.memoizedState;\n    destroy = prevEffect.destroy;\n\n    if (nextDeps !== null) {\n      var prevDeps = prevEffect.deps;\n\n      if (areHookInputsEqual(nextDeps, prevDeps)) {\n        pushEffect(hookFlags, create, destroy, nextDeps);\n        return;\n      }\n    }\n  }\n\n  currentlyRenderingFiber$1.flags |= fiberFlags;\n  hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);\n}\n\nfunction mountEffect(create, deps) {\n  {\n    // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests\n    if ('undefined' !== typeof jest) {\n      warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);\n    }\n  }\n\n  return mountEffectImpl(Update | Passive, Passive$1, create, deps);\n}\n\nfunction updateEffect(create, deps) {\n  {\n    // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests\n    if ('undefined' !== typeof jest) {\n      warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);\n    }\n  }\n\n  return updateEffectImpl(Update | Passive, Passive$1, create, deps);\n}\n\nfunction mountLayoutEffect(create, deps) {\n  return mountEffectImpl(Update, Layout, create, deps);\n}\n\nfunction updateLayoutEffect(create, deps) {\n  return updateEffectImpl(Update, Layout, create, deps);\n}\n\nfunction imperativeHandleEffect(create, ref) {\n  if (typeof ref === 'function') {\n    var refCallback = ref;\n\n    var _inst = create();\n\n    refCallback(_inst);\n    return function () {\n      refCallback(null);\n    };\n  } else if (ref !== null && ref !== undefined) {\n    var refObject = ref;\n\n    {\n      if (!refObject.hasOwnProperty('current')) {\n        error('Expected useImperativeHandle() first argument to either be a ' + 'ref callback or React.createRef() object. Instead received: %s.', 'an object with keys {' + Object.keys(refObject).join(', ') + '}');\n      }\n    }\n\n    var _inst2 = create();\n\n    refObject.current = _inst2;\n    return function () {\n      refObject.current = null;\n    };\n  }\n}\n\nfunction mountImperativeHandle(ref, create, deps) {\n  {\n    if (typeof create !== 'function') {\n      error('Expected useImperativeHandle() second argument to be a function ' + 'that creates a handle. Instead received: %s.', create !== null ? typeof create : 'null');\n    }\n  } // TODO: If deps are provided, should we skip comparing the ref itself?\n\n\n  var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;\n  return mountEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);\n}\n\nfunction updateImperativeHandle(ref, create, deps) {\n  {\n    if (typeof create !== 'function') {\n      error('Expected useImperativeHandle() second argument to be a function ' + 'that creates a handle. Instead received: %s.', create !== null ? typeof create : 'null');\n    }\n  } // TODO: If deps are provided, should we skip comparing the ref itself?\n\n\n  var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;\n  return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);\n}\n\nfunction mountDebugValue(value, formatterFn) {// This hook is normally a no-op.\n  // The react-debug-hooks package injects its own implementation\n  // so that e.g. DevTools can display custom hook values.\n}\n\nvar updateDebugValue = mountDebugValue;\n\nfunction mountCallback(callback, deps) {\n  var hook = mountWorkInProgressHook();\n  var nextDeps = deps === undefined ? null : deps;\n  hook.memoizedState = [callback, nextDeps];\n  return callback;\n}\n\nfunction updateCallback(callback, deps) {\n  var hook = updateWorkInProgressHook();\n  var nextDeps = deps === undefined ? null : deps;\n  var prevState = hook.memoizedState;\n\n  if (prevState !== null) {\n    if (nextDeps !== null) {\n      var prevDeps = prevState[1];\n\n      if (areHookInputsEqual(nextDeps, prevDeps)) {\n        return prevState[0];\n      }\n    }\n  }\n\n  hook.memoizedState = [callback, nextDeps];\n  return callback;\n}\n\nfunction mountMemo(nextCreate, deps) {\n  var hook = mountWorkInProgressHook();\n  var nextDeps = deps === undefined ? null : deps;\n  var nextValue = nextCreate();\n  hook.memoizedState = [nextValue, nextDeps];\n  return nextValue;\n}\n\nfunction updateMemo(nextCreate, deps) {\n  var hook = updateWorkInProgressHook();\n  var nextDeps = deps === undefined ? null : deps;\n  var prevState = hook.memoizedState;\n\n  if (prevState !== null) {\n    // Assume these are defined. If they're not, areHookInputsEqual will warn.\n    if (nextDeps !== null) {\n      var prevDeps = prevState[1];\n\n      if (areHookInputsEqual(nextDeps, prevDeps)) {\n        return prevState[0];\n      }\n    }\n  }\n\n  var nextValue = nextCreate();\n  hook.memoizedState = [nextValue, nextDeps];\n  return nextValue;\n}\n\nfunction mountDeferredValue(value) {\n  var _mountState = mountState(value),\n      prevValue = _mountState[0],\n      setValue = _mountState[1];\n\n  mountEffect(function () {\n    var prevTransition = ReactCurrentBatchConfig$1.transition;\n    ReactCurrentBatchConfig$1.transition = 1;\n\n    try {\n      setValue(value);\n    } finally {\n      ReactCurrentBatchConfig$1.transition = prevTransition;\n    }\n  }, [value]);\n  return prevValue;\n}\n\nfunction updateDeferredValue(value) {\n  var _updateState = updateState(),\n      prevValue = _updateState[0],\n      setValue = _updateState[1];\n\n  updateEffect(function () {\n    var prevTransition = ReactCurrentBatchConfig$1.transition;\n    ReactCurrentBatchConfig$1.transition = 1;\n\n    try {\n      setValue(value);\n    } finally {\n      ReactCurrentBatchConfig$1.transition = prevTransition;\n    }\n  }, [value]);\n  return prevValue;\n}\n\nfunction rerenderDeferredValue(value) {\n  var _rerenderState = rerenderState(),\n      prevValue = _rerenderState[0],\n      setValue = _rerenderState[1];\n\n  updateEffect(function () {\n    var prevTransition = ReactCurrentBatchConfig$1.transition;\n    ReactCurrentBatchConfig$1.transition = 1;\n\n    try {\n      setValue(value);\n    } finally {\n      ReactCurrentBatchConfig$1.transition = prevTransition;\n    }\n  }, [value]);\n  return prevValue;\n}\n\nfunction startTransition(setPending, callback) {\n  var priorityLevel = getCurrentPriorityLevel();\n\n  {\n    runWithPriority(priorityLevel < UserBlockingPriority$1 ? UserBlockingPriority$1 : priorityLevel, function () {\n      setPending(true);\n    });\n    runWithPriority(priorityLevel > NormalPriority$1 ? NormalPriority$1 : priorityLevel, function () {\n      var prevTransition = ReactCurrentBatchConfig$1.transition;\n      ReactCurrentBatchConfig$1.transition = 1;\n\n      try {\n        setPending(false);\n        callback();\n      } finally {\n        ReactCurrentBatchConfig$1.transition = prevTransition;\n      }\n    });\n  }\n}\n\nfunction mountTransition() {\n  var _mountState2 = mountState(false),\n      isPending = _mountState2[0],\n      setPending = _mountState2[1]; // The `start` method can be stored on a ref, since `setPending`\n  // never changes.\n\n\n  var start = startTransition.bind(null, setPending);\n  mountRef(start);\n  return [start, isPending];\n}\n\nfunction updateTransition() {\n  var _updateState2 = updateState(),\n      isPending = _updateState2[0];\n\n  var startRef = updateRef();\n  var start = startRef.current;\n  return [start, isPending];\n}\n\nfunction rerenderTransition() {\n  var _rerenderState2 = rerenderState(),\n      isPending = _rerenderState2[0];\n\n  var startRef = updateRef();\n  var start = startRef.current;\n  return [start, isPending];\n}\n\nvar isUpdatingOpaqueValueInRenderPhase = false;\nfunction getIsUpdatingOpaqueValueInRenderPhaseInDEV() {\n  {\n    return isUpdatingOpaqueValueInRenderPhase;\n  }\n}\n\nfunction warnOnOpaqueIdentifierAccessInDEV(fiber) {\n  {\n    // TODO: Should warn in effects and callbacks, too\n    var name = getComponentName(fiber.type) || 'Unknown';\n\n    if (getIsRendering() && !didWarnAboutUseOpaqueIdentifier[name]) {\n      error('The object passed back from useOpaqueIdentifier is meant to be ' + 'passed through to attributes only. Do not read the ' + 'value directly.');\n\n      didWarnAboutUseOpaqueIdentifier[name] = true;\n    }\n  }\n}\n\nfunction mountOpaqueIdentifier() {\n  var makeId =  makeClientIdInDEV.bind(null, warnOnOpaqueIdentifierAccessInDEV.bind(null, currentlyRenderingFiber$1)) ;\n\n  if (getIsHydrating()) {\n    var didUpgrade = false;\n    var fiber = currentlyRenderingFiber$1;\n\n    var readValue = function () {\n      if (!didUpgrade) {\n        // Only upgrade once. This works even inside the render phase because\n        // the update is added to a shared queue, which outlasts the\n        // in-progress render.\n        didUpgrade = true;\n\n        {\n          isUpdatingOpaqueValueInRenderPhase = true;\n          setId(makeId());\n          isUpdatingOpaqueValueInRenderPhase = false;\n          warnOnOpaqueIdentifierAccessInDEV(fiber);\n        }\n      }\n\n      {\n        {\n          throw Error( \"The object passed back from useOpaqueIdentifier is meant to be passed through to attributes only. Do not read the value directly.\" );\n        }\n      }\n    };\n\n    var id = makeOpaqueHydratingObject(readValue);\n    var setId = mountState(id)[1];\n\n    if ((currentlyRenderingFiber$1.mode & BlockingMode) === NoMode) {\n      currentlyRenderingFiber$1.flags |= Update | Passive;\n      pushEffect(HasEffect | Passive$1, function () {\n        setId(makeId());\n      }, undefined, null);\n    }\n\n    return id;\n  } else {\n    var _id = makeId();\n\n    mountState(_id);\n    return _id;\n  }\n}\n\nfunction updateOpaqueIdentifier() {\n  var id = updateState()[0];\n  return id;\n}\n\nfunction rerenderOpaqueIdentifier() {\n  var id = rerenderState()[0];\n  return id;\n}\n\nfunction dispatchAction(fiber, queue, action) {\n  {\n    if (typeof arguments[3] === 'function') {\n      error(\"State updates from the useState() and useReducer() Hooks don't support the \" + 'second callback argument. To execute a side effect after ' + 'rendering, declare it in the component body with useEffect().');\n    }\n  }\n\n  var eventTime = requestEventTime();\n  var lane = requestUpdateLane(fiber);\n  var update = {\n    lane: lane,\n    action: action,\n    eagerReducer: null,\n    eagerState: null,\n    next: null\n  }; // Append the update to the end of the list.\n\n  var pending = queue.pending;\n\n  if (pending === null) {\n    // This is the first update. Create a circular list.\n    update.next = update;\n  } else {\n    update.next = pending.next;\n    pending.next = update;\n  }\n\n  queue.pending = update;\n  var alternate = fiber.alternate;\n\n  if (fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1) {\n    // This is a render phase update. Stash it in a lazily-created map of\n    // queue -> linked list of updates. After this render pass, we'll restart\n    // and apply the stashed updates on top of the work-in-progress hook.\n    didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;\n  } else {\n    if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {\n      // The queue is currently empty, which means we can eagerly compute the\n      // next state before entering the render phase. If the new state is the\n      // same as the current state, we may be able to bail out entirely.\n      var lastRenderedReducer = queue.lastRenderedReducer;\n\n      if (lastRenderedReducer !== null) {\n        var prevDispatcher;\n\n        {\n          prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n        }\n\n        try {\n          var currentState = queue.lastRenderedState;\n          var eagerState = lastRenderedReducer(currentState, action); // Stash the eagerly computed state, and the reducer used to compute\n          // it, on the update object. If the reducer hasn't changed by the\n          // time we enter the render phase, then the eager state can be used\n          // without calling the reducer again.\n\n          update.eagerReducer = lastRenderedReducer;\n          update.eagerState = eagerState;\n\n          if (objectIs(eagerState, currentState)) {\n            // Fast path. We can bail out without scheduling React to re-render.\n            // It's still possible that we'll need to rebase this update later,\n            // if the component re-renders for a different reason and by that\n            // time the reducer has changed.\n            return;\n          }\n        } catch (error) {// Suppress the error. It will throw again in the render phase.\n        } finally {\n          {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        }\n      }\n    }\n\n    {\n      // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests\n      if ('undefined' !== typeof jest) {\n        warnIfNotScopedWithMatchingAct(fiber);\n        warnIfNotCurrentlyActingUpdatesInDev(fiber);\n      }\n    }\n\n    scheduleUpdateOnFiber(fiber, lane, eventTime);\n  }\n}\n\nvar ContextOnlyDispatcher = {\n  readContext: readContext,\n  useCallback: throwInvalidHookError,\n  useContext: throwInvalidHookError,\n  useEffect: throwInvalidHookError,\n  useImperativeHandle: throwInvalidHookError,\n  useLayoutEffect: throwInvalidHookError,\n  useMemo: throwInvalidHookError,\n  useReducer: throwInvalidHookError,\n  useRef: throwInvalidHookError,\n  useState: throwInvalidHookError,\n  useDebugValue: throwInvalidHookError,\n  useDeferredValue: throwInvalidHookError,\n  useTransition: throwInvalidHookError,\n  useMutableSource: throwInvalidHookError,\n  useOpaqueIdentifier: throwInvalidHookError,\n  unstable_isNewReconciler: enableNewReconciler\n};\nvar HooksDispatcherOnMountInDEV = null;\nvar HooksDispatcherOnMountWithHookTypesInDEV = null;\nvar HooksDispatcherOnUpdateInDEV = null;\nvar HooksDispatcherOnRerenderInDEV = null;\nvar InvalidNestedHooksDispatcherOnMountInDEV = null;\nvar InvalidNestedHooksDispatcherOnUpdateInDEV = null;\nvar InvalidNestedHooksDispatcherOnRerenderInDEV = null;\n\n{\n  var warnInvalidContextAccess = function () {\n    error('Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');\n  };\n\n  var warnInvalidHookAccess = function () {\n    error('Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. ' + 'You can only call Hooks at the top level of your React function. ' + 'For more information, see ' + 'https://reactjs.org/link/rules-of-hooks');\n  };\n\n  HooksDispatcherOnMountInDEV = {\n    readContext: function (context, observedBits) {\n      return readContext(context, observedBits);\n    },\n    useCallback: function (callback, deps) {\n      currentHookNameInDev = 'useCallback';\n      mountHookTypesDev();\n      checkDepsAreArrayDev(deps);\n      return mountCallback(callback, deps);\n    },\n    useContext: function (context, observedBits) {\n      currentHookNameInDev = 'useContext';\n      mountHookTypesDev();\n      return readContext(context, observedBits);\n    },\n    useEffect: function (create, deps) {\n      currentHookNameInDev = 'useEffect';\n      mountHookTypesDev();\n      checkDepsAreArrayDev(deps);\n      return mountEffect(create, deps);\n    },\n    useImperativeHandle: function (ref, create, deps) {\n      currentHookNameInDev = 'useImperativeHandle';\n      mountHookTypesDev();\n      checkDepsAreArrayDev(deps);\n      return mountImperativeHandle(ref, create, deps);\n    },\n    useLayoutEffect: function (create, deps) {\n      currentHookNameInDev = 'useLayoutEffect';\n      mountHookTypesDev();\n      checkDepsAreArrayDev(deps);\n      return mountLayoutEffect(create, deps);\n    },\n    useMemo: function (create, deps) {\n      currentHookNameInDev = 'useMemo';\n      mountHookTypesDev();\n      checkDepsAreArrayDev(deps);\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n\n      try {\n        return mountMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useReducer: function (reducer, initialArg, init) {\n      currentHookNameInDev = 'useReducer';\n      mountHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n\n      try {\n        return mountReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useRef: function (initialValue) {\n      currentHookNameInDev = 'useRef';\n      mountHookTypesDev();\n      return mountRef(initialValue);\n    },\n    useState: function (initialState) {\n      currentHookNameInDev = 'useState';\n      mountHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n\n      try {\n        return mountState(initialState);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useDebugValue: function (value, formatterFn) {\n      currentHookNameInDev = 'useDebugValue';\n      mountHookTypesDev();\n      return mountDebugValue();\n    },\n    useDeferredValue: function (value) {\n      currentHookNameInDev = 'useDeferredValue';\n      mountHookTypesDev();\n      return mountDeferredValue(value);\n    },\n    useTransition: function () {\n      currentHookNameInDev = 'useTransition';\n      mountHookTypesDev();\n      return mountTransition();\n    },\n    useMutableSource: function (source, getSnapshot, subscribe) {\n      currentHookNameInDev = 'useMutableSource';\n      mountHookTypesDev();\n      return mountMutableSource(source, getSnapshot, subscribe);\n    },\n    useOpaqueIdentifier: function () {\n      currentHookNameInDev = 'useOpaqueIdentifier';\n      mountHookTypesDev();\n      return mountOpaqueIdentifier();\n    },\n    unstable_isNewReconciler: enableNewReconciler\n  };\n  HooksDispatcherOnMountWithHookTypesInDEV = {\n    readContext: function (context, observedBits) {\n      return readContext(context, observedBits);\n    },\n    useCallback: function (callback, deps) {\n      currentHookNameInDev = 'useCallback';\n      updateHookTypesDev();\n      return mountCallback(callback, deps);\n    },\n    useContext: function (context, observedBits) {\n      currentHookNameInDev = 'useContext';\n      updateHookTypesDev();\n      return readContext(context, observedBits);\n    },\n    useEffect: function (create, deps) {\n      currentHookNameInDev = 'useEffect';\n      updateHookTypesDev();\n      return mountEffect(create, deps);\n    },\n    useImperativeHandle: function (ref, create, deps) {\n      currentHookNameInDev = 'useImperativeHandle';\n      updateHookTypesDev();\n      return mountImperativeHandle(ref, create, deps);\n    },\n    useLayoutEffect: function (create, deps) {\n      currentHookNameInDev = 'useLayoutEffect';\n      updateHookTypesDev();\n      return mountLayoutEffect(create, deps);\n    },\n    useMemo: function (create, deps) {\n      currentHookNameInDev = 'useMemo';\n      updateHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n\n      try {\n        return mountMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useReducer: function (reducer, initialArg, init) {\n      currentHookNameInDev = 'useReducer';\n      updateHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n\n      try {\n        return mountReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useRef: function (initialValue) {\n      currentHookNameInDev = 'useRef';\n      updateHookTypesDev();\n      return mountRef(initialValue);\n    },\n    useState: function (initialState) {\n      currentHookNameInDev = 'useState';\n      updateHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n\n      try {\n        return mountState(initialState);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useDebugValue: function (value, formatterFn) {\n      currentHookNameInDev = 'useDebugValue';\n      updateHookTypesDev();\n      return mountDebugValue();\n    },\n    useDeferredValue: function (value) {\n      currentHookNameInDev = 'useDeferredValue';\n      updateHookTypesDev();\n      return mountDeferredValue(value);\n    },\n    useTransition: function () {\n      currentHookNameInDev = 'useTransition';\n      updateHookTypesDev();\n      return mountTransition();\n    },\n    useMutableSource: function (source, getSnapshot, subscribe) {\n      currentHookNameInDev = 'useMutableSource';\n      updateHookTypesDev();\n      return mountMutableSource(source, getSnapshot, subscribe);\n    },\n    useOpaqueIdentifier: function () {\n      currentHookNameInDev = 'useOpaqueIdentifier';\n      updateHookTypesDev();\n      return mountOpaqueIdentifier();\n    },\n    unstable_isNewReconciler: enableNewReconciler\n  };\n  HooksDispatcherOnUpdateInDEV = {\n    readContext: function (context, observedBits) {\n      return readContext(context, observedBits);\n    },\n    useCallback: function (callback, deps) {\n      currentHookNameInDev = 'useCallback';\n      updateHookTypesDev();\n      return updateCallback(callback, deps);\n    },\n    useContext: function (context, observedBits) {\n      currentHookNameInDev = 'useContext';\n      updateHookTypesDev();\n      return readContext(context, observedBits);\n    },\n    useEffect: function (create, deps) {\n      currentHookNameInDev = 'useEffect';\n      updateHookTypesDev();\n      return updateEffect(create, deps);\n    },\n    useImperativeHandle: function (ref, create, deps) {\n      currentHookNameInDev = 'useImperativeHandle';\n      updateHookTypesDev();\n      return updateImperativeHandle(ref, create, deps);\n    },\n    useLayoutEffect: function (create, deps) {\n      currentHookNameInDev = 'useLayoutEffect';\n      updateHookTypesDev();\n      return updateLayoutEffect(create, deps);\n    },\n    useMemo: function (create, deps) {\n      currentHookNameInDev = 'useMemo';\n      updateHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n\n      try {\n        return updateMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useReducer: function (reducer, initialArg, init) {\n      currentHookNameInDev = 'useReducer';\n      updateHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n\n      try {\n        return updateReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useRef: function (initialValue) {\n      currentHookNameInDev = 'useRef';\n      updateHookTypesDev();\n      return updateRef();\n    },\n    useState: function (initialState) {\n      currentHookNameInDev = 'useState';\n      updateHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n\n      try {\n        return updateState(initialState);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useDebugValue: function (value, formatterFn) {\n      currentHookNameInDev = 'useDebugValue';\n      updateHookTypesDev();\n      return updateDebugValue();\n    },\n    useDeferredValue: function (value) {\n      currentHookNameInDev = 'useDeferredValue';\n      updateHookTypesDev();\n      return updateDeferredValue(value);\n    },\n    useTransition: function () {\n      currentHookNameInDev = 'useTransition';\n      updateHookTypesDev();\n      return updateTransition();\n    },\n    useMutableSource: function (source, getSnapshot, subscribe) {\n      currentHookNameInDev = 'useMutableSource';\n      updateHookTypesDev();\n      return updateMutableSource(source, getSnapshot, subscribe);\n    },\n    useOpaqueIdentifier: function () {\n      currentHookNameInDev = 'useOpaqueIdentifier';\n      updateHookTypesDev();\n      return updateOpaqueIdentifier();\n    },\n    unstable_isNewReconciler: enableNewReconciler\n  };\n  HooksDispatcherOnRerenderInDEV = {\n    readContext: function (context, observedBits) {\n      return readContext(context, observedBits);\n    },\n    useCallback: function (callback, deps) {\n      currentHookNameInDev = 'useCallback';\n      updateHookTypesDev();\n      return updateCallback(callback, deps);\n    },\n    useContext: function (context, observedBits) {\n      currentHookNameInDev = 'useContext';\n      updateHookTypesDev();\n      return readContext(context, observedBits);\n    },\n    useEffect: function (create, deps) {\n      currentHookNameInDev = 'useEffect';\n      updateHookTypesDev();\n      return updateEffect(create, deps);\n    },\n    useImperativeHandle: function (ref, create, deps) {\n      currentHookNameInDev = 'useImperativeHandle';\n      updateHookTypesDev();\n      return updateImperativeHandle(ref, create, deps);\n    },\n    useLayoutEffect: function (create, deps) {\n      currentHookNameInDev = 'useLayoutEffect';\n      updateHookTypesDev();\n      return updateLayoutEffect(create, deps);\n    },\n    useMemo: function (create, deps) {\n      currentHookNameInDev = 'useMemo';\n      updateHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;\n\n      try {\n        return updateMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useReducer: function (reducer, initialArg, init) {\n      currentHookNameInDev = 'useReducer';\n      updateHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;\n\n      try {\n        return rerenderReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useRef: function (initialValue) {\n      currentHookNameInDev = 'useRef';\n      updateHookTypesDev();\n      return updateRef();\n    },\n    useState: function (initialState) {\n      currentHookNameInDev = 'useState';\n      updateHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;\n\n      try {\n        return rerenderState(initialState);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useDebugValue: function (value, formatterFn) {\n      currentHookNameInDev = 'useDebugValue';\n      updateHookTypesDev();\n      return updateDebugValue();\n    },\n    useDeferredValue: function (value) {\n      currentHookNameInDev = 'useDeferredValue';\n      updateHookTypesDev();\n      return rerenderDeferredValue(value);\n    },\n    useTransition: function () {\n      currentHookNameInDev = 'useTransition';\n      updateHookTypesDev();\n      return rerenderTransition();\n    },\n    useMutableSource: function (source, getSnapshot, subscribe) {\n      currentHookNameInDev = 'useMutableSource';\n      updateHookTypesDev();\n      return updateMutableSource(source, getSnapshot, subscribe);\n    },\n    useOpaqueIdentifier: function () {\n      currentHookNameInDev = 'useOpaqueIdentifier';\n      updateHookTypesDev();\n      return rerenderOpaqueIdentifier();\n    },\n    unstable_isNewReconciler: enableNewReconciler\n  };\n  InvalidNestedHooksDispatcherOnMountInDEV = {\n    readContext: function (context, observedBits) {\n      warnInvalidContextAccess();\n      return readContext(context, observedBits);\n    },\n    useCallback: function (callback, deps) {\n      currentHookNameInDev = 'useCallback';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountCallback(callback, deps);\n    },\n    useContext: function (context, observedBits) {\n      currentHookNameInDev = 'useContext';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return readContext(context, observedBits);\n    },\n    useEffect: function (create, deps) {\n      currentHookNameInDev = 'useEffect';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountEffect(create, deps);\n    },\n    useImperativeHandle: function (ref, create, deps) {\n      currentHookNameInDev = 'useImperativeHandle';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountImperativeHandle(ref, create, deps);\n    },\n    useLayoutEffect: function (create, deps) {\n      currentHookNameInDev = 'useLayoutEffect';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountLayoutEffect(create, deps);\n    },\n    useMemo: function (create, deps) {\n      currentHookNameInDev = 'useMemo';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n\n      try {\n        return mountMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useReducer: function (reducer, initialArg, init) {\n      currentHookNameInDev = 'useReducer';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n\n      try {\n        return mountReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useRef: function (initialValue) {\n      currentHookNameInDev = 'useRef';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountRef(initialValue);\n    },\n    useState: function (initialState) {\n      currentHookNameInDev = 'useState';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n\n      try {\n        return mountState(initialState);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useDebugValue: function (value, formatterFn) {\n      currentHookNameInDev = 'useDebugValue';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountDebugValue();\n    },\n    useDeferredValue: function (value) {\n      currentHookNameInDev = 'useDeferredValue';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountDeferredValue(value);\n    },\n    useTransition: function () {\n      currentHookNameInDev = 'useTransition';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountTransition();\n    },\n    useMutableSource: function (source, getSnapshot, subscribe) {\n      currentHookNameInDev = 'useMutableSource';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountMutableSource(source, getSnapshot, subscribe);\n    },\n    useOpaqueIdentifier: function () {\n      currentHookNameInDev = 'useOpaqueIdentifier';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountOpaqueIdentifier();\n    },\n    unstable_isNewReconciler: enableNewReconciler\n  };\n  InvalidNestedHooksDispatcherOnUpdateInDEV = {\n    readContext: function (context, observedBits) {\n      warnInvalidContextAccess();\n      return readContext(context, observedBits);\n    },\n    useCallback: function (callback, deps) {\n      currentHookNameInDev = 'useCallback';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateCallback(callback, deps);\n    },\n    useContext: function (context, observedBits) {\n      currentHookNameInDev = 'useContext';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return readContext(context, observedBits);\n    },\n    useEffect: function (create, deps) {\n      currentHookNameInDev = 'useEffect';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateEffect(create, deps);\n    },\n    useImperativeHandle: function (ref, create, deps) {\n      currentHookNameInDev = 'useImperativeHandle';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateImperativeHandle(ref, create, deps);\n    },\n    useLayoutEffect: function (create, deps) {\n      currentHookNameInDev = 'useLayoutEffect';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateLayoutEffect(create, deps);\n    },\n    useMemo: function (create, deps) {\n      currentHookNameInDev = 'useMemo';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n\n      try {\n        return updateMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useReducer: function (reducer, initialArg, init) {\n      currentHookNameInDev = 'useReducer';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n\n      try {\n        return updateReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useRef: function (initialValue) {\n      currentHookNameInDev = 'useRef';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateRef();\n    },\n    useState: function (initialState) {\n      currentHookNameInDev = 'useState';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n\n      try {\n        return updateState(initialState);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useDebugValue: function (value, formatterFn) {\n      currentHookNameInDev = 'useDebugValue';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateDebugValue();\n    },\n    useDeferredValue: function (value) {\n      currentHookNameInDev = 'useDeferredValue';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateDeferredValue(value);\n    },\n    useTransition: function () {\n      currentHookNameInDev = 'useTransition';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateTransition();\n    },\n    useMutableSource: function (source, getSnapshot, subscribe) {\n      currentHookNameInDev = 'useMutableSource';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateMutableSource(source, getSnapshot, subscribe);\n    },\n    useOpaqueIdentifier: function () {\n      currentHookNameInDev = 'useOpaqueIdentifier';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateOpaqueIdentifier();\n    },\n    unstable_isNewReconciler: enableNewReconciler\n  };\n  InvalidNestedHooksDispatcherOnRerenderInDEV = {\n    readContext: function (context, observedBits) {\n      warnInvalidContextAccess();\n      return readContext(context, observedBits);\n    },\n    useCallback: function (callback, deps) {\n      currentHookNameInDev = 'useCallback';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateCallback(callback, deps);\n    },\n    useContext: function (context, observedBits) {\n      currentHookNameInDev = 'useContext';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return readContext(context, observedBits);\n    },\n    useEffect: function (create, deps) {\n      currentHookNameInDev = 'useEffect';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateEffect(create, deps);\n    },\n    useImperativeHandle: function (ref, create, deps) {\n      currentHookNameInDev = 'useImperativeHandle';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateImperativeHandle(ref, create, deps);\n    },\n    useLayoutEffect: function (create, deps) {\n      currentHookNameInDev = 'useLayoutEffect';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateLayoutEffect(create, deps);\n    },\n    useMemo: function (create, deps) {\n      currentHookNameInDev = 'useMemo';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n\n      try {\n        return updateMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useReducer: function (reducer, initialArg, init) {\n      currentHookNameInDev = 'useReducer';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n\n      try {\n        return rerenderReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useRef: function (initialValue) {\n      currentHookNameInDev = 'useRef';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateRef();\n    },\n    useState: function (initialState) {\n      currentHookNameInDev = 'useState';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n\n      try {\n        return rerenderState(initialState);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useDebugValue: function (value, formatterFn) {\n      currentHookNameInDev = 'useDebugValue';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateDebugValue();\n    },\n    useDeferredValue: function (value) {\n      currentHookNameInDev = 'useDeferredValue';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return rerenderDeferredValue(value);\n    },\n    useTransition: function () {\n      currentHookNameInDev = 'useTransition';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return rerenderTransition();\n    },\n    useMutableSource: function (source, getSnapshot, subscribe) {\n      currentHookNameInDev = 'useMutableSource';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateMutableSource(source, getSnapshot, subscribe);\n    },\n    useOpaqueIdentifier: function () {\n      currentHookNameInDev = 'useOpaqueIdentifier';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return rerenderOpaqueIdentifier();\n    },\n    unstable_isNewReconciler: enableNewReconciler\n  };\n}\n\nvar now$2 = Scheduler.unstable_now;\nvar commitTime = 0;\nvar profilerStartTime = -1;\n\nfunction getCommitTime() {\n  return commitTime;\n}\n\nfunction recordCommitTime() {\n\n  commitTime = now$2();\n}\n\nfunction startProfilerTimer(fiber) {\n\n  profilerStartTime = now$2();\n\n  if (fiber.actualStartTime < 0) {\n    fiber.actualStartTime = now$2();\n  }\n}\n\nfunction stopProfilerTimerIfRunning(fiber) {\n\n  profilerStartTime = -1;\n}\n\nfunction stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {\n\n  if (profilerStartTime >= 0) {\n    var elapsedTime = now$2() - profilerStartTime;\n    fiber.actualDuration += elapsedTime;\n\n    if (overrideBaseTime) {\n      fiber.selfBaseDuration = elapsedTime;\n    }\n\n    profilerStartTime = -1;\n  }\n}\n\nfunction transferActualDuration(fiber) {\n  // Transfer time spent rendering these children so we don't lose it\n  // after we rerender. This is used as a helper in special cases\n  // where we should count the work of multiple passes.\n  var child = fiber.child;\n\n  while (child) {\n    fiber.actualDuration += child.actualDuration;\n    child = child.sibling;\n  }\n}\n\nvar ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;\nvar didReceiveUpdate = false;\nvar didWarnAboutBadClass;\nvar didWarnAboutModulePatternComponent;\nvar didWarnAboutContextTypeOnFunctionComponent;\nvar didWarnAboutGetDerivedStateOnFunctionComponent;\nvar didWarnAboutFunctionRefs;\nvar didWarnAboutReassigningProps;\nvar didWarnAboutRevealOrder;\nvar didWarnAboutTailOptions;\n\n{\n  didWarnAboutBadClass = {};\n  didWarnAboutModulePatternComponent = {};\n  didWarnAboutContextTypeOnFunctionComponent = {};\n  didWarnAboutGetDerivedStateOnFunctionComponent = {};\n  didWarnAboutFunctionRefs = {};\n  didWarnAboutReassigningProps = false;\n  didWarnAboutRevealOrder = {};\n  didWarnAboutTailOptions = {};\n}\n\nfunction reconcileChildren(current, workInProgress, nextChildren, renderLanes) {\n  if (current === null) {\n    // If this is a fresh new component that hasn't been rendered yet, we\n    // won't update its child set by applying minimal side-effects. Instead,\n    // we will add them all to the child before it gets rendered. That means\n    // we can optimize this reconciliation pass by not tracking side-effects.\n    workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderLanes);\n  } else {\n    // If the current child is the same as the work in progress, it means that\n    // we haven't yet started any work on these children. Therefore, we use\n    // the clone algorithm to create a copy of all the current children.\n    // If we had any progressed work already, that is invalid at this point so\n    // let's throw it out.\n    workInProgress.child = reconcileChildFibers(workInProgress, current.child, nextChildren, renderLanes);\n  }\n}\n\nfunction forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderLanes) {\n  // This function is fork of reconcileChildren. It's used in cases where we\n  // want to reconcile without matching against the existing set. This has the\n  // effect of all current children being unmounted; even if the type and key\n  // are the same, the old child is unmounted and a new child is created.\n  //\n  // To do this, we're going to go through the reconcile algorithm twice. In\n  // the first pass, we schedule a deletion for all the current children by\n  // passing null.\n  workInProgress.child = reconcileChildFibers(workInProgress, current.child, null, renderLanes); // In the second pass, we mount the new children. The trick here is that we\n  // pass null in place of where we usually pass the current child set. This has\n  // the effect of remounting all children regardless of whether their\n  // identities match.\n\n  workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderLanes);\n}\n\nfunction updateForwardRef(current, workInProgress, Component, nextProps, renderLanes) {\n  // TODO: current can be non-null here even if the component\n  // hasn't yet mounted. This happens after the first render suspends.\n  // We'll need to figure out if this is fine or can cause issues.\n  {\n    if (workInProgress.type !== workInProgress.elementType) {\n      // Lazy component props can't be validated in createElement\n      // because they're only guaranteed to be resolved here.\n      var innerPropTypes = Component.propTypes;\n\n      if (innerPropTypes) {\n        checkPropTypes(innerPropTypes, nextProps, // Resolved props\n        'prop', getComponentName(Component));\n      }\n    }\n  }\n\n  var render = Component.render;\n  var ref = workInProgress.ref; // The rest is a fork of updateFunctionComponent\n\n  var nextChildren;\n  prepareToReadContext(workInProgress, renderLanes);\n\n  {\n    ReactCurrentOwner$1.current = workInProgress;\n    setIsRendering(true);\n    nextChildren = renderWithHooks(current, workInProgress, render, nextProps, ref, renderLanes);\n\n    if ( workInProgress.mode & StrictMode) {\n      disableLogs();\n\n      try {\n        nextChildren = renderWithHooks(current, workInProgress, render, nextProps, ref, renderLanes);\n      } finally {\n        reenableLogs();\n      }\n    }\n\n    setIsRendering(false);\n  }\n\n  if (current !== null && !didReceiveUpdate) {\n    bailoutHooks(current, workInProgress, renderLanes);\n    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n  } // React DevTools reads this flag.\n\n\n  workInProgress.flags |= PerformedWork;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateMemoComponent(current, workInProgress, Component, nextProps, updateLanes, renderLanes) {\n  if (current === null) {\n    var type = Component.type;\n\n    if (isSimpleFunctionComponent(type) && Component.compare === null && // SimpleMemoComponent codepath doesn't resolve outer props either.\n    Component.defaultProps === undefined) {\n      var resolvedType = type;\n\n      {\n        resolvedType = resolveFunctionForHotReloading(type);\n      } // If this is a plain function component without default props,\n      // and with only the default shallow comparison, we upgrade it\n      // to a SimpleMemoComponent to allow fast path updates.\n\n\n      workInProgress.tag = SimpleMemoComponent;\n      workInProgress.type = resolvedType;\n\n      {\n        validateFunctionComponentInDev(workInProgress, type);\n      }\n\n      return updateSimpleMemoComponent(current, workInProgress, resolvedType, nextProps, updateLanes, renderLanes);\n    }\n\n    {\n      var innerPropTypes = type.propTypes;\n\n      if (innerPropTypes) {\n        // Inner memo component props aren't currently validated in createElement.\n        // We could move it there, but we'd still need this for lazy code path.\n        checkPropTypes(innerPropTypes, nextProps, // Resolved props\n        'prop', getComponentName(type));\n      }\n    }\n\n    var child = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress, workInProgress.mode, renderLanes);\n    child.ref = workInProgress.ref;\n    child.return = workInProgress;\n    workInProgress.child = child;\n    return child;\n  }\n\n  {\n    var _type = Component.type;\n    var _innerPropTypes = _type.propTypes;\n\n    if (_innerPropTypes) {\n      // Inner memo component props aren't currently validated in createElement.\n      // We could move it there, but we'd still need this for lazy code path.\n      checkPropTypes(_innerPropTypes, nextProps, // Resolved props\n      'prop', getComponentName(_type));\n    }\n  }\n\n  var currentChild = current.child; // This is always exactly one child\n\n  if (!includesSomeLane(updateLanes, renderLanes)) {\n    // This will be the props with resolved defaultProps,\n    // unlike current.memoizedProps which will be the unresolved ones.\n    var prevProps = currentChild.memoizedProps; // Default to shallow comparison\n\n    var compare = Component.compare;\n    compare = compare !== null ? compare : shallowEqual;\n\n    if (compare(prevProps, nextProps) && current.ref === workInProgress.ref) {\n      return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n    }\n  } // React DevTools reads this flag.\n\n\n  workInProgress.flags |= PerformedWork;\n  var newChild = createWorkInProgress(currentChild, nextProps);\n  newChild.ref = workInProgress.ref;\n  newChild.return = workInProgress;\n  workInProgress.child = newChild;\n  return newChild;\n}\n\nfunction updateSimpleMemoComponent(current, workInProgress, Component, nextProps, updateLanes, renderLanes) {\n  // TODO: current can be non-null here even if the component\n  // hasn't yet mounted. This happens when the inner render suspends.\n  // We'll need to figure out if this is fine or can cause issues.\n  {\n    if (workInProgress.type !== workInProgress.elementType) {\n      // Lazy component props can't be validated in createElement\n      // because they're only guaranteed to be resolved here.\n      var outerMemoType = workInProgress.elementType;\n\n      if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {\n        // We warn when you define propTypes on lazy()\n        // so let's just skip over it to find memo() outer wrapper.\n        // Inner props for memo are validated later.\n        var lazyComponent = outerMemoType;\n        var payload = lazyComponent._payload;\n        var init = lazyComponent._init;\n\n        try {\n          outerMemoType = init(payload);\n        } catch (x) {\n          outerMemoType = null;\n        } // Inner propTypes will be validated in the function component path.\n\n\n        var outerPropTypes = outerMemoType && outerMemoType.propTypes;\n\n        if (outerPropTypes) {\n          checkPropTypes(outerPropTypes, nextProps, // Resolved (SimpleMemoComponent has no defaultProps)\n          'prop', getComponentName(outerMemoType));\n        }\n      }\n    }\n  }\n\n  if (current !== null) {\n    var prevProps = current.memoizedProps;\n\n    if (shallowEqual(prevProps, nextProps) && current.ref === workInProgress.ref && ( // Prevent bailout if the implementation changed due to hot reload.\n     workInProgress.type === current.type )) {\n      didReceiveUpdate = false;\n\n      if (!includesSomeLane(renderLanes, updateLanes)) {\n        // The pending lanes were cleared at the beginning of beginWork. We're\n        // about to bail out, but there might be other lanes that weren't\n        // included in the current render. Usually, the priority level of the\n        // remaining updates is accumlated during the evaluation of the\n        // component (i.e. when processing the update queue). But since since\n        // we're bailing out early *without* evaluating the component, we need\n        // to account for it here, too. Reset to the value of the current fiber.\n        // NOTE: This only applies to SimpleMemoComponent, not MemoComponent,\n        // because a MemoComponent fiber does not have hooks or an update queue;\n        // rather, it wraps around an inner component, which may or may not\n        // contains hooks.\n        // TODO: Move the reset at in beginWork out of the common path so that\n        // this is no longer necessary.\n        workInProgress.lanes = current.lanes;\n        return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n      } else if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) {\n        // This is a special case that only exists for legacy mode.\n        // See https://github.com/facebook/react/pull/19216.\n        didReceiveUpdate = true;\n      }\n    }\n  }\n\n  return updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes);\n}\n\nfunction updateOffscreenComponent(current, workInProgress, renderLanes) {\n  var nextProps = workInProgress.pendingProps;\n  var nextChildren = nextProps.children;\n  var prevState = current !== null ? current.memoizedState : null;\n\n  if (nextProps.mode === 'hidden' || nextProps.mode === 'unstable-defer-without-hiding') {\n    if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n      // In legacy sync mode, don't defer the subtree. Render it now.\n      // TODO: Figure out what we should do in Blocking mode.\n      var nextState = {\n        baseLanes: NoLanes\n      };\n      workInProgress.memoizedState = nextState;\n      pushRenderLanes(workInProgress, renderLanes);\n    } else if (!includesSomeLane(renderLanes, OffscreenLane)) {\n      var nextBaseLanes;\n\n      if (prevState !== null) {\n        var prevBaseLanes = prevState.baseLanes;\n        nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes);\n      } else {\n        nextBaseLanes = renderLanes;\n      } // Schedule this fiber to re-render at offscreen priority. Then bailout.\n\n\n      {\n        markSpawnedWork(OffscreenLane);\n      }\n\n      workInProgress.lanes = workInProgress.childLanes = laneToLanes(OffscreenLane);\n      var _nextState = {\n        baseLanes: nextBaseLanes\n      };\n      workInProgress.memoizedState = _nextState; // We're about to bail out, but we need to push this to the stack anyway\n      // to avoid a push/pop misalignment.\n\n      pushRenderLanes(workInProgress, nextBaseLanes);\n      return null;\n    } else {\n      // Rendering at offscreen, so we can clear the base lanes.\n      var _nextState2 = {\n        baseLanes: NoLanes\n      };\n      workInProgress.memoizedState = _nextState2; // Push the lanes that were skipped when we bailed out.\n\n      var subtreeRenderLanes = prevState !== null ? prevState.baseLanes : renderLanes;\n      pushRenderLanes(workInProgress, subtreeRenderLanes);\n    }\n  } else {\n    var _subtreeRenderLanes;\n\n    if (prevState !== null) {\n      _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes); // Since we're not hidden anymore, reset the state\n\n      workInProgress.memoizedState = null;\n    } else {\n      // We weren't previously hidden, and we still aren't, so there's nothing\n      // special to do. Need to push to the stack regardless, though, to avoid\n      // a push/pop misalignment.\n      _subtreeRenderLanes = renderLanes;\n    }\n\n    pushRenderLanes(workInProgress, _subtreeRenderLanes);\n  }\n\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n} // Note: These happen to have identical begin phases, for now. We shouldn't hold\n// ourselves to this constraint, though. If the behavior diverges, we should\n// fork the function.\n\n\nvar updateLegacyHiddenComponent = updateOffscreenComponent;\n\nfunction updateFragment(current, workInProgress, renderLanes) {\n  var nextChildren = workInProgress.pendingProps;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateMode(current, workInProgress, renderLanes) {\n  var nextChildren = workInProgress.pendingProps.children;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateProfiler(current, workInProgress, renderLanes) {\n  {\n    workInProgress.flags |= Update; // Reset effect durations for the next eventual effect phase.\n    // These are reset during render to allow the DevTools commit hook a chance to read them,\n\n    var stateNode = workInProgress.stateNode;\n    stateNode.effectDuration = 0;\n    stateNode.passiveEffectDuration = 0;\n  }\n\n  var nextProps = workInProgress.pendingProps;\n  var nextChildren = nextProps.children;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction markRef(current, workInProgress) {\n  var ref = workInProgress.ref;\n\n  if (current === null && ref !== null || current !== null && current.ref !== ref) {\n    // Schedule a Ref effect\n    workInProgress.flags |= Ref;\n  }\n}\n\nfunction updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes) {\n  {\n    if (workInProgress.type !== workInProgress.elementType) {\n      // Lazy component props can't be validated in createElement\n      // because they're only guaranteed to be resolved here.\n      var innerPropTypes = Component.propTypes;\n\n      if (innerPropTypes) {\n        checkPropTypes(innerPropTypes, nextProps, // Resolved props\n        'prop', getComponentName(Component));\n      }\n    }\n  }\n\n  var context;\n\n  {\n    var unmaskedContext = getUnmaskedContext(workInProgress, Component, true);\n    context = getMaskedContext(workInProgress, unmaskedContext);\n  }\n\n  var nextChildren;\n  prepareToReadContext(workInProgress, renderLanes);\n\n  {\n    ReactCurrentOwner$1.current = workInProgress;\n    setIsRendering(true);\n    nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, context, renderLanes);\n\n    if ( workInProgress.mode & StrictMode) {\n      disableLogs();\n\n      try {\n        nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, context, renderLanes);\n      } finally {\n        reenableLogs();\n      }\n    }\n\n    setIsRendering(false);\n  }\n\n  if (current !== null && !didReceiveUpdate) {\n    bailoutHooks(current, workInProgress, renderLanes);\n    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n  } // React DevTools reads this flag.\n\n\n  workInProgress.flags |= PerformedWork;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateClassComponent(current, workInProgress, Component, nextProps, renderLanes) {\n  {\n    if (workInProgress.type !== workInProgress.elementType) {\n      // Lazy component props can't be validated in createElement\n      // because they're only guaranteed to be resolved here.\n      var innerPropTypes = Component.propTypes;\n\n      if (innerPropTypes) {\n        checkPropTypes(innerPropTypes, nextProps, // Resolved props\n        'prop', getComponentName(Component));\n      }\n    }\n  } // Push context providers early to prevent context stack mismatches.\n  // During mounting we don't know the child context yet as the instance doesn't exist.\n  // We will invalidate the child context in finishClassComponent() right after rendering.\n\n\n  var hasContext;\n\n  if (isContextProvider(Component)) {\n    hasContext = true;\n    pushContextProvider(workInProgress);\n  } else {\n    hasContext = false;\n  }\n\n  prepareToReadContext(workInProgress, renderLanes);\n  var instance = workInProgress.stateNode;\n  var shouldUpdate;\n\n  if (instance === null) {\n    if (current !== null) {\n      // A class component without an instance only mounts if it suspended\n      // inside a non-concurrent tree, in an inconsistent state. We want to\n      // treat it like a new mount, even though an empty version of it already\n      // committed. Disconnect the alternate pointers.\n      current.alternate = null;\n      workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect\n\n      workInProgress.flags |= Placement;\n    } // In the initial pass we might need to construct the instance.\n\n\n    constructClassInstance(workInProgress, Component, nextProps);\n    mountClassInstance(workInProgress, Component, nextProps, renderLanes);\n    shouldUpdate = true;\n  } else if (current === null) {\n    // In a resume, we'll already have an instance we can reuse.\n    shouldUpdate = resumeMountClassInstance(workInProgress, Component, nextProps, renderLanes);\n  } else {\n    shouldUpdate = updateClassInstance(current, workInProgress, Component, nextProps, renderLanes);\n  }\n\n  var nextUnitOfWork = finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderLanes);\n\n  {\n    var inst = workInProgress.stateNode;\n\n    if (shouldUpdate && inst.props !== nextProps) {\n      if (!didWarnAboutReassigningProps) {\n        error('It looks like %s is reassigning its own `this.props` while rendering. ' + 'This is not supported and can lead to confusing bugs.', getComponentName(workInProgress.type) || 'a component');\n      }\n\n      didWarnAboutReassigningProps = true;\n    }\n  }\n\n  return nextUnitOfWork;\n}\n\nfunction finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderLanes) {\n  // Refs should update even if shouldComponentUpdate returns false\n  markRef(current, workInProgress);\n  var didCaptureError = (workInProgress.flags & DidCapture) !== NoFlags;\n\n  if (!shouldUpdate && !didCaptureError) {\n    // Context providers should defer to sCU for rendering\n    if (hasContext) {\n      invalidateContextProvider(workInProgress, Component, false);\n    }\n\n    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n  }\n\n  var instance = workInProgress.stateNode; // Rerender\n\n  ReactCurrentOwner$1.current = workInProgress;\n  var nextChildren;\n\n  if (didCaptureError && typeof Component.getDerivedStateFromError !== 'function') {\n    // If we captured an error, but getDerivedStateFromError is not defined,\n    // unmount all the children. componentDidCatch will schedule an update to\n    // re-render a fallback. This is temporary until we migrate everyone to\n    // the new API.\n    // TODO: Warn in a future release.\n    nextChildren = null;\n\n    {\n      stopProfilerTimerIfRunning();\n    }\n  } else {\n    {\n      setIsRendering(true);\n      nextChildren = instance.render();\n\n      if ( workInProgress.mode & StrictMode) {\n        disableLogs();\n\n        try {\n          instance.render();\n        } finally {\n          reenableLogs();\n        }\n      }\n\n      setIsRendering(false);\n    }\n  } // React DevTools reads this flag.\n\n\n  workInProgress.flags |= PerformedWork;\n\n  if (current !== null && didCaptureError) {\n    // If we're recovering from an error, reconcile without reusing any of\n    // the existing children. Conceptually, the normal children and the children\n    // that are shown on error are two different sets, so we shouldn't reuse\n    // normal children even if their identities match.\n    forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderLanes);\n  } else {\n    reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  } // Memoize state using the values we just used to render.\n  // TODO: Restructure so we never read values from the instance.\n\n\n  workInProgress.memoizedState = instance.state; // The context might have changed so we need to recalculate it.\n\n  if (hasContext) {\n    invalidateContextProvider(workInProgress, Component, true);\n  }\n\n  return workInProgress.child;\n}\n\nfunction pushHostRootContext(workInProgress) {\n  var root = workInProgress.stateNode;\n\n  if (root.pendingContext) {\n    pushTopLevelContextObject(workInProgress, root.pendingContext, root.pendingContext !== root.context);\n  } else if (root.context) {\n    // Should always be set\n    pushTopLevelContextObject(workInProgress, root.context, false);\n  }\n\n  pushHostContainer(workInProgress, root.containerInfo);\n}\n\nfunction updateHostRoot(current, workInProgress, renderLanes) {\n  pushHostRootContext(workInProgress);\n  var updateQueue = workInProgress.updateQueue;\n\n  if (!(current !== null && updateQueue !== null)) {\n    {\n      throw Error( \"If the root does not have an updateQueue, we should have already bailed out. This error is likely caused by a bug in React. Please file an issue.\" );\n    }\n  }\n\n  var nextProps = workInProgress.pendingProps;\n  var prevState = workInProgress.memoizedState;\n  var prevChildren = prevState !== null ? prevState.element : null;\n  cloneUpdateQueue(current, workInProgress);\n  processUpdateQueue(workInProgress, nextProps, null, renderLanes);\n  var nextState = workInProgress.memoizedState; // Caution: React DevTools currently depends on this property\n  // being called \"element\".\n\n  var nextChildren = nextState.element;\n\n  if (nextChildren === prevChildren) {\n    resetHydrationState();\n    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n  }\n\n  var root = workInProgress.stateNode;\n\n  if (root.hydrate && enterHydrationState(workInProgress)) {\n    // If we don't have any current children this might be the first pass.\n    // We always try to hydrate. If this isn't a hydration pass there won't\n    // be any children to hydrate which is effectively the same thing as\n    // not hydrating.\n    if (supportsHydration) {\n      var mutableSourceEagerHydrationData = root.mutableSourceEagerHydrationData;\n\n      if (mutableSourceEagerHydrationData != null) {\n        for (var i = 0; i < mutableSourceEagerHydrationData.length; i += 2) {\n          var mutableSource = mutableSourceEagerHydrationData[i];\n          var version = mutableSourceEagerHydrationData[i + 1];\n          setWorkInProgressVersion(mutableSource, version);\n        }\n      }\n    }\n\n    var child = mountChildFibers(workInProgress, null, nextChildren, renderLanes);\n    workInProgress.child = child;\n    var node = child;\n\n    while (node) {\n      // Mark each child as hydrating. This is a fast path to know whether this\n      // tree is part of a hydrating tree. This is used to determine if a child\n      // node has fully mounted yet, and for scheduling event replaying.\n      // Conceptually this is similar to Placement in that a new subtree is\n      // inserted into the React tree here. It just happens to not need DOM\n      // mutations because it already exists.\n      node.flags = node.flags & ~Placement | Hydrating;\n      node = node.sibling;\n    }\n  } else {\n    // Otherwise reset hydration state in case we aborted and resumed another\n    // root.\n    reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n    resetHydrationState();\n  }\n\n  return workInProgress.child;\n}\n\nfunction updateHostComponent(current, workInProgress, renderLanes) {\n  pushHostContext(workInProgress);\n\n  if (current === null) {\n    tryToClaimNextHydratableInstance(workInProgress);\n  }\n\n  var type = workInProgress.type;\n  var nextProps = workInProgress.pendingProps;\n  var prevProps = current !== null ? current.memoizedProps : null;\n  var nextChildren = nextProps.children;\n  var isDirectTextChild = shouldSetTextContent(type, nextProps);\n\n  if (isDirectTextChild) {\n    // We special case a direct text child of a host node. This is a common\n    // case. We won't handle it as a reified child. We will instead handle\n    // this in the host environment that also has access to this prop. That\n    // avoids allocating another HostText fiber and traversing it.\n    nextChildren = null;\n  } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {\n    // If we're switching from a direct text child to a normal child, or to\n    // empty, we need to schedule the text content to be reset.\n    workInProgress.flags |= ContentReset;\n  }\n\n  markRef(current, workInProgress);\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateHostText(current, workInProgress) {\n  if (current === null) {\n    tryToClaimNextHydratableInstance(workInProgress);\n  } // Nothing to do here. This is terminal. We'll do the completion step\n  // immediately after.\n\n\n  return null;\n}\n\nfunction mountLazyComponent(_current, workInProgress, elementType, updateLanes, renderLanes) {\n  if (_current !== null) {\n    // A lazy component only mounts if it suspended inside a non-\n    // concurrent tree, in an inconsistent state. We want to treat it like\n    // a new mount, even though an empty version of it already committed.\n    // Disconnect the alternate pointers.\n    _current.alternate = null;\n    workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect\n\n    workInProgress.flags |= Placement;\n  }\n\n  var props = workInProgress.pendingProps;\n  var lazyComponent = elementType;\n  var payload = lazyComponent._payload;\n  var init = lazyComponent._init;\n  var Component = init(payload); // Store the unwrapped component in the type.\n\n  workInProgress.type = Component;\n  var resolvedTag = workInProgress.tag = resolveLazyComponentTag(Component);\n  var resolvedProps = resolveDefaultProps(Component, props);\n  var child;\n\n  switch (resolvedTag) {\n    case FunctionComponent:\n      {\n        {\n          validateFunctionComponentInDev(workInProgress, Component);\n          workInProgress.type = Component = resolveFunctionForHotReloading(Component);\n        }\n\n        child = updateFunctionComponent(null, workInProgress, Component, resolvedProps, renderLanes);\n        return child;\n      }\n\n    case ClassComponent:\n      {\n        {\n          workInProgress.type = Component = resolveClassForHotReloading(Component);\n        }\n\n        child = updateClassComponent(null, workInProgress, Component, resolvedProps, renderLanes);\n        return child;\n      }\n\n    case ForwardRef:\n      {\n        {\n          workInProgress.type = Component = resolveForwardRefForHotReloading(Component);\n        }\n\n        child = updateForwardRef(null, workInProgress, Component, resolvedProps, renderLanes);\n        return child;\n      }\n\n    case MemoComponent:\n      {\n        {\n          if (workInProgress.type !== workInProgress.elementType) {\n            var outerPropTypes = Component.propTypes;\n\n            if (outerPropTypes) {\n              checkPropTypes(outerPropTypes, resolvedProps, // Resolved for outer only\n              'prop', getComponentName(Component));\n            }\n          }\n        }\n\n        child = updateMemoComponent(null, workInProgress, Component, resolveDefaultProps(Component.type, resolvedProps), // The inner type can have defaults too\n        updateLanes, renderLanes);\n        return child;\n      }\n  }\n\n  var hint = '';\n\n  {\n    if (Component !== null && typeof Component === 'object' && Component.$$typeof === REACT_LAZY_TYPE) {\n      hint = ' Did you wrap a component in React.lazy() more than once?';\n    }\n  } // This message intentionally doesn't mention ForwardRef or MemoComponent\n  // because the fact that it's a separate type of work is an\n  // implementation detail.\n\n\n  {\n    {\n      throw Error( \"Element type is invalid. Received a promise that resolves to: \" + Component + \". Lazy element type must resolve to a class or function.\" + hint );\n    }\n  }\n}\n\nfunction mountIncompleteClassComponent(_current, workInProgress, Component, nextProps, renderLanes) {\n  if (_current !== null) {\n    // An incomplete component only mounts if it suspended inside a non-\n    // concurrent tree, in an inconsistent state. We want to treat it like\n    // a new mount, even though an empty version of it already committed.\n    // Disconnect the alternate pointers.\n    _current.alternate = null;\n    workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect\n\n    workInProgress.flags |= Placement;\n  } // Promote the fiber to a class and try rendering again.\n\n\n  workInProgress.tag = ClassComponent; // The rest of this function is a fork of `updateClassComponent`\n  // Push context providers early to prevent context stack mismatches.\n  // During mounting we don't know the child context yet as the instance doesn't exist.\n  // We will invalidate the child context in finishClassComponent() right after rendering.\n\n  var hasContext;\n\n  if (isContextProvider(Component)) {\n    hasContext = true;\n    pushContextProvider(workInProgress);\n  } else {\n    hasContext = false;\n  }\n\n  prepareToReadContext(workInProgress, renderLanes);\n  constructClassInstance(workInProgress, Component, nextProps);\n  mountClassInstance(workInProgress, Component, nextProps, renderLanes);\n  return finishClassComponent(null, workInProgress, Component, true, hasContext, renderLanes);\n}\n\nfunction mountIndeterminateComponent(_current, workInProgress, Component, renderLanes) {\n  if (_current !== null) {\n    // An indeterminate component only mounts if it suspended inside a non-\n    // concurrent tree, in an inconsistent state. We want to treat it like\n    // a new mount, even though an empty version of it already committed.\n    // Disconnect the alternate pointers.\n    _current.alternate = null;\n    workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect\n\n    workInProgress.flags |= Placement;\n  }\n\n  var props = workInProgress.pendingProps;\n  var context;\n\n  {\n    var unmaskedContext = getUnmaskedContext(workInProgress, Component, false);\n    context = getMaskedContext(workInProgress, unmaskedContext);\n  }\n\n  prepareToReadContext(workInProgress, renderLanes);\n  var value;\n\n  {\n    if (Component.prototype && typeof Component.prototype.render === 'function') {\n      var componentName = getComponentName(Component) || 'Unknown';\n\n      if (!didWarnAboutBadClass[componentName]) {\n        error(\"The <%s /> component appears to have a render method, but doesn't extend React.Component. \" + 'This is likely to cause errors. Change %s to extend React.Component instead.', componentName, componentName);\n\n        didWarnAboutBadClass[componentName] = true;\n      }\n    }\n\n    if (workInProgress.mode & StrictMode) {\n      ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, null);\n    }\n\n    setIsRendering(true);\n    ReactCurrentOwner$1.current = workInProgress;\n    value = renderWithHooks(null, workInProgress, Component, props, context, renderLanes);\n    setIsRendering(false);\n  } // React DevTools reads this flag.\n\n\n  workInProgress.flags |= PerformedWork;\n\n  {\n    // Support for module components is deprecated and is removed behind a flag.\n    // Whether or not it would crash later, we want to show a good message in DEV first.\n    if (typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {\n      var _componentName = getComponentName(Component) || 'Unknown';\n\n      if (!didWarnAboutModulePatternComponent[_componentName]) {\n        error('The <%s /> component appears to be a function component that returns a class instance. ' + 'Change %s to a class that extends React.Component instead. ' + \"If you can't use a class try assigning the prototype on the function as a workaround. \" + \"`%s.prototype = React.Component.prototype`. Don't use an arrow function since it \" + 'cannot be called with `new` by React.', _componentName, _componentName, _componentName);\n\n        didWarnAboutModulePatternComponent[_componentName] = true;\n      }\n    }\n  }\n\n  if ( // Run these checks in production only if the flag is off.\n  // Eventually we'll delete this branch altogether.\n   typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {\n    {\n      var _componentName2 = getComponentName(Component) || 'Unknown';\n\n      if (!didWarnAboutModulePatternComponent[_componentName2]) {\n        error('The <%s /> component appears to be a function component that returns a class instance. ' + 'Change %s to a class that extends React.Component instead. ' + \"If you can't use a class try assigning the prototype on the function as a workaround. \" + \"`%s.prototype = React.Component.prototype`. Don't use an arrow function since it \" + 'cannot be called with `new` by React.', _componentName2, _componentName2, _componentName2);\n\n        didWarnAboutModulePatternComponent[_componentName2] = true;\n      }\n    } // Proceed under the assumption that this is a class instance\n\n\n    workInProgress.tag = ClassComponent; // Throw out any hooks that were used.\n\n    workInProgress.memoizedState = null;\n    workInProgress.updateQueue = null; // Push context providers early to prevent context stack mismatches.\n    // During mounting we don't know the child context yet as the instance doesn't exist.\n    // We will invalidate the child context in finishClassComponent() right after rendering.\n\n    var hasContext = false;\n\n    if (isContextProvider(Component)) {\n      hasContext = true;\n      pushContextProvider(workInProgress);\n    } else {\n      hasContext = false;\n    }\n\n    workInProgress.memoizedState = value.state !== null && value.state !== undefined ? value.state : null;\n    initializeUpdateQueue(workInProgress);\n    var getDerivedStateFromProps = Component.getDerivedStateFromProps;\n\n    if (typeof getDerivedStateFromProps === 'function') {\n      applyDerivedStateFromProps(workInProgress, Component, getDerivedStateFromProps, props);\n    }\n\n    adoptClassInstance(workInProgress, value);\n    mountClassInstance(workInProgress, Component, props, renderLanes);\n    return finishClassComponent(null, workInProgress, Component, true, hasContext, renderLanes);\n  } else {\n    // Proceed under the assumption that this is a function component\n    workInProgress.tag = FunctionComponent;\n\n    {\n\n      if ( workInProgress.mode & StrictMode) {\n        disableLogs();\n\n        try {\n          value = renderWithHooks(null, workInProgress, Component, props, context, renderLanes);\n        } finally {\n          reenableLogs();\n        }\n      }\n    }\n\n    reconcileChildren(null, workInProgress, value, renderLanes);\n\n    {\n      validateFunctionComponentInDev(workInProgress, Component);\n    }\n\n    return workInProgress.child;\n  }\n}\n\nfunction validateFunctionComponentInDev(workInProgress, Component) {\n  {\n    if (Component) {\n      if (Component.childContextTypes) {\n        error('%s(...): childContextTypes cannot be defined on a function component.', Component.displayName || Component.name || 'Component');\n      }\n    }\n\n    if (workInProgress.ref !== null) {\n      var info = '';\n      var ownerName = getCurrentFiberOwnerNameInDevOrNull();\n\n      if (ownerName) {\n        info += '\\n\\nCheck the render method of `' + ownerName + '`.';\n      }\n\n      var warningKey = ownerName || workInProgress._debugID || '';\n      var debugSource = workInProgress._debugSource;\n\n      if (debugSource) {\n        warningKey = debugSource.fileName + ':' + debugSource.lineNumber;\n      }\n\n      if (!didWarnAboutFunctionRefs[warningKey]) {\n        didWarnAboutFunctionRefs[warningKey] = true;\n\n        error('Function components cannot be given refs. ' + 'Attempts to access this ref will fail. ' + 'Did you mean to use React.forwardRef()?%s', info);\n      }\n    }\n\n    if (typeof Component.getDerivedStateFromProps === 'function') {\n      var _componentName3 = getComponentName(Component) || 'Unknown';\n\n      if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {\n        error('%s: Function components do not support getDerivedStateFromProps.', _componentName3);\n\n        didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;\n      }\n    }\n\n    if (typeof Component.contextType === 'object' && Component.contextType !== null) {\n      var _componentName4 = getComponentName(Component) || 'Unknown';\n\n      if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {\n        error('%s: Function components do not support contextType.', _componentName4);\n\n        didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;\n      }\n    }\n  }\n}\n\nvar SUSPENDED_MARKER = {\n  dehydrated: null,\n  retryLane: NoLane\n};\n\nfunction mountSuspenseOffscreenState(renderLanes) {\n  return {\n    baseLanes: renderLanes\n  };\n}\n\nfunction updateSuspenseOffscreenState(prevOffscreenState, renderLanes) {\n  return {\n    baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes)\n  };\n} // TODO: Probably should inline this back\n\n\nfunction shouldRemainOnFallback(suspenseContext, current, workInProgress, renderLanes) {\n  // If we're already showing a fallback, there are cases where we need to\n  // remain on that fallback regardless of whether the content has resolved.\n  // For example, SuspenseList coordinates when nested content appears.\n  if (current !== null) {\n    var suspenseState = current.memoizedState;\n\n    if (suspenseState === null) {\n      // Currently showing content. Don't hide it, even if ForceSuspenseFallack\n      // is true. More precise name might be \"ForceRemainSuspenseFallback\".\n      // Note: This is a factoring smell. Can't remain on a fallback if there's\n      // no fallback to remain on.\n      return false;\n    }\n  } // Not currently showing content. Consult the Suspense context.\n\n\n  return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);\n}\n\nfunction getRemainingWorkInPrimaryTree(current, renderLanes) {\n  // TODO: Should not remove render lanes that were pinged during this render\n  return removeLanes(current.childLanes, renderLanes);\n}\n\nfunction updateSuspenseComponent(current, workInProgress, renderLanes) {\n  var nextProps = workInProgress.pendingProps; // This is used by DevTools to force a boundary to suspend.\n\n  {\n    if (shouldSuspend(workInProgress)) {\n      workInProgress.flags |= DidCapture;\n    }\n  }\n\n  var suspenseContext = suspenseStackCursor.current;\n  var showFallback = false;\n  var didSuspend = (workInProgress.flags & DidCapture) !== NoFlags;\n\n  if (didSuspend || shouldRemainOnFallback(suspenseContext, current)) {\n    // Something in this boundary's subtree already suspended. Switch to\n    // rendering the fallback children.\n    showFallback = true;\n    workInProgress.flags &= ~DidCapture;\n  } else {\n    // Attempting the main content\n    if (current === null || current.memoizedState !== null) {\n      // This is a new mount or this boundary is already showing a fallback state.\n      // Mark this subtree context as having at least one invisible parent that could\n      // handle the fallback state.\n      // Boundaries without fallbacks or should be avoided are not considered since\n      // they cannot handle preferred fallback states.\n      if (nextProps.fallback !== undefined && nextProps.unstable_avoidThisFallback !== true) {\n        suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);\n      }\n    }\n  }\n\n  suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);\n  pushSuspenseContext(workInProgress, suspenseContext); // OK, the next part is confusing. We're about to reconcile the Suspense\n  // boundary's children. This involves some custom reconcilation logic. Two\n  // main reasons this is so complicated.\n  //\n  // First, Legacy Mode has different semantics for backwards compatibility. The\n  // primary tree will commit in an inconsistent state, so when we do the\n  // second pass to render the fallback, we do some exceedingly, uh, clever\n  // hacks to make that not totally break. Like transferring effects and\n  // deletions from hidden tree. In Concurrent Mode, it's much simpler,\n  // because we bailout on the primary tree completely and leave it in its old\n  // state, no effects. Same as what we do for Offscreen (except that\n  // Offscreen doesn't have the first render pass).\n  //\n  // Second is hydration. During hydration, the Suspense fiber has a slightly\n  // different layout, where the child points to a dehydrated fragment, which\n  // contains the DOM rendered by the server.\n  //\n  // Third, even if you set all that aside, Suspense is like error boundaries in\n  // that we first we try to render one tree, and if that fails, we render again\n  // and switch to a different tree. Like a try/catch block. So we have to track\n  // which branch we're currently rendering. Ideally we would model this using\n  // a stack.\n\n  if (current === null) {\n    // Initial mount\n    // If we're currently hydrating, try to hydrate this boundary.\n    // But only if this has a fallback.\n    if (nextProps.fallback !== undefined) {\n      tryToClaimNextHydratableInstance(workInProgress); // This could've been a dehydrated suspense component.\n    }\n\n    var nextPrimaryChildren = nextProps.children;\n    var nextFallbackChildren = nextProps.fallback;\n\n    if (showFallback) {\n      var fallbackFragment = mountSuspenseFallbackChildren(workInProgress, nextPrimaryChildren, nextFallbackChildren, renderLanes);\n      var primaryChildFragment = workInProgress.child;\n      primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes);\n      workInProgress.memoizedState = SUSPENDED_MARKER;\n      return fallbackFragment;\n    } else if (typeof nextProps.unstable_expectedLoadTime === 'number') {\n      // This is a CPU-bound tree. Skip this tree and show a placeholder to\n      // unblock the surrounding content. Then immediately retry after the\n      // initial commit.\n      var _fallbackFragment = mountSuspenseFallbackChildren(workInProgress, nextPrimaryChildren, nextFallbackChildren, renderLanes);\n\n      var _primaryChildFragment = workInProgress.child;\n      _primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes);\n      workInProgress.memoizedState = SUSPENDED_MARKER; // Since nothing actually suspended, there will nothing to ping this to\n      // get it started back up to attempt the next item. While in terms of\n      // priority this work has the same priority as this current render, it's\n      // not part of the same transition once the transition has committed. If\n      // it's sync, we still want to yield so that it can be painted.\n      // Conceptually, this is really the same as pinging. We can use any\n      // RetryLane even if it's the one currently rendering since we're leaving\n      // it behind on this node.\n\n      workInProgress.lanes = SomeRetryLane;\n\n      {\n        markSpawnedWork(SomeRetryLane);\n      }\n\n      return _fallbackFragment;\n    } else {\n      return mountSuspensePrimaryChildren(workInProgress, nextPrimaryChildren, renderLanes);\n    }\n  } else {\n    // This is an update.\n    // If the current fiber has a SuspenseState, that means it's already showing\n    // a fallback.\n    var prevState = current.memoizedState;\n\n    if (prevState !== null) {\n\n      if (showFallback) {\n        var _nextFallbackChildren2 = nextProps.fallback;\n        var _nextPrimaryChildren2 = nextProps.children;\n\n        var _fallbackChildFragment = updateSuspenseFallbackChildren(current, workInProgress, _nextPrimaryChildren2, _nextFallbackChildren2, renderLanes);\n\n        var _primaryChildFragment3 = workInProgress.child;\n        var prevOffscreenState = current.child.memoizedState;\n        _primaryChildFragment3.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes);\n        _primaryChildFragment3.childLanes = getRemainingWorkInPrimaryTree(current, renderLanes);\n        workInProgress.memoizedState = SUSPENDED_MARKER;\n        return _fallbackChildFragment;\n      } else {\n        var _nextPrimaryChildren3 = nextProps.children;\n\n        var _primaryChildFragment4 = updateSuspensePrimaryChildren(current, workInProgress, _nextPrimaryChildren3, renderLanes);\n\n        workInProgress.memoizedState = null;\n        return _primaryChildFragment4;\n      }\n    } else {\n      // The current tree is not already showing a fallback.\n      if (showFallback) {\n        // Timed out.\n        var _nextFallbackChildren3 = nextProps.fallback;\n        var _nextPrimaryChildren4 = nextProps.children;\n\n        var _fallbackChildFragment2 = updateSuspenseFallbackChildren(current, workInProgress, _nextPrimaryChildren4, _nextFallbackChildren3, renderLanes);\n\n        var _primaryChildFragment5 = workInProgress.child;\n        var _prevOffscreenState = current.child.memoizedState;\n        _primaryChildFragment5.memoizedState = _prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes) : updateSuspenseOffscreenState(_prevOffscreenState, renderLanes);\n        _primaryChildFragment5.childLanes = getRemainingWorkInPrimaryTree(current, renderLanes); // Skip the primary children, and continue working on the\n        // fallback children.\n\n        workInProgress.memoizedState = SUSPENDED_MARKER;\n        return _fallbackChildFragment2;\n      } else {\n        // Still haven't timed out. Continue rendering the children, like we\n        // normally do.\n        var _nextPrimaryChildren5 = nextProps.children;\n\n        var _primaryChildFragment6 = updateSuspensePrimaryChildren(current, workInProgress, _nextPrimaryChildren5, renderLanes);\n\n        workInProgress.memoizedState = null;\n        return _primaryChildFragment6;\n      }\n    }\n  }\n}\n\nfunction mountSuspensePrimaryChildren(workInProgress, primaryChildren, renderLanes) {\n  var mode = workInProgress.mode;\n  var primaryChildProps = {\n    mode: 'visible',\n    children: primaryChildren\n  };\n  var primaryChildFragment = createFiberFromOffscreen(primaryChildProps, mode, renderLanes, null);\n  primaryChildFragment.return = workInProgress;\n  workInProgress.child = primaryChildFragment;\n  return primaryChildFragment;\n}\n\nfunction mountSuspenseFallbackChildren(workInProgress, primaryChildren, fallbackChildren, renderLanes) {\n  var mode = workInProgress.mode;\n  var progressedPrimaryFragment = workInProgress.child;\n  var primaryChildProps = {\n    mode: 'hidden',\n    children: primaryChildren\n  };\n  var primaryChildFragment;\n  var fallbackChildFragment;\n\n  if ((mode & BlockingMode) === NoMode && progressedPrimaryFragment !== null) {\n    // In legacy mode, we commit the primary tree as if it successfully\n    // completed, even though it's in an inconsistent state.\n    primaryChildFragment = progressedPrimaryFragment;\n    primaryChildFragment.childLanes = NoLanes;\n    primaryChildFragment.pendingProps = primaryChildProps;\n\n    if ( workInProgress.mode & ProfileMode) {\n      // Reset the durations from the first pass so they aren't included in the\n      // final amounts. This seems counterintuitive, since we're intentionally\n      // not measuring part of the render phase, but this makes it match what we\n      // do in Concurrent Mode.\n      primaryChildFragment.actualDuration = 0;\n      primaryChildFragment.actualStartTime = -1;\n      primaryChildFragment.selfBaseDuration = 0;\n      primaryChildFragment.treeBaseDuration = 0;\n    }\n\n    fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null);\n  } else {\n    primaryChildFragment = createFiberFromOffscreen(primaryChildProps, mode, NoLanes, null);\n    fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null);\n  }\n\n  primaryChildFragment.return = workInProgress;\n  fallbackChildFragment.return = workInProgress;\n  primaryChildFragment.sibling = fallbackChildFragment;\n  workInProgress.child = primaryChildFragment;\n  return fallbackChildFragment;\n}\n\nfunction createWorkInProgressOffscreenFiber(current, offscreenProps) {\n  // The props argument to `createWorkInProgress` is `any` typed, so we use this\n  // wrapper function to constrain it.\n  return createWorkInProgress(current, offscreenProps);\n}\n\nfunction updateSuspensePrimaryChildren(current, workInProgress, primaryChildren, renderLanes) {\n  var currentPrimaryChildFragment = current.child;\n  var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;\n  var primaryChildFragment = createWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {\n    mode: 'visible',\n    children: primaryChildren\n  });\n\n  if ((workInProgress.mode & BlockingMode) === NoMode) {\n    primaryChildFragment.lanes = renderLanes;\n  }\n\n  primaryChildFragment.return = workInProgress;\n  primaryChildFragment.sibling = null;\n\n  if (currentFallbackChildFragment !== null) {\n    // Delete the fallback child fragment\n    currentFallbackChildFragment.nextEffect = null;\n    currentFallbackChildFragment.flags = Deletion;\n    workInProgress.firstEffect = workInProgress.lastEffect = currentFallbackChildFragment;\n  }\n\n  workInProgress.child = primaryChildFragment;\n  return primaryChildFragment;\n}\n\nfunction updateSuspenseFallbackChildren(current, workInProgress, primaryChildren, fallbackChildren, renderLanes) {\n  var mode = workInProgress.mode;\n  var currentPrimaryChildFragment = current.child;\n  var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;\n  var primaryChildProps = {\n    mode: 'hidden',\n    children: primaryChildren\n  };\n  var primaryChildFragment;\n\n  if ( // In legacy mode, we commit the primary tree as if it successfully\n  // completed, even though it's in an inconsistent state.\n  (mode & BlockingMode) === NoMode && // Make sure we're on the second pass, i.e. the primary child fragment was\n  // already cloned. In legacy mode, the only case where this isn't true is\n  // when DevTools forces us to display a fallback; we skip the first render\n  // pass entirely and go straight to rendering the fallback. (In Concurrent\n  // Mode, SuspenseList can also trigger this scenario, but this is a legacy-\n  // only codepath.)\n  workInProgress.child !== currentPrimaryChildFragment) {\n    var progressedPrimaryFragment = workInProgress.child;\n    primaryChildFragment = progressedPrimaryFragment;\n    primaryChildFragment.childLanes = NoLanes;\n    primaryChildFragment.pendingProps = primaryChildProps;\n\n    if ( workInProgress.mode & ProfileMode) {\n      // Reset the durations from the first pass so they aren't included in the\n      // final amounts. This seems counterintuitive, since we're intentionally\n      // not measuring part of the render phase, but this makes it match what we\n      // do in Concurrent Mode.\n      primaryChildFragment.actualDuration = 0;\n      primaryChildFragment.actualStartTime = -1;\n      primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;\n      primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;\n    } // The fallback fiber was added as a deletion effect during the first pass.\n    // However, since we're going to remain on the fallback, we no longer want\n    // to delete it. So we need to remove it from the list. Deletions are stored\n    // on the same list as effects. We want to keep the effects from the primary\n    // tree. So we copy the primary child fragment's effect list, which does not\n    // include the fallback deletion effect.\n\n\n    var progressedLastEffect = primaryChildFragment.lastEffect;\n\n    if (progressedLastEffect !== null) {\n      workInProgress.firstEffect = primaryChildFragment.firstEffect;\n      workInProgress.lastEffect = progressedLastEffect;\n      progressedLastEffect.nextEffect = null;\n    } else {\n      // TODO: Reset this somewhere else? Lol legacy mode is so weird.\n      workInProgress.firstEffect = workInProgress.lastEffect = null;\n    }\n  } else {\n    primaryChildFragment = createWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);\n  }\n\n  var fallbackChildFragment;\n\n  if (currentFallbackChildFragment !== null) {\n    fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);\n  } else {\n    fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null); // Needs a placement effect because the parent (the Suspense boundary) already\n    // mounted but this is a new fiber.\n\n    fallbackChildFragment.flags |= Placement;\n  }\n\n  fallbackChildFragment.return = workInProgress;\n  primaryChildFragment.return = workInProgress;\n  primaryChildFragment.sibling = fallbackChildFragment;\n  workInProgress.child = primaryChildFragment;\n  return fallbackChildFragment;\n}\n\nfunction scheduleWorkOnFiber(fiber, renderLanes) {\n  fiber.lanes = mergeLanes(fiber.lanes, renderLanes);\n  var alternate = fiber.alternate;\n\n  if (alternate !== null) {\n    alternate.lanes = mergeLanes(alternate.lanes, renderLanes);\n  }\n\n  scheduleWorkOnParentPath(fiber.return, renderLanes);\n}\n\nfunction propagateSuspenseContextChange(workInProgress, firstChild, renderLanes) {\n  // Mark any Suspense boundaries with fallbacks as having work to do.\n  // If they were previously forced into fallbacks, they may now be able\n  // to unblock.\n  var node = firstChild;\n\n  while (node !== null) {\n    if (node.tag === SuspenseComponent) {\n      var state = node.memoizedState;\n\n      if (state !== null) {\n        scheduleWorkOnFiber(node, renderLanes);\n      }\n    } else if (node.tag === SuspenseListComponent) {\n      // If the tail is hidden there might not be an Suspense boundaries\n      // to schedule work on. In this case we have to schedule it on the\n      // list itself.\n      // We don't have to traverse to the children of the list since\n      // the list will propagate the change when it rerenders.\n      scheduleWorkOnFiber(node, renderLanes);\n    } else if (node.child !== null) {\n      node.child.return = node;\n      node = node.child;\n      continue;\n    }\n\n    if (node === workInProgress) {\n      return;\n    }\n\n    while (node.sibling === null) {\n      if (node.return === null || node.return === workInProgress) {\n        return;\n      }\n\n      node = node.return;\n    }\n\n    node.sibling.return = node.return;\n    node = node.sibling;\n  }\n}\n\nfunction findLastContentRow(firstChild) {\n  // This is going to find the last row among these children that is already\n  // showing content on the screen, as opposed to being in fallback state or\n  // new. If a row has multiple Suspense boundaries, any of them being in the\n  // fallback state, counts as the whole row being in a fallback state.\n  // Note that the \"rows\" will be workInProgress, but any nested children\n  // will still be current since we haven't rendered them yet. The mounted\n  // order may not be the same as the new order. We use the new order.\n  var row = firstChild;\n  var lastContentRow = null;\n\n  while (row !== null) {\n    var currentRow = row.alternate; // New rows can't be content rows.\n\n    if (currentRow !== null && findFirstSuspended(currentRow) === null) {\n      lastContentRow = row;\n    }\n\n    row = row.sibling;\n  }\n\n  return lastContentRow;\n}\n\nfunction validateRevealOrder(revealOrder) {\n  {\n    if (revealOrder !== undefined && revealOrder !== 'forwards' && revealOrder !== 'backwards' && revealOrder !== 'together' && !didWarnAboutRevealOrder[revealOrder]) {\n      didWarnAboutRevealOrder[revealOrder] = true;\n\n      if (typeof revealOrder === 'string') {\n        switch (revealOrder.toLowerCase()) {\n          case 'together':\n          case 'forwards':\n          case 'backwards':\n            {\n              error('\"%s\" is not a valid value for revealOrder on <SuspenseList />. ' + 'Use lowercase \"%s\" instead.', revealOrder, revealOrder.toLowerCase());\n\n              break;\n            }\n\n          case 'forward':\n          case 'backward':\n            {\n              error('\"%s\" is not a valid value for revealOrder on <SuspenseList />. ' + 'React uses the -s suffix in the spelling. Use \"%ss\" instead.', revealOrder, revealOrder.toLowerCase());\n\n              break;\n            }\n\n          default:\n            error('\"%s\" is not a supported revealOrder on <SuspenseList />. ' + 'Did you mean \"together\", \"forwards\" or \"backwards\"?', revealOrder);\n\n            break;\n        }\n      } else {\n        error('%s is not a supported value for revealOrder on <SuspenseList />. ' + 'Did you mean \"together\", \"forwards\" or \"backwards\"?', revealOrder);\n      }\n    }\n  }\n}\n\nfunction validateTailOptions(tailMode, revealOrder) {\n  {\n    if (tailMode !== undefined && !didWarnAboutTailOptions[tailMode]) {\n      if (tailMode !== 'collapsed' && tailMode !== 'hidden') {\n        didWarnAboutTailOptions[tailMode] = true;\n\n        error('\"%s\" is not a supported value for tail on <SuspenseList />. ' + 'Did you mean \"collapsed\" or \"hidden\"?', tailMode);\n      } else if (revealOrder !== 'forwards' && revealOrder !== 'backwards') {\n        didWarnAboutTailOptions[tailMode] = true;\n\n        error('<SuspenseList tail=\"%s\" /> is only valid if revealOrder is ' + '\"forwards\" or \"backwards\". ' + 'Did you mean to specify revealOrder=\"forwards\"?', tailMode);\n      }\n    }\n  }\n}\n\nfunction validateSuspenseListNestedChild(childSlot, index) {\n  {\n    var isArray = Array.isArray(childSlot);\n    var isIterable = !isArray && typeof getIteratorFn(childSlot) === 'function';\n\n    if (isArray || isIterable) {\n      var type = isArray ? 'array' : 'iterable';\n\n      error('A nested %s was passed to row #%s in <SuspenseList />. Wrap it in ' + 'an additional SuspenseList to configure its revealOrder: ' + '<SuspenseList revealOrder=...> ... ' + '<SuspenseList revealOrder=...>{%s}</SuspenseList> ... ' + '</SuspenseList>', type, index, type);\n\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction validateSuspenseListChildren(children, revealOrder) {\n  {\n    if ((revealOrder === 'forwards' || revealOrder === 'backwards') && children !== undefined && children !== null && children !== false) {\n      if (Array.isArray(children)) {\n        for (var i = 0; i < children.length; i++) {\n          if (!validateSuspenseListNestedChild(children[i], i)) {\n            return;\n          }\n        }\n      } else {\n        var iteratorFn = getIteratorFn(children);\n\n        if (typeof iteratorFn === 'function') {\n          var childrenIterator = iteratorFn.call(children);\n\n          if (childrenIterator) {\n            var step = childrenIterator.next();\n            var _i = 0;\n\n            for (; !step.done; step = childrenIterator.next()) {\n              if (!validateSuspenseListNestedChild(step.value, _i)) {\n                return;\n              }\n\n              _i++;\n            }\n          }\n        } else {\n          error('A single row was passed to a <SuspenseList revealOrder=\"%s\" />. ' + 'This is not useful since it needs multiple rows. ' + 'Did you mean to pass multiple children or an array?', revealOrder);\n        }\n      }\n    }\n  }\n}\n\nfunction initSuspenseListRenderState(workInProgress, isBackwards, tail, lastContentRow, tailMode, lastEffectBeforeRendering) {\n  var renderState = workInProgress.memoizedState;\n\n  if (renderState === null) {\n    workInProgress.memoizedState = {\n      isBackwards: isBackwards,\n      rendering: null,\n      renderingStartTime: 0,\n      last: lastContentRow,\n      tail: tail,\n      tailMode: tailMode,\n      lastEffect: lastEffectBeforeRendering\n    };\n  } else {\n    // We can reuse the existing object from previous renders.\n    renderState.isBackwards = isBackwards;\n    renderState.rendering = null;\n    renderState.renderingStartTime = 0;\n    renderState.last = lastContentRow;\n    renderState.tail = tail;\n    renderState.tailMode = tailMode;\n    renderState.lastEffect = lastEffectBeforeRendering;\n  }\n} // This can end up rendering this component multiple passes.\n// The first pass splits the children fibers into two sets. A head and tail.\n// We first render the head. If anything is in fallback state, we do another\n// pass through beginWork to rerender all children (including the tail) with\n// the force suspend context. If the first render didn't have anything in\n// in fallback state. Then we render each row in the tail one-by-one.\n// That happens in the completeWork phase without going back to beginWork.\n\n\nfunction updateSuspenseListComponent(current, workInProgress, renderLanes) {\n  var nextProps = workInProgress.pendingProps;\n  var revealOrder = nextProps.revealOrder;\n  var tailMode = nextProps.tail;\n  var newChildren = nextProps.children;\n  validateRevealOrder(revealOrder);\n  validateTailOptions(tailMode, revealOrder);\n  validateSuspenseListChildren(newChildren, revealOrder);\n  reconcileChildren(current, workInProgress, newChildren, renderLanes);\n  var suspenseContext = suspenseStackCursor.current;\n  var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);\n\n  if (shouldForceFallback) {\n    suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);\n    workInProgress.flags |= DidCapture;\n  } else {\n    var didSuspendBefore = current !== null && (current.flags & DidCapture) !== NoFlags;\n\n    if (didSuspendBefore) {\n      // If we previously forced a fallback, we need to schedule work\n      // on any nested boundaries to let them know to try to render\n      // again. This is the same as context updating.\n      propagateSuspenseContextChange(workInProgress, workInProgress.child, renderLanes);\n    }\n\n    suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);\n  }\n\n  pushSuspenseContext(workInProgress, suspenseContext);\n\n  if ((workInProgress.mode & BlockingMode) === NoMode) {\n    // In legacy mode, SuspenseList doesn't work so we just\n    // use make it a noop by treating it as the default revealOrder.\n    workInProgress.memoizedState = null;\n  } else {\n    switch (revealOrder) {\n      case 'forwards':\n        {\n          var lastContentRow = findLastContentRow(workInProgress.child);\n          var tail;\n\n          if (lastContentRow === null) {\n            // The whole list is part of the tail.\n            // TODO: We could fast path by just rendering the tail now.\n            tail = workInProgress.child;\n            workInProgress.child = null;\n          } else {\n            // Disconnect the tail rows after the content row.\n            // We're going to render them separately later.\n            tail = lastContentRow.sibling;\n            lastContentRow.sibling = null;\n          }\n\n          initSuspenseListRenderState(workInProgress, false, // isBackwards\n          tail, lastContentRow, tailMode, workInProgress.lastEffect);\n          break;\n        }\n\n      case 'backwards':\n        {\n          // We're going to find the first row that has existing content.\n          // At the same time we're going to reverse the list of everything\n          // we pass in the meantime. That's going to be our tail in reverse\n          // order.\n          var _tail = null;\n          var row = workInProgress.child;\n          workInProgress.child = null;\n\n          while (row !== null) {\n            var currentRow = row.alternate; // New rows can't be content rows.\n\n            if (currentRow !== null && findFirstSuspended(currentRow) === null) {\n              // This is the beginning of the main content.\n              workInProgress.child = row;\n              break;\n            }\n\n            var nextRow = row.sibling;\n            row.sibling = _tail;\n            _tail = row;\n            row = nextRow;\n          } // TODO: If workInProgress.child is null, we can continue on the tail immediately.\n\n\n          initSuspenseListRenderState(workInProgress, true, // isBackwards\n          _tail, null, // last\n          tailMode, workInProgress.lastEffect);\n          break;\n        }\n\n      case 'together':\n        {\n          initSuspenseListRenderState(workInProgress, false, // isBackwards\n          null, // tail\n          null, // last\n          undefined, workInProgress.lastEffect);\n          break;\n        }\n\n      default:\n        {\n          // The default reveal order is the same as not having\n          // a boundary.\n          workInProgress.memoizedState = null;\n        }\n    }\n  }\n\n  return workInProgress.child;\n}\n\nfunction updatePortalComponent(current, workInProgress, renderLanes) {\n  pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);\n  var nextChildren = workInProgress.pendingProps;\n\n  if (current === null) {\n    // Portals are special because we don't append the children during mount\n    // but at commit. Therefore we need to track insertions which the normal\n    // flow doesn't do during mount. This doesn't happen at the root because\n    // the root always starts with a \"current\" with a null child.\n    // TODO: Consider unifying this with how the root works.\n    workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderLanes);\n  } else {\n    reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  }\n\n  return workInProgress.child;\n}\n\nvar hasWarnedAboutUsingNoValuePropOnContextProvider = false;\n\nfunction updateContextProvider(current, workInProgress, renderLanes) {\n  var providerType = workInProgress.type;\n  var context = providerType._context;\n  var newProps = workInProgress.pendingProps;\n  var oldProps = workInProgress.memoizedProps;\n  var newValue = newProps.value;\n\n  {\n    if (!('value' in newProps)) {\n      if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {\n        hasWarnedAboutUsingNoValuePropOnContextProvider = true;\n\n        error('The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?');\n      }\n    }\n\n    var providerPropTypes = workInProgress.type.propTypes;\n\n    if (providerPropTypes) {\n      checkPropTypes(providerPropTypes, newProps, 'prop', 'Context.Provider');\n    }\n  }\n\n  pushProvider(workInProgress, newValue);\n\n  if (oldProps !== null) {\n    var oldValue = oldProps.value;\n    var changedBits = calculateChangedBits(context, newValue, oldValue);\n\n    if (changedBits === 0) {\n      // No change. Bailout early if children are the same.\n      if (oldProps.children === newProps.children && !hasContextChanged()) {\n        return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n      }\n    } else {\n      // The context value changed. Search for matching consumers and schedule\n      // them to update.\n      propagateContextChange(workInProgress, context, changedBits, renderLanes);\n    }\n  }\n\n  var newChildren = newProps.children;\n  reconcileChildren(current, workInProgress, newChildren, renderLanes);\n  return workInProgress.child;\n}\n\nvar hasWarnedAboutUsingContextAsConsumer = false;\n\nfunction updateContextConsumer(current, workInProgress, renderLanes) {\n  var context = workInProgress.type; // The logic below for Context differs depending on PROD or DEV mode. In\n  // DEV mode, we create a separate object for Context.Consumer that acts\n  // like a proxy to Context. This proxy object adds unnecessary code in PROD\n  // so we use the old behaviour (Context.Consumer references Context) to\n  // reduce size and overhead. The separate object references context via\n  // a property called \"_context\", which also gives us the ability to check\n  // in DEV mode if this property exists or not and warn if it does not.\n\n  {\n    if (context._context === undefined) {\n      // This may be because it's a Context (rather than a Consumer).\n      // Or it may be because it's older React where they're the same thing.\n      // We only want to warn if we're sure it's a new React.\n      if (context !== context.Consumer) {\n        if (!hasWarnedAboutUsingContextAsConsumer) {\n          hasWarnedAboutUsingContextAsConsumer = true;\n\n          error('Rendering <Context> directly is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');\n        }\n      }\n    } else {\n      context = context._context;\n    }\n  }\n\n  var newProps = workInProgress.pendingProps;\n  var render = newProps.children;\n\n  {\n    if (typeof render !== 'function') {\n      error('A context consumer was rendered with multiple children, or a child ' + \"that isn't a function. A context consumer expects a single child \" + 'that is a function. If you did pass a function, make sure there ' + 'is no trailing or leading whitespace around it.');\n    }\n  }\n\n  prepareToReadContext(workInProgress, renderLanes);\n  var newValue = readContext(context, newProps.unstable_observedBits);\n  var newChildren;\n\n  {\n    ReactCurrentOwner$1.current = workInProgress;\n    setIsRendering(true);\n    newChildren = render(newValue);\n    setIsRendering(false);\n  } // React DevTools reads this flag.\n\n\n  workInProgress.flags |= PerformedWork;\n  reconcileChildren(current, workInProgress, newChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction markWorkInProgressReceivedUpdate() {\n  didReceiveUpdate = true;\n}\n\nfunction bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes) {\n  if (current !== null) {\n    // Reuse previous dependencies\n    workInProgress.dependencies = current.dependencies;\n  }\n\n  {\n    // Don't update \"base\" render times for bailouts.\n    stopProfilerTimerIfRunning();\n  }\n\n  markSkippedUpdateLanes(workInProgress.lanes); // Check if the children have any pending work.\n\n  if (!includesSomeLane(renderLanes, workInProgress.childLanes)) {\n    // The children don't have any work either. We can skip them.\n    // TODO: Once we add back resuming, we should check if the children are\n    // a work-in-progress set. If so, we need to transfer their effects.\n    return null;\n  } else {\n    // This fiber doesn't have work, but its subtree does. Clone the child\n    // fibers and continue.\n    cloneChildFibers(current, workInProgress);\n    return workInProgress.child;\n  }\n}\n\nfunction remountFiber(current, oldWorkInProgress, newWorkInProgress) {\n  {\n    var returnFiber = oldWorkInProgress.return;\n\n    if (returnFiber === null) {\n      throw new Error('Cannot swap the root fiber.');\n    } // Disconnect from the old current.\n    // It will get deleted.\n\n\n    current.alternate = null;\n    oldWorkInProgress.alternate = null; // Connect to the new tree.\n\n    newWorkInProgress.index = oldWorkInProgress.index;\n    newWorkInProgress.sibling = oldWorkInProgress.sibling;\n    newWorkInProgress.return = oldWorkInProgress.return;\n    newWorkInProgress.ref = oldWorkInProgress.ref; // Replace the child/sibling pointers above it.\n\n    if (oldWorkInProgress === returnFiber.child) {\n      returnFiber.child = newWorkInProgress;\n    } else {\n      var prevSibling = returnFiber.child;\n\n      if (prevSibling === null) {\n        throw new Error('Expected parent to have a child.');\n      }\n\n      while (prevSibling.sibling !== oldWorkInProgress) {\n        prevSibling = prevSibling.sibling;\n\n        if (prevSibling === null) {\n          throw new Error('Expected to find the previous sibling.');\n        }\n      }\n\n      prevSibling.sibling = newWorkInProgress;\n    } // Delete the old fiber and place the new one.\n    // Since the old fiber is disconnected, we have to schedule it manually.\n\n\n    var last = returnFiber.lastEffect;\n\n    if (last !== null) {\n      last.nextEffect = current;\n      returnFiber.lastEffect = current;\n    } else {\n      returnFiber.firstEffect = returnFiber.lastEffect = current;\n    }\n\n    current.nextEffect = null;\n    current.flags = Deletion;\n    newWorkInProgress.flags |= Placement; // Restart work from the new fiber.\n\n    return newWorkInProgress;\n  }\n}\n\nfunction beginWork(current, workInProgress, renderLanes) {\n  var updateLanes = workInProgress.lanes;\n\n  {\n    if (workInProgress._debugNeedsRemount && current !== null) {\n      // This will restart the begin phase with a new fiber.\n      return remountFiber(current, workInProgress, createFiberFromTypeAndProps(workInProgress.type, workInProgress.key, workInProgress.pendingProps, workInProgress._debugOwner || null, workInProgress.mode, workInProgress.lanes));\n    }\n  }\n\n  if (current !== null) {\n    var oldProps = current.memoizedProps;\n    var newProps = workInProgress.pendingProps;\n\n    if (oldProps !== newProps || hasContextChanged() || ( // Force a re-render if the implementation changed due to hot reload:\n     workInProgress.type !== current.type )) {\n      // If props or context changed, mark the fiber as having performed work.\n      // This may be unset if the props are determined to be equal later (memo).\n      didReceiveUpdate = true;\n    } else if (!includesSomeLane(renderLanes, updateLanes)) {\n      didReceiveUpdate = false; // This fiber does not have any pending work. Bailout without entering\n      // the begin phase. There's still some bookkeeping we that needs to be done\n      // in this optimized path, mostly pushing stuff onto the stack.\n\n      switch (workInProgress.tag) {\n        case HostRoot:\n          pushHostRootContext(workInProgress);\n          resetHydrationState();\n          break;\n\n        case HostComponent:\n          pushHostContext(workInProgress);\n          break;\n\n        case ClassComponent:\n          {\n            var Component = workInProgress.type;\n\n            if (isContextProvider(Component)) {\n              pushContextProvider(workInProgress);\n            }\n\n            break;\n          }\n\n        case HostPortal:\n          pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);\n          break;\n\n        case ContextProvider:\n          {\n            var newValue = workInProgress.memoizedProps.value;\n            pushProvider(workInProgress, newValue);\n            break;\n          }\n\n        case Profiler:\n          {\n            // Profiler should only call onRender when one of its descendants actually rendered.\n            var hasChildWork = includesSomeLane(renderLanes, workInProgress.childLanes);\n\n            if (hasChildWork) {\n              workInProgress.flags |= Update;\n            } // Reset effect durations for the next eventual effect phase.\n            // These are reset during render to allow the DevTools commit hook a chance to read them,\n\n\n            var stateNode = workInProgress.stateNode;\n            stateNode.effectDuration = 0;\n            stateNode.passiveEffectDuration = 0;\n          }\n\n          break;\n\n        case SuspenseComponent:\n          {\n            var state = workInProgress.memoizedState;\n\n            if (state !== null) {\n              // whether to retry the primary children, or to skip over it and\n              // go straight to the fallback. Check the priority of the primary\n              // child fragment.\n\n\n              var primaryChildFragment = workInProgress.child;\n              var primaryChildLanes = primaryChildFragment.childLanes;\n\n              if (includesSomeLane(renderLanes, primaryChildLanes)) {\n                // The primary children have pending work. Use the normal path\n                // to attempt to render the primary children again.\n                return updateSuspenseComponent(current, workInProgress, renderLanes);\n              } else {\n                // The primary child fragment does not have pending work marked\n                // on it\n                pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current)); // The primary children do not have pending work with sufficient\n                // priority. Bailout.\n\n                var child = bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n\n                if (child !== null) {\n                  // The fallback children have pending work. Skip over the\n                  // primary children and work on the fallback.\n                  return child.sibling;\n                } else {\n                  return null;\n                }\n              }\n            } else {\n              pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current));\n            }\n\n            break;\n          }\n\n        case SuspenseListComponent:\n          {\n            var didSuspendBefore = (current.flags & DidCapture) !== NoFlags;\n\n            var _hasChildWork = includesSomeLane(renderLanes, workInProgress.childLanes);\n\n            if (didSuspendBefore) {\n              if (_hasChildWork) {\n                // If something was in fallback state last time, and we have all the\n                // same children then we're still in progressive loading state.\n                // Something might get unblocked by state updates or retries in the\n                // tree which will affect the tail. So we need to use the normal\n                // path to compute the correct tail.\n                return updateSuspenseListComponent(current, workInProgress, renderLanes);\n              } // If none of the children had any work, that means that none of\n              // them got retried so they'll still be blocked in the same way\n              // as before. We can fast bail out.\n\n\n              workInProgress.flags |= DidCapture;\n            } // If nothing suspended before and we're rendering the same children,\n            // then the tail doesn't matter. Anything new that suspends will work\n            // in the \"together\" mode, so we can continue from the state we had.\n\n\n            var renderState = workInProgress.memoizedState;\n\n            if (renderState !== null) {\n              // Reset to the \"together\" mode in case we've started a different\n              // update in the past but didn't complete it.\n              renderState.rendering = null;\n              renderState.tail = null;\n              renderState.lastEffect = null;\n            }\n\n            pushSuspenseContext(workInProgress, suspenseStackCursor.current);\n\n            if (_hasChildWork) {\n              break;\n            } else {\n              // If none of the children had any work, that means that none of\n              // them got retried so they'll still be blocked in the same way\n              // as before. We can fast bail out.\n              return null;\n            }\n          }\n\n        case OffscreenComponent:\n        case LegacyHiddenComponent:\n          {\n            // Need to check if the tree still needs to be deferred. This is\n            // almost identical to the logic used in the normal update path,\n            // so we'll just enter that. The only difference is we'll bail out\n            // at the next level instead of this one, because the child props\n            // have not changed. Which is fine.\n            // TODO: Probably should refactor `beginWork` to split the bailout\n            // path from the normal path. I'm tempted to do a labeled break here\n            // but I won't :)\n            workInProgress.lanes = NoLanes;\n            return updateOffscreenComponent(current, workInProgress, renderLanes);\n          }\n      }\n\n      return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n    } else {\n      if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) {\n        // This is a special case that only exists for legacy mode.\n        // See https://github.com/facebook/react/pull/19216.\n        didReceiveUpdate = true;\n      } else {\n        // An update was scheduled on this fiber, but there are no new props\n        // nor legacy context. Set this to false. If an update queue or context\n        // consumer produces a changed value, it will set this to true. Otherwise,\n        // the component will assume the children have not changed and bail out.\n        didReceiveUpdate = false;\n      }\n    }\n  } else {\n    didReceiveUpdate = false;\n  } // Before entering the begin phase, clear pending update priority.\n  // TODO: This assumes that we're about to evaluate the component and process\n  // the update queue. However, there's an exception: SimpleMemoComponent\n  // sometimes bails out later in the begin phase. This indicates that we should\n  // move this assignment out of the common path and into each branch.\n\n\n  workInProgress.lanes = NoLanes;\n\n  switch (workInProgress.tag) {\n    case IndeterminateComponent:\n      {\n        return mountIndeterminateComponent(current, workInProgress, workInProgress.type, renderLanes);\n      }\n\n    case LazyComponent:\n      {\n        var elementType = workInProgress.elementType;\n        return mountLazyComponent(current, workInProgress, elementType, updateLanes, renderLanes);\n      }\n\n    case FunctionComponent:\n      {\n        var _Component = workInProgress.type;\n        var unresolvedProps = workInProgress.pendingProps;\n        var resolvedProps = workInProgress.elementType === _Component ? unresolvedProps : resolveDefaultProps(_Component, unresolvedProps);\n        return updateFunctionComponent(current, workInProgress, _Component, resolvedProps, renderLanes);\n      }\n\n    case ClassComponent:\n      {\n        var _Component2 = workInProgress.type;\n        var _unresolvedProps = workInProgress.pendingProps;\n\n        var _resolvedProps = workInProgress.elementType === _Component2 ? _unresolvedProps : resolveDefaultProps(_Component2, _unresolvedProps);\n\n        return updateClassComponent(current, workInProgress, _Component2, _resolvedProps, renderLanes);\n      }\n\n    case HostRoot:\n      return updateHostRoot(current, workInProgress, renderLanes);\n\n    case HostComponent:\n      return updateHostComponent(current, workInProgress, renderLanes);\n\n    case HostText:\n      return updateHostText(current, workInProgress);\n\n    case SuspenseComponent:\n      return updateSuspenseComponent(current, workInProgress, renderLanes);\n\n    case HostPortal:\n      return updatePortalComponent(current, workInProgress, renderLanes);\n\n    case ForwardRef:\n      {\n        var type = workInProgress.type;\n        var _unresolvedProps2 = workInProgress.pendingProps;\n\n        var _resolvedProps2 = workInProgress.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);\n\n        return updateForwardRef(current, workInProgress, type, _resolvedProps2, renderLanes);\n      }\n\n    case Fragment:\n      return updateFragment(current, workInProgress, renderLanes);\n\n    case Mode:\n      return updateMode(current, workInProgress, renderLanes);\n\n    case Profiler:\n      return updateProfiler(current, workInProgress, renderLanes);\n\n    case ContextProvider:\n      return updateContextProvider(current, workInProgress, renderLanes);\n\n    case ContextConsumer:\n      return updateContextConsumer(current, workInProgress, renderLanes);\n\n    case MemoComponent:\n      {\n        var _type2 = workInProgress.type;\n        var _unresolvedProps3 = workInProgress.pendingProps; // Resolve outer props first, then resolve inner props.\n\n        var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);\n\n        {\n          if (workInProgress.type !== workInProgress.elementType) {\n            var outerPropTypes = _type2.propTypes;\n\n            if (outerPropTypes) {\n              checkPropTypes(outerPropTypes, _resolvedProps3, // Resolved for outer only\n              'prop', getComponentName(_type2));\n            }\n          }\n        }\n\n        _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);\n        return updateMemoComponent(current, workInProgress, _type2, _resolvedProps3, updateLanes, renderLanes);\n      }\n\n    case SimpleMemoComponent:\n      {\n        return updateSimpleMemoComponent(current, workInProgress, workInProgress.type, workInProgress.pendingProps, updateLanes, renderLanes);\n      }\n\n    case IncompleteClassComponent:\n      {\n        var _Component3 = workInProgress.type;\n        var _unresolvedProps4 = workInProgress.pendingProps;\n\n        var _resolvedProps4 = workInProgress.elementType === _Component3 ? _unresolvedProps4 : resolveDefaultProps(_Component3, _unresolvedProps4);\n\n        return mountIncompleteClassComponent(current, workInProgress, _Component3, _resolvedProps4, renderLanes);\n      }\n\n    case SuspenseListComponent:\n      {\n        return updateSuspenseListComponent(current, workInProgress, renderLanes);\n      }\n\n    case FundamentalComponent:\n      {\n\n        break;\n      }\n\n    case ScopeComponent:\n      {\n\n        break;\n      }\n\n    case Block:\n      {\n\n        break;\n      }\n\n    case OffscreenComponent:\n      {\n        return updateOffscreenComponent(current, workInProgress, renderLanes);\n      }\n\n    case LegacyHiddenComponent:\n      {\n        return updateLegacyHiddenComponent(current, workInProgress, renderLanes);\n      }\n  }\n\n  {\n    {\n      throw Error( \"Unknown unit of work tag (\" + workInProgress.tag + \"). This error is likely caused by a bug in React. Please file an issue.\" );\n    }\n  }\n}\n\nfunction markUpdate(workInProgress) {\n  // Tag the fiber with an update effect. This turns a Placement into\n  // a PlacementAndUpdate.\n  workInProgress.flags |= Update;\n}\n\nfunction markRef$1(workInProgress) {\n  workInProgress.flags |= Ref;\n}\n\nvar appendAllChildren;\nvar updateHostContainer;\nvar updateHostComponent$1;\nvar updateHostText$1;\n\nif (supportsMutation) {\n  // Mutation mode\n  appendAllChildren = function (parent, workInProgress, needsVisibilityToggle, isHidden) {\n    // We only have the top Fiber that was created but we need recurse down its\n    // children to find all the terminal nodes.\n    var node = workInProgress.child;\n\n    while (node !== null) {\n      if (node.tag === HostComponent || node.tag === HostText) {\n        appendInitialChild(parent, node.stateNode);\n      } else if (node.tag === HostPortal) ; else if (node.child !== null) {\n        node.child.return = node;\n        node = node.child;\n        continue;\n      }\n\n      if (node === workInProgress) {\n        return;\n      }\n\n      while (node.sibling === null) {\n        if (node.return === null || node.return === workInProgress) {\n          return;\n        }\n\n        node = node.return;\n      }\n\n      node.sibling.return = node.return;\n      node = node.sibling;\n    }\n  };\n\n  updateHostContainer = function (workInProgress) {// Noop\n  };\n\n  updateHostComponent$1 = function (current, workInProgress, type, newProps, rootContainerInstance) {\n    // If we have an alternate, that means this is an update and we need to\n    // schedule a side-effect to do the updates.\n    var oldProps = current.memoizedProps;\n\n    if (oldProps === newProps) {\n      // In mutation mode, this is sufficient for a bailout because\n      // we won't touch this node even if children changed.\n      return;\n    } // If we get updated because one of our children updated, we don't\n    // have newProps so we'll have to reuse them.\n    // TODO: Split the update API as separate for the props vs. children.\n    // Even better would be if children weren't special cased at all tho.\n\n\n    var instance = workInProgress.stateNode;\n    var currentHostContext = getHostContext(); // TODO: Experiencing an error where oldProps is null. Suggests a host\n    // component is hitting the resume path. Figure out why. Possibly\n    // related to `hidden`.\n\n    var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext); // TODO: Type this specific to this type of component.\n\n    workInProgress.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there\n    // is a new ref we mark this as an update. All the work is done in commitWork.\n\n    if (updatePayload) {\n      markUpdate(workInProgress);\n    }\n  };\n\n  updateHostText$1 = function (current, workInProgress, oldText, newText) {\n    // If the text differs, mark it as an update. All the work in done in commitWork.\n    if (oldText !== newText) {\n      markUpdate(workInProgress);\n    }\n  };\n} else if (supportsPersistence) {\n  // Persistent host tree mode\n  appendAllChildren = function (parent, workInProgress, needsVisibilityToggle, isHidden) {\n    // We only have the top Fiber that was created but we need recurse down its\n    // children to find all the terminal nodes.\n    var node = workInProgress.child;\n\n    while (node !== null) {\n      // eslint-disable-next-line no-labels\n       if (node.tag === HostComponent) {\n        var instance = node.stateNode;\n\n        if (needsVisibilityToggle && isHidden) {\n          // This child is inside a timed out tree. Hide it.\n          var props = node.memoizedProps;\n          var type = node.type;\n          instance = cloneHiddenInstance(instance, type, props, node);\n        }\n\n        appendInitialChild(parent, instance);\n      } else if (node.tag === HostText) {\n        var _instance = node.stateNode;\n\n        if (needsVisibilityToggle && isHidden) {\n          // This child is inside a timed out tree. Hide it.\n          var text = node.memoizedProps;\n          _instance = cloneHiddenTextInstance(_instance, text, node);\n        }\n\n        appendInitialChild(parent, _instance);\n      } else if (node.tag === HostPortal) ; else if (node.tag === SuspenseComponent) {\n        if ((node.flags & Update) !== NoFlags) {\n          // Need to toggle the visibility of the primary children.\n          var newIsHidden = node.memoizedState !== null;\n\n          if (newIsHidden) {\n            var primaryChildParent = node.child;\n\n            if (primaryChildParent !== null) {\n              if (primaryChildParent.child !== null) {\n                primaryChildParent.child.return = primaryChildParent;\n                appendAllChildren(parent, primaryChildParent, true, newIsHidden);\n              }\n\n              var fallbackChildParent = primaryChildParent.sibling;\n\n              if (fallbackChildParent !== null) {\n                fallbackChildParent.return = node;\n                node = fallbackChildParent;\n                continue;\n              }\n            }\n          }\n        }\n\n        if (node.child !== null) {\n          // Continue traversing like normal\n          node.child.return = node;\n          node = node.child;\n          continue;\n        }\n      } else if (node.child !== null) {\n        node.child.return = node;\n        node = node.child;\n        continue;\n      } // $FlowFixMe This is correct but Flow is confused by the labeled break.\n\n\n      node = node;\n\n      if (node === workInProgress) {\n        return;\n      }\n\n      while (node.sibling === null) {\n        if (node.return === null || node.return === workInProgress) {\n          return;\n        }\n\n        node = node.return;\n      }\n\n      node.sibling.return = node.return;\n      node = node.sibling;\n    }\n  }; // An unfortunate fork of appendAllChildren because we have two different parent types.\n\n\n  var appendAllChildrenToContainer = function (containerChildSet, workInProgress, needsVisibilityToggle, isHidden) {\n    // We only have the top Fiber that was created but we need recurse down its\n    // children to find all the terminal nodes.\n    var node = workInProgress.child;\n\n    while (node !== null) {\n      // eslint-disable-next-line no-labels\n       if (node.tag === HostComponent) {\n        var instance = node.stateNode;\n\n        if (needsVisibilityToggle && isHidden) {\n          // This child is inside a timed out tree. Hide it.\n          var props = node.memoizedProps;\n          var type = node.type;\n          instance = cloneHiddenInstance(instance, type, props, node);\n        }\n\n        appendChildToContainerChildSet(containerChildSet, instance);\n      } else if (node.tag === HostText) {\n        var _instance3 = node.stateNode;\n\n        if (needsVisibilityToggle && isHidden) {\n          // This child is inside a timed out tree. Hide it.\n          var text = node.memoizedProps;\n          _instance3 = cloneHiddenTextInstance(_instance3, text, node);\n        }\n\n        appendChildToContainerChildSet(containerChildSet, _instance3);\n      } else if (node.tag === HostPortal) ; else if (node.tag === SuspenseComponent) {\n        if ((node.flags & Update) !== NoFlags) {\n          // Need to toggle the visibility of the primary children.\n          var newIsHidden = node.memoizedState !== null;\n\n          if (newIsHidden) {\n            var primaryChildParent = node.child;\n\n            if (primaryChildParent !== null) {\n              if (primaryChildParent.child !== null) {\n                primaryChildParent.child.return = primaryChildParent;\n                appendAllChildrenToContainer(containerChildSet, primaryChildParent, true, newIsHidden);\n              }\n\n              var fallbackChildParent = primaryChildParent.sibling;\n\n              if (fallbackChildParent !== null) {\n                fallbackChildParent.return = node;\n                node = fallbackChildParent;\n                continue;\n              }\n            }\n          }\n        }\n\n        if (node.child !== null) {\n          // Continue traversing like normal\n          node.child.return = node;\n          node = node.child;\n          continue;\n        }\n      } else if (node.child !== null) {\n        node.child.return = node;\n        node = node.child;\n        continue;\n      } // $FlowFixMe This is correct but Flow is confused by the labeled break.\n\n\n      node = node;\n\n      if (node === workInProgress) {\n        return;\n      }\n\n      while (node.sibling === null) {\n        if (node.return === null || node.return === workInProgress) {\n          return;\n        }\n\n        node = node.return;\n      }\n\n      node.sibling.return = node.return;\n      node = node.sibling;\n    }\n  };\n\n  updateHostContainer = function (workInProgress) {\n    var portalOrRoot = workInProgress.stateNode;\n    var childrenUnchanged = workInProgress.firstEffect === null;\n\n    if (childrenUnchanged) ; else {\n      var container = portalOrRoot.containerInfo;\n      var newChildSet = createContainerChildSet(container); // If children might have changed, we have to add them all to the set.\n\n      appendAllChildrenToContainer(newChildSet, workInProgress, false, false);\n      portalOrRoot.pendingChildren = newChildSet; // Schedule an update on the container to swap out the container.\n\n      markUpdate(workInProgress);\n      finalizeContainerChildren(container, newChildSet);\n    }\n  };\n\n  updateHostComponent$1 = function (current, workInProgress, type, newProps, rootContainerInstance) {\n    var currentInstance = current.stateNode;\n    var oldProps = current.memoizedProps; // If there are no effects associated with this node, then none of our children had any updates.\n    // This guarantees that we can reuse all of them.\n\n    var childrenUnchanged = workInProgress.firstEffect === null;\n\n    if (childrenUnchanged && oldProps === newProps) {\n      // No changes, just reuse the existing instance.\n      // Note that this might release a previous clone.\n      workInProgress.stateNode = currentInstance;\n      return;\n    }\n\n    var recyclableInstance = workInProgress.stateNode;\n    var currentHostContext = getHostContext();\n    var updatePayload = null;\n\n    if (oldProps !== newProps) {\n      updatePayload = prepareUpdate(recyclableInstance, type, oldProps, newProps, rootContainerInstance, currentHostContext);\n    }\n\n    if (childrenUnchanged && updatePayload === null) {\n      // No changes, just reuse the existing instance.\n      // Note that this might release a previous clone.\n      workInProgress.stateNode = currentInstance;\n      return;\n    }\n\n    var newInstance = cloneInstance(currentInstance, updatePayload, type, oldProps, newProps, workInProgress, childrenUnchanged, recyclableInstance);\n\n    if (finalizeInitialChildren(newInstance, type, newProps, rootContainerInstance, currentHostContext)) {\n      markUpdate(workInProgress);\n    }\n\n    workInProgress.stateNode = newInstance;\n\n    if (childrenUnchanged) {\n      // If there are no other effects in this tree, we need to flag this node as having one.\n      // Even though we're not going to use it for anything.\n      // Otherwise parents won't know that there are new children to propagate upwards.\n      markUpdate(workInProgress);\n    } else {\n      // If children might have changed, we have to add them all to the set.\n      appendAllChildren(newInstance, workInProgress, false, false);\n    }\n  };\n\n  updateHostText$1 = function (current, workInProgress, oldText, newText) {\n    if (oldText !== newText) {\n      // If the text content differs, we'll create a new text instance for it.\n      var rootContainerInstance = getRootHostContainer();\n      var currentHostContext = getHostContext();\n      workInProgress.stateNode = createTextInstance(newText, rootContainerInstance, currentHostContext, workInProgress); // We'll have to mark it as having an effect, even though we won't use the effect for anything.\n      // This lets the parents know that at least one of their children has changed.\n\n      markUpdate(workInProgress);\n    } else {\n      workInProgress.stateNode = current.stateNode;\n    }\n  };\n} else {\n  // No host operations\n  updateHostContainer = function (workInProgress) {// Noop\n  };\n\n  updateHostComponent$1 = function (current, workInProgress, type, newProps, rootContainerInstance) {// Noop\n  };\n\n  updateHostText$1 = function (current, workInProgress, oldText, newText) {// Noop\n  };\n}\n\nfunction cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {\n  if (getIsHydrating()) {\n    // If we're hydrating, we should consume as many items as we can\n    // so we don't leave any behind.\n    return;\n  }\n\n  switch (renderState.tailMode) {\n    case 'hidden':\n      {\n        // Any insertions at the end of the tail list after this point\n        // should be invisible. If there are already mounted boundaries\n        // anything before them are not considered for collapsing.\n        // Therefore we need to go through the whole tail to find if\n        // there are any.\n        var tailNode = renderState.tail;\n        var lastTailNode = null;\n\n        while (tailNode !== null) {\n          if (tailNode.alternate !== null) {\n            lastTailNode = tailNode;\n          }\n\n          tailNode = tailNode.sibling;\n        } // Next we're simply going to delete all insertions after the\n        // last rendered item.\n\n\n        if (lastTailNode === null) {\n          // All remaining items in the tail are insertions.\n          renderState.tail = null;\n        } else {\n          // Detach the insertion after the last node that was already\n          // inserted.\n          lastTailNode.sibling = null;\n        }\n\n        break;\n      }\n\n    case 'collapsed':\n      {\n        // Any insertions at the end of the tail list after this point\n        // should be invisible. If there are already mounted boundaries\n        // anything before them are not considered for collapsing.\n        // Therefore we need to go through the whole tail to find if\n        // there are any.\n        var _tailNode = renderState.tail;\n        var _lastTailNode = null;\n\n        while (_tailNode !== null) {\n          if (_tailNode.alternate !== null) {\n            _lastTailNode = _tailNode;\n          }\n\n          _tailNode = _tailNode.sibling;\n        } // Next we're simply going to delete all insertions after the\n        // last rendered item.\n\n\n        if (_lastTailNode === null) {\n          // All remaining items in the tail are insertions.\n          if (!hasRenderedATailFallback && renderState.tail !== null) {\n            // We suspended during the head. We want to show at least one\n            // row at the tail. So we'll keep on and cut off the rest.\n            renderState.tail.sibling = null;\n          } else {\n            renderState.tail = null;\n          }\n        } else {\n          // Detach the insertion after the last node that was already\n          // inserted.\n          _lastTailNode.sibling = null;\n        }\n\n        break;\n      }\n  }\n}\n\nfunction completeWork(current, workInProgress, renderLanes) {\n  var newProps = workInProgress.pendingProps;\n\n  switch (workInProgress.tag) {\n    case IndeterminateComponent:\n    case LazyComponent:\n    case SimpleMemoComponent:\n    case FunctionComponent:\n    case ForwardRef:\n    case Fragment:\n    case Mode:\n    case Profiler:\n    case ContextConsumer:\n    case MemoComponent:\n      return null;\n\n    case ClassComponent:\n      {\n        var Component = workInProgress.type;\n\n        if (isContextProvider(Component)) {\n          popContext(workInProgress);\n        }\n\n        return null;\n      }\n\n    case HostRoot:\n      {\n        popHostContainer(workInProgress);\n        popTopLevelContextObject(workInProgress);\n        resetWorkInProgressVersions();\n        var fiberRoot = workInProgress.stateNode;\n\n        if (fiberRoot.pendingContext) {\n          fiberRoot.context = fiberRoot.pendingContext;\n          fiberRoot.pendingContext = null;\n        }\n\n        if (current === null || current.child === null) {\n          // If we hydrated, pop so that we can delete any remaining children\n          // that weren't hydrated.\n          var wasHydrated = popHydrationState(workInProgress);\n\n          if (wasHydrated) {\n            // If we hydrated, then we'll need to schedule an update for\n            // the commit side-effects on the root.\n            markUpdate(workInProgress);\n          } else if (!fiberRoot.hydrate) {\n            // Schedule an effect to clear this container at the start of the next commit.\n            // This handles the case of React rendering into a container with previous children.\n            // It's also safe to do for updates too, because current.child would only be null\n            // if the previous render was null (so the the container would already be empty).\n            workInProgress.flags |= Snapshot;\n          }\n        }\n\n        updateHostContainer(workInProgress);\n        return null;\n      }\n\n    case HostComponent:\n      {\n        popHostContext(workInProgress);\n        var rootContainerInstance = getRootHostContainer();\n        var type = workInProgress.type;\n\n        if (current !== null && workInProgress.stateNode != null) {\n          updateHostComponent$1(current, workInProgress, type, newProps, rootContainerInstance);\n\n          if (current.ref !== workInProgress.ref) {\n            markRef$1(workInProgress);\n          }\n        } else {\n          if (!newProps) {\n            if (!(workInProgress.stateNode !== null)) {\n              {\n                throw Error( \"We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.\" );\n              }\n            } // This can happen when we abort work.\n\n\n            return null;\n          }\n\n          var currentHostContext = getHostContext(); // TODO: Move createInstance to beginWork and keep it on a context\n          // \"stack\" as the parent. Then append children as we go in beginWork\n          // or completeWork depending on whether we want to add them top->down or\n          // bottom->up. Top->down is faster in IE11.\n\n          var _wasHydrated = popHydrationState(workInProgress);\n\n          if (_wasHydrated) {\n            // TODO: Move this and createInstance step into the beginPhase\n            // to consolidate.\n            if (prepareToHydrateHostInstance(workInProgress, rootContainerInstance, currentHostContext)) {\n              // If changes to the hydrated node need to be applied at the\n              // commit-phase we mark this as such.\n              markUpdate(workInProgress);\n            }\n          } else {\n            var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress);\n            appendAllChildren(instance, workInProgress, false, false);\n            workInProgress.stateNode = instance; // Certain renderers require commit-time effects for initial mount.\n            // (eg DOM renderer supports auto-focus for certain elements).\n            // Make sure such renderers get scheduled for later work.\n\n            if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance, currentHostContext)) {\n              markUpdate(workInProgress);\n            }\n          }\n\n          if (workInProgress.ref !== null) {\n            // If there is a ref on a host node we need to schedule a callback\n            markRef$1(workInProgress);\n          }\n        }\n\n        return null;\n      }\n\n    case HostText:\n      {\n        var newText = newProps;\n\n        if (current && workInProgress.stateNode != null) {\n          var oldText = current.memoizedProps; // If we have an alternate, that means this is an update and we need\n          // to schedule a side-effect to do the updates.\n\n          updateHostText$1(current, workInProgress, oldText, newText);\n        } else {\n          if (typeof newText !== 'string') {\n            if (!(workInProgress.stateNode !== null)) {\n              {\n                throw Error( \"We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.\" );\n              }\n            } // This can happen when we abort work.\n\n          }\n\n          var _rootContainerInstance = getRootHostContainer();\n\n          var _currentHostContext = getHostContext();\n\n          var _wasHydrated2 = popHydrationState(workInProgress);\n\n          if (_wasHydrated2) {\n            if (prepareToHydrateHostTextInstance(workInProgress)) {\n              markUpdate(workInProgress);\n            }\n          } else {\n            workInProgress.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress);\n          }\n        }\n\n        return null;\n      }\n\n    case SuspenseComponent:\n      {\n        popSuspenseContext(workInProgress);\n        var nextState = workInProgress.memoizedState;\n\n        if ((workInProgress.flags & DidCapture) !== NoFlags) {\n          // Something suspended. Re-render with the fallback children.\n          workInProgress.lanes = renderLanes; // Do not reset the effect list.\n\n          if ( (workInProgress.mode & ProfileMode) !== NoMode) {\n            transferActualDuration(workInProgress);\n          }\n\n          return workInProgress;\n        }\n\n        var nextDidTimeout = nextState !== null;\n        var prevDidTimeout = false;\n\n        if (current === null) {\n          if (workInProgress.memoizedProps.fallback !== undefined) {\n            popHydrationState(workInProgress);\n          }\n        } else {\n          var prevState = current.memoizedState;\n          prevDidTimeout = prevState !== null;\n        }\n\n        if (nextDidTimeout && !prevDidTimeout) {\n          // If this subtreee is running in blocking mode we can suspend,\n          // otherwise we won't suspend.\n          // TODO: This will still suspend a synchronous tree if anything\n          // in the concurrent tree already suspended during this render.\n          // This is a known bug.\n          if ((workInProgress.mode & BlockingMode) !== NoMode) {\n            // TODO: Move this back to throwException because this is too late\n            // if this is a large tree which is common for initial loads. We\n            // don't know if we should restart a render or not until we get\n            // this marker, and this is too late.\n            // If this render already had a ping or lower pri updates,\n            // and this is the first time we know we're going to suspend we\n            // should be able to immediately restart from within throwException.\n            var hasInvisibleChildContext = current === null && workInProgress.memoizedProps.unstable_avoidThisFallback !== true;\n\n            if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {\n              // If this was in an invisible tree or a new render, then showing\n              // this boundary is ok.\n              renderDidSuspend();\n            } else {\n              // Otherwise, we're going to have to hide content so we should\n              // suspend for longer if possible.\n              renderDidSuspendDelayIfPossible();\n            }\n          }\n        }\n\n        if (supportsPersistence) {\n          // TODO: Only schedule updates if not prevDidTimeout.\n          if (nextDidTimeout) {\n            // If this boundary just timed out, schedule an effect to attach a\n            // retry listener to the promise. This flag is also used to hide the\n            // primary children.\n            workInProgress.flags |= Update;\n          }\n        }\n\n        if (supportsMutation) {\n          // TODO: Only schedule updates if these values are non equal, i.e. it changed.\n          if (nextDidTimeout || prevDidTimeout) {\n            // If this boundary just timed out, schedule an effect to attach a\n            // retry listener to the promise. This flag is also used to hide the\n            // primary children. In mutation mode, we also need the flag to\n            // *unhide* children that were previously hidden, so check if this\n            // is currently timed out, too.\n            workInProgress.flags |= Update;\n          }\n        }\n\n        return null;\n      }\n\n    case HostPortal:\n      popHostContainer(workInProgress);\n      updateHostContainer(workInProgress);\n\n      if (current === null) {\n        preparePortalMount(workInProgress.stateNode.containerInfo);\n      }\n\n      return null;\n\n    case ContextProvider:\n      // Pop provider fiber\n      popProvider(workInProgress);\n      return null;\n\n    case IncompleteClassComponent:\n      {\n        // Same as class component case. I put it down here so that the tags are\n        // sequential to ensure this switch is compiled to a jump table.\n        var _Component = workInProgress.type;\n\n        if (isContextProvider(_Component)) {\n          popContext(workInProgress);\n        }\n\n        return null;\n      }\n\n    case SuspenseListComponent:\n      {\n        popSuspenseContext(workInProgress);\n        var renderState = workInProgress.memoizedState;\n\n        if (renderState === null) {\n          // We're running in the default, \"independent\" mode.\n          // We don't do anything in this mode.\n          return null;\n        }\n\n        var didSuspendAlready = (workInProgress.flags & DidCapture) !== NoFlags;\n        var renderedTail = renderState.rendering;\n\n        if (renderedTail === null) {\n          // We just rendered the head.\n          if (!didSuspendAlready) {\n            // This is the first pass. We need to figure out if anything is still\n            // suspended in the rendered set.\n            // If new content unsuspended, but there's still some content that\n            // didn't. Then we need to do a second pass that forces everything\n            // to keep showing their fallbacks.\n            // We might be suspended if something in this render pass suspended, or\n            // something in the previous committed pass suspended. Otherwise,\n            // there's no chance so we can skip the expensive call to\n            // findFirstSuspended.\n            var cannotBeSuspended = renderHasNotSuspendedYet() && (current === null || (current.flags & DidCapture) === NoFlags);\n\n            if (!cannotBeSuspended) {\n              var row = workInProgress.child;\n\n              while (row !== null) {\n                var suspended = findFirstSuspended(row);\n\n                if (suspended !== null) {\n                  didSuspendAlready = true;\n                  workInProgress.flags |= DidCapture;\n                  cutOffTailIfNeeded(renderState, false); // If this is a newly suspended tree, it might not get committed as\n                  // part of the second pass. In that case nothing will subscribe to\n                  // its thennables. Instead, we'll transfer its thennables to the\n                  // SuspenseList so that it can retry if they resolve.\n                  // There might be multiple of these in the list but since we're\n                  // going to wait for all of them anyway, it doesn't really matter\n                  // which ones gets to ping. In theory we could get clever and keep\n                  // track of how many dependencies remain but it gets tricky because\n                  // in the meantime, we can add/remove/change items and dependencies.\n                  // We might bail out of the loop before finding any but that\n                  // doesn't matter since that means that the other boundaries that\n                  // we did find already has their listeners attached.\n\n                  var newThennables = suspended.updateQueue;\n\n                  if (newThennables !== null) {\n                    workInProgress.updateQueue = newThennables;\n                    workInProgress.flags |= Update;\n                  } // Rerender the whole list, but this time, we'll force fallbacks\n                  // to stay in place.\n                  // Reset the effect list before doing the second pass since that's now invalid.\n\n\n                  if (renderState.lastEffect === null) {\n                    workInProgress.firstEffect = null;\n                  }\n\n                  workInProgress.lastEffect = renderState.lastEffect; // Reset the child fibers to their original state.\n\n                  resetChildFibers(workInProgress, renderLanes); // Set up the Suspense Context to force suspense and immediately\n                  // rerender the children.\n\n                  pushSuspenseContext(workInProgress, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));\n                  return workInProgress.child;\n                }\n\n                row = row.sibling;\n              }\n            }\n\n            if (renderState.tail !== null && now$1() > getRenderTargetTime()) {\n              // We have already passed our CPU deadline but we still have rows\n              // left in the tail. We'll just give up further attempts to render\n              // the main content and only render fallbacks.\n              workInProgress.flags |= DidCapture;\n              didSuspendAlready = true;\n              cutOffTailIfNeeded(renderState, false); // Since nothing actually suspended, there will nothing to ping this\n              // to get it started back up to attempt the next item. While in terms\n              // of priority this work has the same priority as this current render,\n              // it's not part of the same transition once the transition has\n              // committed. If it's sync, we still want to yield so that it can be\n              // painted. Conceptually, this is really the same as pinging.\n              // We can use any RetryLane even if it's the one currently rendering\n              // since we're leaving it behind on this node.\n\n              workInProgress.lanes = SomeRetryLane;\n\n              {\n                markSpawnedWork(SomeRetryLane);\n              }\n            }\n          } else {\n            cutOffTailIfNeeded(renderState, false);\n          } // Next we're going to render the tail.\n\n        } else {\n          // Append the rendered row to the child list.\n          if (!didSuspendAlready) {\n            var _suspended = findFirstSuspended(renderedTail);\n\n            if (_suspended !== null) {\n              workInProgress.flags |= DidCapture;\n              didSuspendAlready = true; // Ensure we transfer the update queue to the parent so that it doesn't\n              // get lost if this row ends up dropped during a second pass.\n\n              var _newThennables = _suspended.updateQueue;\n\n              if (_newThennables !== null) {\n                workInProgress.updateQueue = _newThennables;\n                workInProgress.flags |= Update;\n              }\n\n              cutOffTailIfNeeded(renderState, true); // This might have been modified.\n\n              if (renderState.tail === null && renderState.tailMode === 'hidden' && !renderedTail.alternate && !getIsHydrating() // We don't cut it if we're hydrating.\n              ) {\n                  // We need to delete the row we just rendered.\n                  // Reset the effect list to what it was before we rendered this\n                  // child. The nested children have already appended themselves.\n                  var lastEffect = workInProgress.lastEffect = renderState.lastEffect; // Remove any effects that were appended after this point.\n\n                  if (lastEffect !== null) {\n                    lastEffect.nextEffect = null;\n                  } // We're done.\n\n\n                  return null;\n                }\n            } else if ( // The time it took to render last row is greater than the remaining\n            // time we have to render. So rendering one more row would likely\n            // exceed it.\n            now$1() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes !== OffscreenLane) {\n              // We have now passed our CPU deadline and we'll just give up further\n              // attempts to render the main content and only render fallbacks.\n              // The assumption is that this is usually faster.\n              workInProgress.flags |= DidCapture;\n              didSuspendAlready = true;\n              cutOffTailIfNeeded(renderState, false); // Since nothing actually suspended, there will nothing to ping this\n              // to get it started back up to attempt the next item. While in terms\n              // of priority this work has the same priority as this current render,\n              // it's not part of the same transition once the transition has\n              // committed. If it's sync, we still want to yield so that it can be\n              // painted. Conceptually, this is really the same as pinging.\n              // We can use any RetryLane even if it's the one currently rendering\n              // since we're leaving it behind on this node.\n\n              workInProgress.lanes = SomeRetryLane;\n\n              {\n                markSpawnedWork(SomeRetryLane);\n              }\n            }\n          }\n\n          if (renderState.isBackwards) {\n            // The effect list of the backwards tail will have been added\n            // to the end. This breaks the guarantee that life-cycles fire in\n            // sibling order but that isn't a strong guarantee promised by React.\n            // Especially since these might also just pop in during future commits.\n            // Append to the beginning of the list.\n            renderedTail.sibling = workInProgress.child;\n            workInProgress.child = renderedTail;\n          } else {\n            var previousSibling = renderState.last;\n\n            if (previousSibling !== null) {\n              previousSibling.sibling = renderedTail;\n            } else {\n              workInProgress.child = renderedTail;\n            }\n\n            renderState.last = renderedTail;\n          }\n        }\n\n        if (renderState.tail !== null) {\n          // We still have tail rows to render.\n          // Pop a row.\n          var next = renderState.tail;\n          renderState.rendering = next;\n          renderState.tail = next.sibling;\n          renderState.lastEffect = workInProgress.lastEffect;\n          renderState.renderingStartTime = now$1();\n          next.sibling = null; // Restore the context.\n          // TODO: We can probably just avoid popping it instead and only\n          // setting it the first time we go from not suspended to suspended.\n\n          var suspenseContext = suspenseStackCursor.current;\n\n          if (didSuspendAlready) {\n            suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);\n          } else {\n            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);\n          }\n\n          pushSuspenseContext(workInProgress, suspenseContext); // Do a pass over the next row.\n\n          return next;\n        }\n\n        return null;\n      }\n\n    case FundamentalComponent:\n      {\n\n        break;\n      }\n\n    case ScopeComponent:\n      {\n\n        break;\n      }\n\n    case Block:\n\n      break;\n\n    case OffscreenComponent:\n    case LegacyHiddenComponent:\n      {\n        popRenderLanes(workInProgress);\n\n        if (current !== null) {\n          var _nextState = workInProgress.memoizedState;\n          var _prevState = current.memoizedState;\n          var prevIsHidden = _prevState !== null;\n          var nextIsHidden = _nextState !== null;\n\n          if (prevIsHidden !== nextIsHidden && newProps.mode !== 'unstable-defer-without-hiding') {\n            workInProgress.flags |= Update;\n          }\n        }\n\n        return null;\n      }\n  }\n\n  {\n    {\n      throw Error( \"Unknown unit of work tag (\" + workInProgress.tag + \"). This error is likely caused by a bug in React. Please file an issue.\" );\n    }\n  }\n}\n\nfunction unwindWork(workInProgress, renderLanes) {\n  switch (workInProgress.tag) {\n    case ClassComponent:\n      {\n        var Component = workInProgress.type;\n\n        if (isContextProvider(Component)) {\n          popContext(workInProgress);\n        }\n\n        var flags = workInProgress.flags;\n\n        if (flags & ShouldCapture) {\n          workInProgress.flags = flags & ~ShouldCapture | DidCapture;\n\n          if ( (workInProgress.mode & ProfileMode) !== NoMode) {\n            transferActualDuration(workInProgress);\n          }\n\n          return workInProgress;\n        }\n\n        return null;\n      }\n\n    case HostRoot:\n      {\n        popHostContainer(workInProgress);\n        popTopLevelContextObject(workInProgress);\n        resetWorkInProgressVersions();\n        var _flags = workInProgress.flags;\n\n        if (!((_flags & DidCapture) === NoFlags)) {\n          {\n            throw Error( \"The root failed to unmount after an error. This is likely a bug in React. Please file an issue.\" );\n          }\n        }\n\n        workInProgress.flags = _flags & ~ShouldCapture | DidCapture;\n        return workInProgress;\n      }\n\n    case HostComponent:\n      {\n        // TODO: popHydrationState\n        popHostContext(workInProgress);\n        return null;\n      }\n\n    case SuspenseComponent:\n      {\n        popSuspenseContext(workInProgress);\n\n        var _flags2 = workInProgress.flags;\n\n        if (_flags2 & ShouldCapture) {\n          workInProgress.flags = _flags2 & ~ShouldCapture | DidCapture; // Captured a suspense effect. Re-render the boundary.\n\n          if ( (workInProgress.mode & ProfileMode) !== NoMode) {\n            transferActualDuration(workInProgress);\n          }\n\n          return workInProgress;\n        }\n\n        return null;\n      }\n\n    case SuspenseListComponent:\n      {\n        popSuspenseContext(workInProgress); // SuspenseList doesn't actually catch anything. It should've been\n        // caught by a nested boundary. If not, it should bubble through.\n\n        return null;\n      }\n\n    case HostPortal:\n      popHostContainer(workInProgress);\n      return null;\n\n    case ContextProvider:\n      popProvider(workInProgress);\n      return null;\n\n    case OffscreenComponent:\n    case LegacyHiddenComponent:\n      popRenderLanes(workInProgress);\n      return null;\n\n    default:\n      return null;\n  }\n}\n\nfunction unwindInterruptedWork(interruptedWork) {\n  switch (interruptedWork.tag) {\n    case ClassComponent:\n      {\n        var childContextTypes = interruptedWork.type.childContextTypes;\n\n        if (childContextTypes !== null && childContextTypes !== undefined) {\n          popContext(interruptedWork);\n        }\n\n        break;\n      }\n\n    case HostRoot:\n      {\n        popHostContainer(interruptedWork);\n        popTopLevelContextObject(interruptedWork);\n        resetWorkInProgressVersions();\n        break;\n      }\n\n    case HostComponent:\n      {\n        popHostContext(interruptedWork);\n        break;\n      }\n\n    case HostPortal:\n      popHostContainer(interruptedWork);\n      break;\n\n    case SuspenseComponent:\n      popSuspenseContext(interruptedWork);\n      break;\n\n    case SuspenseListComponent:\n      popSuspenseContext(interruptedWork);\n      break;\n\n    case ContextProvider:\n      popProvider(interruptedWork);\n      break;\n\n    case OffscreenComponent:\n    case LegacyHiddenComponent:\n      popRenderLanes(interruptedWork);\n      break;\n  }\n}\n\nfunction createCapturedValue(value, source) {\n  // If the value is an error, call this function immediately after it is thrown\n  // so the stack is accurate.\n  return {\n    value: value,\n    source: source,\n    stack: getStackByFiberInDevAndProd(source)\n  };\n}\n\n// This module is forked in different environments.\n// By default, return `true` to log errors to the console.\n// Forks can return `false` if this isn't desirable.\nfunction showErrorDialog(boundary, errorInfo) {\n  return true;\n}\n\nfunction logCapturedError(boundary, errorInfo) {\n  try {\n    var logError = showErrorDialog(boundary, errorInfo); // Allow injected showErrorDialog() to prevent default console.error logging.\n    // This enables renderers like ReactNative to better manage redbox behavior.\n\n    if (logError === false) {\n      return;\n    }\n\n    var error = errorInfo.value;\n\n    if (true) {\n      var source = errorInfo.source;\n      var stack = errorInfo.stack;\n      var componentStack = stack !== null ? stack : ''; // Browsers support silencing uncaught errors by calling\n      // `preventDefault()` in window `error` handler.\n      // We record this information as an expando on the error.\n\n      if (error != null && error._suppressLogging) {\n        if (boundary.tag === ClassComponent) {\n          // The error is recoverable and was silenced.\n          // Ignore it and don't print the stack addendum.\n          // This is handy for testing error boundaries without noise.\n          return;\n        } // The error is fatal. Since the silencing might have\n        // been accidental, we'll surface it anyway.\n        // However, the browser would have silenced the original error\n        // so we'll print it first, and then print the stack addendum.\n\n\n        console['error'](error); // Don't transform to our wrapper\n        // For a more detailed description of this block, see:\n        // https://github.com/facebook/react/pull/13384\n      }\n\n      var componentName = source ? getComponentName(source.type) : null;\n      var componentNameMessage = componentName ? \"The above error occurred in the <\" + componentName + \"> component:\" : 'The above error occurred in one of your React components:';\n      var errorBoundaryMessage;\n      var errorBoundaryName = getComponentName(boundary.type);\n\n      if (errorBoundaryName) {\n        errorBoundaryMessage = \"React will try to recreate this component tree from scratch \" + (\"using the error boundary you provided, \" + errorBoundaryName + \".\");\n      } else {\n        errorBoundaryMessage = 'Consider adding an error boundary to your tree to customize error handling behavior.\\n' + 'Visit https://reactjs.org/link/error-boundaries to learn more about error boundaries.';\n      }\n\n      var combinedMessage = componentNameMessage + \"\\n\" + componentStack + \"\\n\\n\" + (\"\" + errorBoundaryMessage); // In development, we provide our own message with just the component stack.\n      // We don't include the original error message and JS stack because the browser\n      // has already printed it. Even if the application swallows the error, it is still\n      // displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.\n\n      console['error'](combinedMessage); // Don't transform to our wrapper\n    } else {\n      // In production, we print the error directly.\n      // This will include the message, the JS stack, and anything the browser wants to show.\n      // We pass the error object instead of custom message so that the browser displays the error natively.\n      console['error'](error); // Don't transform to our wrapper\n    }\n  } catch (e) {\n    // This method must not throw, or React internal state will get messed up.\n    // If console.error is overridden, or logCapturedError() shows a dialog that throws,\n    // we want to report this error outside of the normal stack as a last resort.\n    // https://github.com/facebook/react/issues/13188\n    setTimeout(function () {\n      throw e;\n    });\n  }\n}\n\nvar PossiblyWeakMap$1 = typeof WeakMap === 'function' ? WeakMap : Map;\n\nfunction createRootErrorUpdate(fiber, errorInfo, lane) {\n  var update = createUpdate(NoTimestamp, lane); // Unmount the root by rendering null.\n\n  update.tag = CaptureUpdate; // Caution: React DevTools currently depends on this property\n  // being called \"element\".\n\n  update.payload = {\n    element: null\n  };\n  var error = errorInfo.value;\n\n  update.callback = function () {\n    onUncaughtError(error);\n    logCapturedError(fiber, errorInfo);\n  };\n\n  return update;\n}\n\nfunction createClassErrorUpdate(fiber, errorInfo, lane) {\n  var update = createUpdate(NoTimestamp, lane);\n  update.tag = CaptureUpdate;\n  var getDerivedStateFromError = fiber.type.getDerivedStateFromError;\n\n  if (typeof getDerivedStateFromError === 'function') {\n    var error$1 = errorInfo.value;\n\n    update.payload = function () {\n      logCapturedError(fiber, errorInfo);\n      return getDerivedStateFromError(error$1);\n    };\n  }\n\n  var inst = fiber.stateNode;\n\n  if (inst !== null && typeof inst.componentDidCatch === 'function') {\n    update.callback = function callback() {\n      {\n        markFailedErrorBoundaryForHotReloading(fiber);\n      }\n\n      if (typeof getDerivedStateFromError !== 'function') {\n        // To preserve the preexisting retry behavior of error boundaries,\n        // we keep track of which ones already failed during this batch.\n        // This gets reset before we yield back to the browser.\n        // TODO: Warn in strict mode if getDerivedStateFromError is\n        // not defined.\n        markLegacyErrorBoundaryAsFailed(this); // Only log here if componentDidCatch is the only error boundary method defined\n\n        logCapturedError(fiber, errorInfo);\n      }\n\n      var error$1 = errorInfo.value;\n      var stack = errorInfo.stack;\n      this.componentDidCatch(error$1, {\n        componentStack: stack !== null ? stack : ''\n      });\n\n      {\n        if (typeof getDerivedStateFromError !== 'function') {\n          // If componentDidCatch is the only error boundary method defined,\n          // then it needs to call setState to recover from errors.\n          // If no state update is scheduled then the boundary will swallow the error.\n          if (!includesSomeLane(fiber.lanes, SyncLane)) {\n            error('%s: Error boundaries should implement getDerivedStateFromError(). ' + 'In that method, return a state update to display an error message or fallback UI.', getComponentName(fiber.type) || 'Unknown');\n          }\n        }\n      }\n    };\n  } else {\n    update.callback = function () {\n      markFailedErrorBoundaryForHotReloading(fiber);\n    };\n  }\n\n  return update;\n}\n\nfunction attachPingListener(root, wakeable, lanes) {\n  // Attach a listener to the promise to \"ping\" the root and retry. But only if\n  // one does not already exist for the lanes we're currently rendering (which\n  // acts like a \"thread ID\" here).\n  var pingCache = root.pingCache;\n  var threadIDs;\n\n  if (pingCache === null) {\n    pingCache = root.pingCache = new PossiblyWeakMap$1();\n    threadIDs = new Set();\n    pingCache.set(wakeable, threadIDs);\n  } else {\n    threadIDs = pingCache.get(wakeable);\n\n    if (threadIDs === undefined) {\n      threadIDs = new Set();\n      pingCache.set(wakeable, threadIDs);\n    }\n  }\n\n  if (!threadIDs.has(lanes)) {\n    // Memoize using the thread ID to prevent redundant listeners.\n    threadIDs.add(lanes);\n    var ping = pingSuspendedRoot.bind(null, root, wakeable, lanes);\n    wakeable.then(ping, ping);\n  }\n}\n\nfunction throwException(root, returnFiber, sourceFiber, value, rootRenderLanes) {\n  // The source fiber did not complete.\n  sourceFiber.flags |= Incomplete; // Its effect list is no longer valid.\n\n  sourceFiber.firstEffect = sourceFiber.lastEffect = null;\n\n  if (value !== null && typeof value === 'object' && typeof value.then === 'function') {\n    // This is a wakeable.\n    var wakeable = value;\n\n    if ((sourceFiber.mode & BlockingMode) === NoMode) {\n      // Reset the memoizedState to what it was before we attempted\n      // to render it.\n      var currentSource = sourceFiber.alternate;\n\n      if (currentSource) {\n        sourceFiber.updateQueue = currentSource.updateQueue;\n        sourceFiber.memoizedState = currentSource.memoizedState;\n        sourceFiber.lanes = currentSource.lanes;\n      } else {\n        sourceFiber.updateQueue = null;\n        sourceFiber.memoizedState = null;\n      }\n    }\n\n    var hasInvisibleParentBoundary = hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext); // Schedule the nearest Suspense to re-render the timed out view.\n\n    var _workInProgress = returnFiber;\n\n    do {\n      if (_workInProgress.tag === SuspenseComponent && shouldCaptureSuspense(_workInProgress, hasInvisibleParentBoundary)) {\n        // Found the nearest boundary.\n        // Stash the promise on the boundary fiber. If the boundary times out, we'll\n        // attach another listener to flip the boundary back to its normal state.\n        var wakeables = _workInProgress.updateQueue;\n\n        if (wakeables === null) {\n          var updateQueue = new Set();\n          updateQueue.add(wakeable);\n          _workInProgress.updateQueue = updateQueue;\n        } else {\n          wakeables.add(wakeable);\n        } // If the boundary is outside of blocking mode, we should *not*\n        // suspend the commit. Pretend as if the suspended component rendered\n        // null and keep rendering. In the commit phase, we'll schedule a\n        // subsequent synchronous update to re-render the Suspense.\n        //\n        // Note: It doesn't matter whether the component that suspended was\n        // inside a blocking mode tree. If the Suspense is outside of it, we\n        // should *not* suspend the commit.\n\n\n        if ((_workInProgress.mode & BlockingMode) === NoMode) {\n          _workInProgress.flags |= DidCapture;\n          sourceFiber.flags |= ForceUpdateForLegacySuspense; // We're going to commit this fiber even though it didn't complete.\n          // But we shouldn't call any lifecycle methods or callbacks. Remove\n          // all lifecycle effect tags.\n\n          sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);\n\n          if (sourceFiber.tag === ClassComponent) {\n            var currentSourceFiber = sourceFiber.alternate;\n\n            if (currentSourceFiber === null) {\n              // This is a new mount. Change the tag so it's not mistaken for a\n              // completed class component. For example, we should not call\n              // componentWillUnmount if it is deleted.\n              sourceFiber.tag = IncompleteClassComponent;\n            } else {\n              // When we try rendering again, we should not reuse the current fiber,\n              // since it's known to be in an inconsistent state. Use a force update to\n              // prevent a bail out.\n              var update = createUpdate(NoTimestamp, SyncLane);\n              update.tag = ForceUpdate;\n              enqueueUpdate(sourceFiber, update);\n            }\n          } // The source fiber did not complete. Mark it with Sync priority to\n          // indicate that it still has pending work.\n\n\n          sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane); // Exit without suspending.\n\n          return;\n        } // Confirmed that the boundary is in a concurrent mode tree. Continue\n        // with the normal suspend path.\n        //\n        // After this we'll use a set of heuristics to determine whether this\n        // render pass will run to completion or restart or \"suspend\" the commit.\n        // The actual logic for this is spread out in different places.\n        //\n        // This first principle is that if we're going to suspend when we complete\n        // a root, then we should also restart if we get an update or ping that\n        // might unsuspend it, and vice versa. The only reason to suspend is\n        // because you think you might want to restart before committing. However,\n        // it doesn't make sense to restart only while in the period we're suspended.\n        //\n        // Restarting too aggressively is also not good because it starves out any\n        // intermediate loading state. So we use heuristics to determine when.\n        // Suspense Heuristics\n        //\n        // If nothing threw a Promise or all the same fallbacks are already showing,\n        // then don't suspend/restart.\n        //\n        // If this is an initial render of a new tree of Suspense boundaries and\n        // those trigger a fallback, then don't suspend/restart. We want to ensure\n        // that we can show the initial loading state as quickly as possible.\n        //\n        // If we hit a \"Delayed\" case, such as when we'd switch from content back into\n        // a fallback, then we should always suspend/restart. Transitions apply\n        // to this case. If none is defined, JND is used instead.\n        //\n        // If we're already showing a fallback and it gets \"retried\", allowing us to show\n        // another level, but there's still an inner boundary that would show a fallback,\n        // then we suspend/restart for 500ms since the last time we showed a fallback\n        // anywhere in the tree. This effectively throttles progressive loading into a\n        // consistent train of commits. This also gives us an opportunity to restart to\n        // get to the completed state slightly earlier.\n        //\n        // If there's ambiguity due to batching it's resolved in preference of:\n        // 1) \"delayed\", 2) \"initial render\", 3) \"retry\".\n        //\n        // We want to ensure that a \"busy\" state doesn't get force committed. We want to\n        // ensure that new initial loading states can commit as soon as possible.\n\n\n        attachPingListener(root, wakeable, rootRenderLanes);\n        _workInProgress.flags |= ShouldCapture;\n        _workInProgress.lanes = rootRenderLanes;\n        return;\n      } // This boundary already captured during this render. Continue to the next\n      // boundary.\n\n\n      _workInProgress = _workInProgress.return;\n    } while (_workInProgress !== null); // No boundary was found. Fallthrough to error mode.\n    // TODO: Use invariant so the message is stripped in prod?\n\n\n    value = new Error((getComponentName(sourceFiber.type) || 'A React component') + ' suspended while rendering, but no fallback UI was specified.\\n' + '\\n' + 'Add a <Suspense fallback=...> component higher in the tree to ' + 'provide a loading indicator or placeholder to display.');\n  } // We didn't find a boundary that could handle this type of exception. Start\n  // over and traverse parent path again, this time treating the exception\n  // as an error.\n\n\n  renderDidError();\n  value = createCapturedValue(value, sourceFiber);\n  var workInProgress = returnFiber;\n\n  do {\n    switch (workInProgress.tag) {\n      case HostRoot:\n        {\n          var _errorInfo = value;\n          workInProgress.flags |= ShouldCapture;\n          var lane = pickArbitraryLane(rootRenderLanes);\n          workInProgress.lanes = mergeLanes(workInProgress.lanes, lane);\n\n          var _update = createRootErrorUpdate(workInProgress, _errorInfo, lane);\n\n          enqueueCapturedUpdate(workInProgress, _update);\n          return;\n        }\n\n      case ClassComponent:\n        // Capture and retry\n        var errorInfo = value;\n        var ctor = workInProgress.type;\n        var instance = workInProgress.stateNode;\n\n        if ((workInProgress.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === 'function' || instance !== null && typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance))) {\n          workInProgress.flags |= ShouldCapture;\n\n          var _lane = pickArbitraryLane(rootRenderLanes);\n\n          workInProgress.lanes = mergeLanes(workInProgress.lanes, _lane); // Schedule the error boundary to re-render using updated state\n\n          var _update2 = createClassErrorUpdate(workInProgress, errorInfo, _lane);\n\n          enqueueCapturedUpdate(workInProgress, _update2);\n          return;\n        }\n\n        break;\n    }\n\n    workInProgress = workInProgress.return;\n  } while (workInProgress !== null);\n}\n\nfunction invokeGuardedCallbackProd(name, func, context, a, b, c, d, e, f) {\n  var funcArgs = Array.prototype.slice.call(arguments, 3);\n\n  try {\n    func.apply(context, funcArgs);\n  } catch (error) {\n    this.onError(error);\n  }\n}\n\nvar invokeGuardedCallbackImpl = invokeGuardedCallbackProd;\n\n{\n  // In DEV mode, we swap out invokeGuardedCallback for a special version\n  // that plays more nicely with the browser's DevTools. The idea is to preserve\n  // \"Pause on exceptions\" behavior. Because React wraps all user-provided\n  // functions in invokeGuardedCallback, and the production version of\n  // invokeGuardedCallback uses a try-catch, all user exceptions are treated\n  // like caught exceptions, and the DevTools won't pause unless the developer\n  // takes the extra step of enabling pause on caught exceptions. This is\n  // unintuitive, though, because even though React has caught the error, from\n  // the developer's perspective, the error is uncaught.\n  //\n  // To preserve the expected \"Pause on exceptions\" behavior, we don't use a\n  // try-catch in DEV. Instead, we synchronously dispatch a fake event to a fake\n  // DOM node, and call the user-provided callback from inside an event handler\n  // for that fake event. If the callback throws, the error is \"captured\" using\n  // a global event handler. But because the error happens in a different\n  // event loop context, it does not interrupt the normal program flow.\n  // Effectively, this gives us try-catch behavior without actually using\n  // try-catch. Neat!\n  // Check that the browser supports the APIs we need to implement our special\n  // DEV version of invokeGuardedCallback\n  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {\n    var fakeNode = document.createElement('react');\n\n    invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a, b, c, d, e, f) {\n      // If document doesn't exist we know for sure we will crash in this method\n      // when we call document.createEvent(). However this can cause confusing\n      // errors: https://github.com/facebookincubator/create-react-app/issues/3482\n      // So we preemptively throw with a better message instead.\n      if (!(typeof document !== 'undefined')) {\n        {\n          throw Error( \"The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.\" );\n        }\n      }\n\n      var evt = document.createEvent('Event');\n      var didCall = false; // Keeps track of whether the user-provided callback threw an error. We\n      // set this to true at the beginning, then set it to false right after\n      // calling the function. If the function errors, `didError` will never be\n      // set to false. This strategy works even if the browser is flaky and\n      // fails to call our global error handler, because it doesn't rely on\n      // the error event at all.\n\n      var didError = true; // Keeps track of the value of window.event so that we can reset it\n      // during the callback to let user code access window.event in the\n      // browsers that support it.\n\n      var windowEvent = window.event; // Keeps track of the descriptor of window.event to restore it after event\n      // dispatching: https://github.com/facebook/react/issues/13688\n\n      var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, 'event');\n\n      function restoreAfterDispatch() {\n        // We immediately remove the callback from event listeners so that\n        // nested `invokeGuardedCallback` calls do not clash. Otherwise, a\n        // nested call would trigger the fake event handlers of any call higher\n        // in the stack.\n        fakeNode.removeEventListener(evtType, callCallback, false); // We check for window.hasOwnProperty('event') to prevent the\n        // window.event assignment in both IE <= 10 as they throw an error\n        // \"Member not found\" in strict mode, and in Firefox which does not\n        // support window.event.\n\n        if (typeof window.event !== 'undefined' && window.hasOwnProperty('event')) {\n          window.event = windowEvent;\n        }\n      } // Create an event handler for our fake event. We will synchronously\n      // dispatch our fake event using `dispatchEvent`. Inside the handler, we\n      // call the user-provided callback.\n\n\n      var funcArgs = Array.prototype.slice.call(arguments, 3);\n\n      function callCallback() {\n        didCall = true;\n        restoreAfterDispatch();\n        func.apply(context, funcArgs);\n        didError = false;\n      } // Create a global error event handler. We use this to capture the value\n      // that was thrown. It's possible that this error handler will fire more\n      // than once; for example, if non-React code also calls `dispatchEvent`\n      // and a handler for that event throws. We should be resilient to most of\n      // those cases. Even if our error event handler fires more than once, the\n      // last error event is always used. If the callback actually does error,\n      // we know that the last error event is the correct one, because it's not\n      // possible for anything else to have happened in between our callback\n      // erroring and the code that follows the `dispatchEvent` call below. If\n      // the callback doesn't error, but the error event was fired, we know to\n      // ignore it because `didError` will be false, as described above.\n\n\n      var error; // Use this to track whether the error event is ever called.\n\n      var didSetError = false;\n      var isCrossOriginError = false;\n\n      function handleWindowError(event) {\n        error = event.error;\n        didSetError = true;\n\n        if (error === null && event.colno === 0 && event.lineno === 0) {\n          isCrossOriginError = true;\n        }\n\n        if (event.defaultPrevented) {\n          // Some other error handler has prevented default.\n          // Browsers silence the error report if this happens.\n          // We'll remember this to later decide whether to log it or not.\n          if (error != null && typeof error === 'object') {\n            try {\n              error._suppressLogging = true;\n            } catch (inner) {// Ignore.\n            }\n          }\n        }\n      } // Create a fake event type.\n\n\n      var evtType = \"react-\" + (name ? name : 'invokeguardedcallback'); // Attach our event handlers\n\n      window.addEventListener('error', handleWindowError);\n      fakeNode.addEventListener(evtType, callCallback, false); // Synchronously dispatch our fake event. If the user-provided function\n      // errors, it will trigger our global error handler.\n\n      evt.initEvent(evtType, false, false);\n      fakeNode.dispatchEvent(evt);\n\n      if (windowEventDescriptor) {\n        Object.defineProperty(window, 'event', windowEventDescriptor);\n      }\n\n      if (didCall && didError) {\n        if (!didSetError) {\n          // The callback errored, but the error event never fired.\n          error = new Error('An error was thrown inside one of your components, but React ' + \"doesn't know what it was. This is likely due to browser \" + 'flakiness. React does its best to preserve the \"Pause on ' + 'exceptions\" behavior of the DevTools, which requires some ' + \"DEV-mode only tricks. It's possible that these don't work in \" + 'your browser. Try triggering the error in production mode, ' + 'or switching to a modern browser. If you suspect that this is ' + 'actually an issue with React, please file an issue.');\n        } else if (isCrossOriginError) {\n          error = new Error(\"A cross-origin error was thrown. React doesn't have access to \" + 'the actual error object in development. ' + 'See https://reactjs.org/link/crossorigin-error for more information.');\n        }\n\n        this.onError(error);\n      } // Remove our event listeners\n\n\n      window.removeEventListener('error', handleWindowError);\n\n      if (!didCall) {\n        // Something went really wrong, and our event was not dispatched.\n        // https://github.com/facebook/react/issues/16734\n        // https://github.com/facebook/react/issues/16585\n        // Fall back to the production implementation.\n        restoreAfterDispatch();\n        return invokeGuardedCallbackProd.apply(this, arguments);\n      }\n    };\n  }\n}\n\nvar invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;\n\nvar hasError = false;\nvar caughtError = null; // Used by event system to capture/rethrow the first error.\nvar reporter = {\n  onError: function (error) {\n    hasError = true;\n    caughtError = error;\n  }\n};\n/**\n * Call a function while guarding against errors that happens within it.\n * Returns an error if it throws, otherwise null.\n *\n * In production, this is implemented using a try-catch. The reason we don't\n * use a try-catch directly is so that we can swap out a different\n * implementation in DEV mode.\n *\n * @param {String} name of the guard to use for logging or debugging\n * @param {Function} func The function to invoke\n * @param {*} context The context to use when calling the function\n * @param {...*} args Arguments for function\n */\n\nfunction invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {\n  hasError = false;\n  caughtError = null;\n  invokeGuardedCallbackImpl$1.apply(reporter, arguments);\n}\nfunction hasCaughtError() {\n  return hasError;\n}\nfunction clearCaughtError() {\n  if (hasError) {\n    var error = caughtError;\n    hasError = false;\n    caughtError = null;\n    return error;\n  } else {\n    {\n      {\n        throw Error( \"clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.\" );\n      }\n    }\n  }\n}\n\nvar didWarnAboutUndefinedSnapshotBeforeUpdate = null;\n\n{\n  didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();\n}\n\nvar PossiblyWeakSet = typeof WeakSet === 'function' ? WeakSet : Set;\n\nvar callComponentWillUnmountWithTimer = function (current, instance) {\n  instance.props = current.memoizedProps;\n  instance.state = current.memoizedState;\n\n  {\n    instance.componentWillUnmount();\n  }\n}; // Capture errors so they don't interrupt unmounting.\n\n\nfunction safelyCallComponentWillUnmount(current, instance) {\n  {\n    invokeGuardedCallback(null, callComponentWillUnmountWithTimer, null, current, instance);\n\n    if (hasCaughtError()) {\n      var unmountError = clearCaughtError();\n      captureCommitPhaseError(current, unmountError);\n    }\n  }\n}\n\nfunction safelyDetachRef(current) {\n  var ref = current.ref;\n\n  if (ref !== null) {\n    if (typeof ref === 'function') {\n      {\n        invokeGuardedCallback(null, ref, null, null);\n\n        if (hasCaughtError()) {\n          var refError = clearCaughtError();\n          captureCommitPhaseError(current, refError);\n        }\n      }\n    } else {\n      ref.current = null;\n    }\n  }\n}\n\nfunction safelyCallDestroy(current, destroy) {\n  {\n    invokeGuardedCallback(null, destroy, null);\n\n    if (hasCaughtError()) {\n      var error = clearCaughtError();\n      captureCommitPhaseError(current, error);\n    }\n  }\n}\n\nfunction commitBeforeMutationLifeCycles(current, finishedWork) {\n  switch (finishedWork.tag) {\n    case FunctionComponent:\n    case ForwardRef:\n    case SimpleMemoComponent:\n    case Block:\n      {\n        return;\n      }\n\n    case ClassComponent:\n      {\n        if (finishedWork.flags & Snapshot) {\n          if (current !== null) {\n            var prevProps = current.memoizedProps;\n            var prevState = current.memoizedState;\n            var instance = finishedWork.stateNode; // We could update instance props and state here,\n            // but instead we rely on them being set during last render.\n            // TODO: revisit this when we implement resuming.\n\n            {\n              if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {\n                if (instance.props !== finishedWork.memoizedProps) {\n                  error('Expected %s props to match memoized props before ' + 'getSnapshotBeforeUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');\n                }\n\n                if (instance.state !== finishedWork.memoizedState) {\n                  error('Expected %s state to match memoized state before ' + 'getSnapshotBeforeUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');\n                }\n              }\n            }\n\n            var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);\n\n            {\n              var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;\n\n              if (snapshot === undefined && !didWarnSet.has(finishedWork.type)) {\n                didWarnSet.add(finishedWork.type);\n\n                error('%s.getSnapshotBeforeUpdate(): A snapshot value (or null) ' + 'must be returned. You have returned undefined.', getComponentName(finishedWork.type));\n              }\n            }\n\n            instance.__reactInternalSnapshotBeforeUpdate = snapshot;\n          }\n        }\n\n        return;\n      }\n\n    case HostRoot:\n      {\n        if (supportsMutation) {\n          if (finishedWork.flags & Snapshot) {\n            var root = finishedWork.stateNode;\n            clearContainer(root.containerInfo);\n          }\n        }\n\n        return;\n      }\n\n    case HostComponent:\n    case HostText:\n    case HostPortal:\n    case IncompleteClassComponent:\n      // Nothing to do for these component types\n      return;\n  }\n\n  {\n    {\n      throw Error( \"This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.\" );\n    }\n  }\n}\n\nfunction commitHookEffectListUnmount(tag, finishedWork) {\n  var updateQueue = finishedWork.updateQueue;\n  var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;\n\n  if (lastEffect !== null) {\n    var firstEffect = lastEffect.next;\n    var effect = firstEffect;\n\n    do {\n      if ((effect.tag & tag) === tag) {\n        // Unmount\n        var destroy = effect.destroy;\n        effect.destroy = undefined;\n\n        if (destroy !== undefined) {\n          destroy();\n        }\n      }\n\n      effect = effect.next;\n    } while (effect !== firstEffect);\n  }\n}\n\nfunction commitHookEffectListMount(tag, finishedWork) {\n  var updateQueue = finishedWork.updateQueue;\n  var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;\n\n  if (lastEffect !== null) {\n    var firstEffect = lastEffect.next;\n    var effect = firstEffect;\n\n    do {\n      if ((effect.tag & tag) === tag) {\n        // Mount\n        var create = effect.create;\n        effect.destroy = create();\n\n        {\n          var destroy = effect.destroy;\n\n          if (destroy !== undefined && typeof destroy !== 'function') {\n            var addendum = void 0;\n\n            if (destroy === null) {\n              addendum = ' You returned null. If your effect does not require clean ' + 'up, return undefined (or nothing).';\n            } else if (typeof destroy.then === 'function') {\n              addendum = '\\n\\nIt looks like you wrote useEffect(async () => ...) or returned a Promise. ' + 'Instead, write the async function inside your effect ' + 'and call it immediately:\\n\\n' + 'useEffect(() => {\\n' + '  async function fetchData() {\\n' + '    // You can await here\\n' + '    const response = await MyAPI.getData(someId);\\n' + '    // ...\\n' + '  }\\n' + '  fetchData();\\n' + \"}, [someId]); // Or [] if effect doesn't need props or state\\n\\n\" + 'Learn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching';\n            } else {\n              addendum = ' You returned: ' + destroy;\n            }\n\n            error('An effect function must not return anything besides a function, ' + 'which is used for clean-up.%s', addendum);\n          }\n        }\n      }\n\n      effect = effect.next;\n    } while (effect !== firstEffect);\n  }\n}\n\nfunction schedulePassiveEffects(finishedWork) {\n  var updateQueue = finishedWork.updateQueue;\n  var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;\n\n  if (lastEffect !== null) {\n    var firstEffect = lastEffect.next;\n    var effect = firstEffect;\n\n    do {\n      var _effect = effect,\n          next = _effect.next,\n          tag = _effect.tag;\n\n      if ((tag & Passive$1) !== NoFlags$1 && (tag & HasEffect) !== NoFlags$1) {\n        enqueuePendingPassiveHookEffectUnmount(finishedWork, effect);\n        enqueuePendingPassiveHookEffectMount(finishedWork, effect);\n      }\n\n      effect = next;\n    } while (effect !== firstEffect);\n  }\n}\n\nfunction commitLifeCycles(finishedRoot, current, finishedWork, committedLanes) {\n  switch (finishedWork.tag) {\n    case FunctionComponent:\n    case ForwardRef:\n    case SimpleMemoComponent:\n    case Block:\n      {\n        // At this point layout effects have already been destroyed (during mutation phase).\n        // This is done to prevent sibling component effects from interfering with each other,\n        // e.g. a destroy function in one component should never override a ref set\n        // by a create function in another component during the same commit.\n        {\n          commitHookEffectListMount(Layout | HasEffect, finishedWork);\n        }\n\n        schedulePassiveEffects(finishedWork);\n        return;\n      }\n\n    case ClassComponent:\n      {\n        var instance = finishedWork.stateNode;\n\n        if (finishedWork.flags & Update) {\n          if (current === null) {\n            // We could update instance props and state here,\n            // but instead we rely on them being set during last render.\n            // TODO: revisit this when we implement resuming.\n            {\n              if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {\n                if (instance.props !== finishedWork.memoizedProps) {\n                  error('Expected %s props to match memoized props before ' + 'componentDidMount. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');\n                }\n\n                if (instance.state !== finishedWork.memoizedState) {\n                  error('Expected %s state to match memoized state before ' + 'componentDidMount. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');\n                }\n              }\n            }\n\n            {\n              instance.componentDidMount();\n            }\n          } else {\n            var prevProps = finishedWork.elementType === finishedWork.type ? current.memoizedProps : resolveDefaultProps(finishedWork.type, current.memoizedProps);\n            var prevState = current.memoizedState; // We could update instance props and state here,\n            // but instead we rely on them being set during last render.\n            // TODO: revisit this when we implement resuming.\n\n            {\n              if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {\n                if (instance.props !== finishedWork.memoizedProps) {\n                  error('Expected %s props to match memoized props before ' + 'componentDidUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');\n                }\n\n                if (instance.state !== finishedWork.memoizedState) {\n                  error('Expected %s state to match memoized state before ' + 'componentDidUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');\n                }\n              }\n            }\n\n            {\n              instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);\n            }\n          }\n        } // TODO: I think this is now always non-null by the time it reaches the\n        // commit phase. Consider removing the type check.\n\n\n        var updateQueue = finishedWork.updateQueue;\n\n        if (updateQueue !== null) {\n          {\n            if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {\n              if (instance.props !== finishedWork.memoizedProps) {\n                error('Expected %s props to match memoized props before ' + 'processing the update queue. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');\n              }\n\n              if (instance.state !== finishedWork.memoizedState) {\n                error('Expected %s state to match memoized state before ' + 'processing the update queue. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');\n              }\n            }\n          } // We could update instance props and state here,\n          // but instead we rely on them being set during last render.\n          // TODO: revisit this when we implement resuming.\n\n\n          commitUpdateQueue(finishedWork, updateQueue, instance);\n        }\n\n        return;\n      }\n\n    case HostRoot:\n      {\n        // TODO: I think this is now always non-null by the time it reaches the\n        // commit phase. Consider removing the type check.\n        var _updateQueue = finishedWork.updateQueue;\n\n        if (_updateQueue !== null) {\n          var _instance = null;\n\n          if (finishedWork.child !== null) {\n            switch (finishedWork.child.tag) {\n              case HostComponent:\n                _instance = getPublicInstance(finishedWork.child.stateNode);\n                break;\n\n              case ClassComponent:\n                _instance = finishedWork.child.stateNode;\n                break;\n            }\n          }\n\n          commitUpdateQueue(finishedWork, _updateQueue, _instance);\n        }\n\n        return;\n      }\n\n    case HostComponent:\n      {\n        var _instance2 = finishedWork.stateNode; // Renderers may schedule work to be done after host components are mounted\n        // (eg DOM renderer may schedule auto-focus for inputs and form controls).\n        // These effects should only be committed when components are first mounted,\n        // aka when there is no current/alternate.\n\n        if (current === null && finishedWork.flags & Update) {\n          var type = finishedWork.type;\n          var props = finishedWork.memoizedProps;\n          commitMount(_instance2, type, props, finishedWork);\n        }\n\n        return;\n      }\n\n    case HostText:\n      {\n        // We have no life-cycles associated with text.\n        return;\n      }\n\n    case HostPortal:\n      {\n        // We have no life-cycles associated with portals.\n        return;\n      }\n\n    case Profiler:\n      {\n        {\n          var _finishedWork$memoize2 = finishedWork.memoizedProps,\n              onCommit = _finishedWork$memoize2.onCommit,\n              onRender = _finishedWork$memoize2.onRender;\n          var effectDuration = finishedWork.stateNode.effectDuration;\n          var commitTime = getCommitTime();\n\n          if (typeof onRender === 'function') {\n            {\n              onRender(finishedWork.memoizedProps.id, current === null ? 'mount' : 'update', finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime, finishedRoot.memoizedInteractions);\n            }\n          }\n        }\n\n        return;\n      }\n\n    case SuspenseComponent:\n      {\n        commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);\n        return;\n      }\n\n    case SuspenseListComponent:\n    case IncompleteClassComponent:\n    case FundamentalComponent:\n    case ScopeComponent:\n    case OffscreenComponent:\n    case LegacyHiddenComponent:\n      return;\n  }\n\n  {\n    {\n      throw Error( \"This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.\" );\n    }\n  }\n}\n\nfunction hideOrUnhideAllChildren(finishedWork, isHidden) {\n  if (supportsMutation) {\n    // We only have the top Fiber that was inserted but we need to recurse down its\n    // children to find all the terminal nodes.\n    var node = finishedWork;\n\n    while (true) {\n      if (node.tag === HostComponent) {\n        var instance = node.stateNode;\n\n        if (isHidden) {\n          hideInstance(instance);\n        } else {\n          unhideInstance(node.stateNode, node.memoizedProps);\n        }\n      } else if (node.tag === HostText) {\n        var _instance3 = node.stateNode;\n\n        if (isHidden) {\n          hideTextInstance(_instance3);\n        } else {\n          unhideTextInstance(_instance3, node.memoizedProps);\n        }\n      } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork) ; else if (node.child !== null) {\n        node.child.return = node;\n        node = node.child;\n        continue;\n      }\n\n      if (node === finishedWork) {\n        return;\n      }\n\n      while (node.sibling === null) {\n        if (node.return === null || node.return === finishedWork) {\n          return;\n        }\n\n        node = node.return;\n      }\n\n      node.sibling.return = node.return;\n      node = node.sibling;\n    }\n  }\n}\n\nfunction commitAttachRef(finishedWork) {\n  var ref = finishedWork.ref;\n\n  if (ref !== null) {\n    var instance = finishedWork.stateNode;\n    var instanceToUse;\n\n    switch (finishedWork.tag) {\n      case HostComponent:\n        instanceToUse = getPublicInstance(instance);\n        break;\n\n      default:\n        instanceToUse = instance;\n    } // Moved outside to ensure DCE works with this flag\n\n    if (typeof ref === 'function') {\n      ref(instanceToUse);\n    } else {\n      {\n        if (!ref.hasOwnProperty('current')) {\n          error('Unexpected ref object provided for %s. ' + 'Use either a ref-setter function or React.createRef().', getComponentName(finishedWork.type));\n        }\n      }\n\n      ref.current = instanceToUse;\n    }\n  }\n}\n\nfunction commitDetachRef(current) {\n  var currentRef = current.ref;\n\n  if (currentRef !== null) {\n    if (typeof currentRef === 'function') {\n      currentRef(null);\n    } else {\n      currentRef.current = null;\n    }\n  }\n} // User-originating errors (lifecycles and refs) should not interrupt\n// deletion, so don't let them throw. Host-originating errors should\n// interrupt deletion, so it's okay\n\n\nfunction commitUnmount(finishedRoot, current, renderPriorityLevel) {\n  onCommitUnmount(current);\n\n  switch (current.tag) {\n    case FunctionComponent:\n    case ForwardRef:\n    case MemoComponent:\n    case SimpleMemoComponent:\n    case Block:\n      {\n        var updateQueue = current.updateQueue;\n\n        if (updateQueue !== null) {\n          var lastEffect = updateQueue.lastEffect;\n\n          if (lastEffect !== null) {\n            var firstEffect = lastEffect.next;\n            var effect = firstEffect;\n\n            do {\n              var _effect2 = effect,\n                  destroy = _effect2.destroy,\n                  tag = _effect2.tag;\n\n              if (destroy !== undefined) {\n                if ((tag & Passive$1) !== NoFlags$1) {\n                  enqueuePendingPassiveHookEffectUnmount(current, effect);\n                } else {\n                  {\n                    safelyCallDestroy(current, destroy);\n                  }\n                }\n              }\n\n              effect = effect.next;\n            } while (effect !== firstEffect);\n          }\n        }\n\n        return;\n      }\n\n    case ClassComponent:\n      {\n        safelyDetachRef(current);\n        var instance = current.stateNode;\n\n        if (typeof instance.componentWillUnmount === 'function') {\n          safelyCallComponentWillUnmount(current, instance);\n        }\n\n        return;\n      }\n\n    case HostComponent:\n      {\n        safelyDetachRef(current);\n        return;\n      }\n\n    case HostPortal:\n      {\n        // TODO: this is recursive.\n        // We are also not using this parent because\n        // the portal will get pushed immediately.\n        if (supportsMutation) {\n          unmountHostComponents(finishedRoot, current);\n        } else if (supportsPersistence) {\n          emptyPortalContainer(current);\n        }\n\n        return;\n      }\n\n    case FundamentalComponent:\n      {\n\n        return;\n      }\n\n    case DehydratedFragment:\n      {\n\n        return;\n      }\n\n    case ScopeComponent:\n      {\n\n        return;\n      }\n  }\n}\n\nfunction commitNestedUnmounts(finishedRoot, root, renderPriorityLevel) {\n  // While we're inside a removed host node we don't want to call\n  // removeChild on the inner nodes because they're removed by the top\n  // call anyway. We also want to call componentWillUnmount on all\n  // composites before this host node is removed from the tree. Therefore\n  // we do an inner loop while we're still inside the host node.\n  var node = root;\n\n  while (true) {\n    commitUnmount(finishedRoot, node); // Visit children because they may contain more composite or host nodes.\n    // Skip portals because commitUnmount() currently visits them recursively.\n\n    if (node.child !== null && ( // If we use mutation we drill down into portals using commitUnmount above.\n    // If we don't use mutation we drill down into portals here instead.\n    !supportsMutation || node.tag !== HostPortal)) {\n      node.child.return = node;\n      node = node.child;\n      continue;\n    }\n\n    if (node === root) {\n      return;\n    }\n\n    while (node.sibling === null) {\n      if (node.return === null || node.return === root) {\n        return;\n      }\n\n      node = node.return;\n    }\n\n    node.sibling.return = node.return;\n    node = node.sibling;\n  }\n}\n\nfunction detachFiberMutation(fiber) {\n  // Cut off the return pointers to disconnect it from the tree. Ideally, we\n  // should clear the child pointer of the parent alternate to let this\n  // get GC:ed but we don't know which for sure which parent is the current\n  // one so we'll settle for GC:ing the subtree of this child. This child\n  // itself will be GC:ed when the parent updates the next time.\n  // Note: we cannot null out sibling here, otherwise it can cause issues\n  // with findDOMNode and how it requires the sibling field to carry out\n  // traversal in a later effect. See PR #16820. We now clear the sibling\n  // field after effects, see: detachFiberAfterEffects.\n  //\n  // Don't disconnect stateNode now; it will be detached in detachFiberAfterEffects.\n  // It may be required if the current component is an error boundary,\n  // and one of its descendants throws while unmounting a passive effect.\n  fiber.alternate = null;\n  fiber.child = null;\n  fiber.dependencies = null;\n  fiber.firstEffect = null;\n  fiber.lastEffect = null;\n  fiber.memoizedProps = null;\n  fiber.memoizedState = null;\n  fiber.pendingProps = null;\n  fiber.return = null;\n  fiber.updateQueue = null;\n\n  {\n    fiber._debugOwner = null;\n  }\n}\n\nfunction emptyPortalContainer(current) {\n  if (!supportsPersistence) {\n    return;\n  }\n\n  var portal = current.stateNode;\n  var containerInfo = portal.containerInfo;\n  var emptyChildSet = createContainerChildSet(containerInfo);\n  replaceContainerChildren(containerInfo, emptyChildSet);\n}\n\nfunction commitContainer(finishedWork) {\n  if (!supportsPersistence) {\n    return;\n  }\n\n  switch (finishedWork.tag) {\n    case ClassComponent:\n    case HostComponent:\n    case HostText:\n    case FundamentalComponent:\n      {\n        return;\n      }\n\n    case HostRoot:\n    case HostPortal:\n      {\n        var portalOrRoot = finishedWork.stateNode;\n        var containerInfo = portalOrRoot.containerInfo,\n            pendingChildren = portalOrRoot.pendingChildren;\n        replaceContainerChildren(containerInfo, pendingChildren);\n        return;\n      }\n  }\n\n  {\n    {\n      throw Error( \"This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.\" );\n    }\n  }\n}\n\nfunction getHostParentFiber(fiber) {\n  var parent = fiber.return;\n\n  while (parent !== null) {\n    if (isHostParent(parent)) {\n      return parent;\n    }\n\n    parent = parent.return;\n  }\n\n  {\n    {\n      throw Error( \"Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.\" );\n    }\n  }\n}\n\nfunction isHostParent(fiber) {\n  return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;\n}\n\nfunction getHostSibling(fiber) {\n  // We're going to search forward into the tree until we find a sibling host\n  // node. Unfortunately, if multiple insertions are done in a row we have to\n  // search past them. This leads to exponential search for the next sibling.\n  // TODO: Find a more efficient way to do this.\n  var node = fiber;\n\n  siblings: while (true) {\n    // If we didn't find anything, let's try the next sibling.\n    while (node.sibling === null) {\n      if (node.return === null || isHostParent(node.return)) {\n        // If we pop out of the root or hit the parent the fiber we are the\n        // last sibling.\n        return null;\n      }\n\n      node = node.return;\n    }\n\n    node.sibling.return = node.return;\n    node = node.sibling;\n\n    while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {\n      // If it is not host node and, we might have a host node inside it.\n      // Try to search down until we find one.\n      if (node.flags & Placement) {\n        // If we don't have a child, try the siblings instead.\n        continue siblings;\n      } // If we don't have a child, try the siblings instead.\n      // We also skip portals because they are not part of this host tree.\n\n\n      if (node.child === null || node.tag === HostPortal) {\n        continue siblings;\n      } else {\n        node.child.return = node;\n        node = node.child;\n      }\n    } // Check if this host node is stable or about to be placed.\n\n\n    if (!(node.flags & Placement)) {\n      // Found it!\n      return node.stateNode;\n    }\n  }\n}\n\nfunction commitPlacement(finishedWork) {\n  if (!supportsMutation) {\n    return;\n  } // Recursively insert all host nodes into the parent.\n\n\n  var parentFiber = getHostParentFiber(finishedWork); // Note: these two variables *must* always be updated together.\n\n  var parent;\n  var isContainer;\n  var parentStateNode = parentFiber.stateNode;\n\n  switch (parentFiber.tag) {\n    case HostComponent:\n      parent = parentStateNode;\n      isContainer = false;\n      break;\n\n    case HostRoot:\n      parent = parentStateNode.containerInfo;\n      isContainer = true;\n      break;\n\n    case HostPortal:\n      parent = parentStateNode.containerInfo;\n      isContainer = true;\n      break;\n\n    case FundamentalComponent:\n\n    // eslint-disable-next-line-no-fallthrough\n\n    default:\n      {\n        {\n          throw Error( \"Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.\" );\n        }\n      }\n\n  }\n\n  if (parentFiber.flags & ContentReset) {\n    // Reset the text content of the parent before doing any insertions\n    resetTextContent(parent); // Clear ContentReset from the effect tag\n\n    parentFiber.flags &= ~ContentReset;\n  }\n\n  var before = getHostSibling(finishedWork); // We only have the top Fiber that was inserted but we need to recurse down its\n  // children to find all the terminal nodes.\n\n  if (isContainer) {\n    insertOrAppendPlacementNodeIntoContainer(finishedWork, before, parent);\n  } else {\n    insertOrAppendPlacementNode(finishedWork, before, parent);\n  }\n}\n\nfunction insertOrAppendPlacementNodeIntoContainer(node, before, parent) {\n  var tag = node.tag;\n  var isHost = tag === HostComponent || tag === HostText;\n\n  if (isHost || enableFundamentalAPI ) {\n    var stateNode = isHost ? node.stateNode : node.stateNode.instance;\n\n    if (before) {\n      insertInContainerBefore(parent, stateNode, before);\n    } else {\n      appendChildToContainer(parent, stateNode);\n    }\n  } else if (tag === HostPortal) ; else {\n    var child = node.child;\n\n    if (child !== null) {\n      insertOrAppendPlacementNodeIntoContainer(child, before, parent);\n      var sibling = child.sibling;\n\n      while (sibling !== null) {\n        insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);\n        sibling = sibling.sibling;\n      }\n    }\n  }\n}\n\nfunction insertOrAppendPlacementNode(node, before, parent) {\n  var tag = node.tag;\n  var isHost = tag === HostComponent || tag === HostText;\n\n  if (isHost || enableFundamentalAPI ) {\n    var stateNode = isHost ? node.stateNode : node.stateNode.instance;\n\n    if (before) {\n      insertBefore(parent, stateNode, before);\n    } else {\n      appendChild(parent, stateNode);\n    }\n  } else if (tag === HostPortal) ; else {\n    var child = node.child;\n\n    if (child !== null) {\n      insertOrAppendPlacementNode(child, before, parent);\n      var sibling = child.sibling;\n\n      while (sibling !== null) {\n        insertOrAppendPlacementNode(sibling, before, parent);\n        sibling = sibling.sibling;\n      }\n    }\n  }\n}\n\nfunction unmountHostComponents(finishedRoot, current, renderPriorityLevel) {\n  // We only have the top Fiber that was deleted but we need to recurse down its\n  // children to find all the terminal nodes.\n  var node = current; // Each iteration, currentParent is populated with node's host parent if not\n  // currentParentIsValid.\n\n  var currentParentIsValid = false; // Note: these two variables *must* always be updated together.\n\n  var currentParent;\n  var currentParentIsContainer;\n\n  while (true) {\n    if (!currentParentIsValid) {\n      var parent = node.return;\n\n      findParent: while (true) {\n        if (!(parent !== null)) {\n          {\n            throw Error( \"Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.\" );\n          }\n        }\n\n        var parentStateNode = parent.stateNode;\n\n        switch (parent.tag) {\n          case HostComponent:\n            currentParent = parentStateNode;\n            currentParentIsContainer = false;\n            break findParent;\n\n          case HostRoot:\n            currentParent = parentStateNode.containerInfo;\n            currentParentIsContainer = true;\n            break findParent;\n\n          case HostPortal:\n            currentParent = parentStateNode.containerInfo;\n            currentParentIsContainer = true;\n            break findParent;\n\n        }\n\n        parent = parent.return;\n      }\n\n      currentParentIsValid = true;\n    }\n\n    if (node.tag === HostComponent || node.tag === HostText) {\n      commitNestedUnmounts(finishedRoot, node); // After all the children have unmounted, it is now safe to remove the\n      // node from the tree.\n\n      if (currentParentIsContainer) {\n        removeChildFromContainer(currentParent, node.stateNode);\n      } else {\n        removeChild(currentParent, node.stateNode);\n      } // Don't visit children because we already visited them.\n\n    } else if (node.tag === HostPortal) {\n      if (node.child !== null) {\n        // When we go into a portal, it becomes the parent to remove from.\n        // We will reassign it back when we pop the portal on the way up.\n        currentParent = node.stateNode.containerInfo;\n        currentParentIsContainer = true; // Visit children because portals might contain host components.\n\n        node.child.return = node;\n        node = node.child;\n        continue;\n      }\n    } else {\n      commitUnmount(finishedRoot, node); // Visit children because we may find more host components below.\n\n      if (node.child !== null) {\n        node.child.return = node;\n        node = node.child;\n        continue;\n      }\n    }\n\n    if (node === current) {\n      return;\n    }\n\n    while (node.sibling === null) {\n      if (node.return === null || node.return === current) {\n        return;\n      }\n\n      node = node.return;\n\n      if (node.tag === HostPortal) {\n        // When we go out of the portal, we need to restore the parent.\n        // Since we don't keep a stack of them, we will search for it.\n        currentParentIsValid = false;\n      }\n    }\n\n    node.sibling.return = node.return;\n    node = node.sibling;\n  }\n}\n\nfunction commitDeletion(finishedRoot, current, renderPriorityLevel) {\n  if (supportsMutation) {\n    // Recursively delete all host nodes from the parent.\n    // Detach refs and call componentWillUnmount() on the whole subtree.\n    unmountHostComponents(finishedRoot, current);\n  } else {\n    // Detach refs and call componentWillUnmount() on the whole subtree.\n    commitNestedUnmounts(finishedRoot, current);\n  }\n\n  var alternate = current.alternate;\n  detachFiberMutation(current);\n\n  if (alternate !== null) {\n    detachFiberMutation(alternate);\n  }\n}\n\nfunction commitWork(current, finishedWork) {\n  if (!supportsMutation) {\n    switch (finishedWork.tag) {\n      case FunctionComponent:\n      case ForwardRef:\n      case MemoComponent:\n      case SimpleMemoComponent:\n      case Block:\n        {\n          // Layout effects are destroyed during the mutation phase so that all\n          // destroy functions for all fibers are called before any create functions.\n          // This prevents sibling component effects from interfering with each other,\n          // e.g. a destroy function in one component should never override a ref set\n          // by a create function in another component during the same commit.\n          {\n            commitHookEffectListUnmount(Layout | HasEffect, finishedWork);\n          }\n\n          return;\n        }\n\n      case Profiler:\n        {\n          return;\n        }\n\n      case SuspenseComponent:\n        {\n          commitSuspenseComponent(finishedWork);\n          attachSuspenseRetryListeners(finishedWork);\n          return;\n        }\n\n      case SuspenseListComponent:\n        {\n          attachSuspenseRetryListeners(finishedWork);\n          return;\n        }\n\n      case HostRoot:\n        {\n          if (supportsHydration) {\n            var root = finishedWork.stateNode;\n\n            if (root.hydrate) {\n              // We've just hydrated. No need to hydrate again.\n              root.hydrate = false;\n              commitHydratedContainer(root.containerInfo);\n            }\n          }\n\n          break;\n        }\n\n      case OffscreenComponent:\n      case LegacyHiddenComponent:\n        {\n          return;\n        }\n    }\n\n    commitContainer(finishedWork);\n    return;\n  }\n\n  switch (finishedWork.tag) {\n    case FunctionComponent:\n    case ForwardRef:\n    case MemoComponent:\n    case SimpleMemoComponent:\n    case Block:\n      {\n        // Layout effects are destroyed during the mutation phase so that all\n        // destroy functions for all fibers are called before any create functions.\n        // This prevents sibling component effects from interfering with each other,\n        // e.g. a destroy function in one component should never override a ref set\n        // by a create function in another component during the same commit.\n        {\n          commitHookEffectListUnmount(Layout | HasEffect, finishedWork);\n        }\n\n        return;\n      }\n\n    case ClassComponent:\n      {\n        return;\n      }\n\n    case HostComponent:\n      {\n        var instance = finishedWork.stateNode;\n\n        if (instance != null) {\n          // Commit the work prepared earlier.\n          var newProps = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps\n          // as the newProps. The updatePayload will contain the real change in\n          // this case.\n\n          var oldProps = current !== null ? current.memoizedProps : newProps;\n          var type = finishedWork.type; // TODO: Type the updateQueue to be specific to host components.\n\n          var updatePayload = finishedWork.updateQueue;\n          finishedWork.updateQueue = null;\n\n          if (updatePayload !== null) {\n            commitUpdate(instance, updatePayload, type, oldProps, newProps, finishedWork);\n          }\n        }\n\n        return;\n      }\n\n    case HostText:\n      {\n        if (!(finishedWork.stateNode !== null)) {\n          {\n            throw Error( \"This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.\" );\n          }\n        }\n\n        var textInstance = finishedWork.stateNode;\n        var newText = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps\n        // as the newProps. The updatePayload will contain the real change in\n        // this case.\n\n        var oldText = current !== null ? current.memoizedProps : newText;\n        commitTextUpdate(textInstance, oldText, newText);\n        return;\n      }\n\n    case HostRoot:\n      {\n        if (supportsHydration) {\n          var _root = finishedWork.stateNode;\n\n          if (_root.hydrate) {\n            // We've just hydrated. No need to hydrate again.\n            _root.hydrate = false;\n            commitHydratedContainer(_root.containerInfo);\n          }\n        }\n\n        return;\n      }\n\n    case Profiler:\n      {\n        return;\n      }\n\n    case SuspenseComponent:\n      {\n        commitSuspenseComponent(finishedWork);\n        attachSuspenseRetryListeners(finishedWork);\n        return;\n      }\n\n    case SuspenseListComponent:\n      {\n        attachSuspenseRetryListeners(finishedWork);\n        return;\n      }\n\n    case IncompleteClassComponent:\n      {\n        return;\n      }\n\n    case FundamentalComponent:\n      {\n\n        break;\n      }\n\n    case ScopeComponent:\n      {\n\n        break;\n      }\n\n    case OffscreenComponent:\n    case LegacyHiddenComponent:\n      {\n        var newState = finishedWork.memoizedState;\n        var isHidden = newState !== null;\n        hideOrUnhideAllChildren(finishedWork, isHidden);\n        return;\n      }\n  }\n\n  {\n    {\n      throw Error( \"This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.\" );\n    }\n  }\n}\n\nfunction commitSuspenseComponent(finishedWork) {\n  var newState = finishedWork.memoizedState;\n\n  if (newState !== null) {\n    markCommitTimeOfFallback();\n\n    if (supportsMutation) {\n      // Hide the Offscreen component that contains the primary children. TODO:\n      // Ideally, this effect would have been scheduled on the Offscreen fiber\n      // itself. That's how unhiding works: the Offscreen component schedules an\n      // effect on itself. However, in this case, the component didn't complete,\n      // so the fiber was never added to the effect list in the normal path. We\n      // could have appended it to the effect list in the Suspense component's\n      // second pass, but doing it this way is less complicated. This would be\n      // simpler if we got rid of the effect list and traversed the tree, like\n      // we're planning to do.\n      var primaryChildParent = finishedWork.child;\n      hideOrUnhideAllChildren(primaryChildParent, true);\n    }\n  }\n}\n\nfunction commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {\n  if (!supportsHydration) {\n    return;\n  }\n\n  var newState = finishedWork.memoizedState;\n\n  if (newState === null) {\n    var current = finishedWork.alternate;\n\n    if (current !== null) {\n      var prevState = current.memoizedState;\n\n      if (prevState !== null) {\n        var suspenseInstance = prevState.dehydrated;\n\n        if (suspenseInstance !== null) {\n          commitHydratedSuspenseInstance(suspenseInstance);\n        }\n      }\n    }\n  }\n}\n\nfunction attachSuspenseRetryListeners(finishedWork) {\n  // If this boundary just timed out, then it will have a set of wakeables.\n  // For each wakeable, attach a listener so that when it resolves, React\n  // attempts to re-render the boundary in the primary (pre-timeout) state.\n  var wakeables = finishedWork.updateQueue;\n\n  if (wakeables !== null) {\n    finishedWork.updateQueue = null;\n    var retryCache = finishedWork.stateNode;\n\n    if (retryCache === null) {\n      retryCache = finishedWork.stateNode = new PossiblyWeakSet();\n    }\n\n    wakeables.forEach(function (wakeable) {\n      // Memoize using the boundary fiber to prevent redundant listeners.\n      var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);\n\n      if (!retryCache.has(wakeable)) {\n        {\n          if (wakeable.__reactDoNotTraceInteractions !== true) {\n            retry = tracing.unstable_wrap(retry);\n          }\n        }\n\n        retryCache.add(wakeable);\n        wakeable.then(retry, retry);\n      }\n    });\n  }\n} // This function detects when a Suspense boundary goes from visible to hidden.\n// It returns false if the boundary is already hidden.\n// TODO: Use an effect tag.\n\n\nfunction isSuspenseBoundaryBeingHidden(current, finishedWork) {\n  if (current !== null) {\n    var oldState = current.memoizedState;\n\n    if (oldState === null || oldState.dehydrated !== null) {\n      var newState = finishedWork.memoizedState;\n      return newState !== null && newState.dehydrated === null;\n    }\n  }\n\n  return false;\n}\n\nfunction commitResetTextContent(current) {\n  if (!supportsMutation) {\n    return;\n  }\n\n  resetTextContent(current.stateNode);\n}\n\nvar COMPONENT_TYPE = 0;\nvar HAS_PSEUDO_CLASS_TYPE = 1;\nvar ROLE_TYPE = 2;\nvar TEST_NAME_TYPE = 3;\nvar TEXT_TYPE = 4;\n\nif (typeof Symbol === 'function' && Symbol.for) {\n  var symbolFor$1 = Symbol.for;\n  COMPONENT_TYPE = symbolFor$1('selector.component');\n  HAS_PSEUDO_CLASS_TYPE = symbolFor$1('selector.has_pseudo_class');\n  ROLE_TYPE = symbolFor$1('selector.role');\n  TEST_NAME_TYPE = symbolFor$1('selector.test_id');\n  TEXT_TYPE = symbolFor$1('selector.text');\n}\n\nfunction createComponentSelector(component) {\n  return {\n    $$typeof: COMPONENT_TYPE,\n    value: component\n  };\n}\nfunction createHasPsuedoClassSelector(selectors) {\n  return {\n    $$typeof: HAS_PSEUDO_CLASS_TYPE,\n    value: selectors\n  };\n}\nfunction createRoleSelector(role) {\n  return {\n    $$typeof: ROLE_TYPE,\n    value: role\n  };\n}\nfunction createTextSelector(text) {\n  return {\n    $$typeof: TEXT_TYPE,\n    value: text\n  };\n}\nfunction createTestNameSelector(id) {\n  return {\n    $$typeof: TEST_NAME_TYPE,\n    value: id\n  };\n}\n\nfunction findFiberRootForHostRoot(hostRoot) {\n  var maybeFiber = getInstanceFromNode(hostRoot);\n\n  if (maybeFiber != null) {\n    if (!(typeof maybeFiber.memoizedProps['data-testname'] === 'string')) {\n      {\n        throw Error( \"Invalid host root specified. Should be either a React container or a node with a testname attribute.\" );\n      }\n    }\n\n    return maybeFiber;\n  } else {\n    var fiberRoot = findFiberRoot(hostRoot);\n\n    if (!(fiberRoot !== null)) {\n      {\n        throw Error( \"Could not find React container within specified host subtree.\" );\n      }\n    } // The Flow type for FiberRoot is a little funky.\n    // createFiberRoot() cheats this by treating the root as :any and adding stateNode lazily.\n\n\n    return fiberRoot.stateNode.current;\n  }\n}\n\nfunction matchSelector(fiber, selector) {\n  switch (selector.$$typeof) {\n    case COMPONENT_TYPE:\n      if (fiber.type === selector.value) {\n        return true;\n      }\n\n      break;\n\n    case HAS_PSEUDO_CLASS_TYPE:\n      return hasMatchingPaths(fiber, selector.value);\n\n    case ROLE_TYPE:\n      if (fiber.tag === HostComponent) {\n        var node = fiber.stateNode;\n\n        if (matchAccessibilityRole(node, selector.value)) {\n          return true;\n        }\n      }\n\n      break;\n\n    case TEXT_TYPE:\n      if (fiber.tag === HostComponent || fiber.tag === HostText) {\n        var textContent = getTextContent(fiber);\n\n        if (textContent !== null && textContent.indexOf(selector.value) >= 0) {\n          return true;\n        }\n      }\n\n      break;\n\n    case TEST_NAME_TYPE:\n      if (fiber.tag === HostComponent) {\n        var dataTestID = fiber.memoizedProps['data-testname'];\n\n        if (typeof dataTestID === 'string' && dataTestID.toLowerCase() === selector.value.toLowerCase()) {\n          return true;\n        }\n      }\n\n      break;\n\n    default:\n      {\n        {\n          throw Error( \"Invalid selector type \" + selector + \" specified.\" );\n        }\n      }\n  }\n\n  return false;\n}\n\nfunction selectorToString(selector) {\n  switch (selector.$$typeof) {\n    case COMPONENT_TYPE:\n      var displayName = getComponentName(selector.value) || 'Unknown';\n      return \"<\" + displayName + \">\";\n\n    case HAS_PSEUDO_CLASS_TYPE:\n      return \":has(\" + (selectorToString(selector) || '') + \")\";\n\n    case ROLE_TYPE:\n      return \"[role=\\\"\" + selector.value + \"\\\"]\";\n\n    case TEXT_TYPE:\n      return \"\\\"\" + selector.value + \"\\\"\";\n\n    case TEST_NAME_TYPE:\n      return \"[data-testname=\\\"\" + selector.value + \"\\\"]\";\n\n    default:\n      {\n        {\n          throw Error( \"Invalid selector type \" + selector + \" specified.\" );\n        }\n      }\n  }\n}\n\nfunction findPaths(root, selectors) {\n  var matchingFibers = [];\n  var stack = [root, 0];\n  var index = 0;\n\n  while (index < stack.length) {\n    var fiber = stack[index++];\n    var selectorIndex = stack[index++];\n    var selector = selectors[selectorIndex];\n\n    if (fiber.tag === HostComponent && isHiddenSubtree(fiber)) {\n      continue;\n    } else {\n      while (selector != null && matchSelector(fiber, selector)) {\n        selectorIndex++;\n        selector = selectors[selectorIndex];\n      }\n    }\n\n    if (selectorIndex === selectors.length) {\n      matchingFibers.push(fiber);\n    } else {\n      var child = fiber.child;\n\n      while (child !== null) {\n        stack.push(child, selectorIndex);\n        child = child.sibling;\n      }\n    }\n  }\n\n  return matchingFibers;\n} // Same as findPaths but with eager bailout on first match\n\n\nfunction hasMatchingPaths(root, selectors) {\n  var stack = [root, 0];\n  var index = 0;\n\n  while (index < stack.length) {\n    var fiber = stack[index++];\n    var selectorIndex = stack[index++];\n    var selector = selectors[selectorIndex];\n\n    if (fiber.tag === HostComponent && isHiddenSubtree(fiber)) {\n      continue;\n    } else {\n      while (selector != null && matchSelector(fiber, selector)) {\n        selectorIndex++;\n        selector = selectors[selectorIndex];\n      }\n    }\n\n    if (selectorIndex === selectors.length) {\n      return true;\n    } else {\n      var child = fiber.child;\n\n      while (child !== null) {\n        stack.push(child, selectorIndex);\n        child = child.sibling;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction findAllNodes(hostRoot, selectors) {\n  if (!supportsTestSelectors) {\n    {\n      {\n        throw Error( \"Test selector API is not supported by this renderer.\" );\n      }\n    }\n  }\n\n  var root = findFiberRootForHostRoot(hostRoot);\n  var matchingFibers = findPaths(root, selectors);\n  var instanceRoots = [];\n  var stack = Array.from(matchingFibers);\n  var index = 0;\n\n  while (index < stack.length) {\n    var node = stack[index++];\n\n    if (node.tag === HostComponent) {\n      if (isHiddenSubtree(node)) {\n        continue;\n      }\n\n      instanceRoots.push(node.stateNode);\n    } else {\n      var child = node.child;\n\n      while (child !== null) {\n        stack.push(child);\n        child = child.sibling;\n      }\n    }\n  }\n\n  return instanceRoots;\n}\nfunction getFindAllNodesFailureDescription(hostRoot, selectors) {\n  if (!supportsTestSelectors) {\n    {\n      {\n        throw Error( \"Test selector API is not supported by this renderer.\" );\n      }\n    }\n  }\n\n  var root = findFiberRootForHostRoot(hostRoot);\n  var maxSelectorIndex = 0;\n  var matchedNames = []; // The logic of this loop should be kept in sync with findPaths()\n\n  var stack = [root, 0];\n  var index = 0;\n\n  while (index < stack.length) {\n    var fiber = stack[index++];\n    var selectorIndex = stack[index++];\n    var selector = selectors[selectorIndex];\n\n    if (fiber.tag === HostComponent && isHiddenSubtree(fiber)) {\n      continue;\n    } else if (matchSelector(fiber, selector)) {\n      matchedNames.push(selectorToString(selector));\n      selectorIndex++;\n\n      if (selectorIndex > maxSelectorIndex) {\n        maxSelectorIndex = selectorIndex;\n      }\n    }\n\n    if (selectorIndex < selectors.length) {\n      var child = fiber.child;\n\n      while (child !== null) {\n        stack.push(child, selectorIndex);\n        child = child.sibling;\n      }\n    }\n  }\n\n  if (maxSelectorIndex < selectors.length) {\n    var unmatchedNames = [];\n\n    for (var i = maxSelectorIndex; i < selectors.length; i++) {\n      unmatchedNames.push(selectorToString(selectors[i]));\n    }\n\n    return 'findAllNodes was able to match part of the selector:\\n' + (\"  \" + matchedNames.join(' > ') + \"\\n\\n\") + 'No matching component was found for:\\n' + (\"  \" + unmatchedNames.join(' > '));\n  }\n\n  return null;\n}\nfunction findBoundingRects(hostRoot, selectors) {\n  if (!supportsTestSelectors) {\n    {\n      {\n        throw Error( \"Test selector API is not supported by this renderer.\" );\n      }\n    }\n  }\n\n  var instanceRoots = findAllNodes(hostRoot, selectors);\n  var boundingRects = [];\n\n  for (var i = 0; i < instanceRoots.length; i++) {\n    boundingRects.push(getBoundingRect(instanceRoots[i]));\n  }\n\n  for (var _i = boundingRects.length - 1; _i > 0; _i--) {\n    var targetRect = boundingRects[_i];\n    var targetLeft = targetRect.x;\n    var targetRight = targetLeft + targetRect.width;\n    var targetTop = targetRect.y;\n    var targetBottom = targetTop + targetRect.height;\n\n    for (var j = _i - 1; j >= 0; j--) {\n      if (_i !== j) {\n        var otherRect = boundingRects[j];\n        var otherLeft = otherRect.x;\n        var otherRight = otherLeft + otherRect.width;\n        var otherTop = otherRect.y;\n        var otherBottom = otherTop + otherRect.height; // Merging all rects to the minimums set would be complicated,\n        // but we can handle the most common cases:\n        // 1. completely overlapping rects\n        // 2. adjacent rects that are the same width or height (e.g. items in a list)\n        //\n        // Even given the above constraints,\n        // we still won't end up with the fewest possible rects without doing multiple passes,\n        // but it's good enough for this purpose.\n\n        if (targetLeft >= otherLeft && targetTop >= otherTop && targetRight <= otherRight && targetBottom <= otherBottom) {\n          // Complete overlapping rects; remove the inner one.\n          boundingRects.splice(_i, 1);\n          break;\n        } else if (targetLeft === otherLeft && targetRect.width === otherRect.width && !(otherBottom < targetTop) && !(otherTop > targetBottom)) {\n          // Adjacent vertical rects; merge them.\n          if (otherTop > targetTop) {\n            otherRect.height += otherTop - targetTop;\n            otherRect.y = targetTop;\n          }\n\n          if (otherBottom < targetBottom) {\n            otherRect.height = targetBottom - otherTop;\n          }\n\n          boundingRects.splice(_i, 1);\n          break;\n        } else if (targetTop === otherTop && targetRect.height === otherRect.height && !(otherRight < targetLeft) && !(otherLeft > targetRight)) {\n          // Adjacent horizontal rects; merge them.\n          if (otherLeft > targetLeft) {\n            otherRect.width += otherLeft - targetLeft;\n            otherRect.x = targetLeft;\n          }\n\n          if (otherRight < targetRight) {\n            otherRect.width = targetRight - otherLeft;\n          }\n\n          boundingRects.splice(_i, 1);\n          break;\n        }\n      }\n    }\n  }\n\n  return boundingRects;\n}\nfunction focusWithin(hostRoot, selectors) {\n  if (!supportsTestSelectors) {\n    {\n      {\n        throw Error( \"Test selector API is not supported by this renderer.\" );\n      }\n    }\n  }\n\n  var root = findFiberRootForHostRoot(hostRoot);\n  var matchingFibers = findPaths(root, selectors);\n  var stack = Array.from(matchingFibers);\n  var index = 0;\n\n  while (index < stack.length) {\n    var fiber = stack[index++];\n\n    if (isHiddenSubtree(fiber)) {\n      continue;\n    }\n\n    if (fiber.tag === HostComponent) {\n      var node = fiber.stateNode;\n\n      if (setFocusIfFocusable(node)) {\n        return true;\n      }\n    }\n\n    var child = fiber.child;\n\n    while (child !== null) {\n      stack.push(child);\n      child = child.sibling;\n    }\n  }\n\n  return false;\n}\nvar commitHooks = [];\nfunction onCommitRoot$1() {\n  if (supportsTestSelectors) {\n    commitHooks.forEach(function (commitHook) {\n      return commitHook();\n    });\n  }\n}\nfunction observeVisibleRects(hostRoot, selectors, callback, options) {\n  if (!supportsTestSelectors) {\n    {\n      {\n        throw Error( \"Test selector API is not supported by this renderer.\" );\n      }\n    }\n  }\n\n  var instanceRoots = findAllNodes(hostRoot, selectors);\n\n  var _setupIntersectionObs = setupIntersectionObserver(instanceRoots, callback, options),\n      disconnect = _setupIntersectionObs.disconnect,\n      observe = _setupIntersectionObs.observe,\n      unobserve = _setupIntersectionObs.unobserve; // When React mutates the host environment, we may need to change what we're listening to.\n\n\n  var commitHook = function () {\n    var nextInstanceRoots = findAllNodes(hostRoot, selectors);\n    instanceRoots.forEach(function (target) {\n      if (nextInstanceRoots.indexOf(target) < 0) {\n        unobserve(target);\n      }\n    });\n    nextInstanceRoots.forEach(function (target) {\n      if (instanceRoots.indexOf(target) < 0) {\n        observe(target);\n      }\n    });\n  };\n\n  commitHooks.push(commitHook);\n  return {\n    disconnect: function () {\n      // Stop listening for React mutations:\n      var index = commitHooks.indexOf(commitHook);\n\n      if (index >= 0) {\n        commitHooks.splice(index, 1);\n      } // Disconnect the host observer:\n\n\n      disconnect();\n    }\n  };\n}\n\nvar didWarnAboutMessageChannel = false;\nvar enqueueTaskImpl = null;\nfunction enqueueTask(task) {\n  if (enqueueTaskImpl === null) {\n    try {\n      // read require off the module object to get around the bundlers.\n      // we don't want them to detect a require and bundle a Node polyfill.\n      var requireString = ('require' + Math.random()).slice(0, 7);\n      var nodeRequire = module && module[requireString]; // assuming we're in node, let's try to get node's\n      // version of setImmediate, bypassing fake timers if any.\n\n      enqueueTaskImpl = nodeRequire.call(module, 'timers').setImmediate;\n    } catch (_err) {\n      // we're in a browser\n      // we can't use regular timers because they may still be faked\n      // so we try MessageChannel+postMessage instead\n      enqueueTaskImpl = function (callback) {\n        {\n          if (didWarnAboutMessageChannel === false) {\n            didWarnAboutMessageChannel = true;\n\n            if (typeof MessageChannel === 'undefined') {\n              error('This browser does not have a MessageChannel implementation, ' + 'so enqueuing tasks via await act(async () => ...) will fail. ' + 'Please file an issue at https://github.com/facebook/react/issues ' + 'if you encounter this warning.');\n            }\n          }\n        }\n\n        var channel = new MessageChannel();\n        channel.port1.onmessage = callback;\n        channel.port2.postMessage(undefined);\n      };\n    }\n  }\n\n  return enqueueTaskImpl(task);\n}\n\nvar ceil = Math.ceil;\nvar ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher,\n    ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner,\n    IsSomeRendererActing = ReactSharedInternals.IsSomeRendererActing;\nvar NoContext =\n/*             */\n0;\nvar BatchedContext =\n/*               */\n1;\nvar EventContext =\n/*                 */\n2;\nvar DiscreteEventContext =\n/*         */\n4;\nvar LegacyUnbatchedContext =\n/*       */\n8;\nvar RenderContext =\n/*                */\n16;\nvar CommitContext =\n/*                */\n32;\nvar RetryAfterError =\n/*       */\n64;\nvar RootIncomplete = 0;\nvar RootFatalErrored = 1;\nvar RootErrored = 2;\nvar RootSuspended = 3;\nvar RootSuspendedWithDelay = 4;\nvar RootCompleted = 5; // Describes where we are in the React execution stack\n\nvar executionContext = NoContext; // The root we're working on\n\nvar workInProgressRoot = null; // The fiber we're working on\n\nvar workInProgress = null; // The lanes we're rendering\n\nvar workInProgressRootRenderLanes = NoLanes; // Stack that allows components to change the render lanes for its subtree\n// This is a superset of the lanes we started working on at the root. The only\n// case where it's different from `workInProgressRootRenderLanes` is when we\n// enter a subtree that is hidden and needs to be unhidden: Suspense and\n// Offscreen component.\n//\n// Most things in the work loop should deal with workInProgressRootRenderLanes.\n// Most things in begin/complete phases should deal with subtreeRenderLanes.\n\nvar subtreeRenderLanes = NoLanes;\nvar subtreeRenderLanesCursor = createCursor(NoLanes); // Whether to root completed, errored, suspended, etc.\n\nvar workInProgressRootExitStatus = RootIncomplete; // A fatal error, if one is thrown\n\nvar workInProgressRootFatalError = null; // \"Included\" lanes refer to lanes that were worked on during this render. It's\n// slightly different than `renderLanes` because `renderLanes` can change as you\n// enter and exit an Offscreen tree. This value is the combination of all render\n// lanes for the entire render phase.\n\nvar workInProgressRootIncludedLanes = NoLanes; // The work left over by components that were visited during this render. Only\n// includes unprocessed updates, not work in bailed out children.\n\nvar workInProgressRootSkippedLanes = NoLanes; // Lanes that were updated (in an interleaved event) during this render.\n\nvar workInProgressRootUpdatedLanes = NoLanes; // Lanes that were pinged (in an interleaved event) during this render.\n\nvar workInProgressRootPingedLanes = NoLanes;\nvar mostRecentlyUpdatedRoot = null; // The most recent time we committed a fallback. This lets us ensure a train\n// model where we don't commit new loading states in too quick succession.\n\nvar globalMostRecentFallbackTime = 0;\nvar FALLBACK_THROTTLE_MS = 500; // The absolute time for when we should start giving up on rendering\n// more and prefer CPU suspense heuristics instead.\n\nvar workInProgressRootRenderTargetTime = Infinity; // How long a render is supposed to take before we start following CPU\n// suspense heuristics and opt out of rendering more content.\n\nvar RENDER_TIMEOUT_MS = 500;\n\nfunction resetRenderTimer() {\n  workInProgressRootRenderTargetTime = now$1() + RENDER_TIMEOUT_MS;\n}\n\nfunction getRenderTargetTime() {\n  return workInProgressRootRenderTargetTime;\n}\nvar nextEffect = null;\nvar hasUncaughtError = false;\nvar firstUncaughtError = null;\nvar legacyErrorBoundariesThatAlreadyFailed = null;\nvar rootDoesHavePassiveEffects = false;\nvar rootWithPendingPassiveEffects = null;\nvar pendingPassiveEffectsRenderPriority = NoPriority$1;\nvar pendingPassiveEffectsLanes = NoLanes;\nvar pendingPassiveHookEffectsMount = [];\nvar pendingPassiveHookEffectsUnmount = [];\nvar rootsWithPendingDiscreteUpdates = null; // Use these to prevent an infinite loop of nested updates\n\nvar NESTED_UPDATE_LIMIT = 50;\nvar nestedUpdateCount = 0;\nvar rootWithNestedUpdates = null;\nvar NESTED_PASSIVE_UPDATE_LIMIT = 50;\nvar nestedPassiveUpdateCount = 0; // Marks the need to reschedule pending interactions at these lanes\n// during the commit phase. This enables them to be traced across components\n// that spawn new work during render. E.g. hidden boundaries, suspended SSR\n// hydration or SuspenseList.\n// TODO: Can use a bitmask instead of an array\n\nvar spawnedWorkDuringRender = null; // If two updates are scheduled within the same event, we should treat their\n// event times as simultaneous, even if the actual clock time has advanced\n// between the first and second call.\n\nvar currentEventTime = NoTimestamp;\nvar currentEventWipLanes = NoLanes;\nvar currentEventPendingLanes = NoLanes; // Dev only flag that tracks if passive effects are currently being flushed.\n// We warn about state updates for unmounted components differently in this case.\n\nvar isFlushingPassiveEffects = false;\nvar focusedInstanceHandle = null;\nvar shouldFireAfterActiveInstanceBlur = false;\nfunction getWorkInProgressRoot() {\n  return workInProgressRoot;\n}\nfunction requestEventTime() {\n  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n    // We're inside React, so it's fine to read the actual time.\n    return now$1();\n  } // We're not inside React, so we may be in the middle of a browser event.\n\n\n  if (currentEventTime !== NoTimestamp) {\n    // Use the same start time for all updates until we enter React again.\n    return currentEventTime;\n  } // This is the first update since React yielded. Compute a new start time.\n\n\n  currentEventTime = now$1();\n  return currentEventTime;\n}\nfunction requestUpdateLane(fiber) {\n  // Special cases\n  var mode = fiber.mode;\n\n  if ((mode & BlockingMode) === NoMode) {\n    return SyncLane;\n  } else if ((mode & ConcurrentMode) === NoMode) {\n    return getCurrentPriorityLevel() === ImmediatePriority$1 ? SyncLane : SyncBatchedLane;\n  } // The algorithm for assigning an update to a lane should be stable for all\n  // updates at the same priority within the same event. To do this, the inputs\n  // to the algorithm must be the same. For example, we use the `renderLanes`\n  // to avoid choosing a lane that is already in the middle of rendering.\n  //\n  // However, the \"included\" lanes could be mutated in between updates in the\n  // same event, like if you perform an update inside `flushSync`. Or any other\n  // code path that might call `prepareFreshStack`.\n  //\n  // The trick we use is to cache the first of each of these inputs within an\n  // event. Then reset the cached values once we can be sure the event is over.\n  // Our heuristic for that is whenever we enter a concurrent work loop.\n  //\n  // We'll do the same for `currentEventPendingLanes` below.\n\n\n  if (currentEventWipLanes === NoLanes) {\n    currentEventWipLanes = workInProgressRootIncludedLanes;\n  }\n\n  var isTransition = requestCurrentTransition() !== NoTransition;\n\n  if (isTransition) {\n    if (currentEventPendingLanes !== NoLanes) {\n      currentEventPendingLanes = mostRecentlyUpdatedRoot !== null ? mostRecentlyUpdatedRoot.pendingLanes : NoLanes;\n    }\n\n    return findTransitionLane(currentEventWipLanes, currentEventPendingLanes);\n  } // TODO: Remove this dependency on the Scheduler priority.\n  // To do that, we're replacing it with an update lane priority.\n\n\n  var schedulerPriority = getCurrentPriorityLevel(); // The old behavior was using the priority level of the Scheduler.\n  // This couples React to the Scheduler internals, so we're replacing it\n  // with the currentUpdateLanePriority above. As an example of how this\n  // could be problematic, if we're not inside `Scheduler.runWithPriority`,\n  // then we'll get the priority of the current running Scheduler task,\n  // which is probably not what we want.\n\n  var lane;\n\n  if ( // TODO: Temporary. We're removing the concept of discrete updates.\n  (executionContext & DiscreteEventContext) !== NoContext && schedulerPriority === UserBlockingPriority$1) {\n    lane = findUpdateLane(InputDiscreteLanePriority, currentEventWipLanes);\n  } else {\n    var schedulerLanePriority = schedulerPriorityToLanePriority(schedulerPriority);\n\n    lane = findUpdateLane(schedulerLanePriority, currentEventWipLanes);\n  }\n\n  return lane;\n}\n\nfunction requestRetryLane(fiber) {\n  // This is a fork of `requestUpdateLane` designed specifically for Suspense\n  // \"retries\" \u2014 a special update that attempts to flip a Suspense boundary\n  // from its placeholder state to its primary/resolved state.\n  // Special cases\n  var mode = fiber.mode;\n\n  if ((mode & BlockingMode) === NoMode) {\n    return SyncLane;\n  } else if ((mode & ConcurrentMode) === NoMode) {\n    return getCurrentPriorityLevel() === ImmediatePriority$1 ? SyncLane : SyncBatchedLane;\n  } // See `requestUpdateLane` for explanation of `currentEventWipLanes`\n\n\n  if (currentEventWipLanes === NoLanes) {\n    currentEventWipLanes = workInProgressRootIncludedLanes;\n  }\n\n  return findRetryLane(currentEventWipLanes);\n}\n\nfunction scheduleUpdateOnFiber(fiber, lane, eventTime) {\n  checkForNestedUpdates();\n  warnAboutRenderPhaseUpdatesInDEV(fiber);\n  var root = markUpdateLaneFromFiberToRoot(fiber, lane);\n\n  if (root === null) {\n    warnAboutUpdateOnUnmountedFiberInDEV(fiber);\n    return null;\n  } // Mark that the root has a pending update.\n\n\n  markRootUpdated(root, lane, eventTime);\n\n  if (root === workInProgressRoot) {\n    // Received an update to a tree that's in the middle of rendering. Mark\n    // that there was an interleaved update work on this root. Unless the\n    // `deferRenderPhaseUpdateToNextBatch` flag is off and this is a render\n    // phase update. In that case, we don't treat render phase updates as if\n    // they were interleaved, for backwards compat reasons.\n    {\n      workInProgressRootUpdatedLanes = mergeLanes(workInProgressRootUpdatedLanes, lane);\n    }\n\n    if (workInProgressRootExitStatus === RootSuspendedWithDelay) {\n      // The root already suspended with a delay, which means this render\n      // definitely won't finish. Since we have a new update, let's mark it as\n      // suspended now, right before marking the incoming update. This has the\n      // effect of interrupting the current render and switching to the update.\n      // TODO: Make sure this doesn't override pings that happen while we've\n      // already started rendering.\n      markRootSuspended$1(root, workInProgressRootRenderLanes);\n    }\n  } // TODO: requestUpdateLanePriority also reads the priority. Pass the\n  // priority as an argument to that function and this one.\n\n\n  var priorityLevel = getCurrentPriorityLevel();\n\n  if (lane === SyncLane) {\n    if ( // Check if we're inside unbatchedUpdates\n    (executionContext & LegacyUnbatchedContext) !== NoContext && // Check if we're not already rendering\n    (executionContext & (RenderContext | CommitContext)) === NoContext) {\n      // Register pending interactions on the root to avoid losing traced interaction data.\n      schedulePendingInteractions(root, lane); // This is a legacy edge case. The initial mount of a ReactDOM.render-ed\n      // root inside of batchedUpdates should be synchronous, but layout updates\n      // should be deferred until the end of the batch.\n\n      performSyncWorkOnRoot(root);\n    } else {\n      ensureRootIsScheduled(root, eventTime);\n      schedulePendingInteractions(root, lane);\n\n      if (executionContext === NoContext) {\n        // Flush the synchronous work now, unless we're already working or inside\n        // a batch. This is intentionally inside scheduleUpdateOnFiber instead of\n        // scheduleCallbackForFiber to preserve the ability to schedule a callback\n        // without immediately flushing it. We only do this for user-initiated\n        // updates, to preserve historical behavior of legacy mode.\n        resetRenderTimer();\n        flushSyncCallbackQueue();\n      }\n    }\n  } else {\n    // Schedule a discrete update but only if it's not Sync.\n    if ((executionContext & DiscreteEventContext) !== NoContext && ( // Only updates at user-blocking priority or greater are considered\n    // discrete, even inside a discrete event.\n    priorityLevel === UserBlockingPriority$1 || priorityLevel === ImmediatePriority$1)) {\n      // This is the result of a discrete event. Track the lowest priority\n      // discrete update per root so we can flush them early, if needed.\n      if (rootsWithPendingDiscreteUpdates === null) {\n        rootsWithPendingDiscreteUpdates = new Set([root]);\n      } else {\n        rootsWithPendingDiscreteUpdates.add(root);\n      }\n    } // Schedule other updates after in case the callback is sync.\n\n\n    ensureRootIsScheduled(root, eventTime);\n    schedulePendingInteractions(root, lane);\n  } // We use this when assigning a lane for a transition inside\n  // `requestUpdateLane`. We assume it's the same as the root being updated,\n  // since in the common case of a single root app it probably is. If it's not\n  // the same root, then it's not a huge deal, we just might batch more stuff\n  // together more than necessary.\n\n\n  mostRecentlyUpdatedRoot = root;\n} // This is split into a separate function so we can mark a fiber with pending\n// work without treating it as a typical update that originates from an event;\n// e.g. retrying a Suspense boundary isn't an update, but it does schedule work\n// on a fiber.\n\nfunction markUpdateLaneFromFiberToRoot(sourceFiber, lane) {\n  // Update the source fiber's lanes\n  sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);\n  var alternate = sourceFiber.alternate;\n\n  if (alternate !== null) {\n    alternate.lanes = mergeLanes(alternate.lanes, lane);\n  }\n\n  {\n    if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {\n      warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);\n    }\n  } // Walk the parent path to the root and update the child expiration time.\n\n\n  var node = sourceFiber;\n  var parent = sourceFiber.return;\n\n  while (parent !== null) {\n    parent.childLanes = mergeLanes(parent.childLanes, lane);\n    alternate = parent.alternate;\n\n    if (alternate !== null) {\n      alternate.childLanes = mergeLanes(alternate.childLanes, lane);\n    } else {\n      {\n        if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {\n          warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);\n        }\n      }\n    }\n\n    node = parent;\n    parent = parent.return;\n  }\n\n  if (node.tag === HostRoot) {\n    var root = node.stateNode;\n    return root;\n  } else {\n    return null;\n  }\n} // Use this function to schedule a task for a root. There's only one task per\n// root; if a task was already scheduled, we'll check to make sure the priority\n// of the existing task is the same as the priority of the next level that the\n// root has work on. This function is called on every update, and right before\n// exiting a task.\n\n\nfunction ensureRootIsScheduled(root, currentTime) {\n  var existingCallbackNode = root.callbackNode; // Check if any lanes are being starved by other work. If so, mark them as\n  // expired so we know to work on those next.\n\n  markStarvedLanesAsExpired(root, currentTime); // Determine the next lanes to work on, and their priority.\n\n  var nextLanes = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes); // This returns the priority level computed during the `getNextLanes` call.\n\n  var newCallbackPriority = returnNextLanesPriority();\n\n  if (nextLanes === NoLanes) {\n    // Special case: There's nothing to work on.\n    if (existingCallbackNode !== null) {\n      cancelCallback(existingCallbackNode);\n      root.callbackNode = null;\n      root.callbackPriority = NoLanePriority;\n    }\n\n    return;\n  } // Check if there's an existing task. We may be able to reuse it.\n\n\n  if (existingCallbackNode !== null) {\n    var existingCallbackPriority = root.callbackPriority;\n\n    if (existingCallbackPriority === newCallbackPriority) {\n      // The priority hasn't changed. We can reuse the existing task. Exit.\n      return;\n    } // The priority changed. Cancel the existing callback. We'll schedule a new\n    // one below.\n\n\n    cancelCallback(existingCallbackNode);\n  } // Schedule a new callback.\n\n\n  var newCallbackNode;\n\n  if (newCallbackPriority === SyncLanePriority) {\n    // Special case: Sync React callbacks are scheduled on a special\n    // internal queue\n    newCallbackNode = scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root));\n  } else if (newCallbackPriority === SyncBatchedLanePriority) {\n    newCallbackNode = scheduleCallback(ImmediatePriority$1, performSyncWorkOnRoot.bind(null, root));\n  } else {\n    var schedulerPriorityLevel = lanePriorityToSchedulerPriority(newCallbackPriority);\n    newCallbackNode = scheduleCallback(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root));\n  }\n\n  root.callbackPriority = newCallbackPriority;\n  root.callbackNode = newCallbackNode;\n} // This is the entry point for every concurrent task, i.e. anything that\n// goes through Scheduler.\n\n\nfunction performConcurrentWorkOnRoot(root) {\n  // Since we know we're in a React event, we can clear the current\n  // event time. The next update will compute a new event time.\n  currentEventTime = NoTimestamp;\n  currentEventWipLanes = NoLanes;\n  currentEventPendingLanes = NoLanes;\n\n  if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {\n    {\n      throw Error( \"Should not already be working.\" );\n    }\n  } // Flush any pending passive effects before deciding which lanes to work on,\n  // in case they schedule additional work.\n\n\n  var originalCallbackNode = root.callbackNode;\n  var didFlushPassiveEffects = flushPassiveEffects();\n\n  if (didFlushPassiveEffects) {\n    // Something in the passive effect phase may have canceled the current task.\n    // Check if the task node for this root was changed.\n    if (root.callbackNode !== originalCallbackNode) {\n      // The current task was canceled. Exit. We don't need to call\n      // `ensureRootIsScheduled` because the check above implies either that\n      // there's a new task, or that there's no remaining work on this root.\n      return null;\n    }\n  } // Determine the next expiration time to work on, using the fields stored\n  // on the root.\n\n\n  var lanes = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);\n\n  if (lanes === NoLanes) {\n    // Defensive coding. This is never expected to happen.\n    return null;\n  }\n\n  var exitStatus = renderRootConcurrent(root, lanes);\n\n  if (includesSomeLane(workInProgressRootIncludedLanes, workInProgressRootUpdatedLanes)) {\n    // The render included lanes that were updated during the render phase.\n    // For example, when unhiding a hidden tree, we include all the lanes\n    // that were previously skipped when the tree was hidden. That set of\n    // lanes is a superset of the lanes we started rendering with.\n    //\n    // So we'll throw out the current work and restart.\n    prepareFreshStack(root, NoLanes);\n  } else if (exitStatus !== RootIncomplete) {\n    if (exitStatus === RootErrored) {\n      executionContext |= RetryAfterError; // If an error occurred during hydration,\n      // discard server response and fall back to client side render.\n\n      if (root.hydrate) {\n        root.hydrate = false;\n        clearContainer(root.containerInfo);\n      } // If something threw an error, try rendering one more time. We'll render\n      // synchronously to block concurrent data mutations, and we'll includes\n      // all pending updates are included. If it still fails after the second\n      // attempt, we'll give up and commit the resulting tree.\n\n\n      lanes = getLanesToRetrySynchronouslyOnError(root);\n\n      if (lanes !== NoLanes) {\n        exitStatus = renderRootSync(root, lanes);\n      }\n    }\n\n    if (exitStatus === RootFatalErrored) {\n      var fatalError = workInProgressRootFatalError;\n      prepareFreshStack(root, NoLanes);\n      markRootSuspended$1(root, lanes);\n      ensureRootIsScheduled(root, now$1());\n      throw fatalError;\n    } // We now have a consistent tree. The next step is either to commit it,\n    // or, if something suspended, wait to commit it after a timeout.\n\n\n    var finishedWork = root.current.alternate;\n    root.finishedWork = finishedWork;\n    root.finishedLanes = lanes;\n    finishConcurrentRender(root, exitStatus, lanes);\n  }\n\n  ensureRootIsScheduled(root, now$1());\n\n  if (root.callbackNode === originalCallbackNode) {\n    // The task node scheduled for this root is the same one that's\n    // currently executed. Need to return a continuation.\n    return performConcurrentWorkOnRoot.bind(null, root);\n  }\n\n  return null;\n}\n\nfunction finishConcurrentRender(root, exitStatus, lanes) {\n  switch (exitStatus) {\n    case RootIncomplete:\n    case RootFatalErrored:\n      {\n        {\n          {\n            throw Error( \"Root did not complete. This is a bug in React.\" );\n          }\n        }\n      }\n    // Flow knows about invariant, so it complains if I add a break\n    // statement, but eslint doesn't know about invariant, so it complains\n    // if I do. eslint-disable-next-line no-fallthrough\n\n    case RootErrored:\n      {\n        // We should have already attempted to retry this tree. If we reached\n        // this point, it errored again. Commit it.\n        commitRoot(root);\n        break;\n      }\n\n    case RootSuspended:\n      {\n        markRootSuspended$1(root, lanes); // We have an acceptable loading state. We need to figure out if we\n        // should immediately commit it or wait a bit.\n\n        if (includesOnlyRetries(lanes) && // do not delay if we're inside an act() scope\n        !shouldForceFlushFallbacksInDEV()) {\n          // This render only included retries, no updates. Throttle committing\n          // retries so that we don't show too many loading states too quickly.\n          var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now$1(); // Don't bother with a very short suspense time.\n\n          if (msUntilTimeout > 10) {\n            var nextLanes = getNextLanes(root, NoLanes);\n\n            if (nextLanes !== NoLanes) {\n              // There's additional work on this root.\n              break;\n            }\n\n            var suspendedLanes = root.suspendedLanes;\n\n            if (!isSubsetOfLanes(suspendedLanes, lanes)) {\n              // We should prefer to render the fallback of at the last\n              // suspended level. Ping the last suspended level to try\n              // rendering it again.\n              // FIXME: What if the suspended lanes are Idle? Should not restart.\n              var eventTime = requestEventTime();\n              markRootPinged(root, suspendedLanes);\n              break;\n            } // The render is suspended, it hasn't timed out, and there's no\n            // lower priority work to do. Instead of committing the fallback\n            // immediately, wait for more data to arrive.\n\n\n            root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root), msUntilTimeout);\n            break;\n          }\n        } // The work expired. Commit immediately.\n\n\n        commitRoot(root);\n        break;\n      }\n\n    case RootSuspendedWithDelay:\n      {\n        markRootSuspended$1(root, lanes);\n\n        if (includesOnlyTransitions(lanes)) {\n          // This is a transition, so we should exit without committing a\n          // placeholder and without scheduling a timeout. Delay indefinitely\n          // until we receive more data.\n          break;\n        }\n\n        if (!shouldForceFlushFallbacksInDEV()) {\n          // This is not a transition, but we did trigger an avoided state.\n          // Schedule a placeholder to display after a short delay, using the Just\n          // Noticeable Difference.\n          // TODO: Is the JND optimization worth the added complexity? If this is\n          // the only reason we track the event time, then probably not.\n          // Consider removing.\n          var mostRecentEventTime = getMostRecentEventTime(root, lanes);\n          var eventTimeMs = mostRecentEventTime;\n          var timeElapsedMs = now$1() - eventTimeMs;\n\n          var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs; // Don't bother with a very short suspense time.\n\n\n          if (_msUntilTimeout > 10) {\n            // Instead of committing the fallback immediately, wait for more data\n            // to arrive.\n            root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root), _msUntilTimeout);\n            break;\n          }\n        } // Commit the placeholder.\n\n\n        commitRoot(root);\n        break;\n      }\n\n    case RootCompleted:\n      {\n        // The work completed. Ready to commit.\n        commitRoot(root);\n        break;\n      }\n\n    default:\n      {\n        {\n          {\n            throw Error( \"Unknown root exit status.\" );\n          }\n        }\n      }\n  }\n}\n\nfunction markRootSuspended$1(root, suspendedLanes) {\n  // When suspending, we should always exclude lanes that were pinged or (more\n  // rarely, since we try to avoid it) updated during the render phase.\n  // TODO: Lol maybe there's a better way to factor this besides this\n  // obnoxiously named function :)\n  suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);\n  suspendedLanes = removeLanes(suspendedLanes, workInProgressRootUpdatedLanes);\n  markRootSuspended(root, suspendedLanes);\n} // This is the entry point for synchronous tasks that don't go\n// through Scheduler\n\n\nfunction performSyncWorkOnRoot(root) {\n  if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {\n    {\n      throw Error( \"Should not already be working.\" );\n    }\n  }\n\n  flushPassiveEffects();\n  var lanes;\n  var exitStatus;\n\n  if (root === workInProgressRoot && includesSomeLane(root.expiredLanes, workInProgressRootRenderLanes)) {\n    // There's a partial tree, and at least one of its lanes has expired. Finish\n    // rendering it before rendering the rest of the expired work.\n    lanes = workInProgressRootRenderLanes;\n    exitStatus = renderRootSync(root, lanes);\n\n    if (includesSomeLane(workInProgressRootIncludedLanes, workInProgressRootUpdatedLanes)) {\n      // The render included lanes that were updated during the render phase.\n      // For example, when unhiding a hidden tree, we include all the lanes\n      // that were previously skipped when the tree was hidden. That set of\n      // lanes is a superset of the lanes we started rendering with.\n      //\n      // Note that this only happens when part of the tree is rendered\n      // concurrently. If the whole tree is rendered synchronously, then there\n      // are no interleaved events.\n      lanes = getNextLanes(root, lanes);\n      exitStatus = renderRootSync(root, lanes);\n    }\n  } else {\n    lanes = getNextLanes(root, NoLanes);\n    exitStatus = renderRootSync(root, lanes);\n  }\n\n  if (root.tag !== LegacyRoot && exitStatus === RootErrored) {\n    executionContext |= RetryAfterError; // If an error occurred during hydration,\n    // discard server response and fall back to client side render.\n\n    if (root.hydrate) {\n      root.hydrate = false;\n      clearContainer(root.containerInfo);\n    } // If something threw an error, try rendering one more time. We'll render\n    // synchronously to block concurrent data mutations, and we'll includes\n    // all pending updates are included. If it still fails after the second\n    // attempt, we'll give up and commit the resulting tree.\n\n\n    lanes = getLanesToRetrySynchronouslyOnError(root);\n\n    if (lanes !== NoLanes) {\n      exitStatus = renderRootSync(root, lanes);\n    }\n  }\n\n  if (exitStatus === RootFatalErrored) {\n    var fatalError = workInProgressRootFatalError;\n    prepareFreshStack(root, NoLanes);\n    markRootSuspended$1(root, lanes);\n    ensureRootIsScheduled(root, now$1());\n    throw fatalError;\n  } // We now have a consistent tree. Because this is a sync render, we\n  // will commit it even if something suspended.\n\n\n  var finishedWork = root.current.alternate;\n  root.finishedWork = finishedWork;\n  root.finishedLanes = lanes;\n  commitRoot(root); // Before exiting, make sure there's a callback scheduled for the next\n  // pending level.\n\n  ensureRootIsScheduled(root, now$1());\n  return null;\n}\n\nfunction flushRoot(root, lanes) {\n  markRootExpired(root, lanes);\n  ensureRootIsScheduled(root, now$1());\n\n  if ((executionContext & (RenderContext | CommitContext)) === NoContext) {\n    resetRenderTimer();\n    flushSyncCallbackQueue();\n  }\n}\nfunction flushDiscreteUpdates() {\n  // TODO: Should be able to flush inside batchedUpdates, but not inside `act`.\n  // However, `act` uses `batchedUpdates`, so there's no way to distinguish\n  // those two cases. Need to fix this before exposing flushDiscreteUpdates\n  // as a public API.\n  if ((executionContext & (BatchedContext | RenderContext | CommitContext)) !== NoContext) {\n    {\n      if ((executionContext & RenderContext) !== NoContext) {\n        error('unstable_flushDiscreteUpdates: Cannot flush updates when React is ' + 'already rendering.');\n      }\n    } // We're already rendering, so we can't synchronously flush pending work.\n    // This is probably a nested event dispatch triggered by a lifecycle/effect,\n    // like `el.focus()`. Exit.\n\n\n    return;\n  }\n\n  flushPendingDiscreteUpdates(); // If the discrete updates scheduled passive effects, flush them now so that\n  // they fire before the next serial event.\n\n  flushPassiveEffects();\n}\nfunction deferredUpdates(fn) {\n  {\n    return runWithPriority(NormalPriority$1, fn);\n  }\n}\n\nfunction flushPendingDiscreteUpdates() {\n  if (rootsWithPendingDiscreteUpdates !== null) {\n    // For each root with pending discrete updates, schedule a callback to\n    // immediately flush them.\n    var roots = rootsWithPendingDiscreteUpdates;\n    rootsWithPendingDiscreteUpdates = null;\n    roots.forEach(function (root) {\n      markDiscreteUpdatesExpired(root);\n      ensureRootIsScheduled(root, now$1());\n    });\n  } // Now flush the immediate queue.\n\n\n  flushSyncCallbackQueue();\n}\n\nfunction batchedUpdates(fn, a) {\n  var prevExecutionContext = executionContext;\n  executionContext |= BatchedContext;\n\n  try {\n    return fn(a);\n  } finally {\n    executionContext = prevExecutionContext;\n\n    if (executionContext === NoContext) {\n      // Flush the immediate callbacks that were scheduled during this batch\n      resetRenderTimer();\n      flushSyncCallbackQueue();\n    }\n  }\n}\nfunction batchedEventUpdates(fn, a) {\n  var prevExecutionContext = executionContext;\n  executionContext |= EventContext;\n\n  try {\n    return fn(a);\n  } finally {\n    executionContext = prevExecutionContext;\n\n    if (executionContext === NoContext) {\n      // Flush the immediate callbacks that were scheduled during this batch\n      resetRenderTimer();\n      flushSyncCallbackQueue();\n    }\n  }\n}\nfunction discreteUpdates(fn, a, b, c, d) {\n  var prevExecutionContext = executionContext;\n  executionContext |= DiscreteEventContext;\n\n  {\n    try {\n      return runWithPriority(UserBlockingPriority$1, fn.bind(null, a, b, c, d));\n    } finally {\n      executionContext = prevExecutionContext;\n\n      if (executionContext === NoContext) {\n        // Flush the immediate callbacks that were scheduled during this batch\n        resetRenderTimer();\n        flushSyncCallbackQueue();\n      }\n    }\n  }\n}\nfunction unbatchedUpdates(fn, a) {\n  var prevExecutionContext = executionContext;\n  executionContext &= ~BatchedContext;\n  executionContext |= LegacyUnbatchedContext;\n\n  try {\n    return fn(a);\n  } finally {\n    executionContext = prevExecutionContext;\n\n    if (executionContext === NoContext) {\n      // Flush the immediate callbacks that were scheduled during this batch\n      resetRenderTimer();\n      flushSyncCallbackQueue();\n    }\n  }\n}\nfunction flushSync(fn, a) {\n  var prevExecutionContext = executionContext;\n\n  if ((prevExecutionContext & (RenderContext | CommitContext)) !== NoContext) {\n    {\n      error('flushSync was called from inside a lifecycle method. React cannot ' + 'flush when React is already rendering. Consider moving this call to ' + 'a scheduler task or micro task.');\n    }\n\n    return fn(a);\n  }\n\n  executionContext |= BatchedContext;\n\n  {\n    try {\n      if (fn) {\n        return runWithPriority(ImmediatePriority$1, fn.bind(null, a));\n      } else {\n        return undefined;\n      }\n    } finally {\n      executionContext = prevExecutionContext; // Flush the immediate callbacks that were scheduled during this batch.\n      // Note that this will happen even if batchedUpdates is higher up\n      // the stack.\n\n      flushSyncCallbackQueue();\n    }\n  }\n}\nfunction flushControlled(fn) {\n  var prevExecutionContext = executionContext;\n  executionContext |= BatchedContext;\n\n  {\n    try {\n      runWithPriority(ImmediatePriority$1, fn);\n    } finally {\n      executionContext = prevExecutionContext;\n\n      if (executionContext === NoContext) {\n        // Flush the immediate callbacks that were scheduled during this batch\n        resetRenderTimer();\n        flushSyncCallbackQueue();\n      }\n    }\n  }\n}\nfunction pushRenderLanes(fiber, lanes) {\n  push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);\n  subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);\n  workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);\n}\nfunction popRenderLanes(fiber) {\n  subtreeRenderLanes = subtreeRenderLanesCursor.current;\n  pop(subtreeRenderLanesCursor, fiber);\n}\n\nfunction prepareFreshStack(root, lanes) {\n  root.finishedWork = null;\n  root.finishedLanes = NoLanes;\n  var timeoutHandle = root.timeoutHandle;\n\n  if (timeoutHandle !== noTimeout) {\n    // The root previous suspended and scheduled a timeout to commit a fallback\n    // state. Now that we have additional work, cancel the timeout.\n    root.timeoutHandle = noTimeout; // $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above\n\n    cancelTimeout(timeoutHandle);\n  }\n\n  if (workInProgress !== null) {\n    var interruptedWork = workInProgress.return;\n\n    while (interruptedWork !== null) {\n      unwindInterruptedWork(interruptedWork);\n      interruptedWork = interruptedWork.return;\n    }\n  }\n\n  workInProgressRoot = root;\n  workInProgress = createWorkInProgress(root.current, null);\n  workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;\n  workInProgressRootExitStatus = RootIncomplete;\n  workInProgressRootFatalError = null;\n  workInProgressRootSkippedLanes = NoLanes;\n  workInProgressRootUpdatedLanes = NoLanes;\n  workInProgressRootPingedLanes = NoLanes;\n\n  {\n    spawnedWorkDuringRender = null;\n  }\n\n  {\n    ReactStrictModeWarnings.discardPendingWarnings();\n  }\n}\n\nfunction handleError(root, thrownValue) {\n  do {\n    var erroredWork = workInProgress;\n\n    try {\n      // Reset module-level state that was set during the render phase.\n      resetContextDependencies();\n      resetHooksAfterThrow();\n      resetCurrentFiber(); // TODO: I found and added this missing line while investigating a\n      // separate issue. Write a regression test using string refs.\n\n      ReactCurrentOwner$2.current = null;\n\n      if (erroredWork === null || erroredWork.return === null) {\n        // Expected to be working on a non-root fiber. This is a fatal error\n        // because there's no ancestor that can handle it; the root is\n        // supposed to capture all errors that weren't caught by an error\n        // boundary.\n        workInProgressRootExitStatus = RootFatalErrored;\n        workInProgressRootFatalError = thrownValue; // Set `workInProgress` to null. This represents advancing to the next\n        // sibling, or the parent if there are no siblings. But since the root\n        // has no siblings nor a parent, we set it to null. Usually this is\n        // handled by `completeUnitOfWork` or `unwindWork`, but since we're\n        // intentionally not calling those, we need set it here.\n        // TODO: Consider calling `unwindWork` to pop the contexts.\n\n        workInProgress = null;\n        return;\n      }\n\n      if (enableProfilerTimer && erroredWork.mode & ProfileMode) {\n        // Record the time spent rendering before an error was thrown. This\n        // avoids inaccurate Profiler durations in the case of a\n        // suspended render.\n        stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);\n      }\n\n      throwException(root, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);\n      completeUnitOfWork(erroredWork);\n    } catch (yetAnotherThrownValue) {\n      // Something in the return path also threw.\n      thrownValue = yetAnotherThrownValue;\n\n      if (workInProgress === erroredWork && erroredWork !== null) {\n        // If this boundary has already errored, then we had trouble processing\n        // the error. Bubble it to the next boundary.\n        erroredWork = erroredWork.return;\n        workInProgress = erroredWork;\n      } else {\n        erroredWork = workInProgress;\n      }\n\n      continue;\n    } // Return to the normal work loop.\n\n\n    return;\n  } while (true);\n}\n\nfunction pushDispatcher() {\n  var prevDispatcher = ReactCurrentDispatcher$2.current;\n  ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;\n\n  if (prevDispatcher === null) {\n    // The React isomorphic package does not include a default dispatcher.\n    // Instead the first renderer will lazily attach one, in order to give\n    // nicer error messages.\n    return ContextOnlyDispatcher;\n  } else {\n    return prevDispatcher;\n  }\n}\n\nfunction popDispatcher(prevDispatcher) {\n  ReactCurrentDispatcher$2.current = prevDispatcher;\n}\n\nfunction pushInteractions(root) {\n  {\n    var prevInteractions = tracing.__interactionsRef.current;\n    tracing.__interactionsRef.current = root.memoizedInteractions;\n    return prevInteractions;\n  }\n}\n\nfunction popInteractions(prevInteractions) {\n  {\n    tracing.__interactionsRef.current = prevInteractions;\n  }\n}\n\nfunction markCommitTimeOfFallback() {\n  globalMostRecentFallbackTime = now$1();\n}\nfunction markSkippedUpdateLanes(lane) {\n  workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);\n}\nfunction renderDidSuspend() {\n  if (workInProgressRootExitStatus === RootIncomplete) {\n    workInProgressRootExitStatus = RootSuspended;\n  }\n}\nfunction renderDidSuspendDelayIfPossible() {\n  if (workInProgressRootExitStatus === RootIncomplete || workInProgressRootExitStatus === RootSuspended) {\n    workInProgressRootExitStatus = RootSuspendedWithDelay;\n  } // Check if there are updates that we skipped tree that might have unblocked\n  // this render.\n\n\n  if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootUpdatedLanes))) {\n    // Mark the current render as suspended so that we switch to working on\n    // the updates that were skipped. Usually we only suspend at the end of\n    // the render phase.\n    // TODO: We should probably always mark the root as suspended immediately\n    // (inside this function), since by suspending at the end of the render\n    // phase introduces a potential mistake where we suspend lanes that were\n    // pinged or updated while we were rendering.\n    markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);\n  }\n}\nfunction renderDidError() {\n  if (workInProgressRootExitStatus !== RootCompleted) {\n    workInProgressRootExitStatus = RootErrored;\n  }\n} // Called during render to determine if anything has suspended.\n// Returns false if we're not sure.\n\nfunction renderHasNotSuspendedYet() {\n  // If something errored or completed, we can't really be sure,\n  // so those are false.\n  return workInProgressRootExitStatus === RootIncomplete;\n}\n\nfunction renderRootSync(root, lanes) {\n  var prevExecutionContext = executionContext;\n  executionContext |= RenderContext;\n  var prevDispatcher = pushDispatcher(); // If the root or lanes have changed, throw out the existing stack\n  // and prepare a fresh one. Otherwise we'll continue where we left off.\n\n  if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {\n    prepareFreshStack(root, lanes);\n    startWorkOnPendingInteractions(root, lanes);\n  }\n\n  var prevInteractions = pushInteractions(root);\n\n  do {\n    try {\n      workLoopSync();\n      break;\n    } catch (thrownValue) {\n      handleError(root, thrownValue);\n    }\n  } while (true);\n\n  resetContextDependencies();\n\n  {\n    popInteractions(prevInteractions);\n  }\n\n  executionContext = prevExecutionContext;\n  popDispatcher(prevDispatcher);\n\n  if (workInProgress !== null) {\n    // This is a sync render, so we should have finished the whole tree.\n    {\n      {\n        throw Error( \"Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.\" );\n      }\n    }\n  }\n\n\n  workInProgressRoot = null;\n  workInProgressRootRenderLanes = NoLanes;\n  return workInProgressRootExitStatus;\n} // The work loop is an extremely hot path. Tell Closure not to inline it.\n\n/** @noinline */\n\n\nfunction workLoopSync() {\n  // Already timed out, so perform work without checking if we need to yield.\n  while (workInProgress !== null) {\n    performUnitOfWork(workInProgress);\n  }\n}\n\nfunction renderRootConcurrent(root, lanes) {\n  var prevExecutionContext = executionContext;\n  executionContext |= RenderContext;\n  var prevDispatcher = pushDispatcher(); // If the root or lanes have changed, throw out the existing stack\n  // and prepare a fresh one. Otherwise we'll continue where we left off.\n\n  if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {\n    resetRenderTimer();\n    prepareFreshStack(root, lanes);\n    startWorkOnPendingInteractions(root, lanes);\n  }\n\n  var prevInteractions = pushInteractions(root);\n\n  do {\n    try {\n      workLoopConcurrent();\n      break;\n    } catch (thrownValue) {\n      handleError(root, thrownValue);\n    }\n  } while (true);\n\n  resetContextDependencies();\n\n  {\n    popInteractions(prevInteractions);\n  }\n\n  popDispatcher(prevDispatcher);\n  executionContext = prevExecutionContext;\n\n\n  if (workInProgress !== null) {\n\n    return RootIncomplete;\n  } else {\n\n\n    workInProgressRoot = null;\n    workInProgressRootRenderLanes = NoLanes; // Return the final exit status.\n\n    return workInProgressRootExitStatus;\n  }\n}\n/** @noinline */\n\n\nfunction workLoopConcurrent() {\n  // Perform work until Scheduler asks us to yield\n  while (workInProgress !== null && !shouldYield()) {\n    performUnitOfWork(workInProgress);\n  }\n}\n\nfunction performUnitOfWork(unitOfWork) {\n  // The current, flushed, state of this fiber is the alternate. Ideally\n  // nothing should rely on this, but relying on it here means that we don't\n  // need an additional field on the work in progress.\n  var current = unitOfWork.alternate;\n  setCurrentFiber(unitOfWork);\n  var next;\n\n  if ( (unitOfWork.mode & ProfileMode) !== NoMode) {\n    startProfilerTimer(unitOfWork);\n    next = beginWork$1(current, unitOfWork, subtreeRenderLanes);\n    stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);\n  } else {\n    next = beginWork$1(current, unitOfWork, subtreeRenderLanes);\n  }\n\n  resetCurrentFiber();\n  unitOfWork.memoizedProps = unitOfWork.pendingProps;\n\n  if (next === null) {\n    // If this doesn't spawn new work, complete the current work.\n    completeUnitOfWork(unitOfWork);\n  } else {\n    workInProgress = next;\n  }\n\n  ReactCurrentOwner$2.current = null;\n}\n\nfunction completeUnitOfWork(unitOfWork) {\n  // Attempt to complete the current unit of work, then move to the next\n  // sibling. If there are no more siblings, return to the parent fiber.\n  var completedWork = unitOfWork;\n\n  do {\n    // The current, flushed, state of this fiber is the alternate. Ideally\n    // nothing should rely on this, but relying on it here means that we don't\n    // need an additional field on the work in progress.\n    var current = completedWork.alternate;\n    var returnFiber = completedWork.return; // Check if the work completed or if something threw.\n\n    if ((completedWork.flags & Incomplete) === NoFlags) {\n      setCurrentFiber(completedWork);\n      var next = void 0;\n\n      if ( (completedWork.mode & ProfileMode) === NoMode) {\n        next = completeWork(current, completedWork, subtreeRenderLanes);\n      } else {\n        startProfilerTimer(completedWork);\n        next = completeWork(current, completedWork, subtreeRenderLanes); // Update render duration assuming we didn't error.\n\n        stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);\n      }\n\n      resetCurrentFiber();\n\n      if (next !== null) {\n        // Completing this fiber spawned new work. Work on that next.\n        workInProgress = next;\n        return;\n      }\n\n      resetChildLanes(completedWork);\n\n      if (returnFiber !== null && // Do not append effects to parents if a sibling failed to complete\n      (returnFiber.flags & Incomplete) === NoFlags) {\n        // Append all the effects of the subtree and this fiber onto the effect\n        // list of the parent. The completion order of the children affects the\n        // side-effect order.\n        if (returnFiber.firstEffect === null) {\n          returnFiber.firstEffect = completedWork.firstEffect;\n        }\n\n        if (completedWork.lastEffect !== null) {\n          if (returnFiber.lastEffect !== null) {\n            returnFiber.lastEffect.nextEffect = completedWork.firstEffect;\n          }\n\n          returnFiber.lastEffect = completedWork.lastEffect;\n        } // If this fiber had side-effects, we append it AFTER the children's\n        // side-effects. We can perform certain side-effects earlier if needed,\n        // by doing multiple passes over the effect list. We don't want to\n        // schedule our own side-effect on our own list because if end up\n        // reusing children we'll schedule this effect onto itself since we're\n        // at the end.\n\n\n        var flags = completedWork.flags; // Skip both NoWork and PerformedWork tags when creating the effect\n        // list. PerformedWork effect is read by React DevTools but shouldn't be\n        // committed.\n\n        if (flags > PerformedWork) {\n          if (returnFiber.lastEffect !== null) {\n            returnFiber.lastEffect.nextEffect = completedWork;\n          } else {\n            returnFiber.firstEffect = completedWork;\n          }\n\n          returnFiber.lastEffect = completedWork;\n        }\n      }\n    } else {\n      // This fiber did not complete because something threw. Pop values off\n      // the stack without entering the complete phase. If this is a boundary,\n      // capture values if possible.\n      var _next = unwindWork(completedWork); // Because this fiber did not complete, don't reset its expiration time.\n\n\n      if (_next !== null) {\n        // If completing this work spawned new work, do that next. We'll come\n        // back here again.\n        // Since we're restarting, remove anything that is not a host effect\n        // from the effect tag.\n        _next.flags &= HostEffectMask;\n        workInProgress = _next;\n        return;\n      }\n\n      if ( (completedWork.mode & ProfileMode) !== NoMode) {\n        // Record the render duration for the fiber that errored.\n        stopProfilerTimerIfRunningAndRecordDelta(completedWork, false); // Include the time spent working on failed children before continuing.\n\n        var actualDuration = completedWork.actualDuration;\n        var child = completedWork.child;\n\n        while (child !== null) {\n          actualDuration += child.actualDuration;\n          child = child.sibling;\n        }\n\n        completedWork.actualDuration = actualDuration;\n      }\n\n      if (returnFiber !== null) {\n        // Mark the parent fiber as incomplete and clear its effect list.\n        returnFiber.firstEffect = returnFiber.lastEffect = null;\n        returnFiber.flags |= Incomplete;\n      }\n    }\n\n    var siblingFiber = completedWork.sibling;\n\n    if (siblingFiber !== null) {\n      // If there is more work to do in this returnFiber, do that next.\n      workInProgress = siblingFiber;\n      return;\n    } // Otherwise, return to the parent\n\n\n    completedWork = returnFiber; // Update the next thing we're working on in case something throws.\n\n    workInProgress = completedWork;\n  } while (completedWork !== null); // We've reached the root.\n\n\n  if (workInProgressRootExitStatus === RootIncomplete) {\n    workInProgressRootExitStatus = RootCompleted;\n  }\n}\n\nfunction resetChildLanes(completedWork) {\n  if ( // TODO: Move this check out of the hot path by moving `resetChildLanes`\n  // to switch statement in `completeWork`.\n  (completedWork.tag === LegacyHiddenComponent || completedWork.tag === OffscreenComponent) && completedWork.memoizedState !== null && !includesSomeLane(subtreeRenderLanes, OffscreenLane) && (completedWork.mode & ConcurrentMode) !== NoLanes) {\n    // The children of this component are hidden. Don't bubble their\n    // expiration times.\n    return;\n  }\n\n  var newChildLanes = NoLanes; // Bubble up the earliest expiration time.\n\n  if ( (completedWork.mode & ProfileMode) !== NoMode) {\n    // In profiling mode, resetChildExpirationTime is also used to reset\n    // profiler durations.\n    var actualDuration = completedWork.actualDuration;\n    var treeBaseDuration = completedWork.selfBaseDuration; // When a fiber is cloned, its actualDuration is reset to 0. This value will\n    // only be updated if work is done on the fiber (i.e. it doesn't bailout).\n    // When work is done, it should bubble to the parent's actualDuration. If\n    // the fiber has not been cloned though, (meaning no work was done), then\n    // this value will reflect the amount of time spent working on a previous\n    // render. In that case it should not bubble. We determine whether it was\n    // cloned by comparing the child pointer.\n\n    var shouldBubbleActualDurations = completedWork.alternate === null || completedWork.child !== completedWork.alternate.child;\n    var child = completedWork.child;\n\n    while (child !== null) {\n      newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));\n\n      if (shouldBubbleActualDurations) {\n        actualDuration += child.actualDuration;\n      }\n\n      treeBaseDuration += child.treeBaseDuration;\n      child = child.sibling;\n    }\n\n    var isTimedOutSuspense = completedWork.tag === SuspenseComponent && completedWork.memoizedState !== null;\n\n    if (isTimedOutSuspense) {\n      // Don't count time spent in a timed out Suspense subtree as part of the base duration.\n      var primaryChildFragment = completedWork.child;\n\n      if (primaryChildFragment !== null) {\n        treeBaseDuration -= primaryChildFragment.treeBaseDuration;\n      }\n    }\n\n    completedWork.actualDuration = actualDuration;\n    completedWork.treeBaseDuration = treeBaseDuration;\n  } else {\n    var _child = completedWork.child;\n\n    while (_child !== null) {\n      newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));\n      _child = _child.sibling;\n    }\n  }\n\n  completedWork.childLanes = newChildLanes;\n}\n\nfunction commitRoot(root) {\n  var renderPriorityLevel = getCurrentPriorityLevel();\n  runWithPriority(ImmediatePriority$1, commitRootImpl.bind(null, root, renderPriorityLevel));\n  return null;\n}\n\nfunction commitRootImpl(root, renderPriorityLevel) {\n  do {\n    // `flushPassiveEffects` will call `flushSyncUpdateQueue` at the end, which\n    // means `flushPassiveEffects` will sometimes result in additional\n    // passive effects. So we need to keep flushing in a loop until there are\n    // no more pending effects.\n    // TODO: Might be better if `flushPassiveEffects` did not automatically\n    // flush synchronous work at the end, to avoid factoring hazards like this.\n    flushPassiveEffects();\n  } while (rootWithPendingPassiveEffects !== null);\n\n  flushRenderPhaseStrictModeWarningsInDEV();\n\n  if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {\n    {\n      throw Error( \"Should not already be working.\" );\n    }\n  }\n\n  var finishedWork = root.finishedWork;\n  var lanes = root.finishedLanes;\n\n  if (finishedWork === null) {\n\n    return null;\n  }\n\n  root.finishedWork = null;\n  root.finishedLanes = NoLanes;\n\n  if (!(finishedWork !== root.current)) {\n    {\n      throw Error( \"Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.\" );\n    }\n  } // commitRoot never returns a continuation; it always finishes synchronously.\n  // So we can clear these now to allow a new callback to be scheduled.\n\n\n  root.callbackNode = null; // Update the first and last pending times on this root. The new first\n  // pending time is whatever is left on the root fiber.\n\n  var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);\n  markRootFinished(root, remainingLanes); // Clear already finished discrete updates in case that a later call of\n  // `flushDiscreteUpdates` starts a useless render pass which may cancels\n  // a scheduled timeout.\n\n  if (rootsWithPendingDiscreteUpdates !== null) {\n    if (!hasDiscreteLanes(remainingLanes) && rootsWithPendingDiscreteUpdates.has(root)) {\n      rootsWithPendingDiscreteUpdates.delete(root);\n    }\n  }\n\n  if (root === workInProgressRoot) {\n    // We can reset these now that they are finished.\n    workInProgressRoot = null;\n    workInProgress = null;\n    workInProgressRootRenderLanes = NoLanes;\n  } // Get the list of effects.\n\n\n  var firstEffect;\n\n  if (finishedWork.flags > PerformedWork) {\n    // A fiber's effect list consists only of its children, not itself. So if\n    // the root has an effect, we need to add it to the end of the list. The\n    // resulting list is the set that would belong to the root's parent, if it\n    // had one; that is, all the effects in the tree including the root.\n    if (finishedWork.lastEffect !== null) {\n      finishedWork.lastEffect.nextEffect = finishedWork;\n      firstEffect = finishedWork.firstEffect;\n    } else {\n      firstEffect = finishedWork;\n    }\n  } else {\n    // There is no effect on the root.\n    firstEffect = finishedWork.firstEffect;\n  }\n\n  if (firstEffect !== null) {\n\n    var prevExecutionContext = executionContext;\n    executionContext |= CommitContext;\n    var prevInteractions = pushInteractions(root); // Reset this to null before calling lifecycles\n\n    ReactCurrentOwner$2.current = null; // The commit phase is broken into several sub-phases. We do a separate pass\n    // of the effect list for each phase: all mutation effects come before all\n    // layout effects, and so on.\n    // The first phase a \"before mutation\" phase. We use this phase to read the\n    // state of the host tree right before we mutate it. This is where\n    // getSnapshotBeforeUpdate is called.\n\n    focusedInstanceHandle = prepareForCommit(root.containerInfo);\n    shouldFireAfterActiveInstanceBlur = false;\n    nextEffect = firstEffect;\n\n    do {\n      {\n        invokeGuardedCallback(null, commitBeforeMutationEffects, null);\n\n        if (hasCaughtError()) {\n          if (!(nextEffect !== null)) {\n            {\n              throw Error( \"Should be working on an effect.\" );\n            }\n          }\n\n          var error = clearCaughtError();\n          captureCommitPhaseError(nextEffect, error);\n          nextEffect = nextEffect.nextEffect;\n        }\n      }\n    } while (nextEffect !== null); // We no longer need to track the active instance fiber\n\n\n    focusedInstanceHandle = null;\n\n    {\n      // Mark the current commit time to be shared by all Profilers in this\n      // batch. This enables them to be grouped later.\n      recordCommitTime();\n    } // The next phase is the mutation phase, where we mutate the host tree.\n\n\n    nextEffect = firstEffect;\n\n    do {\n      {\n        invokeGuardedCallback(null, commitMutationEffects, null, root, renderPriorityLevel);\n\n        if (hasCaughtError()) {\n          if (!(nextEffect !== null)) {\n            {\n              throw Error( \"Should be working on an effect.\" );\n            }\n          }\n\n          var _error = clearCaughtError();\n\n          captureCommitPhaseError(nextEffect, _error);\n          nextEffect = nextEffect.nextEffect;\n        }\n      }\n    } while (nextEffect !== null);\n\n    if (shouldFireAfterActiveInstanceBlur) {\n      afterActiveInstanceBlur();\n    }\n\n    resetAfterCommit(root.containerInfo); // The work-in-progress tree is now the current tree. This must come after\n    // the mutation phase, so that the previous tree is still current during\n    // componentWillUnmount, but before the layout phase, so that the finished\n    // work is current during componentDidMount/Update.\n\n    root.current = finishedWork; // The next phase is the layout phase, where we call effects that read\n    // the host tree after it's been mutated. The idiomatic use case for this is\n    // layout, but class component lifecycles also fire here for legacy reasons.\n\n    nextEffect = firstEffect;\n\n    do {\n      {\n        invokeGuardedCallback(null, commitLayoutEffects, null, root, lanes);\n\n        if (hasCaughtError()) {\n          if (!(nextEffect !== null)) {\n            {\n              throw Error( \"Should be working on an effect.\" );\n            }\n          }\n\n          var _error2 = clearCaughtError();\n\n          captureCommitPhaseError(nextEffect, _error2);\n          nextEffect = nextEffect.nextEffect;\n        }\n      }\n    } while (nextEffect !== null);\n\n    nextEffect = null; // Tell Scheduler to yield at the end of the frame, so the browser has an\n    // opportunity to paint.\n\n    requestPaint();\n\n    {\n      popInteractions(prevInteractions);\n    }\n\n    executionContext = prevExecutionContext;\n  } else {\n    // No effects.\n    root.current = finishedWork; // Measure these anyway so the flamegraph explicitly shows that there were\n    // no effects.\n    // TODO: Maybe there's a better way to report this.\n\n    {\n      recordCommitTime();\n    }\n  }\n\n  var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;\n\n  if (rootDoesHavePassiveEffects) {\n    // This commit has passive effects. Stash a reference to them. But don't\n    // schedule a callback until after flushing layout work.\n    rootDoesHavePassiveEffects = false;\n    rootWithPendingPassiveEffects = root;\n    pendingPassiveEffectsLanes = lanes;\n    pendingPassiveEffectsRenderPriority = renderPriorityLevel;\n  } else {\n    // We are done with the effect chain at this point so let's clear the\n    // nextEffect pointers to assist with GC. If we have passive effects, we'll\n    // clear this in flushPassiveEffects.\n    nextEffect = firstEffect;\n\n    while (nextEffect !== null) {\n      var nextNextEffect = nextEffect.nextEffect;\n      nextEffect.nextEffect = null;\n\n      if (nextEffect.flags & Deletion) {\n        detachFiberAfterEffects(nextEffect);\n      }\n\n      nextEffect = nextNextEffect;\n    }\n  } // Read this again, since an effect might have updated it\n\n\n  remainingLanes = root.pendingLanes; // Check if there's remaining work on this root\n\n  if (remainingLanes !== NoLanes) {\n    {\n      if (spawnedWorkDuringRender !== null) {\n        var expirationTimes = spawnedWorkDuringRender;\n        spawnedWorkDuringRender = null;\n\n        for (var i = 0; i < expirationTimes.length; i++) {\n          scheduleInteractions(root, expirationTimes[i], root.memoizedInteractions);\n        }\n      }\n\n      schedulePendingInteractions(root, remainingLanes);\n    }\n  } else {\n    // If there's no remaining work, we can clear the set of already failed\n    // error boundaries.\n    legacyErrorBoundariesThatAlreadyFailed = null;\n  }\n\n  {\n    if (!rootDidHavePassiveEffects) {\n      // If there are no passive effects, then we can complete the pending interactions.\n      // Otherwise, we'll wait until after the passive effects are flushed.\n      // Wait to do this until after remaining work has been scheduled,\n      // so that we don't prematurely signal complete for interactions when there's e.g. hidden work.\n      finishPendingInteractions(root, lanes);\n    }\n  }\n\n  if (remainingLanes === SyncLane) {\n    // Count the number of times the root synchronously re-renders without\n    // finishing. If there are too many, it indicates an infinite update loop.\n    if (root === rootWithNestedUpdates) {\n      nestedUpdateCount++;\n    } else {\n      nestedUpdateCount = 0;\n      rootWithNestedUpdates = root;\n    }\n  } else {\n    nestedUpdateCount = 0;\n  }\n\n  onCommitRoot(finishedWork.stateNode, renderPriorityLevel);\n\n  {\n    onCommitRoot$1();\n  } // Always call this before exiting `commitRoot`, to ensure that any\n  // additional work on this root is scheduled.\n\n\n  ensureRootIsScheduled(root, now$1());\n\n  if (hasUncaughtError) {\n    hasUncaughtError = false;\n    var _error3 = firstUncaughtError;\n    firstUncaughtError = null;\n    throw _error3;\n  }\n\n  if ((executionContext & LegacyUnbatchedContext) !== NoContext) {\n    // a ReactDOM.render-ed root inside of batchedUpdates. The commit fired\n    // synchronously, but layout updates should be deferred until the end\n    // of the batch.\n\n\n    return null;\n  } // If layout work was scheduled, flush it now.\n\n\n  flushSyncCallbackQueue();\n\n  return null;\n}\n\nfunction commitBeforeMutationEffects() {\n  while (nextEffect !== null) {\n    var current = nextEffect.alternate;\n\n    if (!shouldFireAfterActiveInstanceBlur && focusedInstanceHandle !== null) {\n      if ((nextEffect.flags & Deletion) !== NoFlags) {\n        if (doesFiberContain(nextEffect, focusedInstanceHandle)) {\n          shouldFireAfterActiveInstanceBlur = true;\n          beforeActiveInstanceBlur();\n        }\n      } else {\n        // TODO: Move this out of the hot path using a dedicated effect tag.\n        if (nextEffect.tag === SuspenseComponent && isSuspenseBoundaryBeingHidden(current, nextEffect) && doesFiberContain(nextEffect, focusedInstanceHandle)) {\n          shouldFireAfterActiveInstanceBlur = true;\n          beforeActiveInstanceBlur();\n        }\n      }\n    }\n\n    var flags = nextEffect.flags;\n\n    if ((flags & Snapshot) !== NoFlags) {\n      setCurrentFiber(nextEffect);\n      commitBeforeMutationLifeCycles(current, nextEffect);\n      resetCurrentFiber();\n    }\n\n    if ((flags & Passive) !== NoFlags) {\n      // If there are passive effects, schedule a callback to flush at\n      // the earliest opportunity.\n      if (!rootDoesHavePassiveEffects) {\n        rootDoesHavePassiveEffects = true;\n        scheduleCallback(NormalPriority$1, function () {\n          flushPassiveEffects();\n          return null;\n        });\n      }\n    }\n\n    nextEffect = nextEffect.nextEffect;\n  }\n}\n\nfunction commitMutationEffects(root, renderPriorityLevel) {\n  // TODO: Should probably move the bulk of this function to commitWork.\n  while (nextEffect !== null) {\n    setCurrentFiber(nextEffect);\n    var flags = nextEffect.flags;\n\n    if (flags & ContentReset) {\n      commitResetTextContent(nextEffect);\n    }\n\n    if (flags & Ref) {\n      var current = nextEffect.alternate;\n\n      if (current !== null) {\n        commitDetachRef(current);\n      }\n    } // The following switch statement is only concerned about placement,\n    // updates, and deletions. To avoid needing to add a case for every possible\n    // bitmap value, we remove the secondary effects from the effect tag and\n    // switch on that value.\n\n\n    var primaryFlags = flags & (Placement | Update | Deletion | Hydrating);\n\n    switch (primaryFlags) {\n      case Placement:\n        {\n          commitPlacement(nextEffect); // Clear the \"placement\" from effect tag so that we know that this is\n          // inserted, before any life-cycles like componentDidMount gets called.\n          // TODO: findDOMNode doesn't rely on this any more but isMounted does\n          // and isMounted is deprecated anyway so we should be able to kill this.\n\n          nextEffect.flags &= ~Placement;\n          break;\n        }\n\n      case PlacementAndUpdate:\n        {\n          // Placement\n          commitPlacement(nextEffect); // Clear the \"placement\" from effect tag so that we know that this is\n          // inserted, before any life-cycles like componentDidMount gets called.\n\n          nextEffect.flags &= ~Placement; // Update\n\n          var _current = nextEffect.alternate;\n          commitWork(_current, nextEffect);\n          break;\n        }\n\n      case Hydrating:\n        {\n          nextEffect.flags &= ~Hydrating;\n          break;\n        }\n\n      case HydratingAndUpdate:\n        {\n          nextEffect.flags &= ~Hydrating; // Update\n\n          var _current2 = nextEffect.alternate;\n          commitWork(_current2, nextEffect);\n          break;\n        }\n\n      case Update:\n        {\n          var _current3 = nextEffect.alternate;\n          commitWork(_current3, nextEffect);\n          break;\n        }\n\n      case Deletion:\n        {\n          commitDeletion(root, nextEffect);\n          break;\n        }\n    }\n\n    resetCurrentFiber();\n    nextEffect = nextEffect.nextEffect;\n  }\n}\n\nfunction commitLayoutEffects(root, committedLanes) {\n\n\n  while (nextEffect !== null) {\n    setCurrentFiber(nextEffect);\n    var flags = nextEffect.flags;\n\n    if (flags & (Update | Callback)) {\n      var current = nextEffect.alternate;\n      commitLifeCycles(root, current, nextEffect);\n    }\n\n    {\n      if (flags & Ref) {\n        commitAttachRef(nextEffect);\n      }\n    }\n\n    resetCurrentFiber();\n    nextEffect = nextEffect.nextEffect;\n  }\n}\n\nfunction flushPassiveEffects() {\n  // Returns whether passive effects were flushed.\n  if (pendingPassiveEffectsRenderPriority !== NoPriority$1) {\n    var priorityLevel = pendingPassiveEffectsRenderPriority > NormalPriority$1 ? NormalPriority$1 : pendingPassiveEffectsRenderPriority;\n    pendingPassiveEffectsRenderPriority = NoPriority$1;\n\n    {\n      return runWithPriority(priorityLevel, flushPassiveEffectsImpl);\n    }\n  }\n\n  return false;\n}\nfunction enqueuePendingPassiveHookEffectMount(fiber, effect) {\n  pendingPassiveHookEffectsMount.push(effect, fiber);\n\n  if (!rootDoesHavePassiveEffects) {\n    rootDoesHavePassiveEffects = true;\n    scheduleCallback(NormalPriority$1, function () {\n      flushPassiveEffects();\n      return null;\n    });\n  }\n}\nfunction enqueuePendingPassiveHookEffectUnmount(fiber, effect) {\n  pendingPassiveHookEffectsUnmount.push(effect, fiber);\n\n  {\n    fiber.flags |= PassiveUnmountPendingDev;\n    var alternate = fiber.alternate;\n\n    if (alternate !== null) {\n      alternate.flags |= PassiveUnmountPendingDev;\n    }\n  }\n\n  if (!rootDoesHavePassiveEffects) {\n    rootDoesHavePassiveEffects = true;\n    scheduleCallback(NormalPriority$1, function () {\n      flushPassiveEffects();\n      return null;\n    });\n  }\n}\n\nfunction invokePassiveEffectCreate(effect) {\n  var create = effect.create;\n  effect.destroy = create();\n}\n\nfunction flushPassiveEffectsImpl() {\n  if (rootWithPendingPassiveEffects === null) {\n    return false;\n  }\n\n  var root = rootWithPendingPassiveEffects;\n  var lanes = pendingPassiveEffectsLanes;\n  rootWithPendingPassiveEffects = null;\n  pendingPassiveEffectsLanes = NoLanes;\n\n  if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {\n    {\n      throw Error( \"Cannot flush passive effects while already rendering.\" );\n    }\n  }\n\n  {\n    isFlushingPassiveEffects = true;\n  }\n\n  var prevExecutionContext = executionContext;\n  executionContext |= CommitContext;\n  var prevInteractions = pushInteractions(root); // It's important that ALL pending passive effect destroy functions are called\n  // before ANY passive effect create functions are called.\n  // Otherwise effects in sibling components might interfere with each other.\n  // e.g. a destroy function in one component may unintentionally override a ref\n  // value set by a create function in another component.\n  // Layout effects have the same constraint.\n  // First pass: Destroy stale passive effects.\n\n  var unmountEffects = pendingPassiveHookEffectsUnmount;\n  pendingPassiveHookEffectsUnmount = [];\n\n  for (var i = 0; i < unmountEffects.length; i += 2) {\n    var _effect = unmountEffects[i];\n    var fiber = unmountEffects[i + 1];\n    var destroy = _effect.destroy;\n    _effect.destroy = undefined;\n\n    {\n      fiber.flags &= ~PassiveUnmountPendingDev;\n      var alternate = fiber.alternate;\n\n      if (alternate !== null) {\n        alternate.flags &= ~PassiveUnmountPendingDev;\n      }\n    }\n\n    if (typeof destroy === 'function') {\n      {\n        setCurrentFiber(fiber);\n\n        {\n          invokeGuardedCallback(null, destroy, null);\n        }\n\n        if (hasCaughtError()) {\n          if (!(fiber !== null)) {\n            {\n              throw Error( \"Should be working on an effect.\" );\n            }\n          }\n\n          var error = clearCaughtError();\n          captureCommitPhaseError(fiber, error);\n        }\n\n        resetCurrentFiber();\n      }\n    }\n  } // Second pass: Create new passive effects.\n\n\n  var mountEffects = pendingPassiveHookEffectsMount;\n  pendingPassiveHookEffectsMount = [];\n\n  for (var _i = 0; _i < mountEffects.length; _i += 2) {\n    var _effect2 = mountEffects[_i];\n    var _fiber = mountEffects[_i + 1];\n\n    {\n      setCurrentFiber(_fiber);\n\n      {\n        invokeGuardedCallback(null, invokePassiveEffectCreate, null, _effect2);\n      }\n\n      if (hasCaughtError()) {\n        if (!(_fiber !== null)) {\n          {\n            throw Error( \"Should be working on an effect.\" );\n          }\n        }\n\n        var _error4 = clearCaughtError();\n\n        captureCommitPhaseError(_fiber, _error4);\n      }\n\n      resetCurrentFiber();\n    }\n  } // Note: This currently assumes there are no passive effects on the root fiber\n  // because the root is not part of its own effect list.\n  // This could change in the future.\n\n\n  var effect = root.current.firstEffect;\n\n  while (effect !== null) {\n    var nextNextEffect = effect.nextEffect; // Remove nextEffect pointer to assist GC\n\n    effect.nextEffect = null;\n\n    if (effect.flags & Deletion) {\n      detachFiberAfterEffects(effect);\n    }\n\n    effect = nextNextEffect;\n  }\n\n  {\n    popInteractions(prevInteractions);\n    finishPendingInteractions(root, lanes);\n  }\n\n  {\n    isFlushingPassiveEffects = false;\n  }\n\n  executionContext = prevExecutionContext;\n  flushSyncCallbackQueue(); // If additional passive effects were scheduled, increment a counter. If this\n  // exceeds the limit, we'll fire a warning.\n\n  nestedPassiveUpdateCount = rootWithPendingPassiveEffects === null ? 0 : nestedPassiveUpdateCount + 1;\n  return true;\n}\n\nfunction isAlreadyFailedLegacyErrorBoundary(instance) {\n  return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);\n}\nfunction markLegacyErrorBoundaryAsFailed(instance) {\n  if (legacyErrorBoundariesThatAlreadyFailed === null) {\n    legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);\n  } else {\n    legacyErrorBoundariesThatAlreadyFailed.add(instance);\n  }\n}\n\nfunction prepareToThrowUncaughtError(error) {\n  if (!hasUncaughtError) {\n    hasUncaughtError = true;\n    firstUncaughtError = error;\n  }\n}\n\nvar onUncaughtError = prepareToThrowUncaughtError;\n\nfunction captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error) {\n  var errorInfo = createCapturedValue(error, sourceFiber);\n  var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);\n  enqueueUpdate(rootFiber, update);\n  var eventTime = requestEventTime();\n  var root = markUpdateLaneFromFiberToRoot(rootFiber, SyncLane);\n\n  if (root !== null) {\n    markRootUpdated(root, SyncLane, eventTime);\n    ensureRootIsScheduled(root, eventTime);\n    schedulePendingInteractions(root, SyncLane);\n  }\n}\n\nfunction captureCommitPhaseError(sourceFiber, error) {\n  if (sourceFiber.tag === HostRoot) {\n    // Error was thrown at the root. There is no parent, so the root\n    // itself should capture it.\n    captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error);\n    return;\n  }\n\n  var fiber = sourceFiber.return;\n\n  while (fiber !== null) {\n    if (fiber.tag === HostRoot) {\n      captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error);\n      return;\n    } else if (fiber.tag === ClassComponent) {\n      var ctor = fiber.type;\n      var instance = fiber.stateNode;\n\n      if (typeof ctor.getDerivedStateFromError === 'function' || typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance)) {\n        var errorInfo = createCapturedValue(error, sourceFiber);\n        var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);\n        enqueueUpdate(fiber, update);\n        var eventTime = requestEventTime();\n        var root = markUpdateLaneFromFiberToRoot(fiber, SyncLane);\n\n        if (root !== null) {\n          markRootUpdated(root, SyncLane, eventTime);\n          ensureRootIsScheduled(root, eventTime);\n          schedulePendingInteractions(root, SyncLane);\n        } else {\n          // This component has already been unmounted.\n          // We can't schedule any follow up work for the root because the fiber is already unmounted,\n          // but we can still call the log-only boundary so the error isn't swallowed.\n          //\n          // TODO This is only a temporary bandaid for the old reconciler fork.\n          // We can delete this special case once the new fork is merged.\n          if (typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance)) {\n            try {\n              instance.componentDidCatch(error, errorInfo);\n            } catch (errorToIgnore) {// TODO Ignore this error? Rethrow it?\n              // This is kind of an edge case.\n            }\n          }\n        }\n\n        return;\n      }\n    }\n\n    fiber = fiber.return;\n  }\n}\nfunction pingSuspendedRoot(root, wakeable, pingedLanes) {\n  var pingCache = root.pingCache;\n\n  if (pingCache !== null) {\n    // The wakeable resolved, so we no longer need to memoize, because it will\n    // never be thrown again.\n    pingCache.delete(wakeable);\n  }\n\n  var eventTime = requestEventTime();\n  markRootPinged(root, pingedLanes);\n\n  if (workInProgressRoot === root && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {\n    // Received a ping at the same priority level at which we're currently\n    // rendering. We might want to restart this render. This should mirror\n    // the logic of whether or not a root suspends once it completes.\n    // TODO: If we're rendering sync either due to Sync, Batched or expired,\n    // we should probably never restart.\n    // If we're suspended with delay, or if it's a retry, we'll always suspend\n    // so we can always restart.\n    if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now$1() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {\n      // Restart from the root.\n      prepareFreshStack(root, NoLanes);\n    } else {\n      // Even though we can't restart right now, we might get an\n      // opportunity later. So we mark this render as having a ping.\n      workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);\n    }\n  }\n\n  ensureRootIsScheduled(root, eventTime);\n  schedulePendingInteractions(root, pingedLanes);\n}\n\nfunction retryTimedOutBoundary(boundaryFiber, retryLane) {\n  // The boundary fiber (a Suspense component or SuspenseList component)\n  // previously was rendered in its fallback state. One of the promises that\n  // suspended it has resolved, which means at least part of the tree was\n  // likely unblocked. Try rendering again, at a new expiration time.\n  if (retryLane === NoLane) {\n    retryLane = requestRetryLane(boundaryFiber);\n  } // TODO: Special case idle priority?\n\n\n  var eventTime = requestEventTime();\n  var root = markUpdateLaneFromFiberToRoot(boundaryFiber, retryLane);\n\n  if (root !== null) {\n    markRootUpdated(root, retryLane, eventTime);\n    ensureRootIsScheduled(root, eventTime);\n    schedulePendingInteractions(root, retryLane);\n  }\n}\nfunction resolveRetryWakeable(boundaryFiber, wakeable) {\n  var retryLane = NoLane; // Default\n\n  var retryCache;\n\n  {\n    retryCache = boundaryFiber.stateNode;\n  }\n\n  if (retryCache !== null) {\n    // The wakeable resolved, so we no longer need to memoize, because it will\n    // never be thrown again.\n    retryCache.delete(wakeable);\n  }\n\n  retryTimedOutBoundary(boundaryFiber, retryLane);\n} // Computes the next Just Noticeable Difference (JND) boundary.\n// The theory is that a person can't tell the difference between small differences in time.\n// Therefore, if we wait a bit longer than necessary that won't translate to a noticeable\n// difference in the experience. However, waiting for longer might mean that we can avoid\n// showing an intermediate loading state. The longer we have already waited, the harder it\n// is to tell small differences in time. Therefore, the longer we've already waited,\n// the longer we can wait additionally. At some point we have to give up though.\n// We pick a train model where the next boundary commits at a consistent schedule.\n// These particular numbers are vague estimates. We expect to adjust them based on research.\n\nfunction jnd(timeElapsed) {\n  return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3000 ? 3000 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;\n}\n\nfunction checkForNestedUpdates() {\n  if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {\n    nestedUpdateCount = 0;\n    rootWithNestedUpdates = null;\n\n    {\n      {\n        throw Error( \"Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.\" );\n      }\n    }\n  }\n\n  {\n    if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {\n      nestedPassiveUpdateCount = 0;\n\n      error('Maximum update depth exceeded. This can happen when a component ' + \"calls setState inside useEffect, but useEffect either doesn't \" + 'have a dependency array, or one of the dependencies changes on ' + 'every render.');\n    }\n  }\n}\n\nfunction flushRenderPhaseStrictModeWarningsInDEV() {\n  {\n    ReactStrictModeWarnings.flushLegacyContextWarning();\n\n    {\n      ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();\n    }\n  }\n}\n\nvar didWarnStateUpdateForNotYetMountedComponent = null;\n\nfunction warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {\n  {\n    if ((executionContext & RenderContext) !== NoContext) {\n      // We let the other warning about render phase updates deal with this one.\n      return;\n    }\n\n    if (!(fiber.mode & (BlockingMode | ConcurrentMode))) {\n      return;\n    }\n\n    var tag = fiber.tag;\n\n    if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent && tag !== Block) {\n      // Only warn for user-defined components, not internal ones like Suspense.\n      return;\n    } // We show the whole stack but dedupe on the top component's name because\n    // the problematic code almost always lies inside that component.\n\n\n    var componentName = getComponentName(fiber.type) || 'ReactComponent';\n\n    if (didWarnStateUpdateForNotYetMountedComponent !== null) {\n      if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {\n        return;\n      }\n\n      didWarnStateUpdateForNotYetMountedComponent.add(componentName);\n    } else {\n      didWarnStateUpdateForNotYetMountedComponent = new Set([componentName]);\n    }\n\n    var previousFiber = current;\n\n    try {\n      setCurrentFiber(fiber);\n\n      error(\"Can't perform a React state update on a component that hasn't mounted yet. \" + 'This indicates that you have a side-effect in your render function that ' + 'asynchronously later calls tries to update the component. Move this work to ' + 'useEffect instead.');\n    } finally {\n      if (previousFiber) {\n        setCurrentFiber(fiber);\n      } else {\n        resetCurrentFiber();\n      }\n    }\n  }\n}\n\nvar didWarnStateUpdateForUnmountedComponent = null;\n\nfunction warnAboutUpdateOnUnmountedFiberInDEV(fiber) {\n  {\n    var tag = fiber.tag;\n\n    if (tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent && tag !== Block) {\n      // Only warn for user-defined components, not internal ones like Suspense.\n      return;\n    } // If there are pending passive effects unmounts for this Fiber,\n    // we can assume that they would have prevented this update.\n\n\n    if ((fiber.flags & PassiveUnmountPendingDev) !== NoFlags) {\n      return;\n    } // We show the whole stack but dedupe on the top component's name because\n    // the problematic code almost always lies inside that component.\n\n\n    var componentName = getComponentName(fiber.type) || 'ReactComponent';\n\n    if (didWarnStateUpdateForUnmountedComponent !== null) {\n      if (didWarnStateUpdateForUnmountedComponent.has(componentName)) {\n        return;\n      }\n\n      didWarnStateUpdateForUnmountedComponent.add(componentName);\n    } else {\n      didWarnStateUpdateForUnmountedComponent = new Set([componentName]);\n    }\n\n    if (isFlushingPassiveEffects) ; else {\n      var previousFiber = current;\n\n      try {\n        setCurrentFiber(fiber);\n\n        error(\"Can't perform a React state update on an unmounted component. This \" + 'is a no-op, but it indicates a memory leak in your application. To ' + 'fix, cancel all subscriptions and asynchronous tasks in %s.', tag === ClassComponent ? 'the componentWillUnmount method' : 'a useEffect cleanup function');\n      } finally {\n        if (previousFiber) {\n          setCurrentFiber(fiber);\n        } else {\n          resetCurrentFiber();\n        }\n      }\n    }\n  }\n}\n\nvar beginWork$1;\n\n{\n  var dummyFiber = null;\n\n  beginWork$1 = function (current, unitOfWork, lanes) {\n    // If a component throws an error, we replay it again in a synchronously\n    // dispatched event, so that the debugger will treat it as an uncaught\n    // error See ReactErrorUtils for more information.\n    // Before entering the begin phase, copy the work-in-progress onto a dummy\n    // fiber. If beginWork throws, we'll use this to reset the state.\n    var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);\n\n    try {\n      return beginWork(current, unitOfWork, lanes);\n    } catch (originalError) {\n      if (originalError !== null && typeof originalError === 'object' && typeof originalError.then === 'function') {\n        // Don't replay promises. Treat everything else like an error.\n        throw originalError;\n      } // Keep this code in sync with handleError; any changes here must have\n      // corresponding changes there.\n\n\n      resetContextDependencies();\n      resetHooksAfterThrow(); // Don't reset current debug fiber, since we're about to work on the\n      // same fiber again.\n      // Unwind the failed stack frame\n\n      unwindInterruptedWork(unitOfWork); // Restore the original properties of the fiber.\n\n      assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);\n\n      if ( unitOfWork.mode & ProfileMode) {\n        // Reset the profiler timer.\n        startProfilerTimer(unitOfWork);\n      } // Run beginWork again.\n\n\n      invokeGuardedCallback(null, beginWork, null, current, unitOfWork, lanes);\n\n      if (hasCaughtError()) {\n        var replayError = clearCaughtError(); // `invokeGuardedCallback` sometimes sets an expando `_suppressLogging`.\n        // Rethrow this error instead of the original one.\n\n        throw replayError;\n      } else {\n        // This branch is reachable if the render phase is impure.\n        throw originalError;\n      }\n    }\n  };\n}\n\nvar didWarnAboutUpdateInRender = false;\nvar didWarnAboutUpdateInRenderForAnotherComponent;\n\n{\n  didWarnAboutUpdateInRenderForAnotherComponent = new Set();\n}\n\nfunction warnAboutRenderPhaseUpdatesInDEV(fiber) {\n  {\n    if (isRendering && (executionContext & RenderContext) !== NoContext && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {\n      switch (fiber.tag) {\n        case FunctionComponent:\n        case ForwardRef:\n        case SimpleMemoComponent:\n          {\n            var renderingComponentName = workInProgress && getComponentName(workInProgress.type) || 'Unknown'; // Dedupe by the rendering component because it's the one that needs to be fixed.\n\n            var dedupeKey = renderingComponentName;\n\n            if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {\n              didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);\n              var setStateComponentName = getComponentName(fiber.type) || 'Unknown';\n\n              error('Cannot update a component (`%s`) while rendering a ' + 'different component (`%s`). To locate the bad setState() call inside `%s`, ' + 'follow the stack trace as described in https://reactjs.org/link/setstate-in-render', setStateComponentName, renderingComponentName, renderingComponentName);\n            }\n\n            break;\n          }\n\n        case ClassComponent:\n          {\n            if (!didWarnAboutUpdateInRender) {\n              error('Cannot update during an existing state transition (such as ' + 'within `render`). Render methods should be a pure ' + 'function of props and state.');\n\n              didWarnAboutUpdateInRender = true;\n            }\n\n            break;\n          }\n      }\n    }\n  }\n} // a 'shared' variable that changes when act() opens/closes in tests.\n\n\nvar IsThisRendererActing = {\n  current: false\n};\nfunction warnIfNotScopedWithMatchingAct(fiber) {\n  {\n    if (warnsIfNotActing === true && IsSomeRendererActing.current === true && IsThisRendererActing.current !== true) {\n      var previousFiber = current;\n\n      try {\n        setCurrentFiber(fiber);\n\n        error(\"It looks like you're using the wrong act() around your test interactions.\\n\" + 'Be sure to use the matching version of act() corresponding to your renderer:\\n\\n' + '// for react-dom:\\n' + // Break up imports to avoid accidentally parsing them as dependencies.\n        'import {act} fr' + \"om 'react-dom/test-utils';\\n\" + '// ...\\n' + 'act(() => ...);\\n\\n' + '// for react-test-renderer:\\n' + // Break up imports to avoid accidentally parsing them as dependencies.\n        'import TestRenderer fr' + \"om react-test-renderer';\\n\" + 'const {act} = TestRenderer;\\n' + '// ...\\n' + 'act(() => ...);');\n      } finally {\n        if (previousFiber) {\n          setCurrentFiber(fiber);\n        } else {\n          resetCurrentFiber();\n        }\n      }\n    }\n  }\n}\nfunction warnIfNotCurrentlyActingEffectsInDEV(fiber) {\n  {\n    if (warnsIfNotActing === true && (fiber.mode & StrictMode) !== NoMode && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {\n      error('An update to %s ran an effect, but was not wrapped in act(...).\\n\\n' + 'When testing, code that causes React state updates should be ' + 'wrapped into act(...):\\n\\n' + 'act(() => {\\n' + '  /* fire events that update state */\\n' + '});\\n' + '/* assert on the output */\\n\\n' + \"This ensures that you're testing the behavior the user would see \" + 'in the browser.' + ' Learn more at https://reactjs.org/link/wrap-tests-with-act', getComponentName(fiber.type));\n    }\n  }\n}\n\nfunction warnIfNotCurrentlyActingUpdatesInDEV(fiber) {\n  {\n    if (warnsIfNotActing === true && executionContext === NoContext && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {\n      var previousFiber = current;\n\n      try {\n        setCurrentFiber(fiber);\n\n        error('An update to %s inside a test was not wrapped in act(...).\\n\\n' + 'When testing, code that causes React state updates should be ' + 'wrapped into act(...):\\n\\n' + 'act(() => {\\n' + '  /* fire events that update state */\\n' + '});\\n' + '/* assert on the output */\\n\\n' + \"This ensures that you're testing the behavior the user would see \" + 'in the browser.' + ' Learn more at https://reactjs.org/link/wrap-tests-with-act', getComponentName(fiber.type));\n      } finally {\n        if (previousFiber) {\n          setCurrentFiber(fiber);\n        } else {\n          resetCurrentFiber();\n        }\n      }\n    }\n  }\n}\n\nvar warnIfNotCurrentlyActingUpdatesInDev = warnIfNotCurrentlyActingUpdatesInDEV; // In tests, we want to enforce a mocked scheduler.\n\nvar didWarnAboutUnmockedScheduler = false; // TODO Before we release concurrent mode, revisit this and decide whether a mocked\n// scheduler is the actual recommendation. The alternative could be a testing build,\n// a new lib, or whatever; we dunno just yet. This message is for early adopters\n// to get their tests right.\n\nfunction warnIfUnmockedScheduler(fiber) {\n  {\n    if (didWarnAboutUnmockedScheduler === false && Scheduler.unstable_flushAllWithoutAsserting === undefined) {\n      if (fiber.mode & BlockingMode || fiber.mode & ConcurrentMode) {\n        didWarnAboutUnmockedScheduler = true;\n\n        error('In Concurrent or Sync modes, the \"scheduler\" module needs to be mocked ' + 'to guarantee consistent behaviour across tests and browsers. ' + 'For example, with jest: \\n' + // Break up requires to avoid accidentally parsing them as dependencies.\n        \"jest.mock('scheduler', () => require\" + \"('scheduler/unstable_mock'));\\n\\n\" + 'For more info, visit https://reactjs.org/link/mock-scheduler');\n      }\n    }\n  }\n}\n\nfunction computeThreadID(root, lane) {\n  // Interaction threads are unique per root and expiration time.\n  // NOTE: Intentionally unsound cast. All that matters is that it's a number\n  // and it represents a batch of work. Could make a helper function instead,\n  // but meh this is fine for now.\n  return lane * 1000 + root.interactionThreadID;\n}\n\nfunction markSpawnedWork(lane) {\n\n  if (spawnedWorkDuringRender === null) {\n    spawnedWorkDuringRender = [lane];\n  } else {\n    spawnedWorkDuringRender.push(lane);\n  }\n}\n\nfunction scheduleInteractions(root, lane, interactions) {\n\n  if (interactions.size > 0) {\n    var pendingInteractionMap = root.pendingInteractionMap;\n    var pendingInteractions = pendingInteractionMap.get(lane);\n\n    if (pendingInteractions != null) {\n      interactions.forEach(function (interaction) {\n        if (!pendingInteractions.has(interaction)) {\n          // Update the pending async work count for previously unscheduled interaction.\n          interaction.__count++;\n        }\n\n        pendingInteractions.add(interaction);\n      });\n    } else {\n      pendingInteractionMap.set(lane, new Set(interactions)); // Update the pending async work count for the current interactions.\n\n      interactions.forEach(function (interaction) {\n        interaction.__count++;\n      });\n    }\n\n    var subscriber = tracing.__subscriberRef.current;\n\n    if (subscriber !== null) {\n      var threadID = computeThreadID(root, lane);\n      subscriber.onWorkScheduled(interactions, threadID);\n    }\n  }\n}\n\nfunction schedulePendingInteractions(root, lane) {\n\n  scheduleInteractions(root, lane, tracing.__interactionsRef.current);\n}\n\nfunction startWorkOnPendingInteractions(root, lanes) {\n  // we can accurately attribute time spent working on it, And so that cascading\n  // work triggered during the render phase will be associated with it.\n\n\n  var interactions = new Set();\n  root.pendingInteractionMap.forEach(function (scheduledInteractions, scheduledLane) {\n    if (includesSomeLane(lanes, scheduledLane)) {\n      scheduledInteractions.forEach(function (interaction) {\n        return interactions.add(interaction);\n      });\n    }\n  }); // Store the current set of interactions on the FiberRoot for a few reasons:\n  // We can re-use it in hot functions like performConcurrentWorkOnRoot()\n  // without having to recalculate it. We will also use it in commitWork() to\n  // pass to any Profiler onRender() hooks. This also provides DevTools with a\n  // way to access it when the onCommitRoot() hook is called.\n\n  root.memoizedInteractions = interactions;\n\n  if (interactions.size > 0) {\n    var subscriber = tracing.__subscriberRef.current;\n\n    if (subscriber !== null) {\n      var threadID = computeThreadID(root, lanes);\n\n      try {\n        subscriber.onWorkStarted(interactions, threadID);\n      } catch (error) {\n        // If the subscriber throws, rethrow it in a separate task\n        scheduleCallback(ImmediatePriority$1, function () {\n          throw error;\n        });\n      }\n    }\n  }\n}\n\nfunction finishPendingInteractions(root, committedLanes) {\n\n  var remainingLanesAfterCommit = root.pendingLanes;\n  var subscriber;\n\n  try {\n    subscriber = tracing.__subscriberRef.current;\n\n    if (subscriber !== null && root.memoizedInteractions.size > 0) {\n      // FIXME: More than one lane can finish in a single commit.\n      var threadID = computeThreadID(root, committedLanes);\n      subscriber.onWorkStopped(root.memoizedInteractions, threadID);\n    }\n  } catch (error) {\n    // If the subscriber throws, rethrow it in a separate task\n    scheduleCallback(ImmediatePriority$1, function () {\n      throw error;\n    });\n  } finally {\n    // Clear completed interactions from the pending Map.\n    // Unless the render was suspended or cascading work was scheduled,\n    // In which case\u2013 leave pending interactions until the subsequent render.\n    var pendingInteractionMap = root.pendingInteractionMap;\n    pendingInteractionMap.forEach(function (scheduledInteractions, lane) {\n      // Only decrement the pending interaction count if we're done.\n      // If there's still work at the current priority,\n      // That indicates that we are waiting for suspense data.\n      if (!includesSomeLane(remainingLanesAfterCommit, lane)) {\n        pendingInteractionMap.delete(lane);\n        scheduledInteractions.forEach(function (interaction) {\n          interaction.__count--;\n\n          if (subscriber !== null && interaction.__count === 0) {\n            try {\n              subscriber.onInteractionScheduledWorkCompleted(interaction);\n            } catch (error) {\n              // If the subscriber throws, rethrow it in a separate task\n              scheduleCallback(ImmediatePriority$1, function () {\n                throw error;\n              });\n            }\n          }\n        });\n      }\n    });\n  }\n} // `act` testing API\n\nfunction shouldForceFlushFallbacksInDEV() {\n  // Never force flush in production. This function should get stripped out.\n  return  actingUpdatesScopeDepth > 0;\n}\n\nvar flushMockScheduler = Scheduler.unstable_flushAllWithoutAsserting;\nvar isSchedulerMocked = typeof flushMockScheduler === 'function'; // Returns whether additional work was scheduled. Caller should keep flushing\n// until there's no work left.\n\nfunction flushActWork() {\n  if (flushMockScheduler !== undefined) {\n\n    try {\n      return flushMockScheduler();\n    } finally {\n    }\n  } else {\n\n    try {\n      var didFlushWork = false;\n\n      while (flushPassiveEffects()) {\n        didFlushWork = true;\n      }\n\n      return didFlushWork;\n    } finally {\n    }\n  }\n}\n\nfunction flushWorkAndMicroTasks(onDone) {\n  try {\n    flushActWork();\n    enqueueTask(function () {\n      if (flushActWork()) {\n        flushWorkAndMicroTasks(onDone);\n      } else {\n        onDone();\n      }\n    });\n  } catch (err) {\n    onDone(err);\n  }\n} // we track the 'depth' of the act() calls with this counter,\n// so we can tell if any async act() calls try to run in parallel.\n\n\nvar actingUpdatesScopeDepth = 0;\nfunction act(callback) {\n\n  var previousActingUpdatesScopeDepth = actingUpdatesScopeDepth;\n  actingUpdatesScopeDepth++;\n  var previousIsSomeRendererActing = IsSomeRendererActing.current;\n  var previousIsThisRendererActing = IsThisRendererActing.current;\n  IsSomeRendererActing.current = true;\n  IsThisRendererActing.current = true;\n\n  function onDone() {\n    actingUpdatesScopeDepth--;\n    IsSomeRendererActing.current = previousIsSomeRendererActing;\n    IsThisRendererActing.current = previousIsThisRendererActing;\n\n    {\n      if (actingUpdatesScopeDepth > previousActingUpdatesScopeDepth) {\n        // if it's _less than_ previousActingUpdatesScopeDepth, then we can assume the 'other' one has warned\n        error('You seem to have overlapping act() calls, this is not supported. ' + 'Be sure to await previous act() calls before making a new one. ');\n      }\n    }\n  }\n\n  var result;\n\n  try {\n    result = batchedUpdates(callback);\n  } catch (error) {\n    // on sync errors, we still want to 'cleanup' and decrement actingUpdatesScopeDepth\n    onDone();\n    throw error;\n  }\n\n  if (result !== null && typeof result === 'object' && typeof result.then === 'function') {\n    // setup a boolean that gets set to true only\n    // once this act() call is await-ed\n    var called = false;\n\n    {\n      if (typeof Promise !== 'undefined') {\n        //eslint-disable-next-line no-undef\n        Promise.resolve().then(function () {}).then(function () {\n          if (called === false) {\n            error('You called act(async () => ...) without await. ' + 'This could lead to unexpected testing behaviour, interleaving multiple act ' + 'calls and mixing their scopes. You should - await act(async () => ...);');\n          }\n        });\n      }\n    } // in the async case, the returned thenable runs the callback, flushes\n    // effects and  microtasks in a loop until flushPassiveEffects() === false,\n    // and cleans up\n\n\n    return {\n      then: function (resolve, reject) {\n        called = true;\n        result.then(function () {\n          if (actingUpdatesScopeDepth > 1 || isSchedulerMocked === true && previousIsSomeRendererActing === true) {\n            onDone();\n            resolve();\n            return;\n          } // we're about to exit the act() scope,\n          // now's the time to flush tasks/effects\n\n\n          flushWorkAndMicroTasks(function (err) {\n            onDone();\n\n            if (err) {\n              reject(err);\n            } else {\n              resolve();\n            }\n          });\n        }, function (err) {\n          onDone();\n          reject(err);\n        });\n      }\n    };\n  } else {\n    {\n      if (result !== undefined) {\n        error('The callback passed to act(...) function ' + 'must return undefined, or a Promise. You returned %s', result);\n      }\n    } // flush effects until none remain, and cleanup\n\n\n    try {\n      if (actingUpdatesScopeDepth === 1 && (isSchedulerMocked === false || previousIsSomeRendererActing === false)) {\n        // we're about to exit the act() scope,\n        // now's the time to flush effects\n        flushActWork();\n      }\n\n      onDone();\n    } catch (err) {\n      onDone();\n      throw err;\n    } // in the sync case, the returned thenable only warns *if* await-ed\n\n\n    return {\n      then: function (resolve) {\n        {\n          error('Do not await the result of calling act(...) with sync logic, it is not a Promise.');\n        }\n\n        resolve();\n      }\n    };\n  }\n}\n\nfunction detachFiberAfterEffects(fiber) {\n  fiber.sibling = null;\n  fiber.stateNode = null;\n}\n\nvar resolveFamily = null; // $FlowFixMe Flow gets confused by a WeakSet feature check below.\n\nvar failedBoundaries = null;\nvar setRefreshHandler = function (handler) {\n  {\n    resolveFamily = handler;\n  }\n};\nfunction resolveFunctionForHotReloading(type) {\n  {\n    if (resolveFamily === null) {\n      // Hot reloading is disabled.\n      return type;\n    }\n\n    var family = resolveFamily(type);\n\n    if (family === undefined) {\n      return type;\n    } // Use the latest known implementation.\n\n\n    return family.current;\n  }\n}\nfunction resolveClassForHotReloading(type) {\n  // No implementation differences.\n  return resolveFunctionForHotReloading(type);\n}\nfunction resolveForwardRefForHotReloading(type) {\n  {\n    if (resolveFamily === null) {\n      // Hot reloading is disabled.\n      return type;\n    }\n\n    var family = resolveFamily(type);\n\n    if (family === undefined) {\n      // Check if we're dealing with a real forwardRef. Don't want to crash early.\n      if (type !== null && type !== undefined && typeof type.render === 'function') {\n        // ForwardRef is special because its resolved .type is an object,\n        // but it's possible that we only have its inner render function in the map.\n        // If that inner render function is different, we'll build a new forwardRef type.\n        var currentRender = resolveFunctionForHotReloading(type.render);\n\n        if (type.render !== currentRender) {\n          var syntheticType = {\n            $$typeof: REACT_FORWARD_REF_TYPE,\n            render: currentRender\n          };\n\n          if (type.displayName !== undefined) {\n            syntheticType.displayName = type.displayName;\n          }\n\n          return syntheticType;\n        }\n      }\n\n      return type;\n    } // Use the latest known implementation.\n\n\n    return family.current;\n  }\n}\nfunction isCompatibleFamilyForHotReloading(fiber, element) {\n  {\n    if (resolveFamily === null) {\n      // Hot reloading is disabled.\n      return false;\n    }\n\n    var prevType = fiber.elementType;\n    var nextType = element.type; // If we got here, we know types aren't === equal.\n\n    var needsCompareFamilies = false;\n    var $$typeofNextType = typeof nextType === 'object' && nextType !== null ? nextType.$$typeof : null;\n\n    switch (fiber.tag) {\n      case ClassComponent:\n        {\n          if (typeof nextType === 'function') {\n            needsCompareFamilies = true;\n          }\n\n          break;\n        }\n\n      case FunctionComponent:\n        {\n          if (typeof nextType === 'function') {\n            needsCompareFamilies = true;\n          } else if ($$typeofNextType === REACT_LAZY_TYPE) {\n            // We don't know the inner type yet.\n            // We're going to assume that the lazy inner type is stable,\n            // and so it is sufficient to avoid reconciling it away.\n            // We're not going to unwrap or actually use the new lazy type.\n            needsCompareFamilies = true;\n          }\n\n          break;\n        }\n\n      case ForwardRef:\n        {\n          if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {\n            needsCompareFamilies = true;\n          } else if ($$typeofNextType === REACT_LAZY_TYPE) {\n            needsCompareFamilies = true;\n          }\n\n          break;\n        }\n\n      case MemoComponent:\n      case SimpleMemoComponent:\n        {\n          if ($$typeofNextType === REACT_MEMO_TYPE) {\n            // TODO: if it was but can no longer be simple,\n            // we shouldn't set this.\n            needsCompareFamilies = true;\n          } else if ($$typeofNextType === REACT_LAZY_TYPE) {\n            needsCompareFamilies = true;\n          }\n\n          break;\n        }\n\n      default:\n        return false;\n    } // Check if both types have a family and it's the same one.\n\n\n    if (needsCompareFamilies) {\n      // Note: memo() and forwardRef() we'll compare outer rather than inner type.\n      // This means both of them need to be registered to preserve state.\n      // If we unwrapped and compared the inner types for wrappers instead,\n      // then we would risk falsely saying two separate memo(Foo)\n      // calls are equivalent because they wrap the same Foo function.\n      var prevFamily = resolveFamily(prevType);\n\n      if (prevFamily !== undefined && prevFamily === resolveFamily(nextType)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n}\nfunction markFailedErrorBoundaryForHotReloading(fiber) {\n  {\n    if (resolveFamily === null) {\n      // Hot reloading is disabled.\n      return;\n    }\n\n    if (typeof WeakSet !== 'function') {\n      return;\n    }\n\n    if (failedBoundaries === null) {\n      failedBoundaries = new WeakSet();\n    }\n\n    failedBoundaries.add(fiber);\n  }\n}\nvar scheduleRefresh = function (root, update) {\n  {\n    if (resolveFamily === null) {\n      // Hot reloading is disabled.\n      return;\n    }\n\n    var staleFamilies = update.staleFamilies,\n        updatedFamilies = update.updatedFamilies;\n    flushPassiveEffects();\n    flushSync(function () {\n      scheduleFibersWithFamiliesRecursively(root.current, updatedFamilies, staleFamilies);\n    });\n  }\n};\nvar scheduleRoot = function (root, element) {\n  {\n    if (root.context !== emptyContextObject) {\n      // Super edge case: root has a legacy _renderSubtree context\n      // but we don't know the parentComponent so we can't pass it.\n      // Just ignore. We'll delete this with _renderSubtree code path later.\n      return;\n    }\n\n    flushPassiveEffects();\n    flushSync(function () {\n      updateContainer(element, root, null, null);\n    });\n  }\n};\n\nfunction scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {\n  {\n    var alternate = fiber.alternate,\n        child = fiber.child,\n        sibling = fiber.sibling,\n        tag = fiber.tag,\n        type = fiber.type;\n    var candidateType = null;\n\n    switch (tag) {\n      case FunctionComponent:\n      case SimpleMemoComponent:\n      case ClassComponent:\n        candidateType = type;\n        break;\n\n      case ForwardRef:\n        candidateType = type.render;\n        break;\n    }\n\n    if (resolveFamily === null) {\n      throw new Error('Expected resolveFamily to be set during hot reload.');\n    }\n\n    var needsRender = false;\n    var needsRemount = false;\n\n    if (candidateType !== null) {\n      var family = resolveFamily(candidateType);\n\n      if (family !== undefined) {\n        if (staleFamilies.has(family)) {\n          needsRemount = true;\n        } else if (updatedFamilies.has(family)) {\n          if (tag === ClassComponent) {\n            needsRemount = true;\n          } else {\n            needsRender = true;\n          }\n        }\n      }\n    }\n\n    if (failedBoundaries !== null) {\n      if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {\n        needsRemount = true;\n      }\n    }\n\n    if (needsRemount) {\n      fiber._debugNeedsRemount = true;\n    }\n\n    if (needsRemount || needsRender) {\n      scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);\n    }\n\n    if (child !== null && !needsRemount) {\n      scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);\n    }\n\n    if (sibling !== null) {\n      scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);\n    }\n  }\n}\n\nvar findHostInstancesForRefresh = function (root, families) {\n  {\n    var hostInstances = new Set();\n    var types = new Set(families.map(function (family) {\n      return family.current;\n    }));\n    findHostInstancesForMatchingFibersRecursively(root.current, types, hostInstances);\n    return hostInstances;\n  }\n};\n\nfunction findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {\n  {\n    var child = fiber.child,\n        sibling = fiber.sibling,\n        tag = fiber.tag,\n        type = fiber.type;\n    var candidateType = null;\n\n    switch (tag) {\n      case FunctionComponent:\n      case SimpleMemoComponent:\n      case ClassComponent:\n        candidateType = type;\n        break;\n\n      case ForwardRef:\n        candidateType = type.render;\n        break;\n    }\n\n    var didMatch = false;\n\n    if (candidateType !== null) {\n      if (types.has(candidateType)) {\n        didMatch = true;\n      }\n    }\n\n    if (didMatch) {\n      // We have a match. This only drills down to the closest host components.\n      // There's no need to search deeper because for the purpose of giving\n      // visual feedback, \"flashing\" outermost parent rectangles is sufficient.\n      findHostInstancesForFiberShallowly(fiber, hostInstances);\n    } else {\n      // If there's no match, maybe there will be one further down in the child tree.\n      if (child !== null) {\n        findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);\n      }\n    }\n\n    if (sibling !== null) {\n      findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);\n    }\n  }\n}\n\nfunction findHostInstancesForFiberShallowly(fiber, hostInstances) {\n  {\n    var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);\n\n    if (foundHostInstances) {\n      return;\n    } // If we didn't find any host children, fallback to closest host parent.\n\n\n    var node = fiber;\n\n    while (true) {\n      switch (node.tag) {\n        case HostComponent:\n          hostInstances.add(node.stateNode);\n          return;\n\n        case HostPortal:\n          hostInstances.add(node.stateNode.containerInfo);\n          return;\n\n        case HostRoot:\n          hostInstances.add(node.stateNode.containerInfo);\n          return;\n      }\n\n      if (node.return === null) {\n        throw new Error('Expected to reach root first.');\n      }\n\n      node = node.return;\n    }\n  }\n}\n\nfunction findChildHostInstancesForFiberShallowly(fiber, hostInstances) {\n  {\n    var node = fiber;\n    var foundHostInstances = false;\n\n    while (true) {\n      if (node.tag === HostComponent) {\n        // We got a match.\n        foundHostInstances = true;\n        hostInstances.add(node.stateNode); // There may still be more, so keep searching.\n      } else if (node.child !== null) {\n        node.child.return = node;\n        node = node.child;\n        continue;\n      }\n\n      if (node === fiber) {\n        return foundHostInstances;\n      }\n\n      while (node.sibling === null) {\n        if (node.return === null || node.return === fiber) {\n          return foundHostInstances;\n        }\n\n        node = node.return;\n      }\n\n      node.sibling.return = node.return;\n      node = node.sibling;\n    }\n  }\n\n  return false;\n}\n\nvar hasBadMapPolyfill;\n\n{\n  hasBadMapPolyfill = false;\n\n  try {\n    var nonExtensibleObject = Object.preventExtensions({});\n    /* eslint-disable no-new */\n\n    new Map([[nonExtensibleObject, null]]);\n    new Set([nonExtensibleObject]);\n    /* eslint-enable no-new */\n  } catch (e) {\n    // TODO: Consider warning about bad polyfills\n    hasBadMapPolyfill = true;\n  }\n}\n\nvar debugCounter = 1;\n\nfunction FiberNode(tag, pendingProps, key, mode) {\n  // Instance\n  this.tag = tag;\n  this.key = key;\n  this.elementType = null;\n  this.type = null;\n  this.stateNode = null; // Fiber\n\n  this.return = null;\n  this.child = null;\n  this.sibling = null;\n  this.index = 0;\n  this.ref = null;\n  this.pendingProps = pendingProps;\n  this.memoizedProps = null;\n  this.updateQueue = null;\n  this.memoizedState = null;\n  this.dependencies = null;\n  this.mode = mode; // Effects\n\n  this.flags = NoFlags;\n  this.nextEffect = null;\n  this.firstEffect = null;\n  this.lastEffect = null;\n  this.lanes = NoLanes;\n  this.childLanes = NoLanes;\n  this.alternate = null;\n\n  {\n    // Note: The following is done to avoid a v8 performance cliff.\n    //\n    // Initializing the fields below to smis and later updating them with\n    // double values will cause Fibers to end up having separate shapes.\n    // This behavior/bug has something to do with Object.preventExtension().\n    // Fortunately this only impacts DEV builds.\n    // Unfortunately it makes React unusably slow for some applications.\n    // To work around this, initialize the fields below with doubles.\n    //\n    // Learn more about this here:\n    // https://github.com/facebook/react/issues/14365\n    // https://bugs.chromium.org/p/v8/issues/detail?id=8538\n    this.actualDuration = Number.NaN;\n    this.actualStartTime = Number.NaN;\n    this.selfBaseDuration = Number.NaN;\n    this.treeBaseDuration = Number.NaN; // It's okay to replace the initial doubles with smis after initialization.\n    // This won't trigger the performance cliff mentioned above,\n    // and it simplifies other profiler code (including DevTools).\n\n    this.actualDuration = 0;\n    this.actualStartTime = -1;\n    this.selfBaseDuration = 0;\n    this.treeBaseDuration = 0;\n  }\n\n  {\n    // This isn't directly used but is handy for debugging internals:\n    this._debugID = debugCounter++;\n    this._debugSource = null;\n    this._debugOwner = null;\n    this._debugNeedsRemount = false;\n    this._debugHookTypes = null;\n\n    if (!hasBadMapPolyfill && typeof Object.preventExtensions === 'function') {\n      Object.preventExtensions(this);\n    }\n  }\n} // This is a constructor function, rather than a POJO constructor, still\n// please ensure we do the following:\n// 1) Nobody should add any instance methods on this. Instance methods can be\n//    more difficult to predict when they get optimized and they are almost\n//    never inlined properly in static compilers.\n// 2) Nobody should rely on `instanceof Fiber` for type testing. We should\n//    always know when it is a fiber.\n// 3) We might want to experiment with using numeric keys since they are easier\n//    to optimize in a non-JIT environment.\n// 4) We can easily go from a constructor to a createFiber object literal if that\n//    is faster.\n// 5) It should be easy to port this to a C struct and keep a C implementation\n//    compatible.\n\n\nvar createFiber = function (tag, pendingProps, key, mode) {\n  // $FlowFixMe: the shapes are exact here but Flow doesn't like constructors\n  return new FiberNode(tag, pendingProps, key, mode);\n};\n\nfunction shouldConstruct$1(Component) {\n  var prototype = Component.prototype;\n  return !!(prototype && prototype.isReactComponent);\n}\n\nfunction isSimpleFunctionComponent(type) {\n  return typeof type === 'function' && !shouldConstruct$1(type) && type.defaultProps === undefined;\n}\nfunction resolveLazyComponentTag(Component) {\n  if (typeof Component === 'function') {\n    return shouldConstruct$1(Component) ? ClassComponent : FunctionComponent;\n  } else if (Component !== undefined && Component !== null) {\n    var $$typeof = Component.$$typeof;\n\n    if ($$typeof === REACT_FORWARD_REF_TYPE) {\n      return ForwardRef;\n    }\n\n    if ($$typeof === REACT_MEMO_TYPE) {\n      return MemoComponent;\n    }\n  }\n\n  return IndeterminateComponent;\n} // This is used to create an alternate fiber to do work on.\n\nfunction createWorkInProgress(current, pendingProps) {\n  var workInProgress = current.alternate;\n\n  if (workInProgress === null) {\n    // We use a double buffering pooling technique because we know that we'll\n    // only ever need at most two versions of a tree. We pool the \"other\" unused\n    // node that we're free to reuse. This is lazily created to avoid allocating\n    // extra objects for things that are never updated. It also allow us to\n    // reclaim the extra memory if needed.\n    workInProgress = createFiber(current.tag, pendingProps, current.key, current.mode);\n    workInProgress.elementType = current.elementType;\n    workInProgress.type = current.type;\n    workInProgress.stateNode = current.stateNode;\n\n    {\n      // DEV-only fields\n      workInProgress._debugID = current._debugID;\n      workInProgress._debugSource = current._debugSource;\n      workInProgress._debugOwner = current._debugOwner;\n      workInProgress._debugHookTypes = current._debugHookTypes;\n    }\n\n    workInProgress.alternate = current;\n    current.alternate = workInProgress;\n  } else {\n    workInProgress.pendingProps = pendingProps; // Needed because Blocks store data on type.\n\n    workInProgress.type = current.type; // We already have an alternate.\n    // Reset the effect tag.\n\n    workInProgress.flags = NoFlags; // The effect list is no longer valid.\n\n    workInProgress.nextEffect = null;\n    workInProgress.firstEffect = null;\n    workInProgress.lastEffect = null;\n\n    {\n      // We intentionally reset, rather than copy, actualDuration & actualStartTime.\n      // This prevents time from endlessly accumulating in new commits.\n      // This has the downside of resetting values for different priority renders,\n      // But works for yielding (the common case) and should support resuming.\n      workInProgress.actualDuration = 0;\n      workInProgress.actualStartTime = -1;\n    }\n  }\n\n  workInProgress.childLanes = current.childLanes;\n  workInProgress.lanes = current.lanes;\n  workInProgress.child = current.child;\n  workInProgress.memoizedProps = current.memoizedProps;\n  workInProgress.memoizedState = current.memoizedState;\n  workInProgress.updateQueue = current.updateQueue; // Clone the dependencies object. This is mutated during the render phase, so\n  // it cannot be shared with the current fiber.\n\n  var currentDependencies = current.dependencies;\n  workInProgress.dependencies = currentDependencies === null ? null : {\n    lanes: currentDependencies.lanes,\n    firstContext: currentDependencies.firstContext\n  }; // These will be overridden during the parent's reconciliation\n\n  workInProgress.sibling = current.sibling;\n  workInProgress.index = current.index;\n  workInProgress.ref = current.ref;\n\n  {\n    workInProgress.selfBaseDuration = current.selfBaseDuration;\n    workInProgress.treeBaseDuration = current.treeBaseDuration;\n  }\n\n  {\n    workInProgress._debugNeedsRemount = current._debugNeedsRemount;\n\n    switch (workInProgress.tag) {\n      case IndeterminateComponent:\n      case FunctionComponent:\n      case SimpleMemoComponent:\n        workInProgress.type = resolveFunctionForHotReloading(current.type);\n        break;\n\n      case ClassComponent:\n        workInProgress.type = resolveClassForHotReloading(current.type);\n        break;\n\n      case ForwardRef:\n        workInProgress.type = resolveForwardRefForHotReloading(current.type);\n        break;\n    }\n  }\n\n  return workInProgress;\n} // Used to reuse a Fiber for a second pass.\n\nfunction resetWorkInProgress(workInProgress, renderLanes) {\n  // This resets the Fiber to what createFiber or createWorkInProgress would\n  // have set the values to before during the first pass. Ideally this wouldn't\n  // be necessary but unfortunately many code paths reads from the workInProgress\n  // when they should be reading from current and writing to workInProgress.\n  // We assume pendingProps, index, key, ref, return are still untouched to\n  // avoid doing another reconciliation.\n  // Reset the effect tag but keep any Placement tags, since that's something\n  // that child fiber is setting, not the reconciliation.\n  workInProgress.flags &= Placement; // The effect list is no longer valid.\n\n  workInProgress.nextEffect = null;\n  workInProgress.firstEffect = null;\n  workInProgress.lastEffect = null;\n  var current = workInProgress.alternate;\n\n  if (current === null) {\n    // Reset to createFiber's initial values.\n    workInProgress.childLanes = NoLanes;\n    workInProgress.lanes = renderLanes;\n    workInProgress.child = null;\n    workInProgress.memoizedProps = null;\n    workInProgress.memoizedState = null;\n    workInProgress.updateQueue = null;\n    workInProgress.dependencies = null;\n    workInProgress.stateNode = null;\n\n    {\n      // Note: We don't reset the actualTime counts. It's useful to accumulate\n      // actual time across multiple render passes.\n      workInProgress.selfBaseDuration = 0;\n      workInProgress.treeBaseDuration = 0;\n    }\n  } else {\n    // Reset to the cloned values that createWorkInProgress would've.\n    workInProgress.childLanes = current.childLanes;\n    workInProgress.lanes = current.lanes;\n    workInProgress.child = current.child;\n    workInProgress.memoizedProps = current.memoizedProps;\n    workInProgress.memoizedState = current.memoizedState;\n    workInProgress.updateQueue = current.updateQueue; // Needed because Blocks store data on type.\n\n    workInProgress.type = current.type; // Clone the dependencies object. This is mutated during the render phase, so\n    // it cannot be shared with the current fiber.\n\n    var currentDependencies = current.dependencies;\n    workInProgress.dependencies = currentDependencies === null ? null : {\n      lanes: currentDependencies.lanes,\n      firstContext: currentDependencies.firstContext\n    };\n\n    {\n      // Note: We don't reset the actualTime counts. It's useful to accumulate\n      // actual time across multiple render passes.\n      workInProgress.selfBaseDuration = current.selfBaseDuration;\n      workInProgress.treeBaseDuration = current.treeBaseDuration;\n    }\n  }\n\n  return workInProgress;\n}\nfunction createHostRootFiber(tag) {\n  var mode;\n\n  if (tag === ConcurrentRoot) {\n    mode = ConcurrentMode | BlockingMode | StrictMode;\n  } else if (tag === BlockingRoot) {\n    mode = BlockingMode | StrictMode;\n  } else {\n    mode = NoMode;\n  }\n\n  if ( isDevToolsPresent) {\n    // Always collect profile timings when DevTools are present.\n    // This enables DevTools to start capturing timing at any point\u2013\n    // Without some nodes in the tree having empty base times.\n    mode |= ProfileMode;\n  }\n\n  return createFiber(HostRoot, null, null, mode);\n}\nfunction createFiberFromTypeAndProps(type, // React$ElementType\nkey, pendingProps, owner, mode, lanes) {\n  var fiberTag = IndeterminateComponent; // The resolved type is set if we know what the final type will be. I.e. it's not lazy.\n\n  var resolvedType = type;\n\n  if (typeof type === 'function') {\n    if (shouldConstruct$1(type)) {\n      fiberTag = ClassComponent;\n\n      {\n        resolvedType = resolveClassForHotReloading(resolvedType);\n      }\n    } else {\n      {\n        resolvedType = resolveFunctionForHotReloading(resolvedType);\n      }\n    }\n  } else if (typeof type === 'string') {\n    fiberTag = HostComponent;\n  } else {\n    getTag: switch (type) {\n      case REACT_FRAGMENT_TYPE:\n        return createFiberFromFragment(pendingProps.children, mode, lanes, key);\n\n      case REACT_DEBUG_TRACING_MODE_TYPE:\n        fiberTag = Mode;\n        mode |= DebugTracingMode;\n        break;\n\n      case REACT_STRICT_MODE_TYPE:\n        fiberTag = Mode;\n        mode |= StrictMode;\n        break;\n\n      case REACT_PROFILER_TYPE:\n        return createFiberFromProfiler(pendingProps, mode, lanes, key);\n\n      case REACT_SUSPENSE_TYPE:\n        return createFiberFromSuspense(pendingProps, mode, lanes, key);\n\n      case REACT_SUSPENSE_LIST_TYPE:\n        return createFiberFromSuspenseList(pendingProps, mode, lanes, key);\n\n      case REACT_OFFSCREEN_TYPE:\n        return createFiberFromOffscreen(pendingProps, mode, lanes, key);\n\n      case REACT_LEGACY_HIDDEN_TYPE:\n        return createFiberFromLegacyHidden(pendingProps, mode, lanes, key);\n\n      case REACT_SCOPE_TYPE:\n\n      // eslint-disable-next-line no-fallthrough\n\n      default:\n        {\n          if (typeof type === 'object' && type !== null) {\n            switch (type.$$typeof) {\n              case REACT_PROVIDER_TYPE:\n                fiberTag = ContextProvider;\n                break getTag;\n\n              case REACT_CONTEXT_TYPE:\n                // This is a consumer\n                fiberTag = ContextConsumer;\n                break getTag;\n\n              case REACT_FORWARD_REF_TYPE:\n                fiberTag = ForwardRef;\n\n                {\n                  resolvedType = resolveForwardRefForHotReloading(resolvedType);\n                }\n\n                break getTag;\n\n              case REACT_MEMO_TYPE:\n                fiberTag = MemoComponent;\n                break getTag;\n\n              case REACT_LAZY_TYPE:\n                fiberTag = LazyComponent;\n                resolvedType = null;\n                break getTag;\n\n              case REACT_BLOCK_TYPE:\n                fiberTag = Block;\n                break getTag;\n            }\n          }\n\n          var info = '';\n\n          {\n            if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {\n              info += ' You likely forgot to export your component from the file ' + \"it's defined in, or you might have mixed up default and \" + 'named imports.';\n            }\n\n            var ownerName = owner ? getComponentName(owner.type) : null;\n\n            if (ownerName) {\n              info += '\\n\\nCheck the render method of `' + ownerName + '`.';\n            }\n          }\n\n          {\n            {\n              throw Error( \"Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: \" + (type == null ? type : typeof type) + \".\" + info );\n            }\n          }\n        }\n    }\n  }\n\n  var fiber = createFiber(fiberTag, pendingProps, key, mode);\n  fiber.elementType = type;\n  fiber.type = resolvedType;\n  fiber.lanes = lanes;\n\n  {\n    fiber._debugOwner = owner;\n  }\n\n  return fiber;\n}\nfunction createFiberFromElement(element, mode, lanes) {\n  var owner = null;\n\n  {\n    owner = element._owner;\n  }\n\n  var type = element.type;\n  var key = element.key;\n  var pendingProps = element.props;\n  var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);\n\n  {\n    fiber._debugSource = element._source;\n    fiber._debugOwner = element._owner;\n  }\n\n  return fiber;\n}\nfunction createFiberFromFragment(elements, mode, lanes, key) {\n  var fiber = createFiber(Fragment, elements, key, mode);\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nfunction createFiberFromProfiler(pendingProps, mode, lanes, key) {\n  {\n    if (typeof pendingProps.id !== 'string') {\n      error('Profiler must specify an \"id\" as a prop');\n    }\n  }\n\n  var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode); // TODO: The Profiler fiber shouldn't have a type. It has a tag.\n\n  fiber.elementType = REACT_PROFILER_TYPE;\n  fiber.type = REACT_PROFILER_TYPE;\n  fiber.lanes = lanes;\n\n  {\n    fiber.stateNode = {\n      effectDuration: 0,\n      passiveEffectDuration: 0\n    };\n  }\n\n  return fiber;\n}\n\nfunction createFiberFromSuspense(pendingProps, mode, lanes, key) {\n  var fiber = createFiber(SuspenseComponent, pendingProps, key, mode); // TODO: The SuspenseComponent fiber shouldn't have a type. It has a tag.\n  // This needs to be fixed in getComponentName so that it relies on the tag\n  // instead.\n\n  fiber.type = REACT_SUSPENSE_TYPE;\n  fiber.elementType = REACT_SUSPENSE_TYPE;\n  fiber.lanes = lanes;\n  return fiber;\n}\nfunction createFiberFromSuspenseList(pendingProps, mode, lanes, key) {\n  var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);\n\n  {\n    // TODO: The SuspenseListComponent fiber shouldn't have a type. It has a tag.\n    // This needs to be fixed in getComponentName so that it relies on the tag\n    // instead.\n    fiber.type = REACT_SUSPENSE_LIST_TYPE;\n  }\n\n  fiber.elementType = REACT_SUSPENSE_LIST_TYPE;\n  fiber.lanes = lanes;\n  return fiber;\n}\nfunction createFiberFromOffscreen(pendingProps, mode, lanes, key) {\n  var fiber = createFiber(OffscreenComponent, pendingProps, key, mode); // TODO: The OffscreenComponent fiber shouldn't have a type. It has a tag.\n  // This needs to be fixed in getComponentName so that it relies on the tag\n  // instead.\n\n  {\n    fiber.type = REACT_OFFSCREEN_TYPE;\n  }\n\n  fiber.elementType = REACT_OFFSCREEN_TYPE;\n  fiber.lanes = lanes;\n  return fiber;\n}\nfunction createFiberFromLegacyHidden(pendingProps, mode, lanes, key) {\n  var fiber = createFiber(LegacyHiddenComponent, pendingProps, key, mode); // TODO: The LegacyHidden fiber shouldn't have a type. It has a tag.\n  // This needs to be fixed in getComponentName so that it relies on the tag\n  // instead.\n\n  {\n    fiber.type = REACT_LEGACY_HIDDEN_TYPE;\n  }\n\n  fiber.elementType = REACT_LEGACY_HIDDEN_TYPE;\n  fiber.lanes = lanes;\n  return fiber;\n}\nfunction createFiberFromText(content, mode, lanes) {\n  var fiber = createFiber(HostText, content, null, mode);\n  fiber.lanes = lanes;\n  return fiber;\n}\nfunction createFiberFromHostInstanceForDeletion() {\n  var fiber = createFiber(HostComponent, null, null, NoMode); // TODO: These should not need a type.\n\n  fiber.elementType = 'DELETED';\n  fiber.type = 'DELETED';\n  return fiber;\n}\nfunction createFiberFromPortal(portal, mode, lanes) {\n  var pendingProps = portal.children !== null ? portal.children : [];\n  var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);\n  fiber.lanes = lanes;\n  fiber.stateNode = {\n    containerInfo: portal.containerInfo,\n    pendingChildren: null,\n    // Used by persistent updates\n    implementation: portal.implementation\n  };\n  return fiber;\n} // Used for stashing WIP properties to replay failed work in DEV.\n\nfunction assignFiberPropertiesInDEV(target, source) {\n  if (target === null) {\n    // This Fiber's initial properties will always be overwritten.\n    // We only use a Fiber to ensure the same hidden class so DEV isn't slow.\n    target = createFiber(IndeterminateComponent, null, null, NoMode);\n  } // This is intentionally written as a list of all properties.\n  // We tried to use Object.assign() instead but this is called in\n  // the hottest path, and Object.assign() was too slow:\n  // https://github.com/facebook/react/issues/12502\n  // This code is DEV-only so size is not a concern.\n\n\n  target.tag = source.tag;\n  target.key = source.key;\n  target.elementType = source.elementType;\n  target.type = source.type;\n  target.stateNode = source.stateNode;\n  target.return = source.return;\n  target.child = source.child;\n  target.sibling = source.sibling;\n  target.index = source.index;\n  target.ref = source.ref;\n  target.pendingProps = source.pendingProps;\n  target.memoizedProps = source.memoizedProps;\n  target.updateQueue = source.updateQueue;\n  target.memoizedState = source.memoizedState;\n  target.dependencies = source.dependencies;\n  target.mode = source.mode;\n  target.flags = source.flags;\n  target.nextEffect = source.nextEffect;\n  target.firstEffect = source.firstEffect;\n  target.lastEffect = source.lastEffect;\n  target.lanes = source.lanes;\n  target.childLanes = source.childLanes;\n  target.alternate = source.alternate;\n\n  {\n    target.actualDuration = source.actualDuration;\n    target.actualStartTime = source.actualStartTime;\n    target.selfBaseDuration = source.selfBaseDuration;\n    target.treeBaseDuration = source.treeBaseDuration;\n  }\n\n  target._debugID = source._debugID;\n  target._debugSource = source._debugSource;\n  target._debugOwner = source._debugOwner;\n  target._debugNeedsRemount = source._debugNeedsRemount;\n  target._debugHookTypes = source._debugHookTypes;\n  return target;\n}\n\nfunction FiberRootNode(containerInfo, tag, hydrate) {\n  this.tag = tag;\n  this.containerInfo = containerInfo;\n  this.pendingChildren = null;\n  this.current = null;\n  this.pingCache = null;\n  this.finishedWork = null;\n  this.timeoutHandle = noTimeout;\n  this.context = null;\n  this.pendingContext = null;\n  this.hydrate = hydrate;\n  this.callbackNode = null;\n  this.callbackPriority = NoLanePriority;\n  this.eventTimes = createLaneMap(NoLanes);\n  this.expirationTimes = createLaneMap(NoTimestamp);\n  this.pendingLanes = NoLanes;\n  this.suspendedLanes = NoLanes;\n  this.pingedLanes = NoLanes;\n  this.expiredLanes = NoLanes;\n  this.mutableReadLanes = NoLanes;\n  this.finishedLanes = NoLanes;\n  this.entangledLanes = NoLanes;\n  this.entanglements = createLaneMap(NoLanes);\n\n  if (supportsHydration) {\n    this.mutableSourceEagerHydrationData = null;\n  }\n\n  {\n    this.interactionThreadID = tracing.unstable_getThreadID();\n    this.memoizedInteractions = new Set();\n    this.pendingInteractionMap = new Map();\n  }\n\n  {\n    switch (tag) {\n      case BlockingRoot:\n        this._debugRootType = 'createBlockingRoot()';\n        break;\n\n      case ConcurrentRoot:\n        this._debugRootType = 'createRoot()';\n        break;\n\n      case LegacyRoot:\n        this._debugRootType = 'createLegacyRoot()';\n        break;\n    }\n  }\n}\n\nfunction createFiberRoot(containerInfo, tag, hydrate, hydrationCallbacks) {\n  var root = new FiberRootNode(containerInfo, tag, hydrate);\n  // stateNode is any.\n\n\n  var uninitializedFiber = createHostRootFiber(tag);\n  root.current = uninitializedFiber;\n  uninitializedFiber.stateNode = root;\n  initializeUpdateQueue(uninitializedFiber);\n  return root;\n}\n\n// This ensures that the version used for server rendering matches the one\n// that is eventually read during hydration.\n// If they don't match there's a potential tear and a full deopt render is required.\n\nfunction registerMutableSourceForHydration(root, mutableSource) {\n  var getVersion = mutableSource._getVersion;\n  var version = getVersion(mutableSource._source); // TODO Clear this data once all pending hydration work is finished.\n  // Retaining it forever may interfere with GC.\n\n  if (root.mutableSourceEagerHydrationData == null) {\n    root.mutableSourceEagerHydrationData = [mutableSource, version];\n  } else {\n    root.mutableSourceEagerHydrationData.push(mutableSource, version);\n  }\n}\n\nfunction createPortal(children, containerInfo, // TODO: figure out the API for cross-renderer implementation.\nimplementation) {\n  var key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n  return {\n    // This tag allow us to uniquely identify this as a React Portal\n    $$typeof: REACT_PORTAL_TYPE,\n    key: key == null ? null : '' + key,\n    children: children,\n    containerInfo: containerInfo,\n    implementation: implementation\n  };\n}\n\nvar didWarnAboutNestedUpdates;\nvar didWarnAboutFindNodeInStrictMode;\n\n{\n  didWarnAboutNestedUpdates = false;\n  didWarnAboutFindNodeInStrictMode = {};\n}\n\nfunction getContextForSubtree(parentComponent) {\n  if (!parentComponent) {\n    return emptyContextObject;\n  }\n\n  var fiber = get(parentComponent);\n  var parentContext = findCurrentUnmaskedContext(fiber);\n\n  if (fiber.tag === ClassComponent) {\n    var Component = fiber.type;\n\n    if (isContextProvider(Component)) {\n      return processChildContext(fiber, Component, parentContext);\n    }\n  }\n\n  return parentContext;\n}\n\nfunction findHostInstance(component) {\n  var fiber = get(component);\n\n  if (fiber === undefined) {\n    if (typeof component.render === 'function') {\n      {\n        {\n          throw Error( \"Unable to find node on an unmounted component.\" );\n        }\n      }\n    } else {\n      {\n        {\n          throw Error( \"Argument appears to not be a ReactComponent. Keys: \" + Object.keys(component) );\n        }\n      }\n    }\n  }\n\n  var hostFiber = findCurrentHostFiber(fiber);\n\n  if (hostFiber === null) {\n    return null;\n  }\n\n  return hostFiber.stateNode;\n}\n\nfunction findHostInstanceWithWarning(component, methodName) {\n  {\n    var fiber = get(component);\n\n    if (fiber === undefined) {\n      if (typeof component.render === 'function') {\n        {\n          {\n            throw Error( \"Unable to find node on an unmounted component.\" );\n          }\n        }\n      } else {\n        {\n          {\n            throw Error( \"Argument appears to not be a ReactComponent. Keys: \" + Object.keys(component) );\n          }\n        }\n      }\n    }\n\n    var hostFiber = findCurrentHostFiber(fiber);\n\n    if (hostFiber === null) {\n      return null;\n    }\n\n    if (hostFiber.mode & StrictMode) {\n      var componentName = getComponentName(fiber.type) || 'Component';\n\n      if (!didWarnAboutFindNodeInStrictMode[componentName]) {\n        didWarnAboutFindNodeInStrictMode[componentName] = true;\n        var previousFiber = current;\n\n        try {\n          setCurrentFiber(hostFiber);\n\n          if (fiber.mode & StrictMode) {\n            error('%s is deprecated in StrictMode. ' + '%s was passed an instance of %s which is inside StrictMode. ' + 'Instead, add a ref directly to the element you want to reference. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-find-node', methodName, methodName, componentName);\n          } else {\n            error('%s is deprecated in StrictMode. ' + '%s was passed an instance of %s which renders StrictMode children. ' + 'Instead, add a ref directly to the element you want to reference. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-find-node', methodName, methodName, componentName);\n          }\n        } finally {\n          // Ideally this should reset to previous but this shouldn't be called in\n          // render and there's another warning for that anyway.\n          if (previousFiber) {\n            setCurrentFiber(previousFiber);\n          } else {\n            resetCurrentFiber();\n          }\n        }\n      }\n    }\n\n    return hostFiber.stateNode;\n  }\n}\n\nfunction createContainer(containerInfo, tag, hydrate, hydrationCallbacks) {\n  return createFiberRoot(containerInfo, tag, hydrate);\n}\nfunction updateContainer(element, container, parentComponent, callback) {\n  {\n    onScheduleRoot(container, element);\n  }\n\n  var current$1 = container.current;\n  var eventTime = requestEventTime();\n\n  {\n    // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests\n    if ('undefined' !== typeof jest) {\n      warnIfUnmockedScheduler(current$1);\n      warnIfNotScopedWithMatchingAct(current$1);\n    }\n  }\n\n  var lane = requestUpdateLane(current$1);\n\n  var context = getContextForSubtree(parentComponent);\n\n  if (container.context === null) {\n    container.context = context;\n  } else {\n    container.pendingContext = context;\n  }\n\n  {\n    if (isRendering && current !== null && !didWarnAboutNestedUpdates) {\n      didWarnAboutNestedUpdates = true;\n\n      error('Render methods should be a pure function of props and state; ' + 'triggering nested component updates from render is not allowed. ' + 'If necessary, trigger nested updates in componentDidUpdate.\\n\\n' + 'Check the render method of %s.', getComponentName(current.type) || 'Unknown');\n    }\n  }\n\n  var update = createUpdate(eventTime, lane); // Caution: React DevTools currently depends on this property\n  // being called \"element\".\n\n  update.payload = {\n    element: element\n  };\n  callback = callback === undefined ? null : callback;\n\n  if (callback !== null) {\n    {\n      if (typeof callback !== 'function') {\n        error('render(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callback);\n      }\n    }\n\n    update.callback = callback;\n  }\n\n  enqueueUpdate(current$1, update);\n  scheduleUpdateOnFiber(current$1, lane, eventTime);\n  return lane;\n}\nfunction getPublicRootInstance(container) {\n  var containerFiber = container.current;\n\n  if (!containerFiber.child) {\n    return null;\n  }\n\n  switch (containerFiber.child.tag) {\n    case HostComponent:\n      return getPublicInstance(containerFiber.child.stateNode);\n\n    default:\n      return containerFiber.child.stateNode;\n  }\n}\nfunction attemptSynchronousHydration(fiber) {\n  switch (fiber.tag) {\n    case HostRoot:\n      var root = fiber.stateNode;\n\n      if (root.hydrate) {\n        // Flush the first scheduled \"update\".\n        var lanes = getHighestPriorityPendingLanes(root);\n        flushRoot(root, lanes);\n      }\n\n      break;\n\n    case SuspenseComponent:\n      var eventTime = requestEventTime();\n      flushSync(function () {\n        return scheduleUpdateOnFiber(fiber, SyncLane, eventTime);\n      }); // If we're still blocked after this, we need to increase\n      // the priority of any promises resolving within this\n      // boundary so that they next attempt also has higher pri.\n\n      var retryLane = InputDiscreteHydrationLane;\n      markRetryLaneIfNotHydrated(fiber, retryLane);\n      break;\n  }\n}\n\nfunction markRetryLaneImpl(fiber, retryLane) {\n  var suspenseState = fiber.memoizedState;\n\n  if (suspenseState !== null && suspenseState.dehydrated !== null) {\n    suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);\n  }\n} // Increases the priority of thennables when they resolve within this boundary.\n\n\nfunction markRetryLaneIfNotHydrated(fiber, retryLane) {\n  markRetryLaneImpl(fiber, retryLane);\n  var alternate = fiber.alternate;\n\n  if (alternate) {\n    markRetryLaneImpl(alternate, retryLane);\n  }\n}\n\nfunction attemptUserBlockingHydration(fiber) {\n  if (fiber.tag !== SuspenseComponent) {\n    // We ignore HostRoots here because we can't increase\n    // their priority and they should not suspend on I/O,\n    // since you have to wrap anything that might suspend in\n    // Suspense.\n    return;\n  }\n\n  var eventTime = requestEventTime();\n  var lane = InputDiscreteHydrationLane;\n  scheduleUpdateOnFiber(fiber, lane, eventTime);\n  markRetryLaneIfNotHydrated(fiber, lane);\n}\nfunction attemptContinuousHydration(fiber) {\n  if (fiber.tag !== SuspenseComponent) {\n    // We ignore HostRoots here because we can't increase\n    // their priority and they should not suspend on I/O,\n    // since you have to wrap anything that might suspend in\n    // Suspense.\n    return;\n  }\n\n  var eventTime = requestEventTime();\n  var lane = SelectiveHydrationLane;\n  scheduleUpdateOnFiber(fiber, lane, eventTime);\n  markRetryLaneIfNotHydrated(fiber, lane);\n}\nfunction attemptHydrationAtCurrentPriority(fiber) {\n  if (fiber.tag !== SuspenseComponent) {\n    // We ignore HostRoots here because we can't increase\n    // their priority other than synchronously flush it.\n    return;\n  }\n\n  var eventTime = requestEventTime();\n  var lane = requestUpdateLane(fiber);\n  scheduleUpdateOnFiber(fiber, lane, eventTime);\n  markRetryLaneIfNotHydrated(fiber, lane);\n}\nfunction runWithPriority$1(priority, fn) {\n  var previousPriority = getCurrentUpdateLanePriority();\n\n  try {\n    setCurrentUpdateLanePriority(priority);\n    return fn();\n  } finally {\n    setCurrentUpdateLanePriority(previousPriority);\n  }\n}\nfunction findHostInstanceWithNoPortals(fiber) {\n  var hostFiber = findCurrentHostFiberWithNoPortals(fiber);\n\n  if (hostFiber === null) {\n    return null;\n  }\n\n  if (hostFiber.tag === FundamentalComponent) {\n    return hostFiber.stateNode.instance;\n  }\n\n  return hostFiber.stateNode;\n}\n\nvar shouldSuspendImpl = function (fiber) {\n  return false;\n};\n\nfunction shouldSuspend(fiber) {\n  return shouldSuspendImpl(fiber);\n}\nvar overrideHookState = null;\nvar overrideHookStateDeletePath = null;\nvar overrideHookStateRenamePath = null;\nvar overrideProps = null;\nvar overridePropsDeletePath = null;\nvar overridePropsRenamePath = null;\nvar scheduleUpdate = null;\nvar setSuspenseHandler = null;\n\n{\n  var copyWithDeleteImpl = function (obj, path, index) {\n    var key = path[index];\n    var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);\n\n    if (index + 1 === path.length) {\n      if (Array.isArray(updated)) {\n        updated.splice(key, 1);\n      } else {\n        delete updated[key];\n      }\n\n      return updated;\n    } // $FlowFixMe number or string is fine here\n\n\n    updated[key] = copyWithDeleteImpl(obj[key], path, index + 1);\n    return updated;\n  };\n\n  var copyWithDelete = function (obj, path) {\n    return copyWithDeleteImpl(obj, path, 0);\n  };\n\n  var copyWithRenameImpl = function (obj, oldPath, newPath, index) {\n    var oldKey = oldPath[index];\n    var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);\n\n    if (index + 1 === oldPath.length) {\n      var newKey = newPath[index]; // $FlowFixMe number or string is fine here\n\n      updated[newKey] = updated[oldKey];\n\n      if (Array.isArray(updated)) {\n        updated.splice(oldKey, 1);\n      } else {\n        delete updated[oldKey];\n      }\n    } else {\n      // $FlowFixMe number or string is fine here\n      updated[oldKey] = copyWithRenameImpl( // $FlowFixMe number or string is fine here\n      obj[oldKey], oldPath, newPath, index + 1);\n    }\n\n    return updated;\n  };\n\n  var copyWithRename = function (obj, oldPath, newPath) {\n    if (oldPath.length !== newPath.length) {\n      warn('copyWithRename() expects paths of the same length');\n\n      return;\n    } else {\n      for (var i = 0; i < newPath.length - 1; i++) {\n        if (oldPath[i] !== newPath[i]) {\n          warn('copyWithRename() expects paths to be the same except for the deepest key');\n\n          return;\n        }\n      }\n    }\n\n    return copyWithRenameImpl(obj, oldPath, newPath, 0);\n  };\n\n  var copyWithSetImpl = function (obj, path, index, value) {\n    if (index >= path.length) {\n      return value;\n    }\n\n    var key = path[index];\n    var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj); // $FlowFixMe number or string is fine here\n\n    updated[key] = copyWithSetImpl(obj[key], path, index + 1, value);\n    return updated;\n  };\n\n  var copyWithSet = function (obj, path, value) {\n    return copyWithSetImpl(obj, path, 0, value);\n  };\n\n  var findHook = function (fiber, id) {\n    // For now, the \"id\" of stateful hooks is just the stateful hook index.\n    // This may change in the future with e.g. nested hooks.\n    var currentHook = fiber.memoizedState;\n\n    while (currentHook !== null && id > 0) {\n      currentHook = currentHook.next;\n      id--;\n    }\n\n    return currentHook;\n  }; // Support DevTools editable values for useState and useReducer.\n\n\n  overrideHookState = function (fiber, id, path, value) {\n    var hook = findHook(fiber, id);\n\n    if (hook !== null) {\n      var newState = copyWithSet(hook.memoizedState, path, value);\n      hook.memoizedState = newState;\n      hook.baseState = newState; // We aren't actually adding an update to the queue,\n      // because there is no update we can add for useReducer hooks that won't trigger an error.\n      // (There's no appropriate action type for DevTools overrides.)\n      // As a result though, React will see the scheduled update as a noop and bailout.\n      // Shallow cloning props works as a workaround for now to bypass the bailout check.\n\n      fiber.memoizedProps = _assign({}, fiber.memoizedProps);\n      scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);\n    }\n  };\n\n  overrideHookStateDeletePath = function (fiber, id, path) {\n    var hook = findHook(fiber, id);\n\n    if (hook !== null) {\n      var newState = copyWithDelete(hook.memoizedState, path);\n      hook.memoizedState = newState;\n      hook.baseState = newState; // We aren't actually adding an update to the queue,\n      // because there is no update we can add for useReducer hooks that won't trigger an error.\n      // (There's no appropriate action type for DevTools overrides.)\n      // As a result though, React will see the scheduled update as a noop and bailout.\n      // Shallow cloning props works as a workaround for now to bypass the bailout check.\n\n      fiber.memoizedProps = _assign({}, fiber.memoizedProps);\n      scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);\n    }\n  };\n\n  overrideHookStateRenamePath = function (fiber, id, oldPath, newPath) {\n    var hook = findHook(fiber, id);\n\n    if (hook !== null) {\n      var newState = copyWithRename(hook.memoizedState, oldPath, newPath);\n      hook.memoizedState = newState;\n      hook.baseState = newState; // We aren't actually adding an update to the queue,\n      // because there is no update we can add for useReducer hooks that won't trigger an error.\n      // (There's no appropriate action type for DevTools overrides.)\n      // As a result though, React will see the scheduled update as a noop and bailout.\n      // Shallow cloning props works as a workaround for now to bypass the bailout check.\n\n      fiber.memoizedProps = _assign({}, fiber.memoizedProps);\n      scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);\n    }\n  }; // Support DevTools props for function components, forwardRef, memo, host components, etc.\n\n\n  overrideProps = function (fiber, path, value) {\n    fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);\n\n    if (fiber.alternate) {\n      fiber.alternate.pendingProps = fiber.pendingProps;\n    }\n\n    scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);\n  };\n\n  overridePropsDeletePath = function (fiber, path) {\n    fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);\n\n    if (fiber.alternate) {\n      fiber.alternate.pendingProps = fiber.pendingProps;\n    }\n\n    scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);\n  };\n\n  overridePropsRenamePath = function (fiber, oldPath, newPath) {\n    fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);\n\n    if (fiber.alternate) {\n      fiber.alternate.pendingProps = fiber.pendingProps;\n    }\n\n    scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);\n  };\n\n  scheduleUpdate = function (fiber) {\n    scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);\n  };\n\n  setSuspenseHandler = function (newShouldSuspendImpl) {\n    shouldSuspendImpl = newShouldSuspendImpl;\n  };\n}\n\nfunction findHostInstanceByFiber(fiber) {\n  var hostFiber = findCurrentHostFiber(fiber);\n\n  if (hostFiber === null) {\n    return null;\n  }\n\n  return hostFiber.stateNode;\n}\n\nfunction emptyFindFiberByHostInstance(instance) {\n  return null;\n}\n\nfunction getCurrentFiberForDevTools() {\n  return current;\n}\n\nfunction injectIntoDevTools(devToolsConfig) {\n  var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;\n  var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;\n  return injectInternals({\n    bundleType: devToolsConfig.bundleType,\n    version: devToolsConfig.version,\n    rendererPackageName: devToolsConfig.rendererPackageName,\n    rendererConfig: devToolsConfig.rendererConfig,\n    overrideHookState: overrideHookState,\n    overrideHookStateDeletePath: overrideHookStateDeletePath,\n    overrideHookStateRenamePath: overrideHookStateRenamePath,\n    overrideProps: overrideProps,\n    overridePropsDeletePath: overridePropsDeletePath,\n    overridePropsRenamePath: overridePropsRenamePath,\n    setSuspenseHandler: setSuspenseHandler,\n    scheduleUpdate: scheduleUpdate,\n    currentDispatcherRef: ReactCurrentDispatcher,\n    findHostInstanceByFiber: findHostInstanceByFiber,\n    findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,\n    // React Refresh\n    findHostInstancesForRefresh:  findHostInstancesForRefresh ,\n    scheduleRefresh:  scheduleRefresh ,\n    scheduleRoot:  scheduleRoot ,\n    setRefreshHandler:  setRefreshHandler ,\n    // Enables DevTools to append owner stacks to error messages in DEV mode.\n    getCurrentFiber:  getCurrentFiberForDevTools \n  });\n}\n\nexports.IsThisRendererActing = IsThisRendererActing;\nexports.act = act;\nexports.attemptContinuousHydration = attemptContinuousHydration;\nexports.attemptHydrationAtCurrentPriority = attemptHydrationAtCurrentPriority;\nexports.attemptSynchronousHydration = attemptSynchronousHydration;\nexports.attemptUserBlockingHydration = attemptUserBlockingHydration;\nexports.batchedEventUpdates = batchedEventUpdates;\nexports.batchedUpdates = batchedUpdates;\nexports.createComponentSelector = createComponentSelector;\nexports.createContainer = createContainer;\nexports.createHasPsuedoClassSelector = createHasPsuedoClassSelector;\nexports.createPortal = createPortal;\nexports.createRoleSelector = createRoleSelector;\nexports.createTestNameSelector = createTestNameSelector;\nexports.createTextSelector = createTextSelector;\nexports.deferredUpdates = deferredUpdates;\nexports.discreteUpdates = discreteUpdates;\nexports.findAllNodes = findAllNodes;\nexports.findBoundingRects = findBoundingRects;\nexports.findHostInstance = findHostInstance;\nexports.findHostInstanceWithNoPortals = findHostInstanceWithNoPortals;\nexports.findHostInstanceWithWarning = findHostInstanceWithWarning;\nexports.flushControlled = flushControlled;\nexports.flushDiscreteUpdates = flushDiscreteUpdates;\nexports.flushPassiveEffects = flushPassiveEffects;\nexports.flushSync = flushSync;\nexports.focusWithin = focusWithin;\nexports.getCurrentUpdateLanePriority = getCurrentUpdateLanePriority;\nexports.getFindAllNodesFailureDescription = getFindAllNodesFailureDescription;\nexports.getPublicRootInstance = getPublicRootInstance;\nexports.injectIntoDevTools = injectIntoDevTools;\nexports.observeVisibleRects = observeVisibleRects;\nexports.registerMutableSourceForHydration = registerMutableSourceForHydration;\nexports.runWithPriority = runWithPriority$1;\nexports.shouldSuspend = shouldSuspend;\nexports.unbatchedUpdates = unbatchedUpdates;\nexports.updateContainer = updateContainer;\n    return exports;\n  };\n}\n", "'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-reconciler.production.min.js');\n} else {\n  module.exports = require('./cjs/react-reconciler.development.js');\n}\n", "/** @license React v17.0.2\n * react-jsx-runtime.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nif (process.env.NODE_ENV !== \"production\") {\n  (function() {\n'use strict';\n\nvar React = require('react');\nvar _assign = require('object-assign');\n\n// ATTENTION\n// When adding new symbols to this file,\n// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n// The Symbol used to tag the ReactElement-like types. If there is no native Symbol\n// nor polyfill, then a plain number is used for performance.\nvar REACT_ELEMENT_TYPE = 0xeac7;\nvar REACT_PORTAL_TYPE = 0xeaca;\nexports.Fragment = 0xeacb;\nvar REACT_STRICT_MODE_TYPE = 0xeacc;\nvar REACT_PROFILER_TYPE = 0xead2;\nvar REACT_PROVIDER_TYPE = 0xeacd;\nvar REACT_CONTEXT_TYPE = 0xeace;\nvar REACT_FORWARD_REF_TYPE = 0xead0;\nvar REACT_SUSPENSE_TYPE = 0xead1;\nvar REACT_SUSPENSE_LIST_TYPE = 0xead8;\nvar REACT_MEMO_TYPE = 0xead3;\nvar REACT_LAZY_TYPE = 0xead4;\nvar REACT_BLOCK_TYPE = 0xead9;\nvar REACT_SERVER_BLOCK_TYPE = 0xeada;\nvar REACT_FUNDAMENTAL_TYPE = 0xead5;\nvar REACT_SCOPE_TYPE = 0xead7;\nvar REACT_OPAQUE_ID_TYPE = 0xeae0;\nvar REACT_DEBUG_TRACING_MODE_TYPE = 0xeae1;\nvar REACT_OFFSCREEN_TYPE = 0xeae2;\nvar REACT_LEGACY_HIDDEN_TYPE = 0xeae3;\n\nif (typeof Symbol === 'function' && Symbol.for) {\n  var symbolFor = Symbol.for;\n  REACT_ELEMENT_TYPE = symbolFor('react.element');\n  REACT_PORTAL_TYPE = symbolFor('react.portal');\n  exports.Fragment = symbolFor('react.fragment');\n  REACT_STRICT_MODE_TYPE = symbolFor('react.strict_mode');\n  REACT_PROFILER_TYPE = symbolFor('react.profiler');\n  REACT_PROVIDER_TYPE = symbolFor('react.provider');\n  REACT_CONTEXT_TYPE = symbolFor('react.context');\n  REACT_FORWARD_REF_TYPE = symbolFor('react.forward_ref');\n  REACT_SUSPENSE_TYPE = symbolFor('react.suspense');\n  REACT_SUSPENSE_LIST_TYPE = symbolFor('react.suspense_list');\n  REACT_MEMO_TYPE = symbolFor('react.memo');\n  REACT_LAZY_TYPE = symbolFor('react.lazy');\n  REACT_BLOCK_TYPE = symbolFor('react.block');\n  REACT_SERVER_BLOCK_TYPE = symbolFor('react.server.block');\n  REACT_FUNDAMENTAL_TYPE = symbolFor('react.fundamental');\n  REACT_SCOPE_TYPE = symbolFor('react.scope');\n  REACT_OPAQUE_ID_TYPE = symbolFor('react.opaque.id');\n  REACT_DEBUG_TRACING_MODE_TYPE = symbolFor('react.debug_trace_mode');\n  REACT_OFFSCREEN_TYPE = symbolFor('react.offscreen');\n  REACT_LEGACY_HIDDEN_TYPE = symbolFor('react.legacy_hidden');\n}\n\nvar MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;\nvar FAUX_ITERATOR_SYMBOL = '@@iterator';\nfunction getIteratorFn(maybeIterable) {\n  if (maybeIterable === null || typeof maybeIterable !== 'object') {\n    return null;\n  }\n\n  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\n\n  if (typeof maybeIterator === 'function') {\n    return maybeIterator;\n  }\n\n  return null;\n}\n\nvar ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n\nfunction error(format) {\n  {\n    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      args[_key2 - 1] = arguments[_key2];\n    }\n\n    printWarning('error', format, args);\n  }\n}\n\nfunction printWarning(level, format, args) {\n  // When changing this logic, you might want to also\n  // update consoleWithStackDev.www.js as well.\n  {\n    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n    var stack = ReactDebugCurrentFrame.getStackAddendum();\n\n    if (stack !== '') {\n      format += '%s';\n      args = args.concat([stack]);\n    }\n\n    var argsWithFormat = args.map(function (item) {\n      return '' + item;\n    }); // Careful: RN currently depends on this prefix\n\n    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it\n    // breaks IE9: https://github.com/facebook/react/issues/13610\n    // eslint-disable-next-line react-internal/no-production-logging\n\n    Function.prototype.apply.call(console[level], console, argsWithFormat);\n  }\n}\n\n// Filter certain DOM attributes (e.g. src, href) if their values are empty strings.\n\nvar enableScopeAPI = false; // Experimental Create Event Handle API.\n\nfunction isValidElementType(type) {\n  if (typeof type === 'string' || typeof type === 'function') {\n    return true;\n  } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).\n\n\n  if (type === exports.Fragment || type === REACT_PROFILER_TYPE || type === REACT_DEBUG_TRACING_MODE_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI ) {\n    return true;\n  }\n\n  if (typeof type === 'object' && type !== null) {\n    if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_BLOCK_TYPE || type[0] === REACT_SERVER_BLOCK_TYPE) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction getWrappedName(outerType, innerType, wrapperName) {\n  var functionName = innerType.displayName || innerType.name || '';\n  return outerType.displayName || (functionName !== '' ? wrapperName + \"(\" + functionName + \")\" : wrapperName);\n}\n\nfunction getContextName(type) {\n  return type.displayName || 'Context';\n}\n\nfunction getComponentName(type) {\n  if (type == null) {\n    // Host root, text node or just invalid type.\n    return null;\n  }\n\n  {\n    if (typeof type.tag === 'number') {\n      error('Received an unexpected object in getComponentName(). ' + 'This is likely a bug in React. Please file an issue.');\n    }\n  }\n\n  if (typeof type === 'function') {\n    return type.displayName || type.name || null;\n  }\n\n  if (typeof type === 'string') {\n    return type;\n  }\n\n  switch (type) {\n    case exports.Fragment:\n      return 'Fragment';\n\n    case REACT_PORTAL_TYPE:\n      return 'Portal';\n\n    case REACT_PROFILER_TYPE:\n      return 'Profiler';\n\n    case REACT_STRICT_MODE_TYPE:\n      return 'StrictMode';\n\n    case REACT_SUSPENSE_TYPE:\n      return 'Suspense';\n\n    case REACT_SUSPENSE_LIST_TYPE:\n      return 'SuspenseList';\n  }\n\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_CONTEXT_TYPE:\n        var context = type;\n        return getContextName(context) + '.Consumer';\n\n      case REACT_PROVIDER_TYPE:\n        var provider = type;\n        return getContextName(provider._context) + '.Provider';\n\n      case REACT_FORWARD_REF_TYPE:\n        return getWrappedName(type, type.render, 'ForwardRef');\n\n      case REACT_MEMO_TYPE:\n        return getComponentName(type.type);\n\n      case REACT_BLOCK_TYPE:\n        return getComponentName(type._render);\n\n      case REACT_LAZY_TYPE:\n        {\n          var lazyComponent = type;\n          var payload = lazyComponent._payload;\n          var init = lazyComponent._init;\n\n          try {\n            return getComponentName(init(payload));\n          } catch (x) {\n            return null;\n          }\n        }\n    }\n  }\n\n  return null;\n}\n\n// Helpers to patch console.logs to avoid logging during side-effect free\n// replaying on render function. This currently only patches the object\n// lazily which won't cover if the log function was extracted eagerly.\n// We could also eagerly patch the method.\nvar disabledDepth = 0;\nvar prevLog;\nvar prevInfo;\nvar prevWarn;\nvar prevError;\nvar prevGroup;\nvar prevGroupCollapsed;\nvar prevGroupEnd;\n\nfunction disabledLog() {}\n\ndisabledLog.__reactDisabledLog = true;\nfunction disableLogs() {\n  {\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      prevLog = console.log;\n      prevInfo = console.info;\n      prevWarn = console.warn;\n      prevError = console.error;\n      prevGroup = console.group;\n      prevGroupCollapsed = console.groupCollapsed;\n      prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099\n\n      var props = {\n        configurable: true,\n        enumerable: true,\n        value: disabledLog,\n        writable: true\n      }; // $FlowFixMe Flow thinks console is immutable.\n\n      Object.defineProperties(console, {\n        info: props,\n        log: props,\n        warn: props,\n        error: props,\n        group: props,\n        groupCollapsed: props,\n        groupEnd: props\n      });\n      /* eslint-enable react-internal/no-production-logging */\n    }\n\n    disabledDepth++;\n  }\n}\nfunction reenableLogs() {\n  {\n    disabledDepth--;\n\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      var props = {\n        configurable: true,\n        enumerable: true,\n        writable: true\n      }; // $FlowFixMe Flow thinks console is immutable.\n\n      Object.defineProperties(console, {\n        log: _assign({}, props, {\n          value: prevLog\n        }),\n        info: _assign({}, props, {\n          value: prevInfo\n        }),\n        warn: _assign({}, props, {\n          value: prevWarn\n        }),\n        error: _assign({}, props, {\n          value: prevError\n        }),\n        group: _assign({}, props, {\n          value: prevGroup\n        }),\n        groupCollapsed: _assign({}, props, {\n          value: prevGroupCollapsed\n        }),\n        groupEnd: _assign({}, props, {\n          value: prevGroupEnd\n        })\n      });\n      /* eslint-enable react-internal/no-production-logging */\n    }\n\n    if (disabledDepth < 0) {\n      error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');\n    }\n  }\n}\n\nvar ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;\nvar prefix;\nfunction describeBuiltInComponentFrame(name, source, ownerFn) {\n  {\n    if (prefix === undefined) {\n      // Extract the VM specific prefix used by each line.\n      try {\n        throw Error();\n      } catch (x) {\n        var match = x.stack.trim().match(/\\n( *(at )?)/);\n        prefix = match && match[1] || '';\n      }\n    } // We use the prefix to ensure our stacks line up with native stack frames.\n\n\n    return '\\n' + prefix + name;\n  }\n}\nvar reentry = false;\nvar componentFrameCache;\n\n{\n  var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;\n  componentFrameCache = new PossiblyWeakMap();\n}\n\nfunction describeNativeComponentFrame(fn, construct) {\n  // If something asked for a stack inside a fake render, it should get ignored.\n  if (!fn || reentry) {\n    return '';\n  }\n\n  {\n    var frame = componentFrameCache.get(fn);\n\n    if (frame !== undefined) {\n      return frame;\n    }\n  }\n\n  var control;\n  reentry = true;\n  var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.\n\n  Error.prepareStackTrace = undefined;\n  var previousDispatcher;\n\n  {\n    previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function\n    // for warnings.\n\n    ReactCurrentDispatcher.current = null;\n    disableLogs();\n  }\n\n  try {\n    // This should throw.\n    if (construct) {\n      // Something should be setting the props in the constructor.\n      var Fake = function () {\n        throw Error();\n      }; // $FlowFixMe\n\n\n      Object.defineProperty(Fake.prototype, 'props', {\n        set: function () {\n          // We use a throwing setter instead of frozen or non-writable props\n          // because that won't throw in a non-strict mode function.\n          throw Error();\n        }\n      });\n\n      if (typeof Reflect === 'object' && Reflect.construct) {\n        // We construct a different control for this case to include any extra\n        // frames added by the construct call.\n        try {\n          Reflect.construct(Fake, []);\n        } catch (x) {\n          control = x;\n        }\n\n        Reflect.construct(fn, [], Fake);\n      } else {\n        try {\n          Fake.call();\n        } catch (x) {\n          control = x;\n        }\n\n        fn.call(Fake.prototype);\n      }\n    } else {\n      try {\n        throw Error();\n      } catch (x) {\n        control = x;\n      }\n\n      fn();\n    }\n  } catch (sample) {\n    // This is inlined manually because closure doesn't do it for us.\n    if (sample && control && typeof sample.stack === 'string') {\n      // This extracts the first frame from the sample that isn't also in the control.\n      // Skipping one frame that we assume is the frame that calls the two.\n      var sampleLines = sample.stack.split('\\n');\n      var controlLines = control.stack.split('\\n');\n      var s = sampleLines.length - 1;\n      var c = controlLines.length - 1;\n\n      while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {\n        // We expect at least one stack frame to be shared.\n        // Typically this will be the root most one. However, stack frames may be\n        // cut off due to maximum stack limits. In this case, one maybe cut off\n        // earlier than the other. We assume that the sample is longer or the same\n        // and there for cut off earlier. So we should find the root most frame in\n        // the sample somewhere in the control.\n        c--;\n      }\n\n      for (; s >= 1 && c >= 0; s--, c--) {\n        // Next we find the first one that isn't the same which should be the\n        // frame that called our sample function and the control.\n        if (sampleLines[s] !== controlLines[c]) {\n          // In V8, the first line is describing the message but other VMs don't.\n          // If we're about to return the first line, and the control is also on the same\n          // line, that's a pretty good indicator that our sample threw at same line as\n          // the control. I.e. before we entered the sample frame. So we ignore this result.\n          // This can happen if you passed a class to function component, or non-function.\n          if (s !== 1 || c !== 1) {\n            do {\n              s--;\n              c--; // We may still have similar intermediate frames from the construct call.\n              // The next one that isn't the same should be our match though.\n\n              if (c < 0 || sampleLines[s] !== controlLines[c]) {\n                // V8 adds a \"new\" prefix for native classes. Let's remove it to make it prettier.\n                var _frame = '\\n' + sampleLines[s].replace(' at new ', ' at ');\n\n                {\n                  if (typeof fn === 'function') {\n                    componentFrameCache.set(fn, _frame);\n                  }\n                } // Return the line we found.\n\n\n                return _frame;\n              }\n            } while (s >= 1 && c >= 0);\n          }\n\n          break;\n        }\n      }\n    }\n  } finally {\n    reentry = false;\n\n    {\n      ReactCurrentDispatcher.current = previousDispatcher;\n      reenableLogs();\n    }\n\n    Error.prepareStackTrace = previousPrepareStackTrace;\n  } // Fallback to just using the name if we couldn't make it throw.\n\n\n  var name = fn ? fn.displayName || fn.name : '';\n  var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';\n\n  {\n    if (typeof fn === 'function') {\n      componentFrameCache.set(fn, syntheticFrame);\n    }\n  }\n\n  return syntheticFrame;\n}\nfunction describeFunctionComponentFrame(fn, source, ownerFn) {\n  {\n    return describeNativeComponentFrame(fn, false);\n  }\n}\n\nfunction shouldConstruct(Component) {\n  var prototype = Component.prototype;\n  return !!(prototype && prototype.isReactComponent);\n}\n\nfunction describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {\n\n  if (type == null) {\n    return '';\n  }\n\n  if (typeof type === 'function') {\n    {\n      return describeNativeComponentFrame(type, shouldConstruct(type));\n    }\n  }\n\n  if (typeof type === 'string') {\n    return describeBuiltInComponentFrame(type);\n  }\n\n  switch (type) {\n    case REACT_SUSPENSE_TYPE:\n      return describeBuiltInComponentFrame('Suspense');\n\n    case REACT_SUSPENSE_LIST_TYPE:\n      return describeBuiltInComponentFrame('SuspenseList');\n  }\n\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_FORWARD_REF_TYPE:\n        return describeFunctionComponentFrame(type.render);\n\n      case REACT_MEMO_TYPE:\n        // Memo may contain any component type so we recursively resolve it.\n        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);\n\n      case REACT_BLOCK_TYPE:\n        return describeFunctionComponentFrame(type._render);\n\n      case REACT_LAZY_TYPE:\n        {\n          var lazyComponent = type;\n          var payload = lazyComponent._payload;\n          var init = lazyComponent._init;\n\n          try {\n            // Lazy may contain any component type so we recursively resolve it.\n            return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);\n          } catch (x) {}\n        }\n    }\n  }\n\n  return '';\n}\n\nvar loggedTypeFailures = {};\nvar ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n\nfunction setCurrentlyValidatingElement(element) {\n  {\n    if (element) {\n      var owner = element._owner;\n      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n      ReactDebugCurrentFrame.setExtraStackFrame(stack);\n    } else {\n      ReactDebugCurrentFrame.setExtraStackFrame(null);\n    }\n  }\n}\n\nfunction checkPropTypes(typeSpecs, values, location, componentName, element) {\n  {\n    // $FlowFixMe This is okay but Flow doesn't know it.\n    var has = Function.call.bind(Object.prototype.hasOwnProperty);\n\n    for (var typeSpecName in typeSpecs) {\n      if (has(typeSpecs, typeSpecName)) {\n        var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to\n        // fail the render phase where it didn't fail before. So we log it.\n        // After these have been cleaned up, we'll let them throw.\n\n        try {\n          // This is intentionally an invariant that gets caught. It's the same\n          // behavior as without this statement except with a better message.\n          if (typeof typeSpecs[typeSpecName] !== 'function') {\n            var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');\n            err.name = 'Invariant Violation';\n            throw err;\n          }\n\n          error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');\n        } catch (ex) {\n          error$1 = ex;\n        }\n\n        if (error$1 && !(error$1 instanceof Error)) {\n          setCurrentlyValidatingElement(element);\n\n          error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);\n\n          setCurrentlyValidatingElement(null);\n        }\n\n        if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {\n          // Only monitor this failure once because there tends to be a lot of the\n          // same error.\n          loggedTypeFailures[error$1.message] = true;\n          setCurrentlyValidatingElement(element);\n\n          error('Failed %s type: %s', location, error$1.message);\n\n          setCurrentlyValidatingElement(null);\n        }\n      }\n    }\n  }\n}\n\nvar ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar RESERVED_PROPS = {\n  key: true,\n  ref: true,\n  __self: true,\n  __source: true\n};\nvar specialPropKeyWarningShown;\nvar specialPropRefWarningShown;\nvar didWarnAboutStringRefs;\n\n{\n  didWarnAboutStringRefs = {};\n}\n\nfunction hasValidRef(config) {\n  {\n    if (hasOwnProperty.call(config, 'ref')) {\n      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;\n\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n\n  return config.ref !== undefined;\n}\n\nfunction hasValidKey(config) {\n  {\n    if (hasOwnProperty.call(config, 'key')) {\n      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;\n\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n\n  return config.key !== undefined;\n}\n\nfunction warnIfStringRefCannotBeAutoConverted(config, self) {\n  {\n    if (typeof config.ref === 'string' && ReactCurrentOwner.current && self && ReactCurrentOwner.current.stateNode !== self) {\n      var componentName = getComponentName(ReactCurrentOwner.current.type);\n\n      if (!didWarnAboutStringRefs[componentName]) {\n        error('Component \"%s\" contains the string ref \"%s\". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', getComponentName(ReactCurrentOwner.current.type), config.ref);\n\n        didWarnAboutStringRefs[componentName] = true;\n      }\n    }\n  }\n}\n\nfunction defineKeyPropWarningGetter(props, displayName) {\n  {\n    var warnAboutAccessingKey = function () {\n      if (!specialPropKeyWarningShown) {\n        specialPropKeyWarningShown = true;\n\n        error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);\n      }\n    };\n\n    warnAboutAccessingKey.isReactWarning = true;\n    Object.defineProperty(props, 'key', {\n      get: warnAboutAccessingKey,\n      configurable: true\n    });\n  }\n}\n\nfunction defineRefPropWarningGetter(props, displayName) {\n  {\n    var warnAboutAccessingRef = function () {\n      if (!specialPropRefWarningShown) {\n        specialPropRefWarningShown = true;\n\n        error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);\n      }\n    };\n\n    warnAboutAccessingRef.isReactWarning = true;\n    Object.defineProperty(props, 'ref', {\n      get: warnAboutAccessingRef,\n      configurable: true\n    });\n  }\n}\n/**\n * Factory method to create a new React element. This no longer adheres to\n * the class pattern, so do not use new to call it. Also, instanceof check\n * will not work. Instead test $$typeof field against Symbol.for('react.element') to check\n * if something is a React Element.\n *\n * @param {*} type\n * @param {*} props\n * @param {*} key\n * @param {string|object} ref\n * @param {*} owner\n * @param {*} self A *temporary* helper to detect places where `this` is\n * different from the `owner` when React.createElement is called, so that we\n * can warn. We want to get rid of owner and replace string `ref`s with arrow\n * functions, and as long as `this` and owner are the same, there will be no\n * change in behavior.\n * @param {*} source An annotation object (added by a transpiler or otherwise)\n * indicating filename, line number, and/or other information.\n * @internal\n */\n\n\nvar ReactElement = function (type, key, ref, self, source, owner, props) {\n  var element = {\n    // This tag allows us to uniquely identify this as a React Element\n    $$typeof: REACT_ELEMENT_TYPE,\n    // Built-in properties that belong on the element\n    type: type,\n    key: key,\n    ref: ref,\n    props: props,\n    // Record the component responsible for creating this element.\n    _owner: owner\n  };\n\n  {\n    // The validation flag is currently mutative. We put it on\n    // an external backing store so that we can freeze the whole object.\n    // This can be replaced with a WeakMap once they are implemented in\n    // commonly used development environments.\n    element._store = {}; // To make comparing ReactElements easier for testing purposes, we make\n    // the validation flag non-enumerable (where possible, which should\n    // include every environment we run tests in), so the test framework\n    // ignores it.\n\n    Object.defineProperty(element._store, 'validated', {\n      configurable: false,\n      enumerable: false,\n      writable: true,\n      value: false\n    }); // self and source are DEV only properties.\n\n    Object.defineProperty(element, '_self', {\n      configurable: false,\n      enumerable: false,\n      writable: false,\n      value: self\n    }); // Two elements created in two different places should be considered\n    // equal for testing purposes and therefore we hide it from enumeration.\n\n    Object.defineProperty(element, '_source', {\n      configurable: false,\n      enumerable: false,\n      writable: false,\n      value: source\n    });\n\n    if (Object.freeze) {\n      Object.freeze(element.props);\n      Object.freeze(element);\n    }\n  }\n\n  return element;\n};\n/**\n * https://github.com/reactjs/rfcs/pull/107\n * @param {*} type\n * @param {object} props\n * @param {string} key\n */\n\nfunction jsxDEV(type, config, maybeKey, source, self) {\n  {\n    var propName; // Reserved names are extracted\n\n    var props = {};\n    var key = null;\n    var ref = null; // Currently, key can be spread in as a prop. This causes a potential\n    // issue if key is also explicitly declared (ie. <div {...props} key=\"Hi\" />\n    // or <div key=\"Hi\" {...props} /> ). We want to deprecate key spread,\n    // but as an intermediary step, we will use jsxDEV for everything except\n    // <div {...props} key=\"Hi\" />, because we aren't currently able to tell if\n    // key is explicitly declared to be undefined or not.\n\n    if (maybeKey !== undefined) {\n      key = '' + maybeKey;\n    }\n\n    if (hasValidKey(config)) {\n      key = '' + config.key;\n    }\n\n    if (hasValidRef(config)) {\n      ref = config.ref;\n      warnIfStringRefCannotBeAutoConverted(config, self);\n    } // Remaining properties are added to a new props object\n\n\n    for (propName in config) {\n      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\n        props[propName] = config[propName];\n      }\n    } // Resolve default props\n\n\n    if (type && type.defaultProps) {\n      var defaultProps = type.defaultProps;\n\n      for (propName in defaultProps) {\n        if (props[propName] === undefined) {\n          props[propName] = defaultProps[propName];\n        }\n      }\n    }\n\n    if (key || ref) {\n      var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;\n\n      if (key) {\n        defineKeyPropWarningGetter(props, displayName);\n      }\n\n      if (ref) {\n        defineRefPropWarningGetter(props, displayName);\n      }\n    }\n\n    return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);\n  }\n}\n\nvar ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;\nvar ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;\n\nfunction setCurrentlyValidatingElement$1(element) {\n  {\n    if (element) {\n      var owner = element._owner;\n      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n      ReactDebugCurrentFrame$1.setExtraStackFrame(stack);\n    } else {\n      ReactDebugCurrentFrame$1.setExtraStackFrame(null);\n    }\n  }\n}\n\nvar propTypesMisspellWarningShown;\n\n{\n  propTypesMisspellWarningShown = false;\n}\n/**\n * Verifies the object is a ReactElement.\n * See https://reactjs.org/docs/react-api.html#isvalidelement\n * @param {?object} object\n * @return {boolean} True if `object` is a ReactElement.\n * @final\n */\n\nfunction isValidElement(object) {\n  {\n    return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\n  }\n}\n\nfunction getDeclarationErrorAddendum() {\n  {\n    if (ReactCurrentOwner$1.current) {\n      var name = getComponentName(ReactCurrentOwner$1.current.type);\n\n      if (name) {\n        return '\\n\\nCheck the render method of `' + name + '`.';\n      }\n    }\n\n    return '';\n  }\n}\n\nfunction getSourceInfoErrorAddendum(source) {\n  {\n    if (source !== undefined) {\n      var fileName = source.fileName.replace(/^.*[\\\\\\/]/, '');\n      var lineNumber = source.lineNumber;\n      return '\\n\\nCheck your code at ' + fileName + ':' + lineNumber + '.';\n    }\n\n    return '';\n  }\n}\n/**\n * Warn if there's no key explicitly set on dynamic arrays of children or\n * object keys are not valid. This allows us to keep track of children between\n * updates.\n */\n\n\nvar ownerHasKeyUseWarning = {};\n\nfunction getCurrentComponentErrorInfo(parentType) {\n  {\n    var info = getDeclarationErrorAddendum();\n\n    if (!info) {\n      var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;\n\n      if (parentName) {\n        info = \"\\n\\nCheck the top-level render call using <\" + parentName + \">.\";\n      }\n    }\n\n    return info;\n  }\n}\n/**\n * Warn if the element doesn't have an explicit key assigned to it.\n * This element is in an array. The array could grow and shrink or be\n * reordered. All children that haven't already been validated are required to\n * have a \"key\" property assigned to it. Error statuses are cached so a warning\n * will only be shown once.\n *\n * @internal\n * @param {ReactElement} element Element that requires a key.\n * @param {*} parentType element's parent's type.\n */\n\n\nfunction validateExplicitKey(element, parentType) {\n  {\n    if (!element._store || element._store.validated || element.key != null) {\n      return;\n    }\n\n    element._store.validated = true;\n    var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);\n\n    if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {\n      return;\n    }\n\n    ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a\n    // property, it may be the creator of the child that's responsible for\n    // assigning it a key.\n\n    var childOwner = '';\n\n    if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) {\n      // Give the component that originally created this child.\n      childOwner = \" It was passed a child from \" + getComponentName(element._owner.type) + \".\";\n    }\n\n    setCurrentlyValidatingElement$1(element);\n\n    error('Each child in a list should have a unique \"key\" prop.' + '%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);\n\n    setCurrentlyValidatingElement$1(null);\n  }\n}\n/**\n * Ensure that every element either is passed in a static location, in an\n * array with an explicit keys property defined, or in an object literal\n * with valid key property.\n *\n * @internal\n * @param {ReactNode} node Statically passed child of any type.\n * @param {*} parentType node's parent's type.\n */\n\n\nfunction validateChildKeys(node, parentType) {\n  {\n    if (typeof node !== 'object') {\n      return;\n    }\n\n    if (Array.isArray(node)) {\n      for (var i = 0; i < node.length; i++) {\n        var child = node[i];\n\n        if (isValidElement(child)) {\n          validateExplicitKey(child, parentType);\n        }\n      }\n    } else if (isValidElement(node)) {\n      // This element was passed in a valid location.\n      if (node._store) {\n        node._store.validated = true;\n      }\n    } else if (node) {\n      var iteratorFn = getIteratorFn(node);\n\n      if (typeof iteratorFn === 'function') {\n        // Entry iterators used to provide implicit keys,\n        // but now we print a separate warning for them later.\n        if (iteratorFn !== node.entries) {\n          var iterator = iteratorFn.call(node);\n          var step;\n\n          while (!(step = iterator.next()).done) {\n            if (isValidElement(step.value)) {\n              validateExplicitKey(step.value, parentType);\n            }\n          }\n        }\n      }\n    }\n  }\n}\n/**\n * Given an element, validate that its props follow the propTypes definition,\n * provided by the type.\n *\n * @param {ReactElement} element\n */\n\n\nfunction validatePropTypes(element) {\n  {\n    var type = element.type;\n\n    if (type === null || type === undefined || typeof type === 'string') {\n      return;\n    }\n\n    var propTypes;\n\n    if (typeof type === 'function') {\n      propTypes = type.propTypes;\n    } else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.\n    // Inner props are checked in the reconciler.\n    type.$$typeof === REACT_MEMO_TYPE)) {\n      propTypes = type.propTypes;\n    } else {\n      return;\n    }\n\n    if (propTypes) {\n      // Intentionally inside to avoid triggering lazy initializers:\n      var name = getComponentName(type);\n      checkPropTypes(propTypes, element.props, 'prop', name, element);\n    } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {\n      propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:\n\n      var _name = getComponentName(type);\n\n      error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', _name || 'Unknown');\n    }\n\n    if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) {\n      error('getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');\n    }\n  }\n}\n/**\n * Given a fragment, validate that it can only be provided with fragment props\n * @param {ReactElement} fragment\n */\n\n\nfunction validateFragmentProps(fragment) {\n  {\n    var keys = Object.keys(fragment.props);\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n\n      if (key !== 'children' && key !== 'key') {\n        setCurrentlyValidatingElement$1(fragment);\n\n        error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);\n\n        setCurrentlyValidatingElement$1(null);\n        break;\n      }\n    }\n\n    if (fragment.ref !== null) {\n      setCurrentlyValidatingElement$1(fragment);\n\n      error('Invalid attribute `ref` supplied to `React.Fragment`.');\n\n      setCurrentlyValidatingElement$1(null);\n    }\n  }\n}\n\nfunction jsxWithValidation(type, props, key, isStaticChildren, source, self) {\n  {\n    var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to\n    // succeed and there will likely be errors in render.\n\n    if (!validType) {\n      var info = '';\n\n      if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {\n        info += ' You likely forgot to export your component from the file ' + \"it's defined in, or you might have mixed up default and named imports.\";\n      }\n\n      var sourceInfo = getSourceInfoErrorAddendum(source);\n\n      if (sourceInfo) {\n        info += sourceInfo;\n      } else {\n        info += getDeclarationErrorAddendum();\n      }\n\n      var typeString;\n\n      if (type === null) {\n        typeString = 'null';\n      } else if (Array.isArray(type)) {\n        typeString = 'array';\n      } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {\n        typeString = \"<\" + (getComponentName(type.type) || 'Unknown') + \" />\";\n        info = ' Did you accidentally export a JSX literal instead of a component?';\n      } else {\n        typeString = typeof type;\n      }\n\n      error('React.jsx: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);\n    }\n\n    var element = jsxDEV(type, props, key, source, self); // The result can be nullish if a mock or a custom function is used.\n    // TODO: Drop this when these are no longer allowed as the type argument.\n\n    if (element == null) {\n      return element;\n    } // Skip key warning if the type isn't valid since our key validation logic\n    // doesn't expect a non-string/function type and can throw confusing errors.\n    // We don't want exception behavior to differ between dev and prod.\n    // (Rendering will throw with a helpful message and as soon as the type is\n    // fixed, the key warnings will appear.)\n\n\n    if (validType) {\n      var children = props.children;\n\n      if (children !== undefined) {\n        if (isStaticChildren) {\n          if (Array.isArray(children)) {\n            for (var i = 0; i < children.length; i++) {\n              validateChildKeys(children[i], type);\n            }\n\n            if (Object.freeze) {\n              Object.freeze(children);\n            }\n          } else {\n            error('React.jsx: Static children should always be an array. ' + 'You are likely explicitly calling React.jsxs or React.jsxDEV. ' + 'Use the Babel transform instead.');\n          }\n        } else {\n          validateChildKeys(children, type);\n        }\n      }\n    }\n\n    if (type === exports.Fragment) {\n      validateFragmentProps(element);\n    } else {\n      validatePropTypes(element);\n    }\n\n    return element;\n  }\n} // These two functions exist to still get child warnings in dev\n// even with the prod transform. This means that jsxDEV is purely\n// opt-in behavior for better messages but that we won't stop\n// giving you warnings if you use production apis.\n\nfunction jsxWithValidationStatic(type, props, key) {\n  {\n    return jsxWithValidation(type, props, key, true);\n  }\n}\nfunction jsxWithValidationDynamic(type, props, key) {\n  {\n    return jsxWithValidation(type, props, key, false);\n  }\n}\n\nvar jsx =  jsxWithValidationDynamic ; // we may want to special case jsxs internally to take advantage of static children.\n// for now we can ship identical prod functions\n\nvar jsxs =  jsxWithValidationStatic ;\n\nexports.jsx = jsx;\nexports.jsxs = jsxs;\n  })();\n}\n", "'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-jsx-runtime.production.min.js');\n} else {\n  module.exports = require('./cjs/react-jsx-runtime.development.js');\n}\n", "/** @license React v17.0.2\n * react-jsx-runtime.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nif (process.env.NODE_ENV !== \"production\") {\n  (function() {\n'use strict';\n\nvar React = require('react');\nvar _assign = require('object-assign');\n\n// ATTENTION\n// When adding new symbols to this file,\n// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n// The Symbol used to tag the ReactElement-like types. If there is no native Symbol\n// nor polyfill, then a plain number is used for performance.\nvar REACT_ELEMENT_TYPE = 0xeac7;\nvar REACT_PORTAL_TYPE = 0xeaca;\nexports.Fragment = 0xeacb;\nvar REACT_STRICT_MODE_TYPE = 0xeacc;\nvar REACT_PROFILER_TYPE = 0xead2;\nvar REACT_PROVIDER_TYPE = 0xeacd;\nvar REACT_CONTEXT_TYPE = 0xeace;\nvar REACT_FORWARD_REF_TYPE = 0xead0;\nvar REACT_SUSPENSE_TYPE = 0xead1;\nvar REACT_SUSPENSE_LIST_TYPE = 0xead8;\nvar REACT_MEMO_TYPE = 0xead3;\nvar REACT_LAZY_TYPE = 0xead4;\nvar REACT_BLOCK_TYPE = 0xead9;\nvar REACT_SERVER_BLOCK_TYPE = 0xeada;\nvar REACT_FUNDAMENTAL_TYPE = 0xead5;\nvar REACT_SCOPE_TYPE = 0xead7;\nvar REACT_OPAQUE_ID_TYPE = 0xeae0;\nvar REACT_DEBUG_TRACING_MODE_TYPE = 0xeae1;\nvar REACT_OFFSCREEN_TYPE = 0xeae2;\nvar REACT_LEGACY_HIDDEN_TYPE = 0xeae3;\n\nif (typeof Symbol === 'function' && Symbol.for) {\n  var symbolFor = Symbol.for;\n  REACT_ELEMENT_TYPE = symbolFor('react.element');\n  REACT_PORTAL_TYPE = symbolFor('react.portal');\n  exports.Fragment = symbolFor('react.fragment');\n  REACT_STRICT_MODE_TYPE = symbolFor('react.strict_mode');\n  REACT_PROFILER_TYPE = symbolFor('react.profiler');\n  REACT_PROVIDER_TYPE = symbolFor('react.provider');\n  REACT_CONTEXT_TYPE = symbolFor('react.context');\n  REACT_FORWARD_REF_TYPE = symbolFor('react.forward_ref');\n  REACT_SUSPENSE_TYPE = symbolFor('react.suspense');\n  REACT_SUSPENSE_LIST_TYPE = symbolFor('react.suspense_list');\n  REACT_MEMO_TYPE = symbolFor('react.memo');\n  REACT_LAZY_TYPE = symbolFor('react.lazy');\n  REACT_BLOCK_TYPE = symbolFor('react.block');\n  REACT_SERVER_BLOCK_TYPE = symbolFor('react.server.block');\n  REACT_FUNDAMENTAL_TYPE = symbolFor('react.fundamental');\n  REACT_SCOPE_TYPE = symbolFor('react.scope');\n  REACT_OPAQUE_ID_TYPE = symbolFor('react.opaque.id');\n  REACT_DEBUG_TRACING_MODE_TYPE = symbolFor('react.debug_trace_mode');\n  REACT_OFFSCREEN_TYPE = symbolFor('react.offscreen');\n  REACT_LEGACY_HIDDEN_TYPE = symbolFor('react.legacy_hidden');\n}\n\nvar MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;\nvar FAUX_ITERATOR_SYMBOL = '@@iterator';\nfunction getIteratorFn(maybeIterable) {\n  if (maybeIterable === null || typeof maybeIterable !== 'object') {\n    return null;\n  }\n\n  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\n\n  if (typeof maybeIterator === 'function') {\n    return maybeIterator;\n  }\n\n  return null;\n}\n\nvar ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n\nfunction error(format) {\n  {\n    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      args[_key2 - 1] = arguments[_key2];\n    }\n\n    printWarning('error', format, args);\n  }\n}\n\nfunction printWarning(level, format, args) {\n  // When changing this logic, you might want to also\n  // update consoleWithStackDev.www.js as well.\n  {\n    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n    var stack = ReactDebugCurrentFrame.getStackAddendum();\n\n    if (stack !== '') {\n      format += '%s';\n      args = args.concat([stack]);\n    }\n\n    var argsWithFormat = args.map(function (item) {\n      return '' + item;\n    }); // Careful: RN currently depends on this prefix\n\n    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it\n    // breaks IE9: https://github.com/facebook/react/issues/13610\n    // eslint-disable-next-line react-internal/no-production-logging\n\n    Function.prototype.apply.call(console[level], console, argsWithFormat);\n  }\n}\n\n// Filter certain DOM attributes (e.g. src, href) if their values are empty strings.\n\nvar enableScopeAPI = false; // Experimental Create Event Handle API.\n\nfunction isValidElementType(type) {\n  if (typeof type === 'string' || typeof type === 'function') {\n    return true;\n  } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).\n\n\n  if (type === exports.Fragment || type === REACT_PROFILER_TYPE || type === REACT_DEBUG_TRACING_MODE_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI ) {\n    return true;\n  }\n\n  if (typeof type === 'object' && type !== null) {\n    if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_BLOCK_TYPE || type[0] === REACT_SERVER_BLOCK_TYPE) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction getWrappedName(outerType, innerType, wrapperName) {\n  var functionName = innerType.displayName || innerType.name || '';\n  return outerType.displayName || (functionName !== '' ? wrapperName + \"(\" + functionName + \")\" : wrapperName);\n}\n\nfunction getContextName(type) {\n  return type.displayName || 'Context';\n}\n\nfunction getComponentName(type) {\n  if (type == null) {\n    // Host root, text node or just invalid type.\n    return null;\n  }\n\n  {\n    if (typeof type.tag === 'number') {\n      error('Received an unexpected object in getComponentName(). ' + 'This is likely a bug in React. Please file an issue.');\n    }\n  }\n\n  if (typeof type === 'function') {\n    return type.displayName || type.name || null;\n  }\n\n  if (typeof type === 'string') {\n    return type;\n  }\n\n  switch (type) {\n    case exports.Fragment:\n      return 'Fragment';\n\n    case REACT_PORTAL_TYPE:\n      return 'Portal';\n\n    case REACT_PROFILER_TYPE:\n      return 'Profiler';\n\n    case REACT_STRICT_MODE_TYPE:\n      return 'StrictMode';\n\n    case REACT_SUSPENSE_TYPE:\n      return 'Suspense';\n\n    case REACT_SUSPENSE_LIST_TYPE:\n      return 'SuspenseList';\n  }\n\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_CONTEXT_TYPE:\n        var context = type;\n        return getContextName(context) + '.Consumer';\n\n      case REACT_PROVIDER_TYPE:\n        var provider = type;\n        return getContextName(provider._context) + '.Provider';\n\n      case REACT_FORWARD_REF_TYPE:\n        return getWrappedName(type, type.render, 'ForwardRef');\n\n      case REACT_MEMO_TYPE:\n        return getComponentName(type.type);\n\n      case REACT_BLOCK_TYPE:\n        return getComponentName(type._render);\n\n      case REACT_LAZY_TYPE:\n        {\n          var lazyComponent = type;\n          var payload = lazyComponent._payload;\n          var init = lazyComponent._init;\n\n          try {\n            return getComponentName(init(payload));\n          } catch (x) {\n            return null;\n          }\n        }\n    }\n  }\n\n  return null;\n}\n\n// Helpers to patch console.logs to avoid logging during side-effect free\n// replaying on render function. This currently only patches the object\n// lazily which won't cover if the log function was extracted eagerly.\n// We could also eagerly patch the method.\nvar disabledDepth = 0;\nvar prevLog;\nvar prevInfo;\nvar prevWarn;\nvar prevError;\nvar prevGroup;\nvar prevGroupCollapsed;\nvar prevGroupEnd;\n\nfunction disabledLog() {}\n\ndisabledLog.__reactDisabledLog = true;\nfunction disableLogs() {\n  {\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      prevLog = console.log;\n      prevInfo = console.info;\n      prevWarn = console.warn;\n      prevError = console.error;\n      prevGroup = console.group;\n      prevGroupCollapsed = console.groupCollapsed;\n      prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099\n\n      var props = {\n        configurable: true,\n        enumerable: true,\n        value: disabledLog,\n        writable: true\n      }; // $FlowFixMe Flow thinks console is immutable.\n\n      Object.defineProperties(console, {\n        info: props,\n        log: props,\n        warn: props,\n        error: props,\n        group: props,\n        groupCollapsed: props,\n        groupEnd: props\n      });\n      /* eslint-enable react-internal/no-production-logging */\n    }\n\n    disabledDepth++;\n  }\n}\nfunction reenableLogs() {\n  {\n    disabledDepth--;\n\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      var props = {\n        configurable: true,\n        enumerable: true,\n        writable: true\n      }; // $FlowFixMe Flow thinks console is immutable.\n\n      Object.defineProperties(console, {\n        log: _assign({}, props, {\n          value: prevLog\n        }),\n        info: _assign({}, props, {\n          value: prevInfo\n        }),\n        warn: _assign({}, props, {\n          value: prevWarn\n        }),\n        error: _assign({}, props, {\n          value: prevError\n        }),\n        group: _assign({}, props, {\n          value: prevGroup\n        }),\n        groupCollapsed: _assign({}, props, {\n          value: prevGroupCollapsed\n        }),\n        groupEnd: _assign({}, props, {\n          value: prevGroupEnd\n        })\n      });\n      /* eslint-enable react-internal/no-production-logging */\n    }\n\n    if (disabledDepth < 0) {\n      error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');\n    }\n  }\n}\n\nvar ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;\nvar prefix;\nfunction describeBuiltInComponentFrame(name, source, ownerFn) {\n  {\n    if (prefix === undefined) {\n      // Extract the VM specific prefix used by each line.\n      try {\n        throw Error();\n      } catch (x) {\n        var match = x.stack.trim().match(/\\n( *(at )?)/);\n        prefix = match && match[1] || '';\n      }\n    } // We use the prefix to ensure our stacks line up with native stack frames.\n\n\n    return '\\n' + prefix + name;\n  }\n}\nvar reentry = false;\nvar componentFrameCache;\n\n{\n  var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;\n  componentFrameCache = new PossiblyWeakMap();\n}\n\nfunction describeNativeComponentFrame(fn, construct) {\n  // If something asked for a stack inside a fake render, it should get ignored.\n  if (!fn || reentry) {\n    return '';\n  }\n\n  {\n    var frame = componentFrameCache.get(fn);\n\n    if (frame !== undefined) {\n      return frame;\n    }\n  }\n\n  var control;\n  reentry = true;\n  var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.\n\n  Error.prepareStackTrace = undefined;\n  var previousDispatcher;\n\n  {\n    previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function\n    // for warnings.\n\n    ReactCurrentDispatcher.current = null;\n    disableLogs();\n  }\n\n  try {\n    // This should throw.\n    if (construct) {\n      // Something should be setting the props in the constructor.\n      var Fake = function () {\n        throw Error();\n      }; // $FlowFixMe\n\n\n      Object.defineProperty(Fake.prototype, 'props', {\n        set: function () {\n          // We use a throwing setter instead of frozen or non-writable props\n          // because that won't throw in a non-strict mode function.\n          throw Error();\n        }\n      });\n\n      if (typeof Reflect === 'object' && Reflect.construct) {\n        // We construct a different control for this case to include any extra\n        // frames added by the construct call.\n        try {\n          Reflect.construct(Fake, []);\n        } catch (x) {\n          control = x;\n        }\n\n        Reflect.construct(fn, [], Fake);\n      } else {\n        try {\n          Fake.call();\n        } catch (x) {\n          control = x;\n        }\n\n        fn.call(Fake.prototype);\n      }\n    } else {\n      try {\n        throw Error();\n      } catch (x) {\n        control = x;\n      }\n\n      fn();\n    }\n  } catch (sample) {\n    // This is inlined manually because closure doesn't do it for us.\n    if (sample && control && typeof sample.stack === 'string') {\n      // This extracts the first frame from the sample that isn't also in the control.\n      // Skipping one frame that we assume is the frame that calls the two.\n      var sampleLines = sample.stack.split('\\n');\n      var controlLines = control.stack.split('\\n');\n      var s = sampleLines.length - 1;\n      var c = controlLines.length - 1;\n\n      while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {\n        // We expect at least one stack frame to be shared.\n        // Typically this will be the root most one. However, stack frames may be\n        // cut off due to maximum stack limits. In this case, one maybe cut off\n        // earlier than the other. We assume that the sample is longer or the same\n        // and there for cut off earlier. So we should find the root most frame in\n        // the sample somewhere in the control.\n        c--;\n      }\n\n      for (; s >= 1 && c >= 0; s--, c--) {\n        // Next we find the first one that isn't the same which should be the\n        // frame that called our sample function and the control.\n        if (sampleLines[s] !== controlLines[c]) {\n          // In V8, the first line is describing the message but other VMs don't.\n          // If we're about to return the first line, and the control is also on the same\n          // line, that's a pretty good indicator that our sample threw at same line as\n          // the control. I.e. before we entered the sample frame. So we ignore this result.\n          // This can happen if you passed a class to function component, or non-function.\n          if (s !== 1 || c !== 1) {\n            do {\n              s--;\n              c--; // We may still have similar intermediate frames from the construct call.\n              // The next one that isn't the same should be our match though.\n\n              if (c < 0 || sampleLines[s] !== controlLines[c]) {\n                // V8 adds a \"new\" prefix for native classes. Let's remove it to make it prettier.\n                var _frame = '\\n' + sampleLines[s].replace(' at new ', ' at ');\n\n                {\n                  if (typeof fn === 'function') {\n                    componentFrameCache.set(fn, _frame);\n                  }\n                } // Return the line we found.\n\n\n                return _frame;\n              }\n            } while (s >= 1 && c >= 0);\n          }\n\n          break;\n        }\n      }\n    }\n  } finally {\n    reentry = false;\n\n    {\n      ReactCurrentDispatcher.current = previousDispatcher;\n      reenableLogs();\n    }\n\n    Error.prepareStackTrace = previousPrepareStackTrace;\n  } // Fallback to just using the name if we couldn't make it throw.\n\n\n  var name = fn ? fn.displayName || fn.name : '';\n  var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';\n\n  {\n    if (typeof fn === 'function') {\n      componentFrameCache.set(fn, syntheticFrame);\n    }\n  }\n\n  return syntheticFrame;\n}\nfunction describeFunctionComponentFrame(fn, source, ownerFn) {\n  {\n    return describeNativeComponentFrame(fn, false);\n  }\n}\n\nfunction shouldConstruct(Component) {\n  var prototype = Component.prototype;\n  return !!(prototype && prototype.isReactComponent);\n}\n\nfunction describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {\n\n  if (type == null) {\n    return '';\n  }\n\n  if (typeof type === 'function') {\n    {\n      return describeNativeComponentFrame(type, shouldConstruct(type));\n    }\n  }\n\n  if (typeof type === 'string') {\n    return describeBuiltInComponentFrame(type);\n  }\n\n  switch (type) {\n    case REACT_SUSPENSE_TYPE:\n      return describeBuiltInComponentFrame('Suspense');\n\n    case REACT_SUSPENSE_LIST_TYPE:\n      return describeBuiltInComponentFrame('SuspenseList');\n  }\n\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_FORWARD_REF_TYPE:\n        return describeFunctionComponentFrame(type.render);\n\n      case REACT_MEMO_TYPE:\n        // Memo may contain any component type so we recursively resolve it.\n        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);\n\n      case REACT_BLOCK_TYPE:\n        return describeFunctionComponentFrame(type._render);\n\n      case REACT_LAZY_TYPE:\n        {\n          var lazyComponent = type;\n          var payload = lazyComponent._payload;\n          var init = lazyComponent._init;\n\n          try {\n            // Lazy may contain any component type so we recursively resolve it.\n            return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);\n          } catch (x) {}\n        }\n    }\n  }\n\n  return '';\n}\n\nvar loggedTypeFailures = {};\nvar ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n\nfunction setCurrentlyValidatingElement(element) {\n  {\n    if (element) {\n      var owner = element._owner;\n      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n      ReactDebugCurrentFrame.setExtraStackFrame(stack);\n    } else {\n      ReactDebugCurrentFrame.setExtraStackFrame(null);\n    }\n  }\n}\n\nfunction checkPropTypes(typeSpecs, values, location, componentName, element) {\n  {\n    // $FlowFixMe This is okay but Flow doesn't know it.\n    var has = Function.call.bind(Object.prototype.hasOwnProperty);\n\n    for (var typeSpecName in typeSpecs) {\n      if (has(typeSpecs, typeSpecName)) {\n        var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to\n        // fail the render phase where it didn't fail before. So we log it.\n        // After these have been cleaned up, we'll let them throw.\n\n        try {\n          // This is intentionally an invariant that gets caught. It's the same\n          // behavior as without this statement except with a better message.\n          if (typeof typeSpecs[typeSpecName] !== 'function') {\n            var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');\n            err.name = 'Invariant Violation';\n            throw err;\n          }\n\n          error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');\n        } catch (ex) {\n          error$1 = ex;\n        }\n\n        if (error$1 && !(error$1 instanceof Error)) {\n          setCurrentlyValidatingElement(element);\n\n          error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);\n\n          setCurrentlyValidatingElement(null);\n        }\n\n        if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {\n          // Only monitor this failure once because there tends to be a lot of the\n          // same error.\n          loggedTypeFailures[error$1.message] = true;\n          setCurrentlyValidatingElement(element);\n\n          error('Failed %s type: %s', location, error$1.message);\n\n          setCurrentlyValidatingElement(null);\n        }\n      }\n    }\n  }\n}\n\nvar ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar RESERVED_PROPS = {\n  key: true,\n  ref: true,\n  __self: true,\n  __source: true\n};\nvar specialPropKeyWarningShown;\nvar specialPropRefWarningShown;\nvar didWarnAboutStringRefs;\n\n{\n  didWarnAboutStringRefs = {};\n}\n\nfunction hasValidRef(config) {\n  {\n    if (hasOwnProperty.call(config, 'ref')) {\n      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;\n\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n\n  return config.ref !== undefined;\n}\n\nfunction hasValidKey(config) {\n  {\n    if (hasOwnProperty.call(config, 'key')) {\n      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;\n\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n\n  return config.key !== undefined;\n}\n\nfunction warnIfStringRefCannotBeAutoConverted(config, self) {\n  {\n    if (typeof config.ref === 'string' && ReactCurrentOwner.current && self && ReactCurrentOwner.current.stateNode !== self) {\n      var componentName = getComponentName(ReactCurrentOwner.current.type);\n\n      if (!didWarnAboutStringRefs[componentName]) {\n        error('Component \"%s\" contains the string ref \"%s\". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', getComponentName(ReactCurrentOwner.current.type), config.ref);\n\n        didWarnAboutStringRefs[componentName] = true;\n      }\n    }\n  }\n}\n\nfunction defineKeyPropWarningGetter(props, displayName) {\n  {\n    var warnAboutAccessingKey = function () {\n      if (!specialPropKeyWarningShown) {\n        specialPropKeyWarningShown = true;\n\n        error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);\n      }\n    };\n\n    warnAboutAccessingKey.isReactWarning = true;\n    Object.defineProperty(props, 'key', {\n      get: warnAboutAccessingKey,\n      configurable: true\n    });\n  }\n}\n\nfunction defineRefPropWarningGetter(props, displayName) {\n  {\n    var warnAboutAccessingRef = function () {\n      if (!specialPropRefWarningShown) {\n        specialPropRefWarningShown = true;\n\n        error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);\n      }\n    };\n\n    warnAboutAccessingRef.isReactWarning = true;\n    Object.defineProperty(props, 'ref', {\n      get: warnAboutAccessingRef,\n      configurable: true\n    });\n  }\n}\n/**\n * Factory method to create a new React element. This no longer adheres to\n * the class pattern, so do not use new to call it. Also, instanceof check\n * will not work. Instead test $$typeof field against Symbol.for('react.element') to check\n * if something is a React Element.\n *\n * @param {*} type\n * @param {*} props\n * @param {*} key\n * @param {string|object} ref\n * @param {*} owner\n * @param {*} self A *temporary* helper to detect places where `this` is\n * different from the `owner` when React.createElement is called, so that we\n * can warn. We want to get rid of owner and replace string `ref`s with arrow\n * functions, and as long as `this` and owner are the same, there will be no\n * change in behavior.\n * @param {*} source An annotation object (added by a transpiler or otherwise)\n * indicating filename, line number, and/or other information.\n * @internal\n */\n\n\nvar ReactElement = function (type, key, ref, self, source, owner, props) {\n  var element = {\n    // This tag allows us to uniquely identify this as a React Element\n    $$typeof: REACT_ELEMENT_TYPE,\n    // Built-in properties that belong on the element\n    type: type,\n    key: key,\n    ref: ref,\n    props: props,\n    // Record the component responsible for creating this element.\n    _owner: owner\n  };\n\n  {\n    // The validation flag is currently mutative. We put it on\n    // an external backing store so that we can freeze the whole object.\n    // This can be replaced with a WeakMap once they are implemented in\n    // commonly used development environments.\n    element._store = {}; // To make comparing ReactElements easier for testing purposes, we make\n    // the validation flag non-enumerable (where possible, which should\n    // include every environment we run tests in), so the test framework\n    // ignores it.\n\n    Object.defineProperty(element._store, 'validated', {\n      configurable: false,\n      enumerable: false,\n      writable: true,\n      value: false\n    }); // self and source are DEV only properties.\n\n    Object.defineProperty(element, '_self', {\n      configurable: false,\n      enumerable: false,\n      writable: false,\n      value: self\n    }); // Two elements created in two different places should be considered\n    // equal for testing purposes and therefore we hide it from enumeration.\n\n    Object.defineProperty(element, '_source', {\n      configurable: false,\n      enumerable: false,\n      writable: false,\n      value: source\n    });\n\n    if (Object.freeze) {\n      Object.freeze(element.props);\n      Object.freeze(element);\n    }\n  }\n\n  return element;\n};\n/**\n * https://github.com/reactjs/rfcs/pull/107\n * @param {*} type\n * @param {object} props\n * @param {string} key\n */\n\nfunction jsxDEV(type, config, maybeKey, source, self) {\n  {\n    var propName; // Reserved names are extracted\n\n    var props = {};\n    var key = null;\n    var ref = null; // Currently, key can be spread in as a prop. This causes a potential\n    // issue if key is also explicitly declared (ie. <div {...props} key=\"Hi\" />\n    // or <div key=\"Hi\" {...props} /> ). We want to deprecate key spread,\n    // but as an intermediary step, we will use jsxDEV for everything except\n    // <div {...props} key=\"Hi\" />, because we aren't currently able to tell if\n    // key is explicitly declared to be undefined or not.\n\n    if (maybeKey !== undefined) {\n      key = '' + maybeKey;\n    }\n\n    if (hasValidKey(config)) {\n      key = '' + config.key;\n    }\n\n    if (hasValidRef(config)) {\n      ref = config.ref;\n      warnIfStringRefCannotBeAutoConverted(config, self);\n    } // Remaining properties are added to a new props object\n\n\n    for (propName in config) {\n      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\n        props[propName] = config[propName];\n      }\n    } // Resolve default props\n\n\n    if (type && type.defaultProps) {\n      var defaultProps = type.defaultProps;\n\n      for (propName in defaultProps) {\n        if (props[propName] === undefined) {\n          props[propName] = defaultProps[propName];\n        }\n      }\n    }\n\n    if (key || ref) {\n      var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;\n\n      if (key) {\n        defineKeyPropWarningGetter(props, displayName);\n      }\n\n      if (ref) {\n        defineRefPropWarningGetter(props, displayName);\n      }\n    }\n\n    return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);\n  }\n}\n\nvar ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;\nvar ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;\n\nfunction setCurrentlyValidatingElement$1(element) {\n  {\n    if (element) {\n      var owner = element._owner;\n      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n      ReactDebugCurrentFrame$1.setExtraStackFrame(stack);\n    } else {\n      ReactDebugCurrentFrame$1.setExtraStackFrame(null);\n    }\n  }\n}\n\nvar propTypesMisspellWarningShown;\n\n{\n  propTypesMisspellWarningShown = false;\n}\n/**\n * Verifies the object is a ReactElement.\n * See https://reactjs.org/docs/react-api.html#isvalidelement\n * @param {?object} object\n * @return {boolean} True if `object` is a ReactElement.\n * @final\n */\n\nfunction isValidElement(object) {\n  {\n    return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\n  }\n}\n\nfunction getDeclarationErrorAddendum() {\n  {\n    if (ReactCurrentOwner$1.current) {\n      var name = getComponentName(ReactCurrentOwner$1.current.type);\n\n      if (name) {\n        return '\\n\\nCheck the render method of `' + name + '`.';\n      }\n    }\n\n    return '';\n  }\n}\n\nfunction getSourceInfoErrorAddendum(source) {\n  {\n    if (source !== undefined) {\n      var fileName = source.fileName.replace(/^.*[\\\\\\/]/, '');\n      var lineNumber = source.lineNumber;\n      return '\\n\\nCheck your code at ' + fileName + ':' + lineNumber + '.';\n    }\n\n    return '';\n  }\n}\n/**\n * Warn if there's no key explicitly set on dynamic arrays of children or\n * object keys are not valid. This allows us to keep track of children between\n * updates.\n */\n\n\nvar ownerHasKeyUseWarning = {};\n\nfunction getCurrentComponentErrorInfo(parentType) {\n  {\n    var info = getDeclarationErrorAddendum();\n\n    if (!info) {\n      var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;\n\n      if (parentName) {\n        info = \"\\n\\nCheck the top-level render call using <\" + parentName + \">.\";\n      }\n    }\n\n    return info;\n  }\n}\n/**\n * Warn if the element doesn't have an explicit key assigned to it.\n * This element is in an array. The array could grow and shrink or be\n * reordered. All children that haven't already been validated are required to\n * have a \"key\" property assigned to it. Error statuses are cached so a warning\n * will only be shown once.\n *\n * @internal\n * @param {ReactElement} element Element that requires a key.\n * @param {*} parentType element's parent's type.\n */\n\n\nfunction validateExplicitKey(element, parentType) {\n  {\n    if (!element._store || element._store.validated || element.key != null) {\n      return;\n    }\n\n    element._store.validated = true;\n    var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);\n\n    if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {\n      return;\n    }\n\n    ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a\n    // property, it may be the creator of the child that's responsible for\n    // assigning it a key.\n\n    var childOwner = '';\n\n    if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) {\n      // Give the component that originally created this child.\n      childOwner = \" It was passed a child from \" + getComponentName(element._owner.type) + \".\";\n    }\n\n    setCurrentlyValidatingElement$1(element);\n\n    error('Each child in a list should have a unique \"key\" prop.' + '%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);\n\n    setCurrentlyValidatingElement$1(null);\n  }\n}\n/**\n * Ensure that every element either is passed in a static location, in an\n * array with an explicit keys property defined, or in an object literal\n * with valid key property.\n *\n * @internal\n * @param {ReactNode} node Statically passed child of any type.\n * @param {*} parentType node's parent's type.\n */\n\n\nfunction validateChildKeys(node, parentType) {\n  {\n    if (typeof node !== 'object') {\n      return;\n    }\n\n    if (Array.isArray(node)) {\n      for (var i = 0; i < node.length; i++) {\n        var child = node[i];\n\n        if (isValidElement(child)) {\n          validateExplicitKey(child, parentType);\n        }\n      }\n    } else if (isValidElement(node)) {\n      // This element was passed in a valid location.\n      if (node._store) {\n        node._store.validated = true;\n      }\n    } else if (node) {\n      var iteratorFn = getIteratorFn(node);\n\n      if (typeof iteratorFn === 'function') {\n        // Entry iterators used to provide implicit keys,\n        // but now we print a separate warning for them later.\n        if (iteratorFn !== node.entries) {\n          var iterator = iteratorFn.call(node);\n          var step;\n\n          while (!(step = iterator.next()).done) {\n            if (isValidElement(step.value)) {\n              validateExplicitKey(step.value, parentType);\n            }\n          }\n        }\n      }\n    }\n  }\n}\n/**\n * Given an element, validate that its props follow the propTypes definition,\n * provided by the type.\n *\n * @param {ReactElement} element\n */\n\n\nfunction validatePropTypes(element) {\n  {\n    var type = element.type;\n\n    if (type === null || type === undefined || typeof type === 'string') {\n      return;\n    }\n\n    var propTypes;\n\n    if (typeof type === 'function') {\n      propTypes = type.propTypes;\n    } else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.\n    // Inner props are checked in the reconciler.\n    type.$$typeof === REACT_MEMO_TYPE)) {\n      propTypes = type.propTypes;\n    } else {\n      return;\n    }\n\n    if (propTypes) {\n      // Intentionally inside to avoid triggering lazy initializers:\n      var name = getComponentName(type);\n      checkPropTypes(propTypes, element.props, 'prop', name, element);\n    } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {\n      propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:\n\n      var _name = getComponentName(type);\n\n      error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', _name || 'Unknown');\n    }\n\n    if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) {\n      error('getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');\n    }\n  }\n}\n/**\n * Given a fragment, validate that it can only be provided with fragment props\n * @param {ReactElement} fragment\n */\n\n\nfunction validateFragmentProps(fragment) {\n  {\n    var keys = Object.keys(fragment.props);\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n\n      if (key !== 'children' && key !== 'key') {\n        setCurrentlyValidatingElement$1(fragment);\n\n        error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);\n\n        setCurrentlyValidatingElement$1(null);\n        break;\n      }\n    }\n\n    if (fragment.ref !== null) {\n      setCurrentlyValidatingElement$1(fragment);\n\n      error('Invalid attribute `ref` supplied to `React.Fragment`.');\n\n      setCurrentlyValidatingElement$1(null);\n    }\n  }\n}\n\nfunction jsxWithValidation(type, props, key, isStaticChildren, source, self) {\n  {\n    var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to\n    // succeed and there will likely be errors in render.\n\n    if (!validType) {\n      var info = '';\n\n      if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {\n        info += ' You likely forgot to export your component from the file ' + \"it's defined in, or you might have mixed up default and named imports.\";\n      }\n\n      var sourceInfo = getSourceInfoErrorAddendum(source);\n\n      if (sourceInfo) {\n        info += sourceInfo;\n      } else {\n        info += getDeclarationErrorAddendum();\n      }\n\n      var typeString;\n\n      if (type === null) {\n        typeString = 'null';\n      } else if (Array.isArray(type)) {\n        typeString = 'array';\n      } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {\n        typeString = \"<\" + (getComponentName(type.type) || 'Unknown') + \" />\";\n        info = ' Did you accidentally export a JSX literal instead of a component?';\n      } else {\n        typeString = typeof type;\n      }\n\n      error('React.jsx: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);\n    }\n\n    var element = jsxDEV(type, props, key, source, self); // The result can be nullish if a mock or a custom function is used.\n    // TODO: Drop this when these are no longer allowed as the type argument.\n\n    if (element == null) {\n      return element;\n    } // Skip key warning if the type isn't valid since our key validation logic\n    // doesn't expect a non-string/function type and can throw confusing errors.\n    // We don't want exception behavior to differ between dev and prod.\n    // (Rendering will throw with a helpful message and as soon as the type is\n    // fixed, the key warnings will appear.)\n\n\n    if (validType) {\n      var children = props.children;\n\n      if (children !== undefined) {\n        if (isStaticChildren) {\n          if (Array.isArray(children)) {\n            for (var i = 0; i < children.length; i++) {\n              validateChildKeys(children[i], type);\n            }\n\n            if (Object.freeze) {\n              Object.freeze(children);\n            }\n          } else {\n            error('React.jsx: Static children should always be an array. ' + 'You are likely explicitly calling React.jsxs or React.jsxDEV. ' + 'Use the Babel transform instead.');\n          }\n        } else {\n          validateChildKeys(children, type);\n        }\n      }\n    }\n\n    if (type === exports.Fragment) {\n      validateFragmentProps(element);\n    } else {\n      validatePropTypes(element);\n    }\n\n    return element;\n  }\n} // These two functions exist to still get child warnings in dev\n// even with the prod transform. This means that jsxDEV is purely\n// opt-in behavior for better messages but that we won't stop\n// giving you warnings if you use production apis.\n\nfunction jsxWithValidationStatic(type, props, key) {\n  {\n    return jsxWithValidation(type, props, key, true);\n  }\n}\nfunction jsxWithValidationDynamic(type, props, key) {\n  {\n    return jsxWithValidation(type, props, key, false);\n  }\n}\n\nvar jsx =  jsxWithValidationDynamic ; // we may want to special case jsxs internally to take advantage of static children.\n// for now we can ship identical prod functions\n\nvar jsxs =  jsxWithValidationStatic ;\n\nexports.jsx = jsx;\nexports.jsxs = jsxs;\n  })();\n}\n", "'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-jsx-runtime.production.min.js');\n} else {\n  module.exports = require('./cjs/react-jsx-runtime.development.js');\n}\n", "(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n    typeof define === 'function' && define.amd ? define(['exports'], factory) :\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.ZXing = {}));\n}(this, (function (exports) { 'use strict';\n\n    function isNullOrUndefined(obj) {\n        return obj === null || obj === undefined;\n    }\n\n    /*\n     * Copyright 2008 ZXing authors\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n    /* global Reflect, Promise */\n\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n\n    function __extends(d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    }\n\n    function fixProto(target, prototype) {\n        var setPrototypeOf = Object.setPrototypeOf;\n        setPrototypeOf ? setPrototypeOf(target, prototype) : (target.__proto__ = prototype);\n    }\n\n    function fixStack(target, fn) {\n        if (fn === void 0) {\n            fn = target.constructor;\n        }\n        var captureStackTrace = Error.captureStackTrace;\n        captureStackTrace && captureStackTrace(target, fn);\n    }\n\n    var CustomError = (function (_super) {\n        __extends(CustomError, _super);\n        function CustomError(message) {\n            var _newTarget = this.constructor;\n            var _this = _super.call(this, message) || this;\n            Object.defineProperty(_this, 'name', {\n                value: _newTarget.name,\n                enumerable: false\n            });\n            fixProto(_this, _newTarget.prototype);\n            fixStack(_this);\n            return _this;\n        }\n        \n        return CustomError;\n    })(Error);\n\n    /**\n     * Custom Error class of type Exception.\n     */\n    class Exception extends CustomError {\n        /**\n         * Allows Exception to be constructed directly\n         * with some message and prototype definition.\n         */\n        constructor(message = undefined) {\n            super(message);\n            this.message = message;\n        }\n        getKind() {\n            const ex = this.constructor;\n            return ex.kind;\n        }\n    }\n    /**\n     * It's typed as string so it can be extended and overriden.\n     */\n    Exception.kind = 'Exception';\n\n    /**\n     * Custom Error class of type Exception.\n     */\n    class ArgumentException extends Exception {\n    }\n    ArgumentException.kind = 'ArgumentException';\n\n    /**\n     * Custom Error class of type Exception.\n     */\n    class IllegalArgumentException extends Exception {\n    }\n    IllegalArgumentException.kind = 'IllegalArgumentException';\n\n    /*\n     * Copyright 2009 ZXing authors\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n    class BinaryBitmap {\n        constructor(binarizer) {\n            this.binarizer = binarizer;\n            if (binarizer === null) {\n                throw new IllegalArgumentException('Binarizer must be non-null.');\n            }\n        }\n        /**\n         * @return The width of the bitmap.\n         */\n        getWidth() {\n            return this.binarizer.getWidth();\n        }\n        /**\n         * @return The height of the bitmap.\n         */\n        getHeight() {\n            return this.binarizer.getHeight();\n        }\n        /**\n         * Converts one row of luminance data to 1 bit data. May actually do the conversion, or return\n         * cached data. Callers should assume this method is expensive and call it as seldom as possible.\n         * This method is intended for decoding 1D barcodes and may choose to apply sharpening.\n         *\n         * @param y The row to fetch, which must be in [0, bitmap height)\n         * @param row An optional preallocated array. If null or too small, it will be ignored.\n         *            If used, the Binarizer will call BitArray.clear(). Always use the returned object.\n         * @return The array of bits for this row (true means black).\n         * @throws NotFoundException if row can't be binarized\n         */\n        getBlackRow(y /*int*/, row) {\n            return this.binarizer.getBlackRow(y, row);\n        }\n        /**\n         * Converts a 2D array of luminance data to 1 bit. As above, assume this method is expensive\n         * and do not call it repeatedly. This method is intended for decoding 2D barcodes and may or\n         * may not apply sharpening. Therefore, a row from this matrix may not be identical to one\n         * fetched using getBlackRow(), so don't mix and match between them.\n         *\n         * @return The 2D array of bits for the image (true means black).\n         * @throws NotFoundException if image can't be binarized to make a matrix\n         */\n        getBlackMatrix() {\n            // The matrix is created on demand the first time it is requested, then cached. There are two\n            // reasons for this:\n            // 1. This work will never be done if the caller only installs 1D Reader objects, or if a\n            //    1D Reader finds a barcode before the 2D Readers run.\n            // 2. This work will only be done once even if the caller installs multiple 2D Readers.\n            if (this.matrix === null || this.matrix === undefined) {\n                this.matrix = this.binarizer.getBlackMatrix();\n            }\n            return this.matrix;\n        }\n        /**\n         * @return Whether this bitmap can be cropped.\n         */\n        isCropSupported() {\n            return this.binarizer.getLuminanceSource().isCropSupported();\n        }\n        /**\n         * Returns a new object with cropped image data. Implementations may keep a reference to the\n         * original data rather than a copy. Only callable if isCropSupported() is true.\n         *\n         * @param left The left coordinate, which must be in [0,getWidth())\n         * @param top The top coordinate, which must be in [0,getHeight())\n         * @param width The width of the rectangle to crop.\n         * @param height The height of the rectangle to crop.\n         * @return A cropped version of this object.\n         */\n        crop(left /*int*/, top /*int*/, width /*int*/, height /*int*/) {\n            const newSource = this.binarizer.getLuminanceSource().crop(left, top, width, height);\n            return new BinaryBitmap(this.binarizer.createBinarizer(newSource));\n        }\n        /**\n         * @return Whether this bitmap supports counter-clockwise rotation.\n         */\n        isRotateSupported() {\n            return this.binarizer.getLuminanceSource().isRotateSupported();\n        }\n        /**\n         * Returns a new object with rotated image data by 90 degrees counterclockwise.\n         * Only callable if {@link #isRotateSupported()} is true.\n         *\n         * @return A rotated version of this object.\n         */\n        rotateCounterClockwise() {\n            const newSource = this.binarizer.getLuminanceSource().rotateCounterClockwise();\n            return new BinaryBitmap(this.binarizer.createBinarizer(newSource));\n        }\n        /**\n         * Returns a new object with rotated image data by 45 degrees counterclockwise.\n         * Only callable if {@link #isRotateSupported()} is true.\n         *\n         * @return A rotated version of this object.\n         */\n        rotateCounterClockwise45() {\n            const newSource = this.binarizer.getLuminanceSource().rotateCounterClockwise45();\n            return new BinaryBitmap(this.binarizer.createBinarizer(newSource));\n        }\n        /*@Override*/\n        toString() {\n            try {\n                return this.getBlackMatrix().toString();\n            }\n            catch (e /*: NotFoundException*/) {\n                return '';\n            }\n        }\n    }\n\n    /**\n     * Custom Error class of type Exception.\n     */\n    class ChecksumException extends Exception {\n        static getChecksumInstance() {\n            return new ChecksumException();\n        }\n    }\n    ChecksumException.kind = 'ChecksumException';\n\n    /*\n     * Copyright 2009 ZXing authors\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n    /**\n     * This class hierarchy provides a set of methods to convert luminance data to 1 bit data.\n     * It allows the algorithm to vary polymorphically, for example allowing a very expensive\n     * thresholding technique for servers and a fast one for mobile. It also permits the implementation\n     * to vary, e.g. a JNI version for Android and a Java fallback version for other platforms.\n     *\n     * @author dswitkin@google.com (Daniel Switkin)\n     */\n    class Binarizer {\n        constructor(source) {\n            this.source = source;\n        }\n        getLuminanceSource() {\n            return this.source;\n        }\n        getWidth() {\n            return this.source.getWidth();\n        }\n        getHeight() {\n            return this.source.getHeight();\n        }\n    }\n\n    class System {\n        // public static void arraycopy(Object src, int srcPos, Object dest, int destPos, int length)\n        /**\n         * Makes a copy of a array.\n         */\n        static arraycopy(src, srcPos, dest, destPos, length) {\n            // TODO: better use split or set?\n            while (length--) {\n                dest[destPos++] = src[srcPos++];\n            }\n        }\n        /**\n         * Returns the current time in milliseconds.\n         */\n        static currentTimeMillis() {\n            return Date.now();\n        }\n    }\n\n    /**\n     * Custom Error class of type Exception.\n     */\n    class IndexOutOfBoundsException extends Exception {\n    }\n    IndexOutOfBoundsException.kind = 'IndexOutOfBoundsException';\n\n    /**\n     * Custom Error class of type Exception.\n     */\n    class ArrayIndexOutOfBoundsException extends IndexOutOfBoundsException {\n        constructor(index = undefined, message = undefined) {\n            super(message);\n            this.index = index;\n            this.message = message;\n        }\n    }\n    ArrayIndexOutOfBoundsException.kind = 'ArrayIndexOutOfBoundsException';\n\n    class Arrays {\n        /**\n         * Assigns the specified int value to each element of the specified array\n         * of ints.\n         *\n         * @param a the array to be filled\n         * @param val the value to be stored in all elements of the array\n         */\n        static fill(a, val) {\n            for (let i = 0, len = a.length; i < len; i++)\n                a[i] = val;\n        }\n        /**\n         * Assigns the specified int value to each element of the specified\n         * range of the specified array of ints.  The range to be filled\n         * extends from index {@code fromIndex}, inclusive, to index\n         * {@code toIndex}, exclusive.  (If {@code fromIndex==toIndex}, the\n         * range to be filled is empty.)\n         *\n         * @param a the array to be filled\n         * @param fromIndex the index of the first element (inclusive) to be\n         *        filled with the specified value\n         * @param toIndex the index of the last element (exclusive) to be\n         *        filled with the specified value\n         * @param val the value to be stored in all elements of the array\n         * @throws IllegalArgumentException if {@code fromIndex > toIndex}\n         * @throws ArrayIndexOutOfBoundsException if {@code fromIndex < 0} or\n         *         {@code toIndex > a.length}\n         */\n        static fillWithin(a, fromIndex, toIndex, val) {\n            Arrays.rangeCheck(a.length, fromIndex, toIndex);\n            for (let i = fromIndex; i < toIndex; i++)\n                a[i] = val;\n        }\n        /**\n         * Checks that {@code fromIndex} and {@code toIndex} are in\n         * the range and throws an exception if they aren't.\n         */\n        static rangeCheck(arrayLength, fromIndex, toIndex) {\n            if (fromIndex > toIndex) {\n                throw new IllegalArgumentException('fromIndex(' + fromIndex + ') > toIndex(' + toIndex + ')');\n            }\n            if (fromIndex < 0) {\n                throw new ArrayIndexOutOfBoundsException(fromIndex);\n            }\n            if (toIndex > arrayLength) {\n                throw new ArrayIndexOutOfBoundsException(toIndex);\n            }\n        }\n        static asList(...args) {\n            return args;\n        }\n        static create(rows, cols, value) {\n            let arr = Array.from({ length: rows });\n            return arr.map(x => Array.from({ length: cols }).fill(value));\n        }\n        static createInt32Array(rows, cols, value) {\n            let arr = Array.from({ length: rows });\n            return arr.map(x => Int32Array.from({ length: cols }).fill(value));\n        }\n        static equals(first, second) {\n            if (!first) {\n                return false;\n            }\n            if (!second) {\n                return false;\n            }\n            if (!first.length) {\n                return false;\n            }\n            if (!second.length) {\n                return false;\n            }\n            if (first.length !== second.length) {\n                return false;\n            }\n            for (let i = 0, length = first.length; i < length; i++) {\n                if (first[i] !== second[i]) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        static hashCode(a) {\n            if (a === null) {\n                return 0;\n            }\n            let result = 1;\n            for (const element of a) {\n                result = 31 * result + element;\n            }\n            return result;\n        }\n        static fillUint8Array(a, value) {\n            for (let i = 0; i !== a.length; i++) {\n                a[i] = value;\n            }\n        }\n        static copyOf(original, newLength) {\n            return original.slice(0, newLength);\n        }\n        static copyOfUint8Array(original, newLength) {\n            if (original.length <= newLength) {\n                const newArray = new Uint8Array(newLength);\n                newArray.set(original);\n                return newArray;\n            }\n            return original.slice(0, newLength);\n        }\n        static copyOfRange(original, from, to) {\n            const newLength = to - from;\n            const copy = new Int32Array(newLength);\n            System.arraycopy(original, from, copy, 0, newLength);\n            return copy;\n        }\n        /*\n        * Returns the index of of the element in a sorted array or (-n-1) where n is the insertion point\n        * for the new element.\n        * Parameters:\n        *     ar - A sorted array\n        *     el - An element to search for\n        *     comparator - A comparator function. The function takes two arguments: (a, b) and returns:\n        *        a negative number  if a is less than b;\n        *        0 if a is equal to b;\n        *        a positive number of a is greater than b.\n        * The array may contain duplicate elements. If there are more than one equal elements in the array,\n        * the returned value can be the index of any one of the equal elements.\n        *\n        * http://jsfiddle.net/aryzhov/pkfst550/\n        */\n        static binarySearch(ar, el, comparator) {\n            if (undefined === comparator) {\n                comparator = Arrays.numberComparator;\n            }\n            let m = 0;\n            let n = ar.length - 1;\n            while (m <= n) {\n                const k = (n + m) >> 1;\n                const cmp = comparator(el, ar[k]);\n                if (cmp > 0) {\n                    m = k + 1;\n                }\n                else if (cmp < 0) {\n                    n = k - 1;\n                }\n                else {\n                    return k;\n                }\n            }\n            return -m - 1;\n        }\n        static numberComparator(a, b) {\n            return a - b;\n        }\n    }\n\n    /**\n     * Ponyfill for Java's Integer class.\n     */\n    class Integer {\n        static numberOfTrailingZeros(i) {\n            let y;\n            if (i === 0)\n                return 32;\n            let n = 31;\n            y = i << 16;\n            if (y !== 0) {\n                n -= 16;\n                i = y;\n            }\n            y = i << 8;\n            if (y !== 0) {\n                n -= 8;\n                i = y;\n            }\n            y = i << 4;\n            if (y !== 0) {\n                n -= 4;\n                i = y;\n            }\n            y = i << 2;\n            if (y !== 0) {\n                n -= 2;\n                i = y;\n            }\n            return n - ((i << 1) >>> 31);\n        }\n        static numberOfLeadingZeros(i) {\n            // HD, Figure 5-6\n            if (i === 0) {\n                return 32;\n            }\n            let n = 1;\n            if (i >>> 16 === 0) {\n                n += 16;\n                i <<= 16;\n            }\n            if (i >>> 24 === 0) {\n                n += 8;\n                i <<= 8;\n            }\n            if (i >>> 28 === 0) {\n                n += 4;\n                i <<= 4;\n            }\n            if (i >>> 30 === 0) {\n                n += 2;\n                i <<= 2;\n            }\n            n -= i >>> 31;\n            return n;\n        }\n        static toHexString(i) {\n            return i.toString(16);\n        }\n        static toBinaryString(intNumber) {\n            return String(parseInt(String(intNumber), 2));\n        }\n        // Returns the number of one-bits in the two's complement binary representation of the specified int value. This function is sometimes referred to as the population count.\n        // Returns:\n        // the number of one-bits in the two's complement binary representation of the specified int value.\n        static bitCount(i) {\n            // HD, Figure 5-2\n            i = i - ((i >>> 1) & 0x55555555);\n            i = (i & 0x33333333) + ((i >>> 2) & 0x33333333);\n            i = (i + (i >>> 4)) & 0x0f0f0f0f;\n            i = i + (i >>> 8);\n            i = i + (i >>> 16);\n            return i & 0x3f;\n        }\n        static truncDivision(dividend, divisor) {\n            return Math.trunc(dividend / divisor);\n        }\n        /**\n         * Converts A string to an integer.\n         * @param s A string to convert into a number.\n         * @param radix A value between 2 and 36 that specifies the base of the number in numString. If this argument is not supplied, strings with a prefix of '0x' are considered hexadecimal. All other strings are considered decimal.\n         */\n        static parseInt(num, radix = undefined) {\n            return parseInt(num, radix);\n        }\n    }\n    Integer.MIN_VALUE_32_BITS = -2147483648;\n    Integer.MAX_VALUE = Number.MAX_SAFE_INTEGER;\n\n    /**\n     * <p>A simple, fast array of bits, represented compactly by an array of ints internally.</p>\n     *\n     * @author Sean Owen\n     */\n    class BitArray /*implements Cloneable*/ {\n        // For testing only\n        constructor(size /*int*/, bits) {\n            if (undefined === size) {\n                this.size = 0;\n                this.bits = new Int32Array(1);\n            }\n            else {\n                this.size = size;\n                if (undefined === bits || null === bits) {\n                    this.bits = BitArray.makeArray(size);\n                }\n                else {\n                    this.bits = bits;\n                }\n            }\n        }\n        getSize() {\n            return this.size;\n        }\n        getSizeInBytes() {\n            return Math.floor((this.size + 7) / 8);\n        }\n        ensureCapacity(size /*int*/) {\n            if (size > this.bits.length * 32) {\n                const newBits = BitArray.makeArray(size);\n                System.arraycopy(this.bits, 0, newBits, 0, this.bits.length);\n                this.bits = newBits;\n            }\n        }\n        /**\n         * @param i bit to get\n         * @return true iff bit i is set\n         */\n        get(i /*int*/) {\n            return (this.bits[Math.floor(i / 32)] & (1 << (i & 0x1F))) !== 0;\n        }\n        /**\n         * Sets bit i.\n         *\n         * @param i bit to set\n         */\n        set(i /*int*/) {\n            this.bits[Math.floor(i / 32)] |= 1 << (i & 0x1F);\n        }\n        /**\n         * Flips bit i.\n         *\n         * @param i bit to set\n         */\n        flip(i /*int*/) {\n            this.bits[Math.floor(i / 32)] ^= 1 << (i & 0x1F);\n        }\n        /**\n         * @param from first bit to check\n         * @return index of first bit that is set, starting from the given index, or size if none are set\n         *  at or beyond this given index\n         * @see #getNextUnset(int)\n         */\n        getNextSet(from /*int*/) {\n            const size = this.size;\n            if (from >= size) {\n                return size;\n            }\n            const bits = this.bits;\n            let bitsOffset = Math.floor(from / 32);\n            let currentBits = bits[bitsOffset];\n            // mask off lesser bits first\n            currentBits &= ~((1 << (from & 0x1F)) - 1);\n            const length = bits.length;\n            while (currentBits === 0) {\n                if (++bitsOffset === length) {\n                    return size;\n                }\n                currentBits = bits[bitsOffset];\n            }\n            const result = (bitsOffset * 32) + Integer.numberOfTrailingZeros(currentBits);\n            return result > size ? size : result;\n        }\n        /**\n         * @param from index to start looking for unset bit\n         * @return index of next unset bit, or {@code size} if none are unset until the end\n         * @see #getNextSet(int)\n         */\n        getNextUnset(from /*int*/) {\n            const size = this.size;\n            if (from >= size) {\n                return size;\n            }\n            const bits = this.bits;\n            let bitsOffset = Math.floor(from / 32);\n            let currentBits = ~bits[bitsOffset];\n            // mask off lesser bits first\n            currentBits &= ~((1 << (from & 0x1F)) - 1);\n            const length = bits.length;\n            while (currentBits === 0) {\n                if (++bitsOffset === length) {\n                    return size;\n                }\n                currentBits = ~bits[bitsOffset];\n            }\n            const result = (bitsOffset * 32) + Integer.numberOfTrailingZeros(currentBits);\n            return result > size ? size : result;\n        }\n        /**\n         * Sets a block of 32 bits, starting at bit i.\n         *\n         * @param i first bit to set\n         * @param newBits the new value of the next 32 bits. Note again that the least-significant bit\n         * corresponds to bit i, the next-least-significant to i+1, and so on.\n         */\n        setBulk(i /*int*/, newBits /*int*/) {\n            this.bits[Math.floor(i / 32)] = newBits;\n        }\n        /**\n         * Sets a range of bits.\n         *\n         * @param start start of range, inclusive.\n         * @param end end of range, exclusive\n         */\n        setRange(start /*int*/, end /*int*/) {\n            if (end < start || start < 0 || end > this.size) {\n                throw new IllegalArgumentException();\n            }\n            if (end === start) {\n                return;\n            }\n            end--; // will be easier to treat this as the last actually set bit -- inclusive\n            const firstInt = Math.floor(start / 32);\n            const lastInt = Math.floor(end / 32);\n            const bits = this.bits;\n            for (let i = firstInt; i <= lastInt; i++) {\n                const firstBit = i > firstInt ? 0 : start & 0x1F;\n                const lastBit = i < lastInt ? 31 : end & 0x1F;\n                // Ones from firstBit to lastBit, inclusive\n                const mask = (2 << lastBit) - (1 << firstBit);\n                bits[i] |= mask;\n            }\n        }\n        /**\n         * Clears all bits (sets to false).\n         */\n        clear() {\n            const max = this.bits.length;\n            const bits = this.bits;\n            for (let i = 0; i < max; i++) {\n                bits[i] = 0;\n            }\n        }\n        /**\n         * Efficient method to check if a range of bits is set, or not set.\n         *\n         * @param start start of range, inclusive.\n         * @param end end of range, exclusive\n         * @param value if true, checks that bits in range are set, otherwise checks that they are not set\n         * \n         * @return true iff all bits are set or not set in range, according to value argument\n         * @throws IllegalArgumentException if end is less than start or the range is not contained in the array\n         */\n        isRange(start /*int*/, end /*int*/, value) {\n            if (end < start || start < 0 || end > this.size) {\n                throw new IllegalArgumentException();\n            }\n            if (end === start) {\n                return true; // empty range matches\n            }\n            end--; // will be easier to treat this as the last actually set bit -- inclusive\n            const firstInt = Math.floor(start / 32);\n            const lastInt = Math.floor(end / 32);\n            const bits = this.bits;\n            for (let i = firstInt; i <= lastInt; i++) {\n                const firstBit = i > firstInt ? 0 : start & 0x1F;\n                const lastBit = i < lastInt ? 31 : end & 0x1F;\n                // Ones from firstBit to lastBit, inclusive\n                const mask = (2 << lastBit) - (1 << firstBit) & 0xFFFFFFFF;\n                // TYPESCRIPTPORT: & 0xFFFFFFFF added to discard anything after 32 bits, as ES has 53 bits\n                // Return false if we're looking for 1s and the masked bits[i] isn't all 1s (is: that,\n                // equals the mask, or we're looking for 0s and the masked portion is not all 0s\n                if ((bits[i] & mask) !== (value ? mask : 0)) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        appendBit(bit) {\n            this.ensureCapacity(this.size + 1);\n            if (bit) {\n                this.bits[Math.floor(this.size / 32)] |= 1 << (this.size & 0x1F);\n            }\n            this.size++;\n        }\n        /**\n         * Appends the least-significant bits, from value, in order from most-significant to\n         * least-significant. For example, appending 6 bits from 0x000001E will append the bits\n         * 0, 1, 1, 1, 1, 0 in that order.\n         *\n         * @param value {@code int} containing bits to append\n         * @param numBits bits from value to append\n         */\n        appendBits(value /*int*/, numBits /*int*/) {\n            if (numBits < 0 || numBits > 32) {\n                throw new IllegalArgumentException('Num bits must be between 0 and 32');\n            }\n            this.ensureCapacity(this.size + numBits);\n            // const appendBit = this.appendBit;\n            for (let numBitsLeft = numBits; numBitsLeft > 0; numBitsLeft--) {\n                this.appendBit(((value >> (numBitsLeft - 1)) & 0x01) === 1);\n            }\n        }\n        appendBitArray(other) {\n            const otherSize = other.size;\n            this.ensureCapacity(this.size + otherSize);\n            // const appendBit = this.appendBit;\n            for (let i = 0; i < otherSize; i++) {\n                this.appendBit(other.get(i));\n            }\n        }\n        xor(other) {\n            if (this.size !== other.size) {\n                throw new IllegalArgumentException('Sizes don\\'t match');\n            }\n            const bits = this.bits;\n            for (let i = 0, length = bits.length; i < length; i++) {\n                // The last int could be incomplete (i.e. not have 32 bits in\n                // it) but there is no problem since 0 XOR 0 == 0.\n                bits[i] ^= other.bits[i];\n            }\n        }\n        /**\n         *\n         * @param bitOffset first bit to start writing\n         * @param array array to write into. Bytes are written most-significant byte first. This is the opposite\n         *  of the internal representation, which is exposed by {@link #getBitArray()}\n         * @param offset position in array to start writing\n         * @param numBytes how many bytes to write\n         */\n        toBytes(bitOffset /*int*/, array, offset /*int*/, numBytes /*int*/) {\n            for (let i = 0; i < numBytes; i++) {\n                let theByte = 0;\n                for (let j = 0; j < 8; j++) {\n                    if (this.get(bitOffset)) {\n                        theByte |= 1 << (7 - j);\n                    }\n                    bitOffset++;\n                }\n                array[offset + i] = /*(byte)*/ theByte;\n            }\n        }\n        /**\n         * @return underlying array of ints. The first element holds the first 32 bits, and the least\n         *         significant bit is bit 0.\n         */\n        getBitArray() {\n            return this.bits;\n        }\n        /**\n         * Reverses all bits in the array.\n         */\n        reverse() {\n            const newBits = new Int32Array(this.bits.length);\n            // reverse all int's first\n            const len = Math.floor((this.size - 1) / 32);\n            const oldBitsLen = len + 1;\n            const bits = this.bits;\n            for (let i = 0; i < oldBitsLen; i++) {\n                let x = bits[i];\n                x = ((x >> 1) & 0x55555555) | ((x & 0x55555555) << 1);\n                x = ((x >> 2) & 0x33333333) | ((x & 0x33333333) << 2);\n                x = ((x >> 4) & 0x0f0f0f0f) | ((x & 0x0f0f0f0f) << 4);\n                x = ((x >> 8) & 0x00ff00ff) | ((x & 0x00ff00ff) << 8);\n                x = ((x >> 16) & 0x0000ffff) | ((x & 0x0000ffff) << 16);\n                newBits[len - i] = /*(int)*/ x;\n            }\n            // now correct the int's if the bit size isn't a multiple of 32\n            if (this.size !== oldBitsLen * 32) {\n                const leftOffset = oldBitsLen * 32 - this.size;\n                let currentInt = newBits[0] >>> leftOffset;\n                for (let i = 1; i < oldBitsLen; i++) {\n                    const nextInt = newBits[i];\n                    currentInt |= nextInt << (32 - leftOffset);\n                    newBits[i - 1] = currentInt;\n                    currentInt = nextInt >>> leftOffset;\n                }\n                newBits[oldBitsLen - 1] = currentInt;\n            }\n            this.bits = newBits;\n        }\n        static makeArray(size /*int*/) {\n            return new Int32Array(Math.floor((size + 31) / 32));\n        }\n        /*@Override*/\n        equals(o) {\n            if (!(o instanceof BitArray)) {\n                return false;\n            }\n            const other = o;\n            return this.size === other.size && Arrays.equals(this.bits, other.bits);\n        }\n        /*@Override*/\n        hashCode() {\n            return 31 * this.size + Arrays.hashCode(this.bits);\n        }\n        /*@Override*/\n        toString() {\n            let result = '';\n            for (let i = 0, size = this.size; i < size; i++) {\n                if ((i & 0x07) === 0) {\n                    result += ' ';\n                }\n                result += this.get(i) ? 'X' : '.';\n            }\n            return result;\n        }\n        /*@Override*/\n        clone() {\n            return new BitArray(this.size, this.bits.slice());\n        }\n    }\n\n    /*\n     * Copyright 2009 ZXing authors\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n    /*namespace com.google.zxing {*/\n    /**\n     * Encapsulates a type of hint that a caller may pass to a barcode reader to help it\n     * more quickly or accurately decode it. It is up to implementations to decide what,\n     * if anything, to do with the information that is supplied.\n     *\n     * @author Sean Owen\n     * @author dswitkin@google.com (Daniel Switkin)\n     * @see Reader#decode(BinaryBitmap,java.util.Map)\n     */\n    var DecodeHintType;\n    (function (DecodeHintType) {\n        /**\n         * Unspecified, application-specific hint. Maps to an unspecified {@link Object}.\n         */\n        DecodeHintType[DecodeHintType[\"OTHER\"] = 0] = \"OTHER\"; /*(Object.class)*/\n        /**\n         * Image is a pure monochrome image of a barcode. Doesn't matter what it maps to;\n         * use {@link Boolean#TRUE}.\n         */\n        DecodeHintType[DecodeHintType[\"PURE_BARCODE\"] = 1] = \"PURE_BARCODE\"; /*(Void.class)*/\n        /**\n         * Image is known to be of one of a few possible formats.\n         * Maps to a {@link List} of {@link BarcodeFormat}s.\n         */\n        DecodeHintType[DecodeHintType[\"POSSIBLE_FORMATS\"] = 2] = \"POSSIBLE_FORMATS\"; /*(List.class)*/\n        /**\n         * Spend more time to try to find a barcode; optimize for accuracy, not speed.\n         * Doesn't matter what it maps to; use {@link Boolean#TRUE}.\n         */\n        DecodeHintType[DecodeHintType[\"TRY_HARDER\"] = 3] = \"TRY_HARDER\"; /*(Void.class)*/\n        /**\n         * Specifies what character encoding to use when decoding, where applicable (type String)\n         */\n        DecodeHintType[DecodeHintType[\"CHARACTER_SET\"] = 4] = \"CHARACTER_SET\"; /*(String.class)*/\n        /**\n         * Allowed lengths of encoded data -- reject anything else. Maps to an {@code Int32Array}.\n         */\n        DecodeHintType[DecodeHintType[\"ALLOWED_LENGTHS\"] = 5] = \"ALLOWED_LENGTHS\"; /*(Int32Array.class)*/\n        /**\n         * Assume Code 39 codes employ a check digit. Doesn't matter what it maps to;\n         * use {@link Boolean#TRUE}.\n         */\n        DecodeHintType[DecodeHintType[\"ASSUME_CODE_39_CHECK_DIGIT\"] = 6] = \"ASSUME_CODE_39_CHECK_DIGIT\"; /*(Void.class)*/\n        /**\n         * Assume the barcode is being processed as a GS1 barcode, and modify behavior as needed.\n         * For example this affects FNC1 handling for Code 128 (aka GS1-128). Doesn't matter what it maps to;\n         * use {@link Boolean#TRUE}.\n         */\n        DecodeHintType[DecodeHintType[\"ASSUME_GS1\"] = 7] = \"ASSUME_GS1\"; /*(Void.class)*/\n        /**\n         * If true, return the start and end digits in a Codabar barcode instead of stripping them. They\n         * are alpha, whereas the rest are numeric. By default, they are stripped, but this causes them\n         * to not be. Doesn't matter what it maps to; use {@link Boolean#TRUE}.\n         */\n        DecodeHintType[DecodeHintType[\"RETURN_CODABAR_START_END\"] = 8] = \"RETURN_CODABAR_START_END\"; /*(Void.class)*/\n        /**\n         * The caller needs to be notified via callback when a possible {@link ResultPoint}\n         * is found. Maps to a {@link ResultPointCallback}.\n         */\n        DecodeHintType[DecodeHintType[\"NEED_RESULT_POINT_CALLBACK\"] = 9] = \"NEED_RESULT_POINT_CALLBACK\"; /*(ResultPointCallback.class)*/\n        /**\n         * Allowed extension lengths for EAN or UPC barcodes. Other formats will ignore this.\n         * Maps to an {@code Int32Array} of the allowed extension lengths, for example [2], [5], or [2, 5].\n         * If it is optional to have an extension, do not set this hint. If this is set,\n         * and a UPC or EAN barcode is found but an extension is not, then no result will be returned\n         * at all.\n         */\n        DecodeHintType[DecodeHintType[\"ALLOWED_EAN_EXTENSIONS\"] = 10] = \"ALLOWED_EAN_EXTENSIONS\"; /*(Int32Array.class)*/\n        // End of enumeration values.\n        /**\n         * Data type the hint is expecting.\n         * Among the possible values the {@link Void} stands out as being used for\n         * hints that do not expect a value to be supplied (flag hints). Such hints\n         * will possibly have their value ignored, or replaced by a\n         * {@link Boolean#TRUE}. Hint suppliers should probably use\n         * {@link Boolean#TRUE} as directed by the actual hint documentation.\n         */\n        // private valueType: Class<?>\n        // DecodeHintType(valueType: Class<?>) {\n        //   this.valueType = valueType\n        // }\n        // public getValueType(): Class<?> {\n        //   return valueType\n        // }\n    })(DecodeHintType || (DecodeHintType = {}));\n    var DecodeHintType$1 = DecodeHintType;\n\n    /**\n     * Custom Error class of type Exception.\n     */\n    class FormatException extends Exception {\n        static getFormatInstance() {\n            return new FormatException();\n        }\n    }\n    FormatException.kind = 'FormatException';\n\n    /*import java.util.HashMap;*/\n    /*import java.util.Map;*/\n    var CharacterSetValueIdentifiers;\n    (function (CharacterSetValueIdentifiers) {\n        CharacterSetValueIdentifiers[CharacterSetValueIdentifiers[\"Cp437\"] = 0] = \"Cp437\";\n        CharacterSetValueIdentifiers[CharacterSetValueIdentifiers[\"ISO8859_1\"] = 1] = \"ISO8859_1\";\n        CharacterSetValueIdentifiers[CharacterSetValueIdentifiers[\"ISO8859_2\"] = 2] = \"ISO8859_2\";\n        CharacterSetValueIdentifiers[CharacterSetValueIdentifiers[\"ISO8859_3\"] = 3] = \"ISO8859_3\";\n        CharacterSetValueIdentifiers[CharacterSetValueIdentifiers[\"ISO8859_4\"] = 4] = \"ISO8859_4\";\n        CharacterSetValueIdentifiers[CharacterSetValueIdentifiers[\"ISO8859_5\"] = 5] = \"ISO8859_5\";\n        CharacterSetValueIdentifiers[CharacterSetValueIdentifiers[\"ISO8859_6\"] = 6] = \"ISO8859_6\";\n        CharacterSetValueIdentifiers[CharacterSetValueIdentifiers[\"ISO8859_7\"] = 7] = \"ISO8859_7\";\n        CharacterSetValueIdentifiers[CharacterSetValueIdentifiers[\"ISO8859_8\"] = 8] = \"ISO8859_8\";\n        CharacterSetValueIdentifiers[CharacterSetValueIdentifiers[\"ISO8859_9\"] = 9] = \"ISO8859_9\";\n        CharacterSetValueIdentifiers[CharacterSetValueIdentifiers[\"ISO8859_10\"] = 10] = \"ISO8859_10\";\n        CharacterSetValueIdentifiers[CharacterSetValueIdentifiers[\"ISO8859_11\"] = 11] = \"ISO8859_11\";\n        CharacterSetValueIdentifiers[CharacterSetValueIdentifiers[\"ISO8859_13\"] = 12] = \"ISO8859_13\";\n        CharacterSetValueIdentifiers[CharacterSetValueIdentifiers[\"ISO8859_14\"] = 13] = \"ISO8859_14\";\n        CharacterSetValueIdentifiers[CharacterSetValueIdentifiers[\"ISO8859_15\"] = 14] = \"ISO8859_15\";\n        CharacterSetValueIdentifiers[CharacterSetValueIdentifiers[\"ISO8859_16\"] = 15] = \"ISO8859_16\";\n        CharacterSetValueIdentifiers[CharacterSetValueIdentifiers[\"SJIS\"] = 16] = \"SJIS\";\n        CharacterSetValueIdentifiers[CharacterSetValueIdentifiers[\"Cp1250\"] = 17] = \"Cp1250\";\n        CharacterSetValueIdentifiers[CharacterSetValueIdentifiers[\"Cp1251\"] = 18] = \"Cp1251\";\n        CharacterSetValueIdentifiers[CharacterSetValueIdentifiers[\"Cp1252\"] = 19] = \"Cp1252\";\n        CharacterSetValueIdentifiers[CharacterSetValueIdentifiers[\"Cp1256\"] = 20] = \"Cp1256\";\n        CharacterSetValueIdentifiers[CharacterSetValueIdentifiers[\"UnicodeBigUnmarked\"] = 21] = \"UnicodeBigUnmarked\";\n        CharacterSetValueIdentifiers[CharacterSetValueIdentifiers[\"UTF8\"] = 22] = \"UTF8\";\n        CharacterSetValueIdentifiers[CharacterSetValueIdentifiers[\"ASCII\"] = 23] = \"ASCII\";\n        CharacterSetValueIdentifiers[CharacterSetValueIdentifiers[\"Big5\"] = 24] = \"Big5\";\n        CharacterSetValueIdentifiers[CharacterSetValueIdentifiers[\"GB18030\"] = 25] = \"GB18030\";\n        CharacterSetValueIdentifiers[CharacterSetValueIdentifiers[\"EUC_KR\"] = 26] = \"EUC_KR\";\n    })(CharacterSetValueIdentifiers || (CharacterSetValueIdentifiers = {}));\n    /**\n     * Encapsulates a Character Set ECI, according to \"Extended Channel Interpretations\" 5.3.1.1\n     * of ISO 18004.\n     *\n     * @author Sean Owen\n     */\n    class CharacterSetECI {\n        constructor(valueIdentifier, valuesParam, name, ...otherEncodingNames) {\n            this.valueIdentifier = valueIdentifier;\n            this.name = name;\n            if (typeof valuesParam === 'number') {\n                this.values = Int32Array.from([valuesParam]);\n            }\n            else {\n                this.values = valuesParam;\n            }\n            this.otherEncodingNames = otherEncodingNames;\n            CharacterSetECI.VALUE_IDENTIFIER_TO_ECI.set(valueIdentifier, this);\n            CharacterSetECI.NAME_TO_ECI.set(name, this);\n            const values = this.values;\n            for (let i = 0, length = values.length; i !== length; i++) {\n                const v = values[i];\n                CharacterSetECI.VALUES_TO_ECI.set(v, this);\n            }\n            for (const otherName of otherEncodingNames) {\n                CharacterSetECI.NAME_TO_ECI.set(otherName, this);\n            }\n        }\n        // CharacterSetECI(value: number /*int*/) {\n        //   this(new Int32Array {value})\n        // }\n        // CharacterSetECI(value: number /*int*/, String... otherEncodingNames) {\n        //   this.values = new Int32Array {value}\n        //   this.otherEncodingNames = otherEncodingNames\n        // }\n        // CharacterSetECI(values: Int32Array, String... otherEncodingNames) {\n        //   this.values = values\n        //   this.otherEncodingNames = otherEncodingNames\n        // }\n        getValueIdentifier() {\n            return this.valueIdentifier;\n        }\n        getName() {\n            return this.name;\n        }\n        getValue() {\n            return this.values[0];\n        }\n        /**\n         * @param value character set ECI value\n         * @return {@code CharacterSetECI} representing ECI of given value, or null if it is legal but\n         *   unsupported\n         * @throws FormatException if ECI value is invalid\n         */\n        static getCharacterSetECIByValue(value /*int*/) {\n            if (value < 0 || value >= 900) {\n                throw new FormatException('incorect value');\n            }\n            const characterSet = CharacterSetECI.VALUES_TO_ECI.get(value);\n            if (undefined === characterSet) {\n                throw new FormatException('incorect value');\n            }\n            return characterSet;\n        }\n        /**\n         * @param name character set ECI encoding name\n         * @return CharacterSetECI representing ECI for character encoding, or null if it is legal\n         *   but unsupported\n         */\n        static getCharacterSetECIByName(name) {\n            const characterSet = CharacterSetECI.NAME_TO_ECI.get(name);\n            if (undefined === characterSet) {\n                throw new FormatException('incorect value');\n            }\n            return characterSet;\n        }\n        equals(o) {\n            if (!(o instanceof CharacterSetECI)) {\n                return false;\n            }\n            const other = o;\n            return this.getName() === other.getName();\n        }\n    }\n    CharacterSetECI.VALUE_IDENTIFIER_TO_ECI = new Map();\n    CharacterSetECI.VALUES_TO_ECI = new Map();\n    CharacterSetECI.NAME_TO_ECI = new Map();\n    // Enum name is a Java encoding valid for java.lang and java.io\n    // TYPESCRIPTPORT: changed the main label for ISO as the TextEncoder did not recognized them in the form from java\n    // (eg ISO8859_1 must be ISO88591 or ISO8859-1 or ISO-8859-1)\n    // later on: well, except 16 wich does not work with ISO885916 so used ISO-8859-1 form for default\n    CharacterSetECI.Cp437 = new CharacterSetECI(CharacterSetValueIdentifiers.Cp437, Int32Array.from([0, 2]), 'Cp437');\n    CharacterSetECI.ISO8859_1 = new CharacterSetECI(CharacterSetValueIdentifiers.ISO8859_1, Int32Array.from([1, 3]), 'ISO-8859-1', 'ISO88591', 'ISO8859_1');\n    CharacterSetECI.ISO8859_2 = new CharacterSetECI(CharacterSetValueIdentifiers.ISO8859_2, 4, 'ISO-8859-2', 'ISO88592', 'ISO8859_2');\n    CharacterSetECI.ISO8859_3 = new CharacterSetECI(CharacterSetValueIdentifiers.ISO8859_3, 5, 'ISO-8859-3', 'ISO88593', 'ISO8859_3');\n    CharacterSetECI.ISO8859_4 = new CharacterSetECI(CharacterSetValueIdentifiers.ISO8859_4, 6, 'ISO-8859-4', 'ISO88594', 'ISO8859_4');\n    CharacterSetECI.ISO8859_5 = new CharacterSetECI(CharacterSetValueIdentifiers.ISO8859_5, 7, 'ISO-8859-5', 'ISO88595', 'ISO8859_5');\n    CharacterSetECI.ISO8859_6 = new CharacterSetECI(CharacterSetValueIdentifiers.ISO8859_6, 8, 'ISO-8859-6', 'ISO88596', 'ISO8859_6');\n    CharacterSetECI.ISO8859_7 = new CharacterSetECI(CharacterSetValueIdentifiers.ISO8859_7, 9, 'ISO-8859-7', 'ISO88597', 'ISO8859_7');\n    CharacterSetECI.ISO8859_8 = new CharacterSetECI(CharacterSetValueIdentifiers.ISO8859_8, 10, 'ISO-8859-8', 'ISO88598', 'ISO8859_8');\n    CharacterSetECI.ISO8859_9 = new CharacterSetECI(CharacterSetValueIdentifiers.ISO8859_9, 11, 'ISO-8859-9', 'ISO88599', 'ISO8859_9');\n    CharacterSetECI.ISO8859_10 = new CharacterSetECI(CharacterSetValueIdentifiers.ISO8859_10, 12, 'ISO-8859-10', 'ISO885910', 'ISO8859_10');\n    CharacterSetECI.ISO8859_11 = new CharacterSetECI(CharacterSetValueIdentifiers.ISO8859_11, 13, 'ISO-8859-11', 'ISO885911', 'ISO8859_11');\n    CharacterSetECI.ISO8859_13 = new CharacterSetECI(CharacterSetValueIdentifiers.ISO8859_13, 15, 'ISO-8859-13', 'ISO885913', 'ISO8859_13');\n    CharacterSetECI.ISO8859_14 = new CharacterSetECI(CharacterSetValueIdentifiers.ISO8859_14, 16, 'ISO-8859-14', 'ISO885914', 'ISO8859_14');\n    CharacterSetECI.ISO8859_15 = new CharacterSetECI(CharacterSetValueIdentifiers.ISO8859_15, 17, 'ISO-8859-15', 'ISO885915', 'ISO8859_15');\n    CharacterSetECI.ISO8859_16 = new CharacterSetECI(CharacterSetValueIdentifiers.ISO8859_16, 18, 'ISO-8859-16', 'ISO885916', 'ISO8859_16');\n    CharacterSetECI.SJIS = new CharacterSetECI(CharacterSetValueIdentifiers.SJIS, 20, 'SJIS', 'Shift_JIS');\n    CharacterSetECI.Cp1250 = new CharacterSetECI(CharacterSetValueIdentifiers.Cp1250, 21, 'Cp1250', 'windows-1250');\n    CharacterSetECI.Cp1251 = new CharacterSetECI(CharacterSetValueIdentifiers.Cp1251, 22, 'Cp1251', 'windows-1251');\n    CharacterSetECI.Cp1252 = new CharacterSetECI(CharacterSetValueIdentifiers.Cp1252, 23, 'Cp1252', 'windows-1252');\n    CharacterSetECI.Cp1256 = new CharacterSetECI(CharacterSetValueIdentifiers.Cp1256, 24, 'Cp1256', 'windows-1256');\n    CharacterSetECI.UnicodeBigUnmarked = new CharacterSetECI(CharacterSetValueIdentifiers.UnicodeBigUnmarked, 25, 'UnicodeBigUnmarked', 'UTF-16BE', 'UnicodeBig');\n    CharacterSetECI.UTF8 = new CharacterSetECI(CharacterSetValueIdentifiers.UTF8, 26, 'UTF8', 'UTF-8');\n    CharacterSetECI.ASCII = new CharacterSetECI(CharacterSetValueIdentifiers.ASCII, Int32Array.from([27, 170]), 'ASCII', 'US-ASCII');\n    CharacterSetECI.Big5 = new CharacterSetECI(CharacterSetValueIdentifiers.Big5, 28, 'Big5');\n    CharacterSetECI.GB18030 = new CharacterSetECI(CharacterSetValueIdentifiers.GB18030, 29, 'GB18030', 'GB2312', 'EUC_CN', 'GBK');\n    CharacterSetECI.EUC_KR = new CharacterSetECI(CharacterSetValueIdentifiers.EUC_KR, 30, 'EUC_KR', 'EUC-KR');\n\n    /**\n     * Custom Error class of type Exception.\n     */\n    class UnsupportedOperationException extends Exception {\n    }\n    UnsupportedOperationException.kind = 'UnsupportedOperationException';\n\n    /**\n     * Responsible for en/decoding strings.\n     */\n    class StringEncoding {\n        /**\n         * Decodes some Uint8Array to a string format.\n         */\n        static decode(bytes, encoding) {\n            const encodingName = this.encodingName(encoding);\n            if (this.customDecoder) {\n                return this.customDecoder(bytes, encodingName);\n            }\n            // Increases browser support.\n            if (typeof TextDecoder === 'undefined' || this.shouldDecodeOnFallback(encodingName)) {\n                return this.decodeFallback(bytes, encodingName);\n            }\n            return new TextDecoder(encodingName).decode(bytes);\n        }\n        /**\n         * Checks if the decoding method should use the fallback for decoding\n         * once Node TextDecoder doesn't support all encoding formats.\n         *\n         * @param encodingName\n         */\n        static shouldDecodeOnFallback(encodingName) {\n            return !StringEncoding.isBrowser() && encodingName === 'ISO-8859-1';\n        }\n        /**\n         * Encodes some string into a Uint8Array.\n         */\n        static encode(s, encoding) {\n            const encodingName = this.encodingName(encoding);\n            if (this.customEncoder) {\n                return this.customEncoder(s, encodingName);\n            }\n            // Increases browser support.\n            if (typeof TextEncoder === 'undefined') {\n                return this.encodeFallback(s);\n            }\n            // TextEncoder only encodes to UTF8 by default as specified by encoding.spec.whatwg.org\n            return new TextEncoder().encode(s);\n        }\n        static isBrowser() {\n            return (typeof window !== 'undefined' && {}.toString.call(window) === '[object Window]');\n        }\n        /**\n         * Returns the string value from some encoding character set.\n         */\n        static encodingName(encoding) {\n            return typeof encoding === 'string'\n                ? encoding\n                : encoding.getName();\n        }\n        /**\n         * Returns character set from some encoding character set.\n         */\n        static encodingCharacterSet(encoding) {\n            if (encoding instanceof CharacterSetECI) {\n                return encoding;\n            }\n            return CharacterSetECI.getCharacterSetECIByName(encoding);\n        }\n        /**\n         * Runs a fallback for the native decoding funcion.\n         */\n        static decodeFallback(bytes, encoding) {\n            const characterSet = this.encodingCharacterSet(encoding);\n            if (StringEncoding.isDecodeFallbackSupported(characterSet)) {\n                let s = '';\n                for (let i = 0, length = bytes.length; i < length; i++) {\n                    let h = bytes[i].toString(16);\n                    if (h.length < 2) {\n                        h = '0' + h;\n                    }\n                    s += '%' + h;\n                }\n                return decodeURIComponent(s);\n            }\n            if (characterSet.equals(CharacterSetECI.UnicodeBigUnmarked)) {\n                return String.fromCharCode.apply(null, new Uint16Array(bytes.buffer));\n            }\n            throw new UnsupportedOperationException(`Encoding ${this.encodingName(encoding)} not supported by fallback.`);\n        }\n        static isDecodeFallbackSupported(characterSet) {\n            return characterSet.equals(CharacterSetECI.UTF8) ||\n                characterSet.equals(CharacterSetECI.ISO8859_1) ||\n                characterSet.equals(CharacterSetECI.ASCII);\n        }\n        /**\n         * Runs a fallback for the native encoding funcion.\n         *\n         * @see https://stackoverflow.com/a/17192845/4367683\n         */\n        static encodeFallback(s) {\n            const encodedURIstring = btoa(unescape(encodeURIComponent(s)));\n            const charList = encodedURIstring.split('');\n            const uintArray = [];\n            for (let i = 0; i < charList.length; i++) {\n                uintArray.push(charList[i].charCodeAt(0));\n            }\n            return new Uint8Array(uintArray);\n        }\n    }\n\n    /*\n     * Copyright (C) 2010 ZXing authors\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n    /**\n     * Common string-related functions.\n     *\n     * @author Sean Owen\n     * @author Alex Dupre\n     */\n    class StringUtils {\n        // SHIFT_JIS.equalsIgnoreCase(PLATFORM_DEFAULT_ENCODING) ||\n        // EUC_JP.equalsIgnoreCase(PLATFORM_DEFAULT_ENCODING);\n        static castAsNonUtf8Char(code, encoding = null) {\n            // ISO 8859-1 is the Java default as UTF-8 is JavaScripts\n            // you can see this method as a Java version of String.fromCharCode\n            const e = encoding ? encoding.getName() : this.ISO88591;\n            // use passed format (fromCharCode will return UTF8 encoding)\n            return StringEncoding.decode(new Uint8Array([code]), e);\n        }\n        /**\n         * @param bytes bytes encoding a string, whose encoding should be guessed\n         * @param hints decode hints if applicable\n         * @return name of guessed encoding; at the moment will only guess one of:\n         *  {@link #SHIFT_JIS}, {@link #UTF8}, {@link #ISO88591}, or the platform\n         *  default encoding if none of these can possibly be correct\n         */\n        static guessEncoding(bytes, hints) {\n            if (hints !== null && hints !== undefined && undefined !== hints.get(DecodeHintType$1.CHARACTER_SET)) {\n                return hints.get(DecodeHintType$1.CHARACTER_SET).toString();\n            }\n            // For now, merely tries to distinguish ISO-8859-1, UTF-8 and Shift_JIS,\n            // which should be by far the most common encodings.\n            const length = bytes.length;\n            let canBeISO88591 = true;\n            let canBeShiftJIS = true;\n            let canBeUTF8 = true;\n            let utf8BytesLeft = 0;\n            // int utf8LowChars = 0\n            let utf2BytesChars = 0;\n            let utf3BytesChars = 0;\n            let utf4BytesChars = 0;\n            let sjisBytesLeft = 0;\n            // int sjisLowChars = 0\n            let sjisKatakanaChars = 0;\n            // int sjisDoubleBytesChars = 0\n            let sjisCurKatakanaWordLength = 0;\n            let sjisCurDoubleBytesWordLength = 0;\n            let sjisMaxKatakanaWordLength = 0;\n            let sjisMaxDoubleBytesWordLength = 0;\n            // int isoLowChars = 0\n            // int isoHighChars = 0\n            let isoHighOther = 0;\n            const utf8bom = bytes.length > 3 &&\n                bytes[0] === /*(byte) */ 0xEF &&\n                bytes[1] === /*(byte) */ 0xBB &&\n                bytes[2] === /*(byte) */ 0xBF;\n            for (let i = 0; i < length && (canBeISO88591 || canBeShiftJIS || canBeUTF8); i++) {\n                const value = bytes[i] & 0xFF;\n                // UTF-8 stuff\n                if (canBeUTF8) {\n                    if (utf8BytesLeft > 0) {\n                        if ((value & 0x80) === 0) {\n                            canBeUTF8 = false;\n                        }\n                        else {\n                            utf8BytesLeft--;\n                        }\n                    }\n                    else if ((value & 0x80) !== 0) {\n                        if ((value & 0x40) === 0) {\n                            canBeUTF8 = false;\n                        }\n                        else {\n                            utf8BytesLeft++;\n                            if ((value & 0x20) === 0) {\n                                utf2BytesChars++;\n                            }\n                            else {\n                                utf8BytesLeft++;\n                                if ((value & 0x10) === 0) {\n                                    utf3BytesChars++;\n                                }\n                                else {\n                                    utf8BytesLeft++;\n                                    if ((value & 0x08) === 0) {\n                                        utf4BytesChars++;\n                                    }\n                                    else {\n                                        canBeUTF8 = false;\n                                    }\n                                }\n                            }\n                        }\n                    } // else {\n                    // utf8LowChars++\n                    // }\n                }\n                // ISO-8859-1 stuff\n                if (canBeISO88591) {\n                    if (value > 0x7F && value < 0xA0) {\n                        canBeISO88591 = false;\n                    }\n                    else if (value > 0x9F) {\n                        if (value < 0xC0 || value === 0xD7 || value === 0xF7) {\n                            isoHighOther++;\n                        } // else {\n                        // isoHighChars++\n                        // }\n                    } // else {\n                    // isoLowChars++\n                    // }\n                }\n                // Shift_JIS stuff\n                if (canBeShiftJIS) {\n                    if (sjisBytesLeft > 0) {\n                        if (value < 0x40 || value === 0x7F || value > 0xFC) {\n                            canBeShiftJIS = false;\n                        }\n                        else {\n                            sjisBytesLeft--;\n                        }\n                    }\n                    else if (value === 0x80 || value === 0xA0 || value > 0xEF) {\n                        canBeShiftJIS = false;\n                    }\n                    else if (value > 0xA0 && value < 0xE0) {\n                        sjisKatakanaChars++;\n                        sjisCurDoubleBytesWordLength = 0;\n                        sjisCurKatakanaWordLength++;\n                        if (sjisCurKatakanaWordLength > sjisMaxKatakanaWordLength) {\n                            sjisMaxKatakanaWordLength = sjisCurKatakanaWordLength;\n                        }\n                    }\n                    else if (value > 0x7F) {\n                        sjisBytesLeft++;\n                        // sjisDoubleBytesChars++\n                        sjisCurKatakanaWordLength = 0;\n                        sjisCurDoubleBytesWordLength++;\n                        if (sjisCurDoubleBytesWordLength > sjisMaxDoubleBytesWordLength) {\n                            sjisMaxDoubleBytesWordLength = sjisCurDoubleBytesWordLength;\n                        }\n                    }\n                    else {\n                        // sjisLowChars++\n                        sjisCurKatakanaWordLength = 0;\n                        sjisCurDoubleBytesWordLength = 0;\n                    }\n                }\n            }\n            if (canBeUTF8 && utf8BytesLeft > 0) {\n                canBeUTF8 = false;\n            }\n            if (canBeShiftJIS && sjisBytesLeft > 0) {\n                canBeShiftJIS = false;\n            }\n            // Easy -- if there is BOM or at least 1 valid not-single byte character (and no evidence it can't be UTF-8), done\n            if (canBeUTF8 && (utf8bom || utf2BytesChars + utf3BytesChars + utf4BytesChars > 0)) {\n                return StringUtils.UTF8;\n            }\n            // Easy -- if assuming Shift_JIS or at least 3 valid consecutive not-ascii characters (and no evidence it can't be), done\n            if (canBeShiftJIS && (StringUtils.ASSUME_SHIFT_JIS || sjisMaxKatakanaWordLength >= 3 || sjisMaxDoubleBytesWordLength >= 3)) {\n                return StringUtils.SHIFT_JIS;\n            }\n            // Distinguishing Shift_JIS and ISO-8859-1 can be a little tough for short words. The crude heuristic is:\n            // - If we saw\n            //   - only two consecutive katakana chars in the whole text, or\n            //   - at least 10% of bytes that could be \"upper\" not-alphanumeric Latin1,\n            // - then we conclude Shift_JIS, else ISO-8859-1\n            if (canBeISO88591 && canBeShiftJIS) {\n                return (sjisMaxKatakanaWordLength === 2 && sjisKatakanaChars === 2) || isoHighOther * 10 >= length\n                    ? StringUtils.SHIFT_JIS : StringUtils.ISO88591;\n            }\n            // Otherwise, try in order ISO-8859-1, Shift JIS, UTF-8 and fall back to default platform encoding\n            if (canBeISO88591) {\n                return StringUtils.ISO88591;\n            }\n            if (canBeShiftJIS) {\n                return StringUtils.SHIFT_JIS;\n            }\n            if (canBeUTF8) {\n                return StringUtils.UTF8;\n            }\n            // Otherwise, we take a wild guess with platform encoding\n            return StringUtils.PLATFORM_DEFAULT_ENCODING;\n        }\n        /**\n         *\n         * @see https://stackoverflow.com/a/13439711/4367683\n         *\n         * @param append The new string to append.\n         * @param args Argumets values to be formated.\n         */\n        static format(append, ...args) {\n            let i = -1;\n            function callback(exp, p0, p1, p2, p3, p4) {\n                if (exp === '%%')\n                    return '%';\n                if (args[++i] === undefined)\n                    return undefined;\n                exp = p2 ? parseInt(p2.substr(1)) : undefined;\n                let base = p3 ? parseInt(p3.substr(1)) : undefined;\n                let val;\n                switch (p4) {\n                    case 's':\n                        val = args[i];\n                        break;\n                    case 'c':\n                        val = args[i][0];\n                        break;\n                    case 'f':\n                        val = parseFloat(args[i]).toFixed(exp);\n                        break;\n                    case 'p':\n                        val = parseFloat(args[i]).toPrecision(exp);\n                        break;\n                    case 'e':\n                        val = parseFloat(args[i]).toExponential(exp);\n                        break;\n                    case 'x':\n                        val = parseInt(args[i]).toString(base ? base : 16);\n                        break;\n                    case 'd':\n                        val = parseFloat(parseInt(args[i], base ? base : 10).toPrecision(exp)).toFixed(0);\n                        break;\n                }\n                val = typeof val === 'object' ? JSON.stringify(val) : (+val).toString(base);\n                let size = parseInt(p1); /* padding size */\n                let ch = p1 && (p1[0] + '') === '0' ? '0' : ' '; /* isnull? */\n                while (val.length < size)\n                    val = p0 !== undefined ? val + ch : ch + val; /* isminus? */\n                return val;\n            }\n            let regex = /%(-)?(0?[0-9]+)?([.][0-9]+)?([#][0-9]+)?([scfpexd%])/g;\n            return append.replace(regex, callback);\n        }\n        /**\n         *\n         */\n        static getBytes(str, encoding) {\n            return StringEncoding.encode(str, encoding);\n        }\n        /**\n         * Returns the charcode at the specified index or at index zero.\n         */\n        static getCharCode(str, index = 0) {\n            return str.charCodeAt(index);\n        }\n        /**\n         * Returns char for given charcode\n         */\n        static getCharAt(charCode) {\n            return String.fromCharCode(charCode);\n        }\n    }\n    StringUtils.SHIFT_JIS = CharacterSetECI.SJIS.getName(); // \"SJIS\"\n    StringUtils.GB2312 = 'GB2312';\n    StringUtils.ISO88591 = CharacterSetECI.ISO8859_1.getName(); // \"ISO8859_1\"\n    StringUtils.EUC_JP = 'EUC_JP';\n    StringUtils.UTF8 = CharacterSetECI.UTF8.getName(); // \"UTF8\"\n    StringUtils.PLATFORM_DEFAULT_ENCODING = StringUtils.UTF8; // \"UTF8\"//Charset.defaultCharset().name()\n    StringUtils.ASSUME_SHIFT_JIS = false;\n\n    class StringBuilder {\n        constructor(value = '') {\n            this.value = value;\n        }\n        enableDecoding(encoding) {\n            this.encoding = encoding;\n            return this;\n        }\n        append(s) {\n            if (typeof s === 'string') {\n                this.value += s.toString();\n            }\n            else if (this.encoding) {\n                // use passed format (fromCharCode will return UTF8 encoding)\n                this.value += StringUtils.castAsNonUtf8Char(s, this.encoding);\n            }\n            else {\n                // correctly converts from UTF-8, but not other encodings\n                this.value += String.fromCharCode(s);\n            }\n            return this;\n        }\n        appendChars(str, offset, len) {\n            for (let i = offset; offset < offset + len; i++) {\n                this.append(str[i]);\n            }\n            return this;\n        }\n        length() {\n            return this.value.length;\n        }\n        charAt(n) {\n            return this.value.charAt(n);\n        }\n        deleteCharAt(n) {\n            this.value = this.value.substr(0, n) + this.value.substring(n + 1);\n        }\n        setCharAt(n, c) {\n            this.value = this.value.substr(0, n) + c + this.value.substr(n + 1);\n        }\n        substring(start, end) {\n            return this.value.substring(start, end);\n        }\n        /**\n         * @note helper method for RSS Expanded\n         */\n        setLengthToZero() {\n            this.value = '';\n        }\n        toString() {\n            return this.value;\n        }\n        insert(n, c) {\n            this.value = this.value.substr(0, n) + c + this.value.substr(n + c.length);\n        }\n    }\n\n    /*\n     * Copyright 2007 ZXing authors\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n    /**\n     * <p>Represents a 2D matrix of bits. In function arguments below, and throughout the common\n     * module, x is the column position, and y is the row position. The ordering is always x, y.\n     * The origin is at the top-left.</p>\n     *\n     * <p>Internally the bits are represented in a 1-D array of 32-bit ints. However, each row begins\n     * with a new int. This is done intentionally so that we can copy out a row into a BitArray very\n     * efficiently.</p>\n     *\n     * <p>The ordering of bits is row-major. Within each int, the least significant bits are used first,\n     * meaning they represent lower x values. This is compatible with BitArray's implementation.</p>\n     *\n     * @author Sean Owen\n     * @author dswitkin@google.com (Daniel Switkin)\n     */\n    class BitMatrix /*implements Cloneable*/ {\n        /**\n         * Creates an empty square {@link BitMatrix}.\n         *\n         * @param dimension height and width\n         */\n        // public constructor(dimension: number /*int*/) {\n        //   this(dimension, dimension)\n        // }\n        /**\n         * Creates an empty {@link BitMatrix}.\n         *\n         * @param width bit matrix width\n         * @param height bit matrix height\n         */\n        // public constructor(width: number /*int*/, height: number /*int*/) {\n        //   if (width < 1 || height < 1) {\n        //     throw new IllegalArgumentException(\"Both dimensions must be greater than 0\")\n        //   }\n        //   this.width = width\n        //   this.height = height\n        //   this.rowSize = (width + 31) / 32\n        //   bits = new int[rowSize * height];\n        // }\n        constructor(width /*int*/, height /*int*/, rowSize /*int*/, bits) {\n            this.width = width;\n            this.height = height;\n            this.rowSize = rowSize;\n            this.bits = bits;\n            if (undefined === height || null === height) {\n                height = width;\n            }\n            this.height = height;\n            if (width < 1 || height < 1) {\n                throw new IllegalArgumentException('Both dimensions must be greater than 0');\n            }\n            if (undefined === rowSize || null === rowSize) {\n                rowSize = Math.floor((width + 31) / 32);\n            }\n            this.rowSize = rowSize;\n            if (undefined === bits || null === bits) {\n                this.bits = new Int32Array(this.rowSize * this.height);\n            }\n        }\n        /**\n         * Interprets a 2D array of booleans as a {@link BitMatrix}, where \"true\" means an \"on\" bit.\n         *\n         * @function parse\n         * @param image bits of the image, as a row-major 2D array. Elements are arrays representing rows\n         * @return {@link BitMatrix} representation of image\n         */\n        static parseFromBooleanArray(image) {\n            const height = image.length;\n            const width = image[0].length;\n            const bits = new BitMatrix(width, height);\n            for (let i = 0; i < height; i++) {\n                const imageI = image[i];\n                for (let j = 0; j < width; j++) {\n                    if (imageI[j]) {\n                        bits.set(j, i);\n                    }\n                }\n            }\n            return bits;\n        }\n        /**\n         *\n         * @function parse\n         * @param stringRepresentation\n         * @param setString\n         * @param unsetString\n         */\n        static parseFromString(stringRepresentation, setString, unsetString) {\n            if (stringRepresentation === null) {\n                throw new IllegalArgumentException('stringRepresentation cannot be null');\n            }\n            const bits = new Array(stringRepresentation.length);\n            let bitsPos = 0;\n            let rowStartPos = 0;\n            let rowLength = -1;\n            let nRows = 0;\n            let pos = 0;\n            while (pos < stringRepresentation.length) {\n                if (stringRepresentation.charAt(pos) === '\\n' ||\n                    stringRepresentation.charAt(pos) === '\\r') {\n                    if (bitsPos > rowStartPos) {\n                        if (rowLength === -1) {\n                            rowLength = bitsPos - rowStartPos;\n                        }\n                        else if (bitsPos - rowStartPos !== rowLength) {\n                            throw new IllegalArgumentException('row lengths do not match');\n                        }\n                        rowStartPos = bitsPos;\n                        nRows++;\n                    }\n                    pos++;\n                }\n                else if (stringRepresentation.substring(pos, pos + setString.length) === setString) {\n                    pos += setString.length;\n                    bits[bitsPos] = true;\n                    bitsPos++;\n                }\n                else if (stringRepresentation.substring(pos, pos + unsetString.length) === unsetString) {\n                    pos += unsetString.length;\n                    bits[bitsPos] = false;\n                    bitsPos++;\n                }\n                else {\n                    throw new IllegalArgumentException('illegal character encountered: ' + stringRepresentation.substring(pos));\n                }\n            }\n            // no EOL at end?\n            if (bitsPos > rowStartPos) {\n                if (rowLength === -1) {\n                    rowLength = bitsPos - rowStartPos;\n                }\n                else if (bitsPos - rowStartPos !== rowLength) {\n                    throw new IllegalArgumentException('row lengths do not match');\n                }\n                nRows++;\n            }\n            const matrix = new BitMatrix(rowLength, nRows);\n            for (let i = 0; i < bitsPos; i++) {\n                if (bits[i]) {\n                    matrix.set(Math.floor(i % rowLength), Math.floor(i / rowLength));\n                }\n            }\n            return matrix;\n        }\n        /**\n         * <p>Gets the requested bit, where true means black.</p>\n         *\n         * @param x The horizontal component (i.e. which column)\n         * @param y The vertical component (i.e. which row)\n         * @return value of given bit in matrix\n         */\n        get(x /*int*/, y /*int*/) {\n            const offset = y * this.rowSize + Math.floor(x / 32);\n            return ((this.bits[offset] >>> (x & 0x1f)) & 1) !== 0;\n        }\n        /**\n         * <p>Sets the given bit to true.</p>\n         *\n         * @param x The horizontal component (i.e. which column)\n         * @param y The vertical component (i.e. which row)\n         */\n        set(x /*int*/, y /*int*/) {\n            const offset = y * this.rowSize + Math.floor(x / 32);\n            this.bits[offset] |= (1 << (x & 0x1f)) & 0xFFFFFFFF;\n        }\n        unset(x /*int*/, y /*int*/) {\n            const offset = y * this.rowSize + Math.floor(x / 32);\n            this.bits[offset] &= ~((1 << (x & 0x1f)) & 0xFFFFFFFF);\n        }\n        /**\n         * <p>Flips the given bit.</p>\n         *\n         * @param x The horizontal component (i.e. which column)\n         * @param y The vertical component (i.e. which row)\n         */\n        flip(x /*int*/, y /*int*/) {\n            const offset = y * this.rowSize + Math.floor(x / 32);\n            this.bits[offset] ^= ((1 << (x & 0x1f)) & 0xFFFFFFFF);\n        }\n        /**\n         * Exclusive-or (XOR): Flip the bit in this {@code BitMatrix} if the corresponding\n         * mask bit is set.\n         *\n         * @param mask XOR mask\n         */\n        xor(mask) {\n            if (this.width !== mask.getWidth() || this.height !== mask.getHeight()\n                || this.rowSize !== mask.getRowSize()) {\n                throw new IllegalArgumentException('input matrix dimensions do not match');\n            }\n            const rowArray = new BitArray(Math.floor(this.width / 32) + 1);\n            const rowSize = this.rowSize;\n            const bits = this.bits;\n            for (let y = 0, height = this.height; y < height; y++) {\n                const offset = y * rowSize;\n                const row = mask.getRow(y, rowArray).getBitArray();\n                for (let x = 0; x < rowSize; x++) {\n                    bits[offset + x] ^= row[x];\n                }\n            }\n        }\n        /**\n         * Clears all bits (sets to false).\n         */\n        clear() {\n            const bits = this.bits;\n            const max = bits.length;\n            for (let i = 0; i < max; i++) {\n                bits[i] = 0;\n            }\n        }\n        /**\n         * <p>Sets a square region of the bit matrix to true.</p>\n         *\n         * @param left The horizontal position to begin at (inclusive)\n         * @param top The vertical position to begin at (inclusive)\n         * @param width The width of the region\n         * @param height The height of the region\n         */\n        setRegion(left /*int*/, top /*int*/, width /*int*/, height /*int*/) {\n            if (top < 0 || left < 0) {\n                throw new IllegalArgumentException('Left and top must be nonnegative');\n            }\n            if (height < 1 || width < 1) {\n                throw new IllegalArgumentException('Height and width must be at least 1');\n            }\n            const right = left + width;\n            const bottom = top + height;\n            if (bottom > this.height || right > this.width) {\n                throw new IllegalArgumentException('The region must fit inside the matrix');\n            }\n            const rowSize = this.rowSize;\n            const bits = this.bits;\n            for (let y = top; y < bottom; y++) {\n                const offset = y * rowSize;\n                for (let x = left; x < right; x++) {\n                    bits[offset + Math.floor(x / 32)] |= ((1 << (x & 0x1f)) & 0xFFFFFFFF);\n                }\n            }\n        }\n        /**\n         * A fast method to retrieve one row of data from the matrix as a BitArray.\n         *\n         * @param y The row to retrieve\n         * @param row An optional caller-allocated BitArray, will be allocated if null or too small\n         * @return The resulting BitArray - this reference should always be used even when passing\n         *         your own row\n         */\n        getRow(y /*int*/, row) {\n            if (row === null || row === undefined || row.getSize() < this.width) {\n                row = new BitArray(this.width);\n            }\n            else {\n                row.clear();\n            }\n            const rowSize = this.rowSize;\n            const bits = this.bits;\n            const offset = y * rowSize;\n            for (let x = 0; x < rowSize; x++) {\n                row.setBulk(x * 32, bits[offset + x]);\n            }\n            return row;\n        }\n        /**\n         * @param y row to set\n         * @param row {@link BitArray} to copy from\n         */\n        setRow(y /*int*/, row) {\n            System.arraycopy(row.getBitArray(), 0, this.bits, y * this.rowSize, this.rowSize);\n        }\n        /**\n         * Modifies this {@code BitMatrix} to represent the same but rotated 180 degrees\n         */\n        rotate180() {\n            const width = this.getWidth();\n            const height = this.getHeight();\n            let topRow = new BitArray(width);\n            let bottomRow = new BitArray(width);\n            for (let i = 0, length = Math.floor((height + 1) / 2); i < length; i++) {\n                topRow = this.getRow(i, topRow);\n                bottomRow = this.getRow(height - 1 - i, bottomRow);\n                topRow.reverse();\n                bottomRow.reverse();\n                this.setRow(i, bottomRow);\n                this.setRow(height - 1 - i, topRow);\n            }\n        }\n        /**\n         * This is useful in detecting the enclosing rectangle of a 'pure' barcode.\n         *\n         * @return {@code left,top,width,height} enclosing rectangle of all 1 bits, or null if it is all white\n         */\n        getEnclosingRectangle() {\n            const width = this.width;\n            const height = this.height;\n            const rowSize = this.rowSize;\n            const bits = this.bits;\n            let left = width;\n            let top = height;\n            let right = -1;\n            let bottom = -1;\n            for (let y = 0; y < height; y++) {\n                for (let x32 = 0; x32 < rowSize; x32++) {\n                    const theBits = bits[y * rowSize + x32];\n                    if (theBits !== 0) {\n                        if (y < top) {\n                            top = y;\n                        }\n                        if (y > bottom) {\n                            bottom = y;\n                        }\n                        if (x32 * 32 < left) {\n                            let bit = 0;\n                            while (((theBits << (31 - bit)) & 0xFFFFFFFF) === 0) {\n                                bit++;\n                            }\n                            if ((x32 * 32 + bit) < left) {\n                                left = x32 * 32 + bit;\n                            }\n                        }\n                        if (x32 * 32 + 31 > right) {\n                            let bit = 31;\n                            while ((theBits >>> bit) === 0) {\n                                bit--;\n                            }\n                            if ((x32 * 32 + bit) > right) {\n                                right = x32 * 32 + bit;\n                            }\n                        }\n                    }\n                }\n            }\n            if (right < left || bottom < top) {\n                return null;\n            }\n            return Int32Array.from([left, top, right - left + 1, bottom - top + 1]);\n        }\n        /**\n         * This is useful in detecting a corner of a 'pure' barcode.\n         *\n         * @return {@code x,y} coordinate of top-left-most 1 bit, or null if it is all white\n         */\n        getTopLeftOnBit() {\n            const rowSize = this.rowSize;\n            const bits = this.bits;\n            let bitsOffset = 0;\n            while (bitsOffset < bits.length && bits[bitsOffset] === 0) {\n                bitsOffset++;\n            }\n            if (bitsOffset === bits.length) {\n                return null;\n            }\n            const y = bitsOffset / rowSize;\n            let x = (bitsOffset % rowSize) * 32;\n            const theBits = bits[bitsOffset];\n            let bit = 0;\n            while (((theBits << (31 - bit)) & 0xFFFFFFFF) === 0) {\n                bit++;\n            }\n            x += bit;\n            return Int32Array.from([x, y]);\n        }\n        getBottomRightOnBit() {\n            const rowSize = this.rowSize;\n            const bits = this.bits;\n            let bitsOffset = bits.length - 1;\n            while (bitsOffset >= 0 && bits[bitsOffset] === 0) {\n                bitsOffset--;\n            }\n            if (bitsOffset < 0) {\n                return null;\n            }\n            const y = Math.floor(bitsOffset / rowSize);\n            let x = Math.floor(bitsOffset % rowSize) * 32;\n            const theBits = bits[bitsOffset];\n            let bit = 31;\n            while ((theBits >>> bit) === 0) {\n                bit--;\n            }\n            x += bit;\n            return Int32Array.from([x, y]);\n        }\n        /**\n         * @return The width of the matrix\n         */\n        getWidth() {\n            return this.width;\n        }\n        /**\n         * @return The height of the matrix\n         */\n        getHeight() {\n            return this.height;\n        }\n        /**\n         * @return The row size of the matrix\n         */\n        getRowSize() {\n            return this.rowSize;\n        }\n        /*@Override*/\n        equals(o) {\n            if (!(o instanceof BitMatrix)) {\n                return false;\n            }\n            const other = o;\n            return this.width === other.width && this.height === other.height && this.rowSize === other.rowSize &&\n                Arrays.equals(this.bits, other.bits);\n        }\n        /*@Override*/\n        hashCode() {\n            let hash = this.width;\n            hash = 31 * hash + this.width;\n            hash = 31 * hash + this.height;\n            hash = 31 * hash + this.rowSize;\n            hash = 31 * hash + Arrays.hashCode(this.bits);\n            return hash;\n        }\n        /**\n         * @return string representation using \"X\" for set and \" \" for unset bits\n         */\n        /*@Override*/\n        // public toString(): string {\n        //   return toString(\": \"X, \"  \")\n        // }\n        /**\n         * @param setString representation of a set bit\n         * @param unsetString representation of an unset bit\n         * @return string representation of entire matrix utilizing given strings\n         */\n        // public toString(setString: string = \"X \", unsetString: string = \"  \"): string {\n        //   return this.buildToString(setString, unsetString, \"\\n\")\n        // }\n        /**\n         * @param setString representation of a set bit\n         * @param unsetString representation of an unset bit\n         * @param lineSeparator newline character in string representation\n         * @return string representation of entire matrix utilizing given strings and line separator\n         * @deprecated call {@link #toString(String,String)} only, which uses \\n line separator always\n         */\n        // @Deprecated\n        toString(setString = 'X ', unsetString = '  ', lineSeparator = '\\n') {\n            return this.buildToString(setString, unsetString, lineSeparator);\n        }\n        buildToString(setString, unsetString, lineSeparator) {\n            let result = new StringBuilder();\n            // result.append(lineSeparator);\n            for (let y = 0, height = this.height; y < height; y++) {\n                for (let x = 0, width = this.width; x < width; x++) {\n                    result.append(this.get(x, y) ? setString : unsetString);\n                }\n                result.append(lineSeparator);\n            }\n            return result.toString();\n        }\n        /*@Override*/\n        clone() {\n            return new BitMatrix(this.width, this.height, this.rowSize, this.bits.slice());\n        }\n    }\n\n    /**\n     * Custom Error class of type Exception.\n     */\n    class NotFoundException extends Exception {\n        static getNotFoundInstance() {\n            return new NotFoundException();\n        }\n    }\n    NotFoundException.kind = 'NotFoundException';\n\n    /*\n     * Copyright 2009 ZXing authors\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n    /**\n     * This Binarizer implementation uses the old ZXing global histogram approach. It is suitable\n     * for low-end mobile devices which don't have enough CPU or memory to use a local thresholding\n     * algorithm. However, because it picks a global black point, it cannot handle difficult shadows\n     * and gradients.\n     *\n     * Faster mobile devices and all desktop applications should probably use HybridBinarizer instead.\n     *\n     * @author dswitkin@google.com (Daniel Switkin)\n     * @author Sean Owen\n     */\n    class GlobalHistogramBinarizer extends Binarizer {\n        constructor(source) {\n            super(source);\n            this.luminances = GlobalHistogramBinarizer.EMPTY;\n            this.buckets = new Int32Array(GlobalHistogramBinarizer.LUMINANCE_BUCKETS);\n        }\n        // Applies simple sharpening to the row data to improve performance of the 1D Readers.\n        /*@Override*/\n        getBlackRow(y /*int*/, row) {\n            const source = this.getLuminanceSource();\n            const width = source.getWidth();\n            if (row === undefined || row === null || row.getSize() < width) {\n                row = new BitArray(width);\n            }\n            else {\n                row.clear();\n            }\n            this.initArrays(width);\n            const localLuminances = source.getRow(y, this.luminances);\n            const localBuckets = this.buckets;\n            for (let x = 0; x < width; x++) {\n                localBuckets[(localLuminances[x] & 0xff) >> GlobalHistogramBinarizer.LUMINANCE_SHIFT]++;\n            }\n            const blackPoint = GlobalHistogramBinarizer.estimateBlackPoint(localBuckets);\n            if (width < 3) {\n                // Special case for very small images\n                for (let x = 0; x < width; x++) {\n                    if ((localLuminances[x] & 0xff) < blackPoint) {\n                        row.set(x);\n                    }\n                }\n            }\n            else {\n                let left = localLuminances[0] & 0xff;\n                let center = localLuminances[1] & 0xff;\n                for (let x = 1; x < width - 1; x++) {\n                    const right = localLuminances[x + 1] & 0xff;\n                    // A simple -1 4 -1 box filter with a weight of 2.\n                    if (((center * 4) - left - right) / 2 < blackPoint) {\n                        row.set(x);\n                    }\n                    left = center;\n                    center = right;\n                }\n            }\n            return row;\n        }\n        // Does not sharpen the data, as this call is intended to only be used by 2D Readers.\n        /*@Override*/\n        getBlackMatrix() {\n            const source = this.getLuminanceSource();\n            const width = source.getWidth();\n            const height = source.getHeight();\n            const matrix = new BitMatrix(width, height);\n            // Quickly calculates the histogram by sampling four rows from the image. This proved to be\n            // more robust on the blackbox tests than sampling a diagonal as we used to do.\n            this.initArrays(width);\n            const localBuckets = this.buckets;\n            for (let y = 1; y < 5; y++) {\n                const row = Math.floor((height * y) / 5);\n                const localLuminances = source.getRow(row, this.luminances);\n                const right = Math.floor((width * 4) / 5);\n                for (let x = Math.floor(width / 5); x < right; x++) {\n                    const pixel = localLuminances[x] & 0xff;\n                    localBuckets[pixel >> GlobalHistogramBinarizer.LUMINANCE_SHIFT]++;\n                }\n            }\n            const blackPoint = GlobalHistogramBinarizer.estimateBlackPoint(localBuckets);\n            // We delay reading the entire image luminance until the black point estimation succeeds.\n            // Although we end up reading four rows twice, it is consistent with our motto of\n            // \"fail quickly\" which is necessary for continuous scanning.\n            const localLuminances = source.getMatrix();\n            for (let y = 0; y < height; y++) {\n                const offset = y * width;\n                for (let x = 0; x < width; x++) {\n                    const pixel = localLuminances[offset + x] & 0xff;\n                    if (pixel < blackPoint) {\n                        matrix.set(x, y);\n                    }\n                }\n            }\n            return matrix;\n        }\n        /*@Override*/\n        createBinarizer(source) {\n            return new GlobalHistogramBinarizer(source);\n        }\n        initArrays(luminanceSize /*int*/) {\n            if (this.luminances.length < luminanceSize) {\n                this.luminances = new Uint8ClampedArray(luminanceSize);\n            }\n            const buckets = this.buckets;\n            for (let x = 0; x < GlobalHistogramBinarizer.LUMINANCE_BUCKETS; x++) {\n                buckets[x] = 0;\n            }\n        }\n        static estimateBlackPoint(buckets) {\n            // Find the tallest peak in the histogram.\n            const numBuckets = buckets.length;\n            let maxBucketCount = 0;\n            let firstPeak = 0;\n            let firstPeakSize = 0;\n            for (let x = 0; x < numBuckets; x++) {\n                if (buckets[x] > firstPeakSize) {\n                    firstPeak = x;\n                    firstPeakSize = buckets[x];\n                }\n                if (buckets[x] > maxBucketCount) {\n                    maxBucketCount = buckets[x];\n                }\n            }\n            // Find the second-tallest peak which is somewhat far from the tallest peak.\n            let secondPeak = 0;\n            let secondPeakScore = 0;\n            for (let x = 0; x < numBuckets; x++) {\n                const distanceToBiggest = x - firstPeak;\n                // Encourage more distant second peaks by multiplying by square of distance.\n                const score = buckets[x] * distanceToBiggest * distanceToBiggest;\n                if (score > secondPeakScore) {\n                    secondPeak = x;\n                    secondPeakScore = score;\n                }\n            }\n            // Make sure firstPeak corresponds to the black peak.\n            if (firstPeak > secondPeak) {\n                const temp = firstPeak;\n                firstPeak = secondPeak;\n                secondPeak = temp;\n            }\n            // If there is too little contrast in the image to pick a meaningful black point, throw rather\n            // than waste time trying to decode the image, and risk false positives.\n            if (secondPeak - firstPeak <= numBuckets / 16) {\n                throw new NotFoundException();\n            }\n            // Find a valley between them that is low and closer to the white peak.\n            let bestValley = secondPeak - 1;\n            let bestValleyScore = -1;\n            for (let x = secondPeak - 1; x > firstPeak; x--) {\n                const fromFirst = x - firstPeak;\n                const score = fromFirst * fromFirst * (secondPeak - x) * (maxBucketCount - buckets[x]);\n                if (score > bestValleyScore) {\n                    bestValley = x;\n                    bestValleyScore = score;\n                }\n            }\n            return bestValley << GlobalHistogramBinarizer.LUMINANCE_SHIFT;\n        }\n    }\n    GlobalHistogramBinarizer.LUMINANCE_BITS = 5;\n    GlobalHistogramBinarizer.LUMINANCE_SHIFT = 8 - GlobalHistogramBinarizer.LUMINANCE_BITS;\n    GlobalHistogramBinarizer.LUMINANCE_BUCKETS = 1 << GlobalHistogramBinarizer.LUMINANCE_BITS;\n    GlobalHistogramBinarizer.EMPTY = Uint8ClampedArray.from([0]);\n\n    /*\n     * Copyright 2009 ZXing authors\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n    /**\n     * This class implements a local thresholding algorithm, which while slower than the\n     * GlobalHistogramBinarizer, is fairly efficient for what it does. It is designed for\n     * high frequency images of barcodes with black data on white backgrounds. For this application,\n     * it does a much better job than a global blackpoint with severe shadows and gradients.\n     * However it tends to produce artifacts on lower frequency images and is therefore not\n     * a good general purpose binarizer for uses outside ZXing.\n     *\n     * This class extends GlobalHistogramBinarizer, using the older histogram approach for 1D readers,\n     * and the newer local approach for 2D readers. 1D decoding using a per-row histogram is already\n     * inherently local, and only fails for horizontal gradients. We can revisit that problem later,\n     * but for now it was not a win to use local blocks for 1D.\n     *\n     * This Binarizer is the default for the unit tests and the recommended class for library users.\n     *\n     * @author dswitkin@google.com (Daniel Switkin)\n     */\n    class HybridBinarizer extends GlobalHistogramBinarizer {\n        constructor(source) {\n            super(source);\n            this.matrix = null;\n        }\n        /**\n         * Calculates the final BitMatrix once for all requests. This could be called once from the\n         * constructor instead, but there are some advantages to doing it lazily, such as making\n         * profiling easier, and not doing heavy lifting when callers don't expect it.\n         */\n        /*@Override*/\n        getBlackMatrix() {\n            if (this.matrix !== null) {\n                return this.matrix;\n            }\n            const source = this.getLuminanceSource();\n            const width = source.getWidth();\n            const height = source.getHeight();\n            if (width >= HybridBinarizer.MINIMUM_DIMENSION && height >= HybridBinarizer.MINIMUM_DIMENSION) {\n                const luminances = source.getMatrix();\n                let subWidth = width >> HybridBinarizer.BLOCK_SIZE_POWER;\n                if ((width & HybridBinarizer.BLOCK_SIZE_MASK) !== 0) {\n                    subWidth++;\n                }\n                let subHeight = height >> HybridBinarizer.BLOCK_SIZE_POWER;\n                if ((height & HybridBinarizer.BLOCK_SIZE_MASK) !== 0) {\n                    subHeight++;\n                }\n                const blackPoints = HybridBinarizer.calculateBlackPoints(luminances, subWidth, subHeight, width, height);\n                const newMatrix = new BitMatrix(width, height);\n                HybridBinarizer.calculateThresholdForBlock(luminances, subWidth, subHeight, width, height, blackPoints, newMatrix);\n                this.matrix = newMatrix;\n            }\n            else {\n                // If the image is too small, fall back to the global histogram approach.\n                this.matrix = super.getBlackMatrix();\n            }\n            return this.matrix;\n        }\n        /*@Override*/\n        createBinarizer(source) {\n            return new HybridBinarizer(source);\n        }\n        /**\n         * For each block in the image, calculate the average black point using a 5x5 grid\n         * of the blocks around it. Also handles the corner cases (fractional blocks are computed based\n         * on the last pixels in the row/column which are also used in the previous block).\n         */\n        static calculateThresholdForBlock(luminances, subWidth /*int*/, subHeight /*int*/, width /*int*/, height /*int*/, blackPoints, matrix) {\n            const maxYOffset = height - HybridBinarizer.BLOCK_SIZE;\n            const maxXOffset = width - HybridBinarizer.BLOCK_SIZE;\n            for (let y = 0; y < subHeight; y++) {\n                let yoffset = y << HybridBinarizer.BLOCK_SIZE_POWER;\n                if (yoffset > maxYOffset) {\n                    yoffset = maxYOffset;\n                }\n                const top = HybridBinarizer.cap(y, 2, subHeight - 3);\n                for (let x = 0; x < subWidth; x++) {\n                    let xoffset = x << HybridBinarizer.BLOCK_SIZE_POWER;\n                    if (xoffset > maxXOffset) {\n                        xoffset = maxXOffset;\n                    }\n                    const left = HybridBinarizer.cap(x, 2, subWidth - 3);\n                    let sum = 0;\n                    for (let z = -2; z <= 2; z++) {\n                        const blackRow = blackPoints[top + z];\n                        sum += blackRow[left - 2] + blackRow[left - 1] + blackRow[left] + blackRow[left + 1] + blackRow[left + 2];\n                    }\n                    const average = sum / 25;\n                    HybridBinarizer.thresholdBlock(luminances, xoffset, yoffset, average, width, matrix);\n                }\n            }\n        }\n        static cap(value /*int*/, min /*int*/, max /*int*/) {\n            return value < min ? min : value > max ? max : value;\n        }\n        /**\n         * Applies a single threshold to a block of pixels.\n         */\n        static thresholdBlock(luminances, xoffset /*int*/, yoffset /*int*/, threshold /*int*/, stride /*int*/, matrix) {\n            for (let y = 0, offset = yoffset * stride + xoffset; y < HybridBinarizer.BLOCK_SIZE; y++, offset += stride) {\n                for (let x = 0; x < HybridBinarizer.BLOCK_SIZE; x++) {\n                    // Comparison needs to be <= so that black == 0 pixels are black even if the threshold is 0.\n                    if ((luminances[offset + x] & 0xFF) <= threshold) {\n                        matrix.set(xoffset + x, yoffset + y);\n                    }\n                }\n            }\n        }\n        /**\n         * Calculates a single black point for each block of pixels and saves it away.\n         * See the following thread for a discussion of this algorithm:\n         *  http://groups.google.com/group/zxing/browse_thread/thread/d06efa2c35a7ddc0\n         */\n        static calculateBlackPoints(luminances, subWidth /*int*/, subHeight /*int*/, width /*int*/, height /*int*/) {\n            const maxYOffset = height - HybridBinarizer.BLOCK_SIZE;\n            const maxXOffset = width - HybridBinarizer.BLOCK_SIZE;\n            // tslint:disable-next-line:whitespace\n            const blackPoints = new Array(subHeight); // subWidth\n            for (let y = 0; y < subHeight; y++) {\n                blackPoints[y] = new Int32Array(subWidth);\n                let yoffset = y << HybridBinarizer.BLOCK_SIZE_POWER;\n                if (yoffset > maxYOffset) {\n                    yoffset = maxYOffset;\n                }\n                for (let x = 0; x < subWidth; x++) {\n                    let xoffset = x << HybridBinarizer.BLOCK_SIZE_POWER;\n                    if (xoffset > maxXOffset) {\n                        xoffset = maxXOffset;\n                    }\n                    let sum = 0;\n                    let min = 0xFF;\n                    let max = 0;\n                    for (let yy = 0, offset = yoffset * width + xoffset; yy < HybridBinarizer.BLOCK_SIZE; yy++, offset += width) {\n                        for (let xx = 0; xx < HybridBinarizer.BLOCK_SIZE; xx++) {\n                            const pixel = luminances[offset + xx] & 0xFF;\n                            sum += pixel;\n                            // still looking for good contrast\n                            if (pixel < min) {\n                                min = pixel;\n                            }\n                            if (pixel > max) {\n                                max = pixel;\n                            }\n                        }\n                        // short-circuit min/max tests once dynamic range is met\n                        if (max - min > HybridBinarizer.MIN_DYNAMIC_RANGE) {\n                            // finish the rest of the rows quickly\n                            for (yy++, offset += width; yy < HybridBinarizer.BLOCK_SIZE; yy++, offset += width) {\n                                for (let xx = 0; xx < HybridBinarizer.BLOCK_SIZE; xx++) {\n                                    sum += luminances[offset + xx] & 0xFF;\n                                }\n                            }\n                        }\n                    }\n                    // The default estimate is the average of the values in the block.\n                    let average = sum >> (HybridBinarizer.BLOCK_SIZE_POWER * 2);\n                    if (max - min <= HybridBinarizer.MIN_DYNAMIC_RANGE) {\n                        // If variation within the block is low, assume this is a block with only light or only\n                        // dark pixels. In that case we do not want to use the average, as it would divide this\n                        // low contrast area into black and white pixels, essentially creating data out of noise.\n                        //\n                        // The default assumption is that the block is light/background. Since no estimate for\n                        // the level of dark pixels exists locally, use half the min for the block.\n                        average = min / 2;\n                        if (y > 0 && x > 0) {\n                            // Correct the \"white background\" assumption for blocks that have neighbors by comparing\n                            // the pixels in this block to the previously calculated black points. This is based on\n                            // the fact that dark barcode symbology is always surrounded by some amount of light\n                            // background for which reasonable black point estimates were made. The bp estimated at\n                            // the boundaries is used for the interior.\n                            // The (min < bp) is arbitrary but works better than other heuristics that were tried.\n                            const averageNeighborBlackPoint = (blackPoints[y - 1][x] + (2 * blackPoints[y][x - 1]) + blackPoints[y - 1][x - 1]) / 4;\n                            if (min < averageNeighborBlackPoint) {\n                                average = averageNeighborBlackPoint;\n                            }\n                        }\n                    }\n                    blackPoints[y][x] = average;\n                }\n            }\n            return blackPoints;\n        }\n    }\n    // This class uses 5x5 blocks to compute local luminance, where each block is 8x8 pixels.\n    // So this is the smallest dimension in each axis we can accept.\n    HybridBinarizer.BLOCK_SIZE_POWER = 3;\n    HybridBinarizer.BLOCK_SIZE = 1 << HybridBinarizer.BLOCK_SIZE_POWER; // ...0100...00\n    HybridBinarizer.BLOCK_SIZE_MASK = HybridBinarizer.BLOCK_SIZE - 1; // ...0011...11\n    HybridBinarizer.MINIMUM_DIMENSION = HybridBinarizer.BLOCK_SIZE * 5;\n    HybridBinarizer.MIN_DYNAMIC_RANGE = 24;\n\n    /*\n     * Copyright 2009 ZXing authors\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n    /*namespace com.google.zxing {*/\n    /**\n     * The purpose of this class hierarchy is to abstract different bitmap implementations across\n     * platforms into a standard interface for requesting greyscale luminance values. The interface\n     * only provides immutable methods; therefore crop and rotation create copies. This is to ensure\n     * that one Reader does not modify the original luminance source and leave it in an unknown state\n     * for other Readers in the chain.\n     *\n     * @author dswitkin@google.com (Daniel Switkin)\n     */\n    class LuminanceSource {\n        constructor(width /*int*/, height /*int*/) {\n            this.width = width;\n            this.height = height;\n        }\n        /**\n         * @return The width of the bitmap.\n         */\n        getWidth() {\n            return this.width;\n        }\n        /**\n         * @return The height of the bitmap.\n         */\n        getHeight() {\n            return this.height;\n        }\n        /**\n         * @return Whether this subclass supports cropping.\n         */\n        isCropSupported() {\n            return false;\n        }\n        /**\n         * Returns a new object with cropped image data. Implementations may keep a reference to the\n         * original data rather than a copy. Only callable if isCropSupported() is true.\n         *\n         * @param left The left coordinate, which must be in [0,getWidth())\n         * @param top The top coordinate, which must be in [0,getHeight())\n         * @param width The width of the rectangle to crop.\n         * @param height The height of the rectangle to crop.\n         * @return A cropped version of this object.\n         */\n        crop(left /*int*/, top /*int*/, width /*int*/, height /*int*/) {\n            throw new UnsupportedOperationException('This luminance source does not support cropping.');\n        }\n        /**\n         * @return Whether this subclass supports counter-clockwise rotation.\n         */\n        isRotateSupported() {\n            return false;\n        }\n        /**\n         * Returns a new object with rotated image data by 90 degrees counterclockwise.\n         * Only callable if {@link #isRotateSupported()} is true.\n         *\n         * @return A rotated version of this object.\n         */\n        rotateCounterClockwise() {\n            throw new UnsupportedOperationException('This luminance source does not support rotation by 90 degrees.');\n        }\n        /**\n         * Returns a new object with rotated image data by 45 degrees counterclockwise.\n         * Only callable if {@link #isRotateSupported()} is true.\n         *\n         * @return A rotated version of this object.\n         */\n        rotateCounterClockwise45() {\n            throw new UnsupportedOperationException('This luminance source does not support rotation by 45 degrees.');\n        }\n        /*@Override*/\n        toString() {\n            const row = new Uint8ClampedArray(this.width);\n            let result = new StringBuilder();\n            for (let y = 0; y < this.height; y++) {\n                const sourceRow = this.getRow(y, row);\n                for (let x = 0; x < this.width; x++) {\n                    const luminance = sourceRow[x] & 0xFF;\n                    let c;\n                    if (luminance < 0x40) {\n                        c = '#';\n                    }\n                    else if (luminance < 0x80) {\n                        c = '+';\n                    }\n                    else if (luminance < 0xC0) {\n                        c = '.';\n                    }\n                    else {\n                        c = ' ';\n                    }\n                    result.append(c);\n                }\n                result.append('\\n');\n            }\n            return result.toString();\n        }\n    }\n\n    /*\n     * Copyright 2009 ZXing authors\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n    /*namespace com.google.zxing {*/\n    /**\n     * A wrapper implementation of {@link LuminanceSource} which inverts the luminances it returns -- black becomes\n     * white and vice versa, and each value becomes (255-value).\n     *\n     * @author Sean Owen\n     */\n    class InvertedLuminanceSource extends LuminanceSource {\n        constructor(delegate) {\n            super(delegate.getWidth(), delegate.getHeight());\n            this.delegate = delegate;\n        }\n        /*@Override*/\n        getRow(y /*int*/, row) {\n            const sourceRow = this.delegate.getRow(y, row);\n            const width = this.getWidth();\n            for (let i = 0; i < width; i++) {\n                sourceRow[i] = /*(byte)*/ (255 - (sourceRow[i] & 0xFF));\n            }\n            return sourceRow;\n        }\n        /*@Override*/\n        getMatrix() {\n            const matrix = this.delegate.getMatrix();\n            const length = this.getWidth() * this.getHeight();\n            const invertedMatrix = new Uint8ClampedArray(length);\n            for (let i = 0; i < length; i++) {\n                invertedMatrix[i] = /*(byte)*/ (255 - (matrix[i] & 0xFF));\n            }\n            return invertedMatrix;\n        }\n        /*@Override*/\n        isCropSupported() {\n            return this.delegate.isCropSupported();\n        }\n        /*@Override*/\n        crop(left /*int*/, top /*int*/, width /*int*/, height /*int*/) {\n            return new InvertedLuminanceSource(this.delegate.crop(left, top, width, height));\n        }\n        /*@Override*/\n        isRotateSupported() {\n            return this.delegate.isRotateSupported();\n        }\n        /**\n         * @return original delegate {@link LuminanceSource} since invert undoes itself\n         */\n        /*@Override*/\n        invert() {\n            return this.delegate;\n        }\n        /*@Override*/\n        rotateCounterClockwise() {\n            return new InvertedLuminanceSource(this.delegate.rotateCounterClockwise());\n        }\n        /*@Override*/\n        rotateCounterClockwise45() {\n            return new InvertedLuminanceSource(this.delegate.rotateCounterClockwise45());\n        }\n    }\n\n    /**\n     * @deprecated Moving to @zxing/browser\n     */\n    class HTMLCanvasElementLuminanceSource extends LuminanceSource {\n        constructor(canvas) {\n            super(canvas.width, canvas.height);\n            this.canvas = canvas;\n            this.tempCanvasElement = null;\n            this.buffer = HTMLCanvasElementLuminanceSource.makeBufferFromCanvasImageData(canvas);\n        }\n        static makeBufferFromCanvasImageData(canvas) {\n            const imageData = canvas.getContext('2d').getImageData(0, 0, canvas.width, canvas.height);\n            return HTMLCanvasElementLuminanceSource.toGrayscaleBuffer(imageData.data, canvas.width, canvas.height);\n        }\n        static toGrayscaleBuffer(imageBuffer, width, height) {\n            const grayscaleBuffer = new Uint8ClampedArray(width * height);\n            for (let i = 0, j = 0, length = imageBuffer.length; i < length; i += 4, j++) {\n                let gray;\n                const alpha = imageBuffer[i + 3];\n                // The color of fully-transparent pixels is irrelevant. They are often, technically, fully-transparent\n                // black (0 alpha, and then 0 RGB). They are often used, of course as the \"white\" area in a\n                // barcode image. Force any such pixel to be white:\n                if (alpha === 0) {\n                    gray = 0xFF;\n                }\n                else {\n                    const pixelR = imageBuffer[i];\n                    const pixelG = imageBuffer[i + 1];\n                    const pixelB = imageBuffer[i + 2];\n                    // .299R + 0.587G + 0.114B (YUV/YIQ for PAL and NTSC),\n                    // (306*R) >> 10 is approximately equal to R*0.299, and so on.\n                    // 0x200 >> 10 is 0.5, it implements rounding.\n                    gray = (306 * pixelR +\n                        601 * pixelG +\n                        117 * pixelB +\n                        0x200) >> 10;\n                }\n                grayscaleBuffer[j] = gray;\n            }\n            return grayscaleBuffer;\n        }\n        getRow(y /*int*/, row) {\n            if (y < 0 || y >= this.getHeight()) {\n                throw new IllegalArgumentException('Requested row is outside the image: ' + y);\n            }\n            const width = this.getWidth();\n            const start = y * width;\n            if (row === null) {\n                row = this.buffer.slice(start, start + width);\n            }\n            else {\n                if (row.length < width) {\n                    row = new Uint8ClampedArray(width);\n                }\n                // The underlying raster of image consists of bytes with the luminance values\n                // TODO: can avoid set/slice?\n                row.set(this.buffer.slice(start, start + width));\n            }\n            return row;\n        }\n        getMatrix() {\n            return this.buffer;\n        }\n        isCropSupported() {\n            return true;\n        }\n        crop(left /*int*/, top /*int*/, width /*int*/, height /*int*/) {\n            super.crop(left, top, width, height);\n            return this;\n        }\n        /**\n         * This is always true, since the image is a gray-scale image.\n         *\n         * @return true\n         */\n        isRotateSupported() {\n            return true;\n        }\n        rotateCounterClockwise() {\n            this.rotate(-90);\n            return this;\n        }\n        rotateCounterClockwise45() {\n            this.rotate(-45);\n            return this;\n        }\n        getTempCanvasElement() {\n            if (null === this.tempCanvasElement) {\n                const tempCanvasElement = this.canvas.ownerDocument.createElement('canvas');\n                tempCanvasElement.width = this.canvas.width;\n                tempCanvasElement.height = this.canvas.height;\n                this.tempCanvasElement = tempCanvasElement;\n            }\n            return this.tempCanvasElement;\n        }\n        rotate(angle) {\n            const tempCanvasElement = this.getTempCanvasElement();\n            const tempContext = tempCanvasElement.getContext('2d');\n            const angleRadians = angle * HTMLCanvasElementLuminanceSource.DEGREE_TO_RADIANS;\n            // Calculate and set new dimensions for temp canvas\n            const width = this.canvas.width;\n            const height = this.canvas.height;\n            const newWidth = Math.ceil(Math.abs(Math.cos(angleRadians)) * width + Math.abs(Math.sin(angleRadians)) * height);\n            const newHeight = Math.ceil(Math.abs(Math.sin(angleRadians)) * width + Math.abs(Math.cos(angleRadians)) * height);\n            tempCanvasElement.width = newWidth;\n            tempCanvasElement.height = newHeight;\n            // Draw at center of temp canvas to prevent clipping of image data\n            tempContext.translate(newWidth / 2, newHeight / 2);\n            tempContext.rotate(angleRadians);\n            tempContext.drawImage(this.canvas, width / -2, height / -2);\n            this.buffer = HTMLCanvasElementLuminanceSource.makeBufferFromCanvasImageData(tempCanvasElement);\n            return this;\n        }\n        invert() {\n            return new InvertedLuminanceSource(this);\n        }\n    }\n    HTMLCanvasElementLuminanceSource.DEGREE_TO_RADIANS = Math.PI / 180;\n\n    /**\n     * @deprecated Moving to @zxing/browser\n     *\n     * Video input device metadata containing the id and label of the device if available.\n     */\n    class VideoInputDevice {\n        /**\n         * Creates an instance of VideoInputDevice.\n         *\n         * @param {string} deviceId the video input device id\n         * @param {string} label the label of the device if available\n         */\n        constructor(deviceId, label, groupId) {\n            this.deviceId = deviceId;\n            this.label = label;\n            /** @inheritdoc */\n            this.kind = 'videoinput';\n            this.groupId = groupId || undefined;\n        }\n        /** @inheritdoc */\n        toJSON() {\n            return {\n                kind: this.kind,\n                groupId: this.groupId,\n                deviceId: this.deviceId,\n                label: this.label,\n            };\n        }\n    }\n\n    var __awaiter = ((globalThis || global || self || window || undefined) && (globalThis || global || self || window || undefined).__awaiter) || function (thisArg, _arguments, P, generator) {\n        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n        return new (P || (P = Promise))(function (resolve, reject) {\n            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n            function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n            step((generator = generator.apply(thisArg, _arguments || [])).next());\n        });\n    };\n    /**\n     * @deprecated Moving to @zxing/browser\n     *\n     * Base class for browser code reader.\n     */\n    class BrowserCodeReader {\n        /**\n         * Creates an instance of BrowserCodeReader.\n         * @param {Reader} reader The reader instance to decode the barcode\n         * @param {number} [timeBetweenScansMillis=500] the time delay between subsequent successful decode tries\n         *\n         * @memberOf BrowserCodeReader\n         */\n        constructor(reader, timeBetweenScansMillis = 500, _hints) {\n            this.reader = reader;\n            this.timeBetweenScansMillis = timeBetweenScansMillis;\n            this._hints = _hints;\n            /**\n             * This will break the loop.\n             */\n            this._stopContinuousDecode = false;\n            /**\n             * This will break the loop.\n             */\n            this._stopAsyncDecode = false;\n            /**\n             * Delay time between decode attempts made by the scanner.\n             */\n            this._timeBetweenDecodingAttempts = 0;\n        }\n        /**\n         * If navigator is present.\n         */\n        get hasNavigator() {\n            return typeof navigator !== 'undefined';\n        }\n        /**\n         * If mediaDevices under navigator is supported.\n         */\n        get isMediaDevicesSuported() {\n            return this.hasNavigator && !!navigator.mediaDevices;\n        }\n        /**\n         * If enumerateDevices under navigator is supported.\n         */\n        get canEnumerateDevices() {\n            return !!(this.isMediaDevicesSuported && navigator.mediaDevices.enumerateDevices);\n        }\n        /** Time between two decoding tries in milli seconds. */\n        get timeBetweenDecodingAttempts() {\n            return this._timeBetweenDecodingAttempts;\n        }\n        /**\n         * Change the time span the decoder waits between two decoding tries.\n         *\n         * @param {number} millis Time between two decoding tries in milli seconds.\n         */\n        set timeBetweenDecodingAttempts(millis) {\n            this._timeBetweenDecodingAttempts = millis < 0 ? 0 : millis;\n        }\n        /**\n         * Sets the hints.\n         */\n        set hints(hints) {\n            this._hints = hints || null;\n        }\n        /**\n         * Sets the hints.\n         */\n        get hints() {\n            return this._hints;\n        }\n        /**\n         * Lists all the available video input devices.\n         */\n        listVideoInputDevices() {\n            return __awaiter(this, void 0, void 0, function* () {\n                if (!this.hasNavigator) {\n                    throw new Error('Can\\'t enumerate devices, navigator is not present.');\n                }\n                if (!this.canEnumerateDevices) {\n                    throw new Error('Can\\'t enumerate devices, method not supported.');\n                }\n                const devices = yield navigator.mediaDevices.enumerateDevices();\n                const videoDevices = [];\n                for (const device of devices) {\n                    const kind = device.kind === 'video' ? 'videoinput' : device.kind;\n                    if (kind !== 'videoinput') {\n                        continue;\n                    }\n                    const deviceId = device.deviceId || device.id;\n                    const label = device.label || `Video device ${videoDevices.length + 1}`;\n                    const groupId = device.groupId;\n                    const videoDevice = { deviceId, label, kind, groupId };\n                    videoDevices.push(videoDevice);\n                }\n                return videoDevices;\n            });\n        }\n        /**\n         * Obtain the list of available devices with type 'videoinput'.\n         *\n         * @returns {Promise<VideoInputDevice[]>} an array of available video input devices\n         *\n         * @memberOf BrowserCodeReader\n         *\n         * @deprecated Use `listVideoInputDevices` instead.\n         */\n        getVideoInputDevices() {\n            return __awaiter(this, void 0, void 0, function* () {\n                const devices = yield this.listVideoInputDevices();\n                return devices.map(d => new VideoInputDevice(d.deviceId, d.label));\n            });\n        }\n        /**\n         * Let's you find a device using it's Id.\n         */\n        findDeviceById(deviceId) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const devices = yield this.listVideoInputDevices();\n                if (!devices) {\n                    return null;\n                }\n                return devices.find(x => x.deviceId === deviceId);\n            });\n        }\n        /**\n         * Decodes the barcode from the device specified by deviceId while showing the video in the specified video element.\n         *\n         * @param deviceId the id of one of the devices obtained after calling getVideoInputDevices. Can be undefined, in this case it will decode from one of the available devices, preffering the main camera (environment facing) if available.\n         * @param video the video element in page where to show the video while decoding. Can be either an element id or directly an HTMLVideoElement. Can be undefined, in which case no video will be shown.\n         * @returns The decoding result.\n         *\n         * @memberOf BrowserCodeReader\n         *\n         * @deprecated Use `decodeOnceFromVideoDevice` instead.\n         */\n        decodeFromInputVideoDevice(deviceId, videoSource) {\n            return __awaiter(this, void 0, void 0, function* () {\n                return yield this.decodeOnceFromVideoDevice(deviceId, videoSource);\n            });\n        }\n        /**\n         * In one attempt, tries to decode the barcode from the device specified by deviceId while showing the video in the specified video element.\n         *\n         * @param deviceId the id of one of the devices obtained after calling getVideoInputDevices. Can be undefined, in this case it will decode from one of the available devices, preffering the main camera (environment facing) if available.\n         * @param video the video element in page where to show the video while decoding. Can be either an element id or directly an HTMLVideoElement. Can be undefined, in which case no video will be shown.\n         * @returns The decoding result.\n         *\n         * @memberOf BrowserCodeReader\n         */\n        decodeOnceFromVideoDevice(deviceId, videoSource) {\n            return __awaiter(this, void 0, void 0, function* () {\n                this.reset();\n                let videoConstraints;\n                if (!deviceId) {\n                    videoConstraints = { facingMode: 'environment' };\n                }\n                else {\n                    videoConstraints = { deviceId: { exact: deviceId } };\n                }\n                const constraints = { video: videoConstraints };\n                return yield this.decodeOnceFromConstraints(constraints, videoSource);\n            });\n        }\n        /**\n         * In one attempt, tries to decode the barcode from a stream obtained from the given constraints while showing the video in the specified video element.\n         *\n         * @param constraints the media stream constraints to get s valid media stream to decode from\n         * @param video the video element in page where to show the video while decoding. Can be either an element id or directly an HTMLVideoElement. Can be undefined, in which case no video will be shown.\n         * @returns The decoding result.\n         *\n         * @memberOf BrowserCodeReader\n         */\n        decodeOnceFromConstraints(constraints, videoSource) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const stream = yield navigator.mediaDevices.getUserMedia(constraints);\n                return yield this.decodeOnceFromStream(stream, videoSource);\n            });\n        }\n        /**\n         * In one attempt, tries to decode the barcode from a stream obtained from the given constraints while showing the video in the specified video element.\n         *\n         * @param {MediaStream} [constraints] the media stream constraints to get s valid media stream to decode from\n         * @param {string|HTMLVideoElement} [video] the video element in page where to show the video while decoding. Can be either an element id or directly an HTMLVideoElement. Can be undefined, in which case no video will be shown.\n         * @returns {Promise<Result>} The decoding result.\n         *\n         * @memberOf BrowserCodeReader\n         */\n        decodeOnceFromStream(stream, videoSource) {\n            return __awaiter(this, void 0, void 0, function* () {\n                this.reset();\n                const video = yield this.attachStreamToVideo(stream, videoSource);\n                const result = yield this.decodeOnce(video);\n                return result;\n            });\n        }\n        /**\n         * Continuously decodes the barcode from the device specified by device while showing the video in the specified video element.\n         *\n         * @param {string|null} [deviceId] the id of one of the devices obtained after calling getVideoInputDevices. Can be undefined, in this case it will decode from one of the available devices, preffering the main camera (environment facing) if available.\n         * @param {string|HTMLVideoElement|null} [video] the video element in page where to show the video while decoding. Can be either an element id or directly an HTMLVideoElement. Can be undefined, in which case no video will be shown.\n         * @returns {Promise<void>}\n         *\n         * @memberOf BrowserCodeReader\n         *\n         * @deprecated Use `decodeFromVideoDevice` instead.\n         */\n        decodeFromInputVideoDeviceContinuously(deviceId, videoSource, callbackFn) {\n            return __awaiter(this, void 0, void 0, function* () {\n                return yield this.decodeFromVideoDevice(deviceId, videoSource, callbackFn);\n            });\n        }\n        /**\n         * Continuously tries to decode the barcode from the device specified by device while showing the video in the specified video element.\n         *\n         * @param {string|null} [deviceId] the id of one of the devices obtained after calling getVideoInputDevices. Can be undefined, in this case it will decode from one of the available devices, preffering the main camera (environment facing) if available.\n         * @param {string|HTMLVideoElement|null} [video] the video element in page where to show the video while decoding. Can be either an element id or directly an HTMLVideoElement. Can be undefined, in which case no video will be shown.\n         * @returns {Promise<void>}\n         *\n         * @memberOf BrowserCodeReader\n         */\n        decodeFromVideoDevice(deviceId, videoSource, callbackFn) {\n            return __awaiter(this, void 0, void 0, function* () {\n                let videoConstraints;\n                if (!deviceId) {\n                    videoConstraints = { facingMode: 'environment' };\n                }\n                else {\n                    videoConstraints = { deviceId: { exact: deviceId } };\n                }\n                const constraints = { video: videoConstraints };\n                return yield this.decodeFromConstraints(constraints, videoSource, callbackFn);\n            });\n        }\n        /**\n         * Continuously tries to decode the barcode from a stream obtained from the given constraints while showing the video in the specified video element.\n         *\n         * @param {MediaStream} [constraints] the media stream constraints to get s valid media stream to decode from\n         * @param {string|HTMLVideoElement} [video] the video element in page where to show the video while decoding. Can be either an element id or directly an HTMLVideoElement. Can be undefined, in which case no video will be shown.\n         * @returns {Promise<Result>} The decoding result.\n         *\n         * @memberOf BrowserCodeReader\n         */\n        decodeFromConstraints(constraints, videoSource, callbackFn) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const stream = yield navigator.mediaDevices.getUserMedia(constraints);\n                return yield this.decodeFromStream(stream, videoSource, callbackFn);\n            });\n        }\n        /**\n         * In one attempt, tries to decode the barcode from a stream obtained from the given constraints while showing the video in the specified video element.\n         *\n         * @param {MediaStream} [constraints] the media stream constraints to get s valid media stream to decode from\n         * @param {string|HTMLVideoElement} [video] the video element in page where to show the video while decoding. Can be either an element id or directly an HTMLVideoElement. Can be undefined, in which case no video will be shown.\n         * @returns {Promise<Result>} The decoding result.\n         *\n         * @memberOf BrowserCodeReader\n         */\n        decodeFromStream(stream, videoSource, callbackFn) {\n            return __awaiter(this, void 0, void 0, function* () {\n                this.reset();\n                const video = yield this.attachStreamToVideo(stream, videoSource);\n                return yield this.decodeContinuously(video, callbackFn);\n            });\n        }\n        /**\n         * Breaks the decoding loop.\n         */\n        stopAsyncDecode() {\n            this._stopAsyncDecode = true;\n        }\n        /**\n         * Breaks the decoding loop.\n         */\n        stopContinuousDecode() {\n            this._stopContinuousDecode = true;\n        }\n        /**\n         * Sets the new stream and request a new decoding-with-delay.\n         *\n         * @param stream The stream to be shown in the video element.\n         * @param decodeFn A callback for the decode method.\n         */\n        attachStreamToVideo(stream, videoSource) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const videoElement = this.prepareVideoElement(videoSource);\n                this.addVideoSource(videoElement, stream);\n                this.videoElement = videoElement;\n                this.stream = stream;\n                yield this.playVideoOnLoadAsync(videoElement);\n                return videoElement;\n            });\n        }\n        /**\n         *\n         * @param videoElement\n         */\n        playVideoOnLoadAsync(videoElement) {\n            return new Promise((resolve, reject) => this.playVideoOnLoad(videoElement, () => resolve()));\n        }\n        /**\n         * Binds listeners and callbacks to the videoElement.\n         *\n         * @param element\n         * @param callbackFn\n         */\n        playVideoOnLoad(element, callbackFn) {\n            this.videoEndedListener = () => this.stopStreams();\n            this.videoCanPlayListener = () => this.tryPlayVideo(element);\n            element.addEventListener('ended', this.videoEndedListener);\n            element.addEventListener('canplay', this.videoCanPlayListener);\n            element.addEventListener('playing', callbackFn);\n            // if canplay was already fired, we won't know when to play, so just give it a try\n            this.tryPlayVideo(element);\n        }\n        /**\n         * Checks if the given video element is currently playing.\n         */\n        isVideoPlaying(video) {\n            return video.currentTime > 0 && !video.paused && !video.ended && video.readyState > 2;\n        }\n        /**\n         * Just tries to play the video and logs any errors.\n         * The play call is only made is the video is not already playing.\n         */\n        tryPlayVideo(videoElement) {\n            return __awaiter(this, void 0, void 0, function* () {\n                if (this.isVideoPlaying(videoElement)) {\n                    console.warn('Trying to play video that is already playing.');\n                    return;\n                }\n                try {\n                    yield videoElement.play();\n                }\n                catch (_a) {\n                    console.warn('It was not possible to play the video.');\n                }\n            });\n        }\n        /**\n         * Searches and validates a media element.\n         */\n        getMediaElement(mediaElementId, type) {\n            const mediaElement = document.getElementById(mediaElementId);\n            if (!mediaElement) {\n                throw new ArgumentException(`element with id '${mediaElementId}' not found`);\n            }\n            if (mediaElement.nodeName.toLowerCase() !== type.toLowerCase()) {\n                throw new ArgumentException(`element with id '${mediaElementId}' must be an ${type} element`);\n            }\n            return mediaElement;\n        }\n        /**\n         * Decodes the barcode from an image.\n         *\n         * @param {(string|HTMLImageElement)} [source] The image element that can be either an element id or the element itself. Can be undefined in which case the decoding will be done from the imageUrl parameter.\n         * @param {string} [url]\n         * @returns {Promise<Result>} The decoding result.\n         *\n         * @memberOf BrowserCodeReader\n         */\n        decodeFromImage(source, url) {\n            if (!source && !url) {\n                throw new ArgumentException('either imageElement with a src set or an url must be provided');\n            }\n            if (url && !source) {\n                return this.decodeFromImageUrl(url);\n            }\n            return this.decodeFromImageElement(source);\n        }\n        /**\n         * Decodes the barcode from a video.\n         *\n         * @param {(string|HTMLImageElement)} [source] The image element that can be either an element id or the element itself. Can be undefined in which case the decoding will be done from the imageUrl parameter.\n         * @param {string} [url]\n         * @returns {Promise<Result>} The decoding result.\n         *\n         * @memberOf BrowserCodeReader\n         */\n        decodeFromVideo(source, url) {\n            if (!source && !url) {\n                throw new ArgumentException('Either an element with a src set or an URL must be provided');\n            }\n            if (url && !source) {\n                return this.decodeFromVideoUrl(url);\n            }\n            return this.decodeFromVideoElement(source);\n        }\n        /**\n         * Decodes continuously the barcode from a video.\n         *\n         * @param {(string|HTMLImageElement)} [source] The image element that can be either an element id or the element itself. Can be undefined in which case the decoding will be done from the imageUrl parameter.\n         * @param {string} [url]\n         * @returns {Promise<Result>} The decoding result.\n         *\n         * @memberOf BrowserCodeReader\n         *\n         * @experimental\n         */\n        decodeFromVideoContinuously(source, url, callbackFn) {\n            if (undefined === source && undefined === url) {\n                throw new ArgumentException('Either an element with a src set or an URL must be provided');\n            }\n            if (url && !source) {\n                return this.decodeFromVideoUrlContinuously(url, callbackFn);\n            }\n            return this.decodeFromVideoElementContinuously(source, callbackFn);\n        }\n        /**\n         * Decodes something from an image HTML element.\n         */\n        decodeFromImageElement(source) {\n            if (!source) {\n                throw new ArgumentException('An image element must be provided.');\n            }\n            this.reset();\n            const element = this.prepareImageElement(source);\n            this.imageElement = element;\n            let task;\n            if (this.isImageLoaded(element)) {\n                task = this.decodeOnce(element, false, true);\n            }\n            else {\n                task = this._decodeOnLoadImage(element);\n            }\n            return task;\n        }\n        /**\n         * Decodes something from an image HTML element.\n         */\n        decodeFromVideoElement(source) {\n            const element = this._decodeFromVideoElementSetup(source);\n            return this._decodeOnLoadVideo(element);\n        }\n        /**\n         * Decodes something from an image HTML element.\n         */\n        decodeFromVideoElementContinuously(source, callbackFn) {\n            const element = this._decodeFromVideoElementSetup(source);\n            return this._decodeOnLoadVideoContinuously(element, callbackFn);\n        }\n        /**\n         * Sets up the video source so it can be decoded when loaded.\n         *\n         * @param source The video source element.\n         */\n        _decodeFromVideoElementSetup(source) {\n            if (!source) {\n                throw new ArgumentException('A video element must be provided.');\n            }\n            this.reset();\n            const element = this.prepareVideoElement(source);\n            // defines the video element before starts decoding\n            this.videoElement = element;\n            return element;\n        }\n        /**\n         * Decodes an image from a URL.\n         */\n        decodeFromImageUrl(url) {\n            if (!url) {\n                throw new ArgumentException('An URL must be provided.');\n            }\n            this.reset();\n            const element = this.prepareImageElement();\n            this.imageElement = element;\n            const decodeTask = this._decodeOnLoadImage(element);\n            element.src = url;\n            return decodeTask;\n        }\n        /**\n         * Decodes an image from a URL.\n         */\n        decodeFromVideoUrl(url) {\n            if (!url) {\n                throw new ArgumentException('An URL must be provided.');\n            }\n            this.reset();\n            // creates a new element\n            const element = this.prepareVideoElement();\n            const decodeTask = this.decodeFromVideoElement(element);\n            element.src = url;\n            return decodeTask;\n        }\n        /**\n         * Decodes an image from a URL.\n         *\n         * @experimental\n         */\n        decodeFromVideoUrlContinuously(url, callbackFn) {\n            if (!url) {\n                throw new ArgumentException('An URL must be provided.');\n            }\n            this.reset();\n            // creates a new element\n            const element = this.prepareVideoElement();\n            const decodeTask = this.decodeFromVideoElementContinuously(element, callbackFn);\n            element.src = url;\n            return decodeTask;\n        }\n        _decodeOnLoadImage(element) {\n            return new Promise((resolve, reject) => {\n                this.imageLoadedListener = () => this.decodeOnce(element, false, true).then(resolve, reject);\n                element.addEventListener('load', this.imageLoadedListener);\n            });\n        }\n        _decodeOnLoadVideo(videoElement) {\n            return __awaiter(this, void 0, void 0, function* () {\n                // plays the video\n                yield this.playVideoOnLoadAsync(videoElement);\n                // starts decoding after played the video\n                return yield this.decodeOnce(videoElement);\n            });\n        }\n        _decodeOnLoadVideoContinuously(videoElement, callbackFn) {\n            return __awaiter(this, void 0, void 0, function* () {\n                // plays the video\n                yield this.playVideoOnLoadAsync(videoElement);\n                // starts decoding after played the video\n                this.decodeContinuously(videoElement, callbackFn);\n            });\n        }\n        isImageLoaded(img) {\n            // During the onload event, IE correctly identifies any images that\n            // weren\u2019t downloaded as not complete. Others should too. Gecko-based\n            // browsers act like NS4 in that they report this incorrectly.\n            if (!img.complete) {\n                return false;\n            }\n            // However, they do have two very useful properties: naturalWidth and\n            // naturalHeight. These give the true size of the image. If it failed\n            // to load, either of these should be zero.\n            if (img.naturalWidth === 0) {\n                return false;\n            }\n            // No other way of checking: assume it\u2019s ok.\n            return true;\n        }\n        prepareImageElement(imageSource) {\n            let imageElement;\n            if (typeof imageSource === 'undefined') {\n                imageElement = document.createElement('img');\n                imageElement.width = 200;\n                imageElement.height = 200;\n            }\n            if (typeof imageSource === 'string') {\n                imageElement = this.getMediaElement(imageSource, 'img');\n            }\n            if (imageSource instanceof HTMLImageElement) {\n                imageElement = imageSource;\n            }\n            return imageElement;\n        }\n        /**\n         * Sets a HTMLVideoElement for scanning or creates a new one.\n         *\n         * @param videoSource The HTMLVideoElement to be set.\n         */\n        prepareVideoElement(videoSource) {\n            let videoElement;\n            if (!videoSource && typeof document !== 'undefined') {\n                videoElement = document.createElement('video');\n                videoElement.width = 200;\n                videoElement.height = 200;\n            }\n            if (typeof videoSource === 'string') {\n                videoElement = this.getMediaElement(videoSource, 'video');\n            }\n            if (videoSource instanceof HTMLVideoElement) {\n                videoElement = videoSource;\n            }\n            // Needed for iOS 11\n            videoElement.setAttribute('autoplay', 'true');\n            videoElement.setAttribute('muted', 'true');\n            videoElement.setAttribute('playsinline', 'true');\n            return videoElement;\n        }\n        /**\n         * Tries to decode from the video input until it finds some value.\n         */\n        decodeOnce(element, retryIfNotFound = true, retryIfChecksumOrFormatError = true) {\n            this._stopAsyncDecode = false;\n            const loop = (resolve, reject) => {\n                if (this._stopAsyncDecode) {\n                    reject(new NotFoundException('Video stream has ended before any code could be detected.'));\n                    this._stopAsyncDecode = undefined;\n                    return;\n                }\n                try {\n                    const result = this.decode(element);\n                    resolve(result);\n                }\n                catch (e) {\n                    const ifNotFound = retryIfNotFound && e instanceof NotFoundException;\n                    const isChecksumOrFormatError = e instanceof ChecksumException || e instanceof FormatException;\n                    const ifChecksumOrFormat = isChecksumOrFormatError && retryIfChecksumOrFormatError;\n                    if (ifNotFound || ifChecksumOrFormat) {\n                        // trying again\n                        return setTimeout(loop, this._timeBetweenDecodingAttempts, resolve, reject);\n                    }\n                    reject(e);\n                }\n            };\n            return new Promise((resolve, reject) => loop(resolve, reject));\n        }\n        /**\n         * Continuously decodes from video input.\n         */\n        decodeContinuously(element, callbackFn) {\n            this._stopContinuousDecode = false;\n            const loop = () => {\n                if (this._stopContinuousDecode) {\n                    this._stopContinuousDecode = undefined;\n                    return;\n                }\n                try {\n                    const result = this.decode(element);\n                    callbackFn(result, null);\n                    setTimeout(loop, this.timeBetweenScansMillis);\n                }\n                catch (e) {\n                    callbackFn(null, e);\n                    const isChecksumOrFormatError = e instanceof ChecksumException || e instanceof FormatException;\n                    const isNotFound = e instanceof NotFoundException;\n                    if (isChecksumOrFormatError || isNotFound) {\n                        // trying again\n                        setTimeout(loop, this._timeBetweenDecodingAttempts);\n                    }\n                }\n            };\n            loop();\n        }\n        /**\n         * Gets the BinaryBitmap for ya! (and decodes it)\n         */\n        decode(element) {\n            // get binary bitmap for decode function\n            const binaryBitmap = this.createBinaryBitmap(element);\n            return this.decodeBitmap(binaryBitmap);\n        }\n        /**\n         * Returns true if media element is indeed a {@link HtmlVideoElement}.\n         */\n        _isHTMLVideoElement(mediaElement) {\n            const potentialVideo = mediaElement;\n            return potentialVideo.videoWidth !== 0;\n        }\n        /**\n         * Overwriting this allows you to manipulate the next frame in anyway\n         * you want before decode.\n         */\n        drawFrameOnCanvas(\n            srcElement, dimensions, canvasElementContext) {\n            if (!dimensions) {\n                dimensions = {\n                    sx: 0,\n                    sy: 0,\n                    sWidth: srcElement.videoWidth,\n                    sHeight: srcElement.videoHeight,\n                    dx: 0,\n                    dy: 0,\n                    dWidth: srcElement.videoWidth,\n                    dHeight: srcElement.videoHeight};\n            }\n            if (!canvasElementContext) {\n                canvasElementContext = this.captureCanvasContext;\n            }\n            canvasElementContext.drawImage(\n                srcElement,\n                dimensions.sx,\n                dimensions.sy,\n                dimensions.sWidth,\n                dimensions.sHeight,\n                dimensions.dx,\n                dimensions.dy,\n                dimensions.dWidth,\n                dimensions.dHeight);\n        }\n        /**\n         * Ovewriting this allows you to manipulate the snapshot image in anyway\n         *  you want before decode.\n         */\n        drawImageOnCanvas(\n            srcElement,\n            dimensions,\n            canvasElementContext = this.captureCanvasContext) {\n            if (!dimensions) {\n                dimensions = {\n                    sx: 0,\n                    sy: 0,\n                    sWidth: srcElement.naturalWidth,\n                    sHeight: srcElement.naturalHeight,\n                    dx: 0,\n                    dy: 0,\n                    dWidth: srcElement.naturalWidth,\n                    dHeight: srcElement.naturalHeight\n                };\n            }\n            if (!canvasElementContext) {\n                canvasElementContext = this.captureCanvasContext;\n            }\n            canvasElementContext.drawImage(\n                srcElement,\n                dimensions.sx,\n                dimensions.sy,\n                dimensions.sWidth,\n                dimensions.sHeight,\n                dimensions.dx,\n                dimensions.dy,\n                dimensions.dWidth,\n                dimensions.dHeight);\n        }\n        /**\n         * Creates a binaryBitmap based in some image source.\n         *\n         * @param mediaElement HTML element containing drawable image source.\n         */\n        createBinaryBitmap(mediaElement) {\n            const ctx = this.getCaptureCanvasContext(mediaElement);\n            if (this._isHTMLVideoElement(mediaElement)) {\n                this.drawFrameOnCanvas(mediaElement);\n            } else {\n                this.drawImageOnCanvas(mediaElement);\n            }\n            const canvas = this.getCaptureCanvas(mediaElement);\n            const luminanceSource = new HTMLCanvasElementLuminanceSource(canvas);\n            const hybridBinarizer = new HybridBinarizer(luminanceSource);\n\n            return new BinaryBitmap(hybridBinarizer);\n        }\n\n        getCaptureCanvasContext(mediaElement) {\n            if (!this.captureCanvasContext) {\n                const elem = this.getCaptureCanvas(mediaElement);\n                const ctx = elem.getContext('2d');\n                this.captureCanvasContext = ctx;\n            }\n            return this.captureCanvasContext;\n        }\n        getCaptureCanvas(mediaElement) {\n            if (!this.captureCanvas) {\n                const elem = this.createCaptureCanvas(mediaElement);\n                this.captureCanvas = elem;\n            }\n            return this.captureCanvas;\n        }\n        /**\n         * Call the encapsulated readers decode\n         */\n        decodeBitmap(binaryBitmap) {\n            return this.reader.decode(binaryBitmap, this._hints);\n        }\n        /**\n         * \uD83D\uDD8C Prepares the canvas for capture and scan frames.\n         */\n        createCaptureCanvas(mediaElement) {\n            if (typeof document === 'undefined') {\n                this._destroyCaptureCanvas();\n                return null;\n            }\n            const canvasElement = document.createElement('canvas');\n            let width;\n            let height;\n            if (typeof mediaElement !== 'undefined') {\n                if (mediaElement instanceof HTMLVideoElement) {\n                    width = mediaElement.videoWidth;\n                    height = mediaElement.videoHeight;\n                }\n                else if (mediaElement instanceof HTMLImageElement) {\n                    width = mediaElement.naturalWidth || mediaElement.width;\n                    height = mediaElement.naturalHeight || mediaElement.height;\n                }\n            }\n            canvasElement.style.width = width + 'px';\n            canvasElement.style.height = height + 'px';\n            canvasElement.width = width;\n            canvasElement.height = height;\n            return canvasElement;\n        }\n        /**\n         * Stops the continuous scan and cleans the stream.\n         */\n        stopStreams() {\n            if (this.stream) {\n                this.stream.getVideoTracks().forEach(t => t.stop());\n                this.stream = undefined;\n            }\n            if (this._stopAsyncDecode === false) {\n                this.stopAsyncDecode();\n            }\n            if (this._stopContinuousDecode === false) {\n                this.stopContinuousDecode();\n            }\n        }\n        /**\n         * Resets the code reader to the initial state. Cancels any ongoing barcode scanning from video or camera.\n         *\n         * @memberOf BrowserCodeReader\n         */\n        reset() {\n            // stops the camera, preview and scan \uD83D\uDD34\n            this.stopStreams();\n            // clean and forget about HTML elements\n            this._destroyVideoElement();\n            this._destroyImageElement();\n            this._destroyCaptureCanvas();\n        }\n        _destroyVideoElement() {\n            if (!this.videoElement) {\n                return;\n            }\n            // first gives freedon to the element \uD83D\uDD4A\n            if (typeof this.videoEndedListener !== 'undefined') {\n                this.videoElement.removeEventListener('ended', this.videoEndedListener);\n            }\n            if (typeof this.videoPlayingEventListener !== 'undefined') {\n                this.videoElement.removeEventListener('playing', this.videoPlayingEventListener);\n            }\n            if (typeof this.videoCanPlayListener !== 'undefined') {\n                this.videoElement.removeEventListener('loadedmetadata', this.videoCanPlayListener);\n            }\n            // then forgets about that element \uD83D\uDE22\n            this.cleanVideoSource(this.videoElement);\n            this.videoElement = undefined;\n        }\n        _destroyImageElement() {\n            if (!this.imageElement) {\n                return;\n            }\n            // first gives freedon to the element \uD83D\uDD4A\n            if (undefined !== this.imageLoadedListener) {\n                this.imageElement.removeEventListener('load', this.imageLoadedListener);\n            }\n            // then forget about that element \uD83D\uDE22\n            this.imageElement.src = undefined;\n            this.imageElement.removeAttribute('src');\n            this.imageElement = undefined;\n        }\n        /**\n         * Cleans canvas references \uD83D\uDD8C\n         */\n        _destroyCaptureCanvas() {\n            // then forget about that element \uD83D\uDE22\n            this.captureCanvasContext = undefined;\n            this.captureCanvas = undefined;\n        }\n        /**\n         * Defines what the videoElement src will be.\n         *\n         * @param videoElement\n         * @param stream\n         */\n        addVideoSource(videoElement, stream) {\n            // Older browsers may not have `srcObject`\n            try {\n                // @note Throws Exception if interrupted by a new loaded request\n                videoElement.srcObject = stream;\n            }\n            catch (err) {\n                // @note Avoid using this in new browsers, as it is going away.\n                videoElement.src = URL.createObjectURL(stream);\n            }\n        }\n        /**\n         * Unbinds a HTML video src property.\n         *\n         * @param videoElement\n         */\n        cleanVideoSource(videoElement) {\n            try {\n                videoElement.srcObject = null;\n            }\n            catch (err) {\n                videoElement.src = '';\n            }\n            this.videoElement.removeAttribute('src');\n        }\n    }\n\n    /*\n     * Copyright 2007 ZXing authors\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n    /**\n     * <p>Encapsulates the result of decoding a barcode within an image.</p>\n     *\n     * @author Sean Owen\n     */\n    class Result {\n        // public constructor(private text: string,\n        //               Uint8Array rawBytes,\n        //               ResultPoconst resultPoints: Int32Array,\n        //               BarcodeFormat format) {\n        //   this(text, rawBytes, resultPoints, format, System.currentTimeMillis())\n        // }\n        // public constructor(text: string,\n        //               Uint8Array rawBytes,\n        //               ResultPoconst resultPoints: Int32Array,\n        //               BarcodeFormat format,\n        //               long timestamp) {\n        //   this(text, rawBytes, rawBytes == null ? 0 : 8 * rawBytes.length,\n        //        resultPoints, format, timestamp)\n        // }\n        constructor(text, rawBytes, numBits = rawBytes == null ? 0 : 8 * rawBytes.length, resultPoints, format, timestamp = System.currentTimeMillis()) {\n            this.text = text;\n            this.rawBytes = rawBytes;\n            this.numBits = numBits;\n            this.resultPoints = resultPoints;\n            this.format = format;\n            this.timestamp = timestamp;\n            this.text = text;\n            this.rawBytes = rawBytes;\n            if (undefined === numBits || null === numBits) {\n                this.numBits = (rawBytes === null || rawBytes === undefined) ? 0 : 8 * rawBytes.length;\n            }\n            else {\n                this.numBits = numBits;\n            }\n            this.resultPoints = resultPoints;\n            this.format = format;\n            this.resultMetadata = null;\n            if (undefined === timestamp || null === timestamp) {\n                this.timestamp = System.currentTimeMillis();\n            }\n            else {\n                this.timestamp = timestamp;\n            }\n        }\n        /**\n         * @return raw text encoded by the barcode\n         */\n        getText() {\n            return this.text;\n        }\n        /**\n         * @return raw bytes encoded by the barcode, if applicable, otherwise {@code null}\n         */\n        getRawBytes() {\n            return this.rawBytes;\n        }\n        /**\n         * @return how many bits of {@link #getRawBytes()} are valid; typically 8 times its length\n         * @since 3.3.0\n         */\n        getNumBits() {\n            return this.numBits;\n        }\n        /**\n         * @return points related to the barcode in the image. These are typically points\n         *         identifying finder patterns or the corners of the barcode. The exact meaning is\n         *         specific to the type of barcode that was decoded.\n         */\n        getResultPoints() {\n            return this.resultPoints;\n        }\n        /**\n         * @return {@link BarcodeFormat} representing the format of the barcode that was decoded\n         */\n        getBarcodeFormat() {\n            return this.format;\n        }\n        /**\n         * @return {@link Map} mapping {@link ResultMetadataType} keys to values. May be\n         *   {@code null}. This contains optional metadata about what was detected about the barcode,\n         *   like orientation.\n         */\n        getResultMetadata() {\n            return this.resultMetadata;\n        }\n        putMetadata(type, value) {\n            if (this.resultMetadata === null) {\n                this.resultMetadata = new Map();\n            }\n            this.resultMetadata.set(type, value);\n        }\n        putAllMetadata(metadata) {\n            if (metadata !== null) {\n                if (this.resultMetadata === null) {\n                    this.resultMetadata = metadata;\n                }\n                else {\n                    this.resultMetadata = new Map(metadata);\n                }\n            }\n        }\n        addResultPoints(newPoints) {\n            const oldPoints = this.resultPoints;\n            if (oldPoints === null) {\n                this.resultPoints = newPoints;\n            }\n            else if (newPoints !== null && newPoints.length > 0) {\n                const allPoints = new Array(oldPoints.length + newPoints.length);\n                System.arraycopy(oldPoints, 0, allPoints, 0, oldPoints.length);\n                System.arraycopy(newPoints, 0, allPoints, oldPoints.length, newPoints.length);\n                this.resultPoints = allPoints;\n            }\n        }\n        getTimestamp() {\n            return this.timestamp;\n        }\n        /*@Override*/\n        toString() {\n            return this.text;\n        }\n    }\n\n    /*\n     * Direct port to TypeScript of ZXing by Adrian To\u0219c\u0103\n     */\n    /*\n     * Copyright 2009 ZXing authors\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n    /*namespace com.google.zxing {*/\n    /**\n     * Enumerates barcode formats known to this package. Please keep alphabetized.\n     *\n     * @author Sean Owen\n     */\n    var BarcodeFormat;\n    (function (BarcodeFormat) {\n        /** Aztec 2D barcode format. */\n        BarcodeFormat[BarcodeFormat[\"AZTEC\"] = 0] = \"AZTEC\";\n        /** CODABAR 1D format. */\n        BarcodeFormat[BarcodeFormat[\"CODABAR\"] = 1] = \"CODABAR\";\n        /** Code 39 1D format. */\n        BarcodeFormat[BarcodeFormat[\"CODE_39\"] = 2] = \"CODE_39\";\n        /** Code 93 1D format. */\n        BarcodeFormat[BarcodeFormat[\"CODE_93\"] = 3] = \"CODE_93\";\n        /** Code 128 1D format. */\n        BarcodeFormat[BarcodeFormat[\"CODE_128\"] = 4] = \"CODE_128\";\n        /** Data Matrix 2D barcode format. */\n        BarcodeFormat[BarcodeFormat[\"DATA_MATRIX\"] = 5] = \"DATA_MATRIX\";\n        /** EAN-8 1D format. */\n        BarcodeFormat[BarcodeFormat[\"EAN_8\"] = 6] = \"EAN_8\";\n        /** EAN-13 1D format. */\n        BarcodeFormat[BarcodeFormat[\"EAN_13\"] = 7] = \"EAN_13\";\n        /** ITF (Interleaved Two of Five) 1D format. */\n        BarcodeFormat[BarcodeFormat[\"ITF\"] = 8] = \"ITF\";\n        /** MaxiCode 2D barcode format. */\n        BarcodeFormat[BarcodeFormat[\"MAXICODE\"] = 9] = \"MAXICODE\";\n        /** PDF417 format. */\n        BarcodeFormat[BarcodeFormat[\"PDF_417\"] = 10] = \"PDF_417\";\n        /** QR Code 2D barcode format. */\n        BarcodeFormat[BarcodeFormat[\"QR_CODE\"] = 11] = \"QR_CODE\";\n        /** RSS 14 */\n        BarcodeFormat[BarcodeFormat[\"RSS_14\"] = 12] = \"RSS_14\";\n        /** RSS EXPANDED */\n        BarcodeFormat[BarcodeFormat[\"RSS_EXPANDED\"] = 13] = \"RSS_EXPANDED\";\n        /** UPC-A 1D format. */\n        BarcodeFormat[BarcodeFormat[\"UPC_A\"] = 14] = \"UPC_A\";\n        /** UPC-E 1D format. */\n        BarcodeFormat[BarcodeFormat[\"UPC_E\"] = 15] = \"UPC_E\";\n        /** UPC/EAN extension format. Not a stand-alone format. */\n        BarcodeFormat[BarcodeFormat[\"UPC_EAN_EXTENSION\"] = 16] = \"UPC_EAN_EXTENSION\";\n    })(BarcodeFormat || (BarcodeFormat = {}));\n    var BarcodeFormat$1 = BarcodeFormat;\n\n    /*namespace com.google.zxing {*/\n    /**\n     * Represents some type of metadata about the result of the decoding that the decoder\n     * wishes to communicate back to the caller.\n     *\n     * @author Sean Owen\n     */\n    var ResultMetadataType;\n    (function (ResultMetadataType) {\n        /**\n         * Unspecified, application-specific metadata. Maps to an unspecified {@link Object}.\n         */\n        ResultMetadataType[ResultMetadataType[\"OTHER\"] = 0] = \"OTHER\";\n        /**\n         * Denotes the likely approximate orientation of the barcode in the image. This value\n         * is given as degrees rotated clockwise from the normal, upright orientation.\n         * For example a 1D barcode which was found by reading top-to-bottom would be\n         * said to have orientation \"90\". This key maps to an {@link Integer} whose\n         * value is in the range [0,360).\n         */\n        ResultMetadataType[ResultMetadataType[\"ORIENTATION\"] = 1] = \"ORIENTATION\";\n        /**\n         * <p>2D barcode formats typically encode text, but allow for a sort of 'byte mode'\n         * which is sometimes used to encode binary data. While {@link Result} makes available\n         * the complete raw bytes in the barcode for these formats, it does not offer the bytes\n         * from the byte segments alone.</p>\n         *\n         * <p>This maps to a {@link java.util.List} of byte arrays corresponding to the\n         * raw bytes in the byte segments in the barcode, in order.</p>\n         */\n        ResultMetadataType[ResultMetadataType[\"BYTE_SEGMENTS\"] = 2] = \"BYTE_SEGMENTS\";\n        /**\n         * Error correction level used, if applicable. The value type depends on the\n         * format, but is typically a String.\n         */\n        ResultMetadataType[ResultMetadataType[\"ERROR_CORRECTION_LEVEL\"] = 3] = \"ERROR_CORRECTION_LEVEL\";\n        /**\n         * For some periodicals, indicates the issue number as an {@link Integer}.\n         */\n        ResultMetadataType[ResultMetadataType[\"ISSUE_NUMBER\"] = 4] = \"ISSUE_NUMBER\";\n        /**\n         * For some products, indicates the suggested retail price in the barcode as a\n         * formatted {@link String}.\n         */\n        ResultMetadataType[ResultMetadataType[\"SUGGESTED_PRICE\"] = 5] = \"SUGGESTED_PRICE\";\n        /**\n         * For some products, the possible country of manufacture as a {@link String} denoting the\n         * ISO country code. Some map to multiple possible countries, like \"US/CA\".\n         */\n        ResultMetadataType[ResultMetadataType[\"POSSIBLE_COUNTRY\"] = 6] = \"POSSIBLE_COUNTRY\";\n        /**\n         * For some products, the extension text\n         */\n        ResultMetadataType[ResultMetadataType[\"UPC_EAN_EXTENSION\"] = 7] = \"UPC_EAN_EXTENSION\";\n        /**\n         * PDF417-specific metadata\n         */\n        ResultMetadataType[ResultMetadataType[\"PDF417_EXTRA_METADATA\"] = 8] = \"PDF417_EXTRA_METADATA\";\n        /**\n         * If the code format supports structured append and the current scanned code is part of one then the\n         * sequence number is given with it.\n         */\n        ResultMetadataType[ResultMetadataType[\"STRUCTURED_APPEND_SEQUENCE\"] = 9] = \"STRUCTURED_APPEND_SEQUENCE\";\n        /**\n         * If the code format supports structured append and the current scanned code is part of one then the\n         * parity is given with it.\n         */\n        ResultMetadataType[ResultMetadataType[\"STRUCTURED_APPEND_PARITY\"] = 10] = \"STRUCTURED_APPEND_PARITY\";\n    })(ResultMetadataType || (ResultMetadataType = {}));\n    var ResultMetadataType$1 = ResultMetadataType;\n\n    /*\n     * Copyright 2007 ZXing authors\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n    /*namespace com.google.zxing.common {*/\n    /*import java.util.List;*/\n    /**\n     * <p>Encapsulates the result of decoding a matrix of bits. This typically\n     * applies to 2D barcode formats. For now it contains the raw bytes obtained,\n     * as well as a String interpretation of those bytes, if applicable.</p>\n     *\n     * @author Sean Owen\n     */\n    class DecoderResult {\n        // public constructor(rawBytes: Uint8Array,\n        //                      text: string,\n        //                      List<Uint8Array> byteSegments,\n        //                      String ecLevel) {\n        //   this(rawBytes, text, byteSegments, ecLevel, -1, -1)\n        // }\n        constructor(rawBytes, text, byteSegments, ecLevel, structuredAppendSequenceNumber = -1, structuredAppendParity = -1) {\n            this.rawBytes = rawBytes;\n            this.text = text;\n            this.byteSegments = byteSegments;\n            this.ecLevel = ecLevel;\n            this.structuredAppendSequenceNumber = structuredAppendSequenceNumber;\n            this.structuredAppendParity = structuredAppendParity;\n            this.numBits = (rawBytes === undefined || rawBytes === null) ? 0 : 8 * rawBytes.length;\n        }\n        /**\n         * @return raw bytes representing the result, or {@code null} if not applicable\n         */\n        getRawBytes() {\n            return this.rawBytes;\n        }\n        /**\n         * @return how many bits of {@link #getRawBytes()} are valid; typically 8 times its length\n         * @since 3.3.0\n         */\n        getNumBits() {\n            return this.numBits;\n        }\n        /**\n         * @param numBits overrides the number of bits that are valid in {@link #getRawBytes()}\n         * @since 3.3.0\n         */\n        setNumBits(numBits /*int*/) {\n            this.numBits = numBits;\n        }\n        /**\n         * @return text representation of the result\n         */\n        getText() {\n            return this.text;\n        }\n        /**\n         * @return list of byte segments in the result, or {@code null} if not applicable\n         */\n        getByteSegments() {\n            return this.byteSegments;\n        }\n        /**\n         * @return name of error correction level used, or {@code null} if not applicable\n         */\n        getECLevel() {\n            return this.ecLevel;\n        }\n        /**\n         * @return number of errors corrected, or {@code null} if not applicable\n         */\n        getErrorsCorrected() {\n            return this.errorsCorrected;\n        }\n        setErrorsCorrected(errorsCorrected /*Integer*/) {\n            this.errorsCorrected = errorsCorrected;\n        }\n        /**\n         * @return number of erasures corrected, or {@code null} if not applicable\n         */\n        getErasures() {\n            return this.erasures;\n        }\n        setErasures(erasures /*Integer*/) {\n            this.erasures = erasures;\n        }\n        /**\n         * @return arbitrary additional metadata\n         */\n        getOther() {\n            return this.other;\n        }\n        setOther(other) {\n            this.other = other;\n        }\n        hasStructuredAppend() {\n            return this.structuredAppendParity >= 0 && this.structuredAppendSequenceNumber >= 0;\n        }\n        getStructuredAppendParity() {\n            return this.structuredAppendParity;\n        }\n        getStructuredAppendSequenceNumber() {\n            return this.structuredAppendSequenceNumber;\n        }\n    }\n\n    /*\n     * Copyright 2007 ZXing authors\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n    /**\n     * <p>This class contains utility methods for performing mathematical operations over\n     * the Galois Fields. Operations use a given primitive polynomial in calculations.</p>\n     *\n     * <p>Throughout this package, elements of the GF are represented as an {@code int}\n     * for convenience and speed (but at the cost of memory).\n     * </p>\n     *\n     * @author Sean Owen\n     * @author David Olivier\n     */\n    class AbstractGenericGF {\n        /**\n         * @return 2 to the power of a in GF(size)\n         */\n        exp(a) {\n            return this.expTable[a];\n        }\n        /**\n         * @return base 2 log of a in GF(size)\n         */\n        log(a /*int*/) {\n            if (a === 0) {\n                throw new IllegalArgumentException();\n            }\n            return this.logTable[a];\n        }\n        /**\n         * Implements both addition and subtraction -- they are the same in GF(size).\n         *\n         * @return sum/difference of a and b\n         */\n        static addOrSubtract(a /*int*/, b /*int*/) {\n            return a ^ b;\n        }\n    }\n\n    /*\n     * Copyright 2007 ZXing authors\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n    /**\n     * <p>Represents a polynomial whose coefficients are elements of a GF.\n     * Instances of this class are immutable.</p>\n     *\n     * <p>Much credit is due to William Rucklidge since portions of this code are an indirect\n     * port of his C++ Reed-Solomon implementation.</p>\n     *\n     * @author Sean Owen\n     */\n    class GenericGFPoly {\n        /**\n         * @param field the {@link GenericGF} instance representing the field to use\n         * to perform computations\n         * @param coefficients coefficients as ints representing elements of GF(size), arranged\n         * from most significant (highest-power term) coefficient to least significant\n         * @throws IllegalArgumentException if argument is null or empty,\n         * or if leading coefficient is 0 and this is not a\n         * constant polynomial (that is, it is not the monomial \"0\")\n         */\n        constructor(field, coefficients) {\n            if (coefficients.length === 0) {\n                throw new IllegalArgumentException();\n            }\n            this.field = field;\n            const coefficientsLength = coefficients.length;\n            if (coefficientsLength > 1 && coefficients[0] === 0) {\n                // Leading term must be non-zero for anything except the constant polynomial \"0\"\n                let firstNonZero = 1;\n                while (firstNonZero < coefficientsLength && coefficients[firstNonZero] === 0) {\n                    firstNonZero++;\n                }\n                if (firstNonZero === coefficientsLength) {\n                    this.coefficients = Int32Array.from([0]);\n                }\n                else {\n                    this.coefficients = new Int32Array(coefficientsLength - firstNonZero);\n                    System.arraycopy(coefficients, firstNonZero, this.coefficients, 0, this.coefficients.length);\n                }\n            }\n            else {\n                this.coefficients = coefficients;\n            }\n        }\n        getCoefficients() {\n            return this.coefficients;\n        }\n        /**\n         * @return degree of this polynomial\n         */\n        getDegree() {\n            return this.coefficients.length - 1;\n        }\n        /**\n         * @return true iff this polynomial is the monomial \"0\"\n         */\n        isZero() {\n            return this.coefficients[0] === 0;\n        }\n        /**\n         * @return coefficient of x^degree term in this polynomial\n         */\n        getCoefficient(degree /*int*/) {\n            return this.coefficients[this.coefficients.length - 1 - degree];\n        }\n        /**\n         * @return evaluation of this polynomial at a given point\n         */\n        evaluateAt(a /*int*/) {\n            if (a === 0) {\n                // Just return the x^0 coefficient\n                return this.getCoefficient(0);\n            }\n            const coefficients = this.coefficients;\n            let result;\n            if (a === 1) {\n                // Just the sum of the coefficients\n                result = 0;\n                for (let i = 0, length = coefficients.length; i !== length; i++) {\n                    const coefficient = coefficients[i];\n                    result = AbstractGenericGF.addOrSubtract(result, coefficient);\n                }\n                return result;\n            }\n            result = coefficients[0];\n            const size = coefficients.length;\n            const field = this.field;\n            for (let i = 1; i < size; i++) {\n                result = AbstractGenericGF.addOrSubtract(field.multiply(a, result), coefficients[i]);\n            }\n            return result;\n        }\n        addOrSubtract(other) {\n            if (!this.field.equals(other.field)) {\n                throw new IllegalArgumentException('GenericGFPolys do not have same GenericGF field');\n            }\n            if (this.isZero()) {\n                return other;\n            }\n            if (other.isZero()) {\n                return this;\n            }\n            let smallerCoefficients = this.coefficients;\n            let largerCoefficients = other.coefficients;\n            if (smallerCoefficients.length > largerCoefficients.length) {\n                const temp = smallerCoefficients;\n                smallerCoefficients = largerCoefficients;\n                largerCoefficients = temp;\n            }\n            let sumDiff = new Int32Array(largerCoefficients.length);\n            const lengthDiff = largerCoefficients.length - smallerCoefficients.length;\n            // Copy high-order terms only found in higher-degree polynomial's coefficients\n            System.arraycopy(largerCoefficients, 0, sumDiff, 0, lengthDiff);\n            for (let i = lengthDiff; i < largerCoefficients.length; i++) {\n                sumDiff[i] = AbstractGenericGF.addOrSubtract(smallerCoefficients[i - lengthDiff], largerCoefficients[i]);\n            }\n            return new GenericGFPoly(this.field, sumDiff);\n        }\n        multiply(other) {\n            if (!this.field.equals(other.field)) {\n                throw new IllegalArgumentException('GenericGFPolys do not have same GenericGF field');\n            }\n            if (this.isZero() || other.isZero()) {\n                return this.field.getZero();\n            }\n            const aCoefficients = this.coefficients;\n            const aLength = aCoefficients.length;\n            const bCoefficients = other.coefficients;\n            const bLength = bCoefficients.length;\n            const product = new Int32Array(aLength + bLength - 1);\n            const field = this.field;\n            for (let i = 0; i < aLength; i++) {\n                const aCoeff = aCoefficients[i];\n                for (let j = 0; j < bLength; j++) {\n                    product[i + j] = AbstractGenericGF.addOrSubtract(product[i + j], field.multiply(aCoeff, bCoefficients[j]));\n                }\n            }\n            return new GenericGFPoly(field, product);\n        }\n        multiplyScalar(scalar /*int*/) {\n            if (scalar === 0) {\n                return this.field.getZero();\n            }\n            if (scalar === 1) {\n                return this;\n            }\n            const size = this.coefficients.length;\n            const field = this.field;\n            const product = new Int32Array(size);\n            const coefficients = this.coefficients;\n            for (let i = 0; i < size; i++) {\n                product[i] = field.multiply(coefficients[i], scalar);\n            }\n            return new GenericGFPoly(field, product);\n        }\n        multiplyByMonomial(degree /*int*/, coefficient /*int*/) {\n            if (degree < 0) {\n                throw new IllegalArgumentException();\n            }\n            if (coefficient === 0) {\n                return this.field.getZero();\n            }\n            const coefficients = this.coefficients;\n            const size = coefficients.length;\n            const product = new Int32Array(size + degree);\n            const field = this.field;\n            for (let i = 0; i < size; i++) {\n                product[i] = field.multiply(coefficients[i], coefficient);\n            }\n            return new GenericGFPoly(field, product);\n        }\n        divide(other) {\n            if (!this.field.equals(other.field)) {\n                throw new IllegalArgumentException('GenericGFPolys do not have same GenericGF field');\n            }\n            if (other.isZero()) {\n                throw new IllegalArgumentException('Divide by 0');\n            }\n            const field = this.field;\n            let quotient = field.getZero();\n            let remainder = this;\n            const denominatorLeadingTerm = other.getCoefficient(other.getDegree());\n            const inverseDenominatorLeadingTerm = field.inverse(denominatorLeadingTerm);\n            while (remainder.getDegree() >= other.getDegree() && !remainder.isZero()) {\n                const degreeDifference = remainder.getDegree() - other.getDegree();\n                const scale = field.multiply(remainder.getCoefficient(remainder.getDegree()), inverseDenominatorLeadingTerm);\n                const term = other.multiplyByMonomial(degreeDifference, scale);\n                const iterationQuotient = field.buildMonomial(degreeDifference, scale);\n                quotient = quotient.addOrSubtract(iterationQuotient);\n                remainder = remainder.addOrSubtract(term);\n            }\n            return [quotient, remainder];\n        }\n        /*@Override*/\n        toString() {\n            let result = '';\n            for (let degree = this.getDegree(); degree >= 0; degree--) {\n                let coefficient = this.getCoefficient(degree);\n                if (coefficient !== 0) {\n                    if (coefficient < 0) {\n                        result += ' - ';\n                        coefficient = -coefficient;\n                    }\n                    else {\n                        if (result.length > 0) {\n                            result += ' + ';\n                        }\n                    }\n                    if (degree === 0 || coefficient !== 1) {\n                        const alphaPower = this.field.log(coefficient);\n                        if (alphaPower === 0) {\n                            result += '1';\n                        }\n                        else if (alphaPower === 1) {\n                            result += 'a';\n                        }\n                        else {\n                            result += 'a^';\n                            result += alphaPower;\n                        }\n                    }\n                    if (degree !== 0) {\n                        if (degree === 1) {\n                            result += 'x';\n                        }\n                        else {\n                            result += 'x^';\n                            result += degree;\n                        }\n                    }\n                }\n            }\n            return result;\n        }\n    }\n\n    /**\n     * Custom Error class of type Exception.\n     */\n    class ArithmeticException extends Exception {\n    }\n    ArithmeticException.kind = 'ArithmeticException';\n\n    /*\n     * Copyright 2007 ZXing authors\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n    /**\n     * <p>This class contains utility methods for performing mathematical operations over\n     * the Galois Fields. Operations use a given primitive polynomial in calculations.</p>\n     *\n     * <p>Throughout this package, elements of the GF are represented as an {@code int}\n     * for convenience and speed (but at the cost of memory).\n     * </p>\n     *\n     * @author Sean Owen\n     * @author David Olivier\n     */\n    class GenericGF extends AbstractGenericGF {\n        /**\n         * Create a representation of GF(size) using the given primitive polynomial.\n         *\n         * @param primitive irreducible polynomial whose coefficients are represented by\n         *  the bits of an int, where the least-significant bit represents the constant\n         *  coefficient\n         * @param size the size of the field\n         * @param b the factor b in the generator polynomial can be 0- or 1-based\n         *  (g(x) = (x+a^b)(x+a^(b+1))...(x+a^(b+2t-1))).\n         *  In most cases it should be 1, but for QR code it is 0.\n         */\n        constructor(primitive /*int*/, size /*int*/, generatorBase /*int*/) {\n            super();\n            this.primitive = primitive;\n            this.size = size;\n            this.generatorBase = generatorBase;\n            const expTable = new Int32Array(size);\n            let x = 1;\n            for (let i = 0; i < size; i++) {\n                expTable[i] = x;\n                x *= 2; // we're assuming the generator alpha is 2\n                if (x >= size) {\n                    x ^= primitive;\n                    x &= size - 1;\n                }\n            }\n            this.expTable = expTable;\n            const logTable = new Int32Array(size);\n            for (let i = 0; i < size - 1; i++) {\n                logTable[expTable[i]] = i;\n            }\n            this.logTable = logTable;\n            // logTable[0] == 0 but this should never be used\n            this.zero = new GenericGFPoly(this, Int32Array.from([0]));\n            this.one = new GenericGFPoly(this, Int32Array.from([1]));\n        }\n        getZero() {\n            return this.zero;\n        }\n        getOne() {\n            return this.one;\n        }\n        /**\n         * @return the monomial representing coefficient * x^degree\n         */\n        buildMonomial(degree /*int*/, coefficient /*int*/) {\n            if (degree < 0) {\n                throw new IllegalArgumentException();\n            }\n            if (coefficient === 0) {\n                return this.zero;\n            }\n            const coefficients = new Int32Array(degree + 1);\n            coefficients[0] = coefficient;\n            return new GenericGFPoly(this, coefficients);\n        }\n        /**\n         * @return multiplicative inverse of a\n         */\n        inverse(a /*int*/) {\n            if (a === 0) {\n                throw new ArithmeticException();\n            }\n            return this.expTable[this.size - this.logTable[a] - 1];\n        }\n        /**\n         * @return product of a and b in GF(size)\n         */\n        multiply(a /*int*/, b /*int*/) {\n            if (a === 0 || b === 0) {\n                return 0;\n            }\n            return this.expTable[(this.logTable[a] + this.logTable[b]) % (this.size - 1)];\n        }\n        getSize() {\n            return this.size;\n        }\n        getGeneratorBase() {\n            return this.generatorBase;\n        }\n        /*@Override*/\n        toString() {\n            return ('GF(0x' + Integer.toHexString(this.primitive) + ',' + this.size + ')');\n        }\n        equals(o) {\n            return o === this;\n        }\n    }\n    GenericGF.AZTEC_DATA_12 = new GenericGF(0x1069, 4096, 1); // x^12 + x^6 + x^5 + x^3 + 1\n    GenericGF.AZTEC_DATA_10 = new GenericGF(0x409, 1024, 1); // x^10 + x^3 + 1\n    GenericGF.AZTEC_DATA_6 = new GenericGF(0x43, 64, 1); // x^6 + x + 1\n    GenericGF.AZTEC_PARAM = new GenericGF(0x13, 16, 1); // x^4 + x + 1\n    GenericGF.QR_CODE_FIELD_256 = new GenericGF(0x011d, 256, 0); // x^8 + x^4 + x^3 + x^2 + 1\n    GenericGF.DATA_MATRIX_FIELD_256 = new GenericGF(0x012d, 256, 1); // x^8 + x^5 + x^3 + x^2 + 1\n    GenericGF.AZTEC_DATA_8 = GenericGF.DATA_MATRIX_FIELD_256;\n    GenericGF.MAXICODE_FIELD_64 = GenericGF.AZTEC_DATA_6;\n\n    /**\n     * Custom Error class of type Exception.\n     */\n    class ReedSolomonException extends Exception {\n    }\n    ReedSolomonException.kind = 'ReedSolomonException';\n\n    /**\n     * Custom Error class of type Exception.\n     */\n    class IllegalStateException extends Exception {\n    }\n    IllegalStateException.kind = 'IllegalStateException';\n\n    /*\n     * Copyright 2007 ZXing authors\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n    /**\n     * <p>Implements Reed-Solomon decoding, as the name implies.</p>\n     *\n     * <p>The algorithm will not be explained here, but the following references were helpful\n     * in creating this implementation:</p>\n     *\n     * <ul>\n     * <li>Bruce Maggs.\n     * <a href=\"http://www.cs.cmu.edu/afs/cs.cmu.edu/project/pscico-guyb/realworld/www/rs_decode.ps\">\n     * \"Decoding Reed-Solomon Codes\"</a> (see discussion of Forney's Formula)</li>\n     * <li>J.I. Hall. <a href=\"www.mth.msu.edu/~jhall/classes/codenotes/GRS.pdf\">\n     * \"Chapter 5. Generalized Reed-Solomon Codes\"</a>\n     * (see discussion of Euclidean algorithm)</li>\n     * </ul>\n     *\n     * <p>Much credit is due to William Rucklidge since portions of this code are an indirect\n     * port of his C++ Reed-Solomon implementation.</p>\n     *\n     * @author Sean Owen\n     * @author William Rucklidge\n     * @author sanfordsquires\n     */\n    class ReedSolomonDecoder {\n        constructor(field) {\n            this.field = field;\n        }\n        /**\n         * <p>Decodes given set of received codewords, which include both data and error-correction\n         * codewords. Really, this means it uses Reed-Solomon to detect and correct errors, in-place,\n         * in the input.</p>\n         *\n         * @param received data and error-correction codewords\n         * @param twoS number of error-correction codewords available\n         * @throws ReedSolomonException if decoding fails for any reason\n         */\n        decode(received, twoS /*int*/) {\n            const field = this.field;\n            const poly = new GenericGFPoly(field, received);\n            const syndromeCoefficients = new Int32Array(twoS);\n            let noError = true;\n            for (let i = 0; i < twoS; i++) {\n                const evalResult = poly.evaluateAt(field.exp(i + field.getGeneratorBase()));\n                syndromeCoefficients[syndromeCoefficients.length - 1 - i] = evalResult;\n                if (evalResult !== 0) {\n                    noError = false;\n                }\n            }\n            if (noError) {\n                return;\n            }\n            const syndrome = new GenericGFPoly(field, syndromeCoefficients);\n            const sigmaOmega = this.runEuclideanAlgorithm(field.buildMonomial(twoS, 1), syndrome, twoS);\n            const sigma = sigmaOmega[0];\n            const omega = sigmaOmega[1];\n            const errorLocations = this.findErrorLocations(sigma);\n            const errorMagnitudes = this.findErrorMagnitudes(omega, errorLocations);\n            for (let i = 0; i < errorLocations.length; i++) {\n                const position = received.length - 1 - field.log(errorLocations[i]);\n                if (position < 0) {\n                    throw new ReedSolomonException('Bad error location');\n                }\n                received[position] = GenericGF.addOrSubtract(received[position], errorMagnitudes[i]);\n            }\n        }\n        runEuclideanAlgorithm(a, b, R /*int*/) {\n            // Assume a's degree is >= b's\n            if (a.getDegree() < b.getDegree()) {\n                const temp = a;\n                a = b;\n                b = temp;\n            }\n            const field = this.field;\n            let rLast = a;\n            let r = b;\n            let tLast = field.getZero();\n            let t = field.getOne();\n            // Run Euclidean algorithm until r's degree is less than R/2\n            while (r.getDegree() >= (R / 2 | 0)) {\n                let rLastLast = rLast;\n                let tLastLast = tLast;\n                rLast = r;\n                tLast = t;\n                // Divide rLastLast by rLast, with quotient in q and remainder in r\n                if (rLast.isZero()) {\n                    // Oops, Euclidean algorithm already terminated?\n                    throw new ReedSolomonException('r_{i-1} was zero');\n                }\n                r = rLastLast;\n                let q = field.getZero();\n                const denominatorLeadingTerm = rLast.getCoefficient(rLast.getDegree());\n                const dltInverse = field.inverse(denominatorLeadingTerm);\n                while (r.getDegree() >= rLast.getDegree() && !r.isZero()) {\n                    const degreeDiff = r.getDegree() - rLast.getDegree();\n                    const scale = field.multiply(r.getCoefficient(r.getDegree()), dltInverse);\n                    q = q.addOrSubtract(field.buildMonomial(degreeDiff, scale));\n                    r = r.addOrSubtract(rLast.multiplyByMonomial(degreeDiff, scale));\n                }\n                t = q.multiply(tLast).addOrSubtract(tLastLast);\n                if (r.getDegree() >= rLast.getDegree()) {\n                    throw new IllegalStateException('Division algorithm failed to reduce polynomial?');\n                }\n            }\n            const sigmaTildeAtZero = t.getCoefficient(0);\n            if (sigmaTildeAtZero === 0) {\n                throw new ReedSolomonException('sigmaTilde(0) was zero');\n            }\n            const inverse = field.inverse(sigmaTildeAtZero);\n            const sigma = t.multiplyScalar(inverse);\n            const omega = r.multiplyScalar(inverse);\n            return [sigma, omega];\n        }\n        findErrorLocations(errorLocator) {\n            // This is a direct application of Chien's search\n            const numErrors = errorLocator.getDegree();\n            if (numErrors === 1) { // shortcut\n                return Int32Array.from([errorLocator.getCoefficient(1)]);\n            }\n            const result = new Int32Array(numErrors);\n            let e = 0;\n            const field = this.field;\n            for (let i = 1; i < field.getSize() && e < numErrors; i++) {\n                if (errorLocator.evaluateAt(i) === 0) {\n                    result[e] = field.inverse(i);\n                    e++;\n                }\n            }\n            if (e !== numErrors) {\n                throw new ReedSolomonException('Error locator degree does not match number of roots');\n            }\n            return result;\n        }\n        findErrorMagnitudes(errorEvaluator, errorLocations) {\n            // This is directly applying Forney's Formula\n            const s = errorLocations.length;\n            const result = new Int32Array(s);\n            const field = this.field;\n            for (let i = 0; i < s; i++) {\n                const xiInverse = field.inverse(errorLocations[i]);\n                let denominator = 1;\n                for (let j = 0; j < s; j++) {\n                    if (i !== j) {\n                        // denominator = field.multiply(denominator,\n                        //    GenericGF.addOrSubtract(1, field.multiply(errorLocations[j], xiInverse)))\n                        // Above should work but fails on some Apple and Linux JDKs due to a Hotspot bug.\n                        // Below is a funny-looking workaround from Steven Parkes\n                        const term = field.multiply(errorLocations[j], xiInverse);\n                        const termPlus1 = (term & 0x1) === 0 ? term | 1 : term & ~1;\n                        denominator = field.multiply(denominator, termPlus1);\n                    }\n                }\n                result[i] = field.multiply(errorEvaluator.evaluateAt(xiInverse), field.inverse(denominator));\n                if (field.getGeneratorBase() !== 0) {\n                    result[i] = field.multiply(result[i], xiInverse);\n                }\n            }\n            return result;\n        }\n    }\n\n    /*\n     * Copyright 2010 ZXing authors\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n    // import java.util.Arrays;\n    var Table;\n    (function (Table) {\n        Table[Table[\"UPPER\"] = 0] = \"UPPER\";\n        Table[Table[\"LOWER\"] = 1] = \"LOWER\";\n        Table[Table[\"MIXED\"] = 2] = \"MIXED\";\n        Table[Table[\"DIGIT\"] = 3] = \"DIGIT\";\n        Table[Table[\"PUNCT\"] = 4] = \"PUNCT\";\n        Table[Table[\"BINARY\"] = 5] = \"BINARY\";\n    })(Table || (Table = {}));\n    /**\n     * <p>The main class which implements Aztec Code decoding -- as opposed to locating and extracting\n     * the Aztec Code from an image.</p>\n     *\n     * @author David Olivier\n     */\n    class Decoder {\n        decode(detectorResult) {\n            this.ddata = detectorResult;\n            let matrix = detectorResult.getBits();\n            let rawbits = this.extractBits(matrix);\n            let correctedBits = this.correctBits(rawbits);\n            let rawBytes = Decoder.convertBoolArrayToByteArray(correctedBits);\n            let result = Decoder.getEncodedData(correctedBits);\n            let decoderResult = new DecoderResult(rawBytes, result, null, null);\n            decoderResult.setNumBits(correctedBits.length);\n            return decoderResult;\n        }\n        // This method is used for testing the high-level encoder\n        static highLevelDecode(correctedBits) {\n            return this.getEncodedData(correctedBits);\n        }\n        /**\n         * Gets the string encoded in the aztec code bits\n         *\n         * @return the decoded string\n         */\n        static getEncodedData(correctedBits) {\n            let endIndex = correctedBits.length;\n            let latchTable = Table.UPPER; // table most recently latched to\n            let shiftTable = Table.UPPER; // table to use for the next read\n            let result = '';\n            let index = 0;\n            while (index < endIndex) {\n                if (shiftTable === Table.BINARY) {\n                    if (endIndex - index < 5) {\n                        break;\n                    }\n                    let length = Decoder.readCode(correctedBits, index, 5);\n                    index += 5;\n                    if (length === 0) {\n                        if (endIndex - index < 11) {\n                            break;\n                        }\n                        length = Decoder.readCode(correctedBits, index, 11) + 31;\n                        index += 11;\n                    }\n                    for (let charCount = 0; charCount < length; charCount++) {\n                        if (endIndex - index < 8) {\n                            index = endIndex; // Force outer loop to exit\n                            break;\n                        }\n                        const code = Decoder.readCode(correctedBits, index, 8);\n                        result += /*(char)*/ StringUtils.castAsNonUtf8Char(code);\n                        index += 8;\n                    }\n                    // Go back to whatever mode we had been in\n                    shiftTable = latchTable;\n                }\n                else {\n                    let size = shiftTable === Table.DIGIT ? 4 : 5;\n                    if (endIndex - index < size) {\n                        break;\n                    }\n                    let code = Decoder.readCode(correctedBits, index, size);\n                    index += size;\n                    let str = Decoder.getCharacter(shiftTable, code);\n                    if (str.startsWith('CTRL_')) {\n                        // Table changes\n                        // ISO/IEC 24778:2008 prescribes ending a shift sequence in the mode from which it was invoked.\n                        // That's including when that mode is a shift.\n                        // Our test case dlusbs.png for issue #642 exercises that.\n                        latchTable = shiftTable; // Latch the current mode, so as to return to Upper after U/S B/S\n                        shiftTable = Decoder.getTable(str.charAt(5));\n                        if (str.charAt(6) === 'L') {\n                            latchTable = shiftTable;\n                        }\n                    }\n                    else {\n                        result += str;\n                        // Go back to whatever mode we had been in\n                        shiftTable = latchTable;\n                    }\n                }\n            }\n            return result;\n        }\n        /**\n         * gets the table corresponding to the char passed\n         */\n        static getTable(t) {\n            switch (t) {\n                case 'L':\n                    return Table.LOWER;\n                case 'P':\n                    return Table.PUNCT;\n                case 'M':\n                    return Table.MIXED;\n                case 'D':\n                    return Table.DIGIT;\n                case 'B':\n                    return Table.BINARY;\n                case 'U':\n                default:\n                    return Table.UPPER;\n            }\n        }\n        /**\n         * Gets the character (or string) corresponding to the passed code in the given table\n         *\n         * @param table the table used\n         * @param code the code of the character\n         */\n        static getCharacter(table, code) {\n            switch (table) {\n                case Table.UPPER:\n                    return Decoder.UPPER_TABLE[code];\n                case Table.LOWER:\n                    return Decoder.LOWER_TABLE[code];\n                case Table.MIXED:\n                    return Decoder.MIXED_TABLE[code];\n                case Table.PUNCT:\n                    return Decoder.PUNCT_TABLE[code];\n                case Table.DIGIT:\n                    return Decoder.DIGIT_TABLE[code];\n                default:\n                    // Should not reach here.\n                    throw new IllegalStateException('Bad table');\n            }\n        }\n        /**\n         * <p>Performs RS error correction on an array of bits.</p>\n         *\n         * @return the corrected array\n         * @throws FormatException if the input contains too many errors\n         */\n        correctBits(rawbits) {\n            let gf;\n            let codewordSize;\n            if (this.ddata.getNbLayers() <= 2) {\n                codewordSize = 6;\n                gf = GenericGF.AZTEC_DATA_6;\n            }\n            else if (this.ddata.getNbLayers() <= 8) {\n                codewordSize = 8;\n                gf = GenericGF.AZTEC_DATA_8;\n            }\n            else if (this.ddata.getNbLayers() <= 22) {\n                codewordSize = 10;\n                gf = GenericGF.AZTEC_DATA_10;\n            }\n            else {\n                codewordSize = 12;\n                gf = GenericGF.AZTEC_DATA_12;\n            }\n            let numDataCodewords = this.ddata.getNbDatablocks();\n            let numCodewords = rawbits.length / codewordSize;\n            if (numCodewords < numDataCodewords) {\n                throw new FormatException();\n            }\n            let offset = rawbits.length % codewordSize;\n            let dataWords = new Int32Array(numCodewords);\n            for (let i = 0; i < numCodewords; i++, offset += codewordSize) {\n                dataWords[i] = Decoder.readCode(rawbits, offset, codewordSize);\n            }\n            try {\n                let rsDecoder = new ReedSolomonDecoder(gf);\n                rsDecoder.decode(dataWords, numCodewords - numDataCodewords);\n            }\n            catch (ex) {\n                throw new FormatException(ex);\n            }\n            // Now perform the unstuffing operation.\n            // First, count how many bits are going to be thrown out as stuffing\n            let mask = (1 << codewordSize) - 1;\n            let stuffedBits = 0;\n            for (let i = 0; i < numDataCodewords; i++) {\n                let dataWord = dataWords[i];\n                if (dataWord === 0 || dataWord === mask) {\n                    throw new FormatException();\n                }\n                else if (dataWord === 1 || dataWord === mask - 1) {\n                    stuffedBits++;\n                }\n            }\n            // Now, actually unpack the bits and remove the stuffing\n            let correctedBits = new Array(numDataCodewords * codewordSize - stuffedBits);\n            let index = 0;\n            for (let i = 0; i < numDataCodewords; i++) {\n                let dataWord = dataWords[i];\n                if (dataWord === 1 || dataWord === mask - 1) {\n                    // next codewordSize-1 bits are all zeros or all ones\n                    correctedBits.fill(dataWord > 1, index, index + codewordSize - 1);\n                    // Arrays.fill(correctedBits, index, index + codewordSize - 1, dataWord > 1);\n                    index += codewordSize - 1;\n                }\n                else {\n                    for (let bit = codewordSize - 1; bit >= 0; --bit) {\n                        correctedBits[index++] = (dataWord & (1 << bit)) !== 0;\n                    }\n                }\n            }\n            return correctedBits;\n        }\n        /**\n         * Gets the array of bits from an Aztec Code matrix\n         *\n         * @return the array of bits\n         */\n        extractBits(matrix) {\n            let compact = this.ddata.isCompact();\n            let layers = this.ddata.getNbLayers();\n            let baseMatrixSize = (compact ? 11 : 14) + layers * 4; // not including alignment lines\n            let alignmentMap = new Int32Array(baseMatrixSize);\n            let rawbits = new Array(this.totalBitsInLayer(layers, compact));\n            if (compact) {\n                for (let i = 0; i < alignmentMap.length; i++) {\n                    alignmentMap[i] = i;\n                }\n            }\n            else {\n                let matrixSize = baseMatrixSize + 1 + 2 * Integer.truncDivision((Integer.truncDivision(baseMatrixSize, 2) - 1), 15);\n                let origCenter = baseMatrixSize / 2;\n                let center = Integer.truncDivision(matrixSize, 2);\n                for (let i = 0; i < origCenter; i++) {\n                    let newOffset = i + Integer.truncDivision(i, 15);\n                    alignmentMap[origCenter - i - 1] = center - newOffset - 1;\n                    alignmentMap[origCenter + i] = center + newOffset + 1;\n                }\n            }\n            for (let i = 0, rowOffset = 0; i < layers; i++) {\n                let rowSize = (layers - i) * 4 + (compact ? 9 : 12);\n                // The top-left most point of this layer is <low, low> (not including alignment lines)\n                let low = i * 2;\n                // The bottom-right most point of this layer is <high, high> (not including alignment lines)\n                let high = baseMatrixSize - 1 - low;\n                // We pull bits from the two 2 x rowSize columns and two rowSize x 2 rows\n                for (let j = 0; j < rowSize; j++) {\n                    let columnOffset = j * 2;\n                    for (let k = 0; k < 2; k++) {\n                        // left column\n                        rawbits[rowOffset + columnOffset + k] =\n                            matrix.get(alignmentMap[low + k], alignmentMap[low + j]);\n                        // bottom row\n                        rawbits[rowOffset + 2 * rowSize + columnOffset + k] =\n                            matrix.get(alignmentMap[low + j], alignmentMap[high - k]);\n                        // right column\n                        rawbits[rowOffset + 4 * rowSize + columnOffset + k] =\n                            matrix.get(alignmentMap[high - k], alignmentMap[high - j]);\n                        // top row\n                        rawbits[rowOffset + 6 * rowSize + columnOffset + k] =\n                            matrix.get(alignmentMap[high - j], alignmentMap[low + k]);\n                    }\n                }\n                rowOffset += rowSize * 8;\n            }\n            return rawbits;\n        }\n        /**\n         * Reads a code of given length and at given index in an array of bits\n         */\n        static readCode(rawbits, startIndex, length) {\n            let res = 0;\n            for (let i = startIndex; i < startIndex + length; i++) {\n                res <<= 1;\n                if (rawbits[i]) {\n                    res |= 0x01;\n                }\n            }\n            return res;\n        }\n        /**\n         * Reads a code of length 8 in an array of bits, padding with zeros\n         */\n        static readByte(rawbits, startIndex) {\n            let n = rawbits.length - startIndex;\n            if (n >= 8) {\n                return Decoder.readCode(rawbits, startIndex, 8);\n            }\n            return Decoder.readCode(rawbits, startIndex, n) << (8 - n);\n        }\n        /**\n         * Packs a bit array into bytes, most significant bit first\n         */\n        static convertBoolArrayToByteArray(boolArr) {\n            let byteArr = new Uint8Array((boolArr.length + 7) / 8);\n            for (let i = 0; i < byteArr.length; i++) {\n                byteArr[i] = Decoder.readByte(boolArr, 8 * i);\n            }\n            return byteArr;\n        }\n        totalBitsInLayer(layers, compact) {\n            return ((compact ? 88 : 112) + 16 * layers) * layers;\n        }\n    }\n    Decoder.UPPER_TABLE = [\n        'CTRL_PS', ' ', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P',\n        'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'CTRL_LL', 'CTRL_ML', 'CTRL_DL', 'CTRL_BS'\n    ];\n    Decoder.LOWER_TABLE = [\n        'CTRL_PS', ' ', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p',\n        'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'CTRL_US', 'CTRL_ML', 'CTRL_DL', 'CTRL_BS'\n    ];\n    Decoder.MIXED_TABLE = [\n        // Module parse failed: Octal literal in strict mode (50:29)\n        // so number string were scaped\n        'CTRL_PS', ' ', '\\\\1', '\\\\2', '\\\\3', '\\\\4', '\\\\5', '\\\\6', '\\\\7', '\\b', '\\t', '\\n',\n        '\\\\13', '\\f', '\\r', '\\\\33', '\\\\34', '\\\\35', '\\\\36', '\\\\37', '@', '\\\\', '^', '_',\n        '`', '|', '~', '\\\\177', 'CTRL_LL', 'CTRL_UL', 'CTRL_PL', 'CTRL_BS'\n    ];\n    Decoder.PUNCT_TABLE = [\n        '', '\\r', '\\r\\n', '. ', ', ', ': ', '!', '\"', '#', '$', '%', '&', '\\'', '(', ')',\n        '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '[', ']', '{', '}', 'CTRL_UL'\n    ];\n    Decoder.DIGIT_TABLE = [\n        'CTRL_PS', ' ', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ',', '.', 'CTRL_UL', 'CTRL_US'\n    ];\n\n    /*\n     * Copyright 2012 ZXing authors\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n    /*namespace com.google.zxing.common.detector {*/\n    /**\n     * General math-related and numeric utility functions.\n     */\n    class MathUtils {\n        constructor() { }\n        /**\n         * Ends up being a bit faster than {@link Math#round(float)}. This merely rounds its\n         * argument to the nearest int, where x.5 rounds up to x+1. Semantics of this shortcut\n         * differ slightly from {@link Math#round(float)} in that half rounds down for negative\n         * values. -2.5 rounds to -3, not -2. For purposes here it makes no difference.\n         *\n         * @param d real value to round\n         * @return nearest {@code int}\n         */\n        static round(d /*float*/) {\n            if (NaN === d)\n                return 0;\n            if (d <= Number.MIN_SAFE_INTEGER)\n                return Number.MIN_SAFE_INTEGER;\n            if (d >= Number.MAX_SAFE_INTEGER)\n                return Number.MAX_SAFE_INTEGER;\n            return /*(int) */ (d + (d < 0.0 ? -0.5 : 0.5)) | 0;\n        }\n        // TYPESCRIPTPORT: maybe remove round method and call directly Math.round, it looks like it doesn't make sense for js\n        /**\n         * @param aX point A x coordinate\n         * @param aY point A y coordinate\n         * @param bX point B x coordinate\n         * @param bY point B y coordinate\n         * @return Euclidean distance between points A and B\n         */\n        static distance(aX /*float|int*/, aY /*float|int*/, bX /*float|int*/, bY /*float|int*/) {\n            const xDiff = aX - bX;\n            const yDiff = aY - bY;\n            return /*(float) */ Math.sqrt(xDiff * xDiff + yDiff * yDiff);\n        }\n        /**\n         * @param aX point A x coordinate\n         * @param aY point A y coordinate\n         * @param bX point B x coordinate\n         * @param bY point B y coordinate\n         * @return Euclidean distance between points A and B\n         */\n        // public static distance(aX: number /*int*/, aY: number /*int*/, bX: number /*int*/, bY: number /*int*/): float {\n        //   const xDiff = aX - bX\n        //   const yDiff = aY - bY\n        //   return (float) Math.sqrt(xDiff * xDiff + yDiff * yDiff);\n        // }\n        /**\n         * @param array values to sum\n         * @return sum of values in array\n         */\n        static sum(array) {\n            let count = 0;\n            for (let i = 0, length = array.length; i !== length; i++) {\n                const a = array[i];\n                count += a;\n            }\n            return count;\n        }\n    }\n\n    /**\n     * Ponyfill for Java's Float class.\n     */\n    class Float {\n        /**\n         * SincTS has no difference between int and float, there's all numbers,\n         * this is used only to polyfill Java code.\n         */\n        static floatToIntBits(f) {\n            return f;\n        }\n    }\n    /**\n     * The float max value in JS is the number max value.\n     */\n    Float.MAX_VALUE = Number.MAX_SAFE_INTEGER;\n\n    /*\n     * Copyright 2007 ZXing authors\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n    /**\n     * <p>Encapsulates a point of interest in an image containing a barcode. Typically, this\n     * would be the location of a finder pattern or the corner of the barcode, for example.</p>\n     *\n     * @author Sean Owen\n     */\n    class ResultPoint {\n        constructor(x, y) {\n            this.x = x;\n            this.y = y;\n        }\n        getX() {\n            return this.x;\n        }\n        getY() {\n            return this.y;\n        }\n        /*@Override*/\n        equals(other) {\n            if (other instanceof ResultPoint) {\n                const otherPoint = other;\n                return this.x === otherPoint.x && this.y === otherPoint.y;\n            }\n            return false;\n        }\n        /*@Override*/\n        hashCode() {\n            return 31 * Float.floatToIntBits(this.x) + Float.floatToIntBits(this.y);\n        }\n        /*@Override*/\n        toString() {\n            return '(' + this.x + ',' + this.y + ')';\n        }\n        /**\n         * Orders an array of three ResultPoints in an order [A,B,C] such that AB is less than AC\n         * and BC is less than AC, and the angle between BC and BA is less than 180 degrees.\n         *\n         * @param patterns array of three {@code ResultPoint} to order\n         */\n        static orderBestPatterns(patterns) {\n            // Find distances between pattern centers\n            const zeroOneDistance = this.distance(patterns[0], patterns[1]);\n            const oneTwoDistance = this.distance(patterns[1], patterns[2]);\n            const zeroTwoDistance = this.distance(patterns[0], patterns[2]);\n            let pointA;\n            let pointB;\n            let pointC;\n            // Assume one closest to other two is B; A and C will just be guesses at first\n            if (oneTwoDistance >= zeroOneDistance && oneTwoDistance >= zeroTwoDistance) {\n                pointB = patterns[0];\n                pointA = patterns[1];\n                pointC = patterns[2];\n            }\n            else if (zeroTwoDistance >= oneTwoDistance && zeroTwoDistance >= zeroOneDistance) {\n                pointB = patterns[1];\n                pointA = patterns[0];\n                pointC = patterns[2];\n            }\n            else {\n                pointB = patterns[2];\n                pointA = patterns[0];\n                pointC = patterns[1];\n            }\n            // Use cross product to figure out whether A and C are correct or flipped.\n            // This asks whether BC x BA has a positive z component, which is the arrangement\n            // we want for A, B, C. If it's negative, then we've got it flipped around and\n            // should swap A and C.\n            if (this.crossProductZ(pointA, pointB, pointC) < 0.0) {\n                const temp = pointA;\n                pointA = pointC;\n                pointC = temp;\n            }\n            patterns[0] = pointA;\n            patterns[1] = pointB;\n            patterns[2] = pointC;\n        }\n        /**\n         * @param pattern1 first pattern\n         * @param pattern2 second pattern\n         * @return distance between two points\n         */\n        static distance(pattern1, pattern2) {\n            return MathUtils.distance(pattern1.x, pattern1.y, pattern2.x, pattern2.y);\n        }\n        /**\n         * Returns the z component of the cross product between vectors BC and BA.\n         */\n        static crossProductZ(pointA, pointB, pointC) {\n            const bX = pointB.x;\n            const bY = pointB.y;\n            return ((pointC.x - bX) * (pointA.y - bY)) - ((pointC.y - bY) * (pointA.x - bX));\n        }\n    }\n\n    /*\n     * Copyright 2007 ZXing authors\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n    /**\n     * <p>Encapsulates the result of detecting a barcode in an image. This includes the raw\n     * matrix of black/white pixels corresponding to the barcode, and possibly points of interest\n     * in the image, like the location of finder patterns or corners of the barcode in the image.</p>\n     *\n     * @author Sean Owen\n     */\n    class DetectorResult {\n        constructor(bits, points) {\n            this.bits = bits;\n            this.points = points;\n        }\n        getBits() {\n            return this.bits;\n        }\n        getPoints() {\n            return this.points;\n        }\n    }\n\n    /*\n     * Copyright 2010 ZXing authors\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n    /**\n     * <p>Extends {@link DetectorResult} with more information specific to the Aztec format,\n     * like the number of layers and whether it's compact.</p>\n     *\n     * @author Sean Owen\n     */\n    class AztecDetectorResult extends DetectorResult {\n        constructor(bits, points, compact, nbDatablocks, nbLayers) {\n            super(bits, points);\n            this.compact = compact;\n            this.nbDatablocks = nbDatablocks;\n            this.nbLayers = nbLayers;\n        }\n        getNbLayers() {\n            return this.nbLayers;\n        }\n        getNbDatablocks() {\n            return this.nbDatablocks;\n        }\n        isCompact() {\n            return this.compact;\n        }\n    }\n\n    /*\n     * Copyright 2010 ZXing authors\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n    /**\n     * <p>\n     * Detects a candidate barcode-like rectangular region within an image. It\n     * starts around the center of the image, increases the size of the candidate\n     * region until it finds a white rectangular region. By keeping track of the\n     * last black points it encountered, it determines the corners of the barcode.\n     * </p>\n     *\n     * @author David Olivier\n     */\n    class WhiteRectangleDetector {\n        // public constructor(private image: BitMatrix) /*throws NotFoundException*/ {\n        //   this(image, INIT_SIZE, image.getWidth() / 2, image.getHeight() / 2)\n        // }\n        /**\n         * @param image barcode image to find a rectangle in\n         * @param initSize initial size of search area around center\n         * @param x x position of search center\n         * @param y y position of search center\n         * @throws NotFoundException if image is too small to accommodate {@code initSize}\n         */\n        constructor(image, initSize /*int*/, x /*int*/, y /*int*/) {\n            this.image = image;\n            this.height = image.getHeight();\n            this.width = image.getWidth();\n            if (undefined === initSize || null === initSize) {\n                initSize = WhiteRectangleDetector.INIT_SIZE;\n            }\n            if (undefined === x || null === x) {\n                x = image.getWidth() / 2 | 0;\n            }\n            if (undefined === y || null === y) {\n                y = image.getHeight() / 2 | 0;\n            }\n            const halfsize = initSize / 2 | 0;\n            this.leftInit = x - halfsize;\n            this.rightInit = x + halfsize;\n            this.upInit = y - halfsize;\n            this.downInit = y + halfsize;\n            if (this.upInit < 0 || this.leftInit < 0 || this.downInit >= this.height || this.rightInit >= this.width) {\n                throw new NotFoundException();\n            }\n        }\n        /**\n         * <p>\n         * Detects a candidate barcode-like rectangular region within an image. It\n         * starts around the center of the image, increases the size of the candidate\n         * region until it finds a white rectangular region.\n         * </p>\n         *\n         * @return {@link ResultPoint}[] describing the corners of the rectangular\n         *         region. The first and last points are opposed on the diagonal, as\n         *         are the second and third. The first point will be the topmost\n         *         point and the last, the bottommost. The second point will be\n         *         leftmost and the third, the rightmost\n         * @throws NotFoundException if no Data Matrix Code can be found\n         */\n        detect() {\n            let left = this.leftInit;\n            let right = this.rightInit;\n            let up = this.upInit;\n            let down = this.downInit;\n            let sizeExceeded = false;\n            let aBlackPointFoundOnBorder = true;\n            let atLeastOneBlackPointFoundOnBorder = false;\n            let atLeastOneBlackPointFoundOnRight = false;\n            let atLeastOneBlackPointFoundOnBottom = false;\n            let atLeastOneBlackPointFoundOnLeft = false;\n            let atLeastOneBlackPointFoundOnTop = false;\n            const width = this.width;\n            const height = this.height;\n            while (aBlackPointFoundOnBorder) {\n                aBlackPointFoundOnBorder = false;\n                // .....\n                // .   |\n                // .....\n                let rightBorderNotWhite = true;\n                while ((rightBorderNotWhite || !atLeastOneBlackPointFoundOnRight) && right < width) {\n                    rightBorderNotWhite = this.containsBlackPoint(up, down, right, false);\n                    if (rightBorderNotWhite) {\n                        right++;\n                        aBlackPointFoundOnBorder = true;\n                        atLeastOneBlackPointFoundOnRight = true;\n                    }\n                    else if (!atLeastOneBlackPointFoundOnRight) {\n                        right++;\n                    }\n                }\n                if (right >= width) {\n                    sizeExceeded = true;\n                    break;\n                }\n                // .....\n                // .   .\n                // .___.\n                let bottomBorderNotWhite = true;\n                while ((bottomBorderNotWhite || !atLeastOneBlackPointFoundOnBottom) && down < height) {\n                    bottomBorderNotWhite = this.containsBlackPoint(left, right, down, true);\n                    if (bottomBorderNotWhite) {\n                        down++;\n                        aBlackPointFoundOnBorder = true;\n                        atLeastOneBlackPointFoundOnBottom = true;\n                    }\n                    else if (!atLeastOneBlackPointFoundOnBottom) {\n                        down++;\n                    }\n                }\n                if (down >= height) {\n                    sizeExceeded = true;\n                    break;\n                }\n                // .....\n                // |   .\n                // .....\n                let leftBorderNotWhite = true;\n                while ((leftBorderNotWhite || !atLeastOneBlackPointFoundOnLeft) && left >= 0) {\n                    leftBorderNotWhite = this.containsBlackPoint(up, down, left, false);\n                    if (leftBorderNotWhite) {\n                        left--;\n                        aBlackPointFoundOnBorder = true;\n                        atLeastOneBlackPointFoundOnLeft = true;\n                    }\n                    else if (!atLeastOneBlackPointFoundOnLeft) {\n                        left--;\n                    }\n                }\n                if (left < 0) {\n                    sizeExceeded = true;\n                    break;\n                }\n                // .___.\n                // .   .\n                // .....\n                let topBorderNotWhite = true;\n                while ((topBorderNotWhite || !atLeastOneBlackPointFoundOnTop) && up >= 0) {\n                    topBorderNotWhite = this.containsBlackPoint(left, right, up, true);\n                    if (topBorderNotWhite) {\n                        up--;\n                        aBlackPointFoundOnBorder = true;\n                        atLeastOneBlackPointFoundOnTop = true;\n                    }\n                    else if (!atLeastOneBlackPointFoundOnTop) {\n                        up--;\n                    }\n                }\n                if (up < 0) {\n                    sizeExceeded = true;\n                    break;\n                }\n                if (aBlackPointFoundOnBorder) {\n                    atLeastOneBlackPointFoundOnBorder = true;\n                }\n            }\n            if (!sizeExceeded && atLeastOneBlackPointFoundOnBorder) {\n                const maxSize = right - left;\n                let z = null;\n                for (let i = 1; z === null && i < maxSize; i++) {\n                    z = this.getBlackPointOnSegment(left, down - i, left + i, down);\n                }\n                if (z == null) {\n                    throw new NotFoundException();\n                }\n                let t = null;\n                // go down right\n                for (let i = 1; t === null && i < maxSize; i++) {\n                    t = this.getBlackPointOnSegment(left, up + i, left + i, up);\n                }\n                if (t == null) {\n                    throw new NotFoundException();\n                }\n                let x = null;\n                // go down left\n                for (let i = 1; x === null && i < maxSize; i++) {\n                    x = this.getBlackPointOnSegment(right, up + i, right - i, up);\n                }\n                if (x == null) {\n                    throw new NotFoundException();\n                }\n                let y = null;\n                // go up left\n                for (let i = 1; y === null && i < maxSize; i++) {\n                    y = this.getBlackPointOnSegment(right, down - i, right - i, down);\n                }\n                if (y == null) {\n                    throw new NotFoundException();\n                }\n                return this.centerEdges(y, z, x, t);\n            }\n            else {\n                throw new NotFoundException();\n            }\n        }\n        getBlackPointOnSegment(aX /*float*/, aY /*float*/, bX /*float*/, bY /*float*/) {\n            const dist = MathUtils.round(MathUtils.distance(aX, aY, bX, bY));\n            const xStep = (bX - aX) / dist;\n            const yStep = (bY - aY) / dist;\n            const image = this.image;\n            for (let i = 0; i < dist; i++) {\n                const x = MathUtils.round(aX + i * xStep);\n                const y = MathUtils.round(aY + i * yStep);\n                if (image.get(x, y)) {\n                    return new ResultPoint(x, y);\n                }\n            }\n            return null;\n        }\n        /**\n         * recenters the points of a constant distance towards the center\n         *\n         * @param y bottom most point\n         * @param z left most point\n         * @param x right most point\n         * @param t top most point\n         * @return {@link ResultPoint}[] describing the corners of the rectangular\n         *         region. The first and last points are opposed on the diagonal, as\n         *         are the second and third. The first point will be the topmost\n         *         point and the last, the bottommost. The second point will be\n         *         leftmost and the third, the rightmost\n         */\n        centerEdges(y, z, x, t) {\n            //\n            //       t            t\n            //  z                      x\n            //        x    OR    z\n            //   y                    y\n            //\n            const yi = y.getX();\n            const yj = y.getY();\n            const zi = z.getX();\n            const zj = z.getY();\n            const xi = x.getX();\n            const xj = x.getY();\n            const ti = t.getX();\n            const tj = t.getY();\n            const CORR = WhiteRectangleDetector.CORR;\n            if (yi < this.width / 2.0) {\n                return [\n                    new ResultPoint(ti - CORR, tj + CORR),\n                    new ResultPoint(zi + CORR, zj + CORR),\n                    new ResultPoint(xi - CORR, xj - CORR),\n                    new ResultPoint(yi + CORR, yj - CORR)\n                ];\n            }\n            else {\n                return [\n                    new ResultPoint(ti + CORR, tj + CORR),\n                    new ResultPoint(zi + CORR, zj - CORR),\n                    new ResultPoint(xi - CORR, xj + CORR),\n                    new ResultPoint(yi - CORR, yj - CORR)\n                ];\n            }\n        }\n        /**\n         * Determines whether a segment contains a black point\n         *\n         * @param a          min value of the scanned coordinate\n         * @param b          max value of the scanned coordinate\n         * @param fixed      value of fixed coordinate\n         * @param horizontal set to true if scan must be horizontal, false if vertical\n         * @return true if a black point has been found, else false.\n         */\n        containsBlackPoint(a /*int*/, b /*int*/, fixed /*int*/, horizontal) {\n            const image = this.image;\n            if (horizontal) {\n                for (let x = a; x <= b; x++) {\n                    if (image.get(x, fixed)) {\n                        return true;\n                    }\n                }\n            }\n            else {\n                for (let y = a; y <= b; y++) {\n                    if (image.get(fixed, y)) {\n                        return true;\n                    }\n                }\n            }\n            return false;\n        }\n    }\n    WhiteRectangleDetector.INIT_SIZE = 10;\n    WhiteRectangleDetector.CORR = 1;\n\n    /*\n     * Copyright 2007 ZXing authors\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n    /**\n     * Implementations of this class can, given locations of finder patterns for a QR code in an\n     * image, sample the right points in the image to reconstruct the QR code, accounting for\n     * perspective distortion. It is abstracted since it is relatively expensive and should be allowed\n     * to take advantage of platform-specific optimized implementations, like Sun's Java Advanced\n     * Imaging library, but which may not be available in other environments such as J2ME, and vice\n     * versa.\n     *\n     * The implementation used can be controlled by calling {@link #setGridSampler(GridSampler)}\n     * with an instance of a class which implements this interface.\n     *\n     * @author Sean Owen\n     */\n    class GridSampler {\n        /**\n         * <p>Checks a set of points that have been transformed to sample points on an image against\n         * the image's dimensions to see if the point are even within the image.</p>\n         *\n         * <p>This method will actually \"nudge\" the endpoints back onto the image if they are found to be\n         * barely (less than 1 pixel) off the image. This accounts for imperfect detection of finder\n         * patterns in an image where the QR Code runs all the way to the image border.</p>\n         *\n         * <p>For efficiency, the method will check points from either end of the line until one is found\n         * to be within the image. Because the set of points are assumed to be linear, this is valid.</p>\n         *\n         * @param image image into which the points should map\n         * @param points actual points in x1,y1,...,xn,yn form\n         * @throws NotFoundException if an endpoint is lies outside the image boundaries\n         */\n        static checkAndNudgePoints(image, points) {\n            const width = image.getWidth();\n            const height = image.getHeight();\n            // Check and nudge points from start until we see some that are OK:\n            let nudged = true;\n            for (let offset = 0; offset < points.length && nudged; offset += 2) {\n                const x = Math.floor(points[offset]);\n                const y = Math.floor(points[offset + 1]);\n                if (x < -1 || x > width || y < -1 || y > height) {\n                    throw new NotFoundException();\n                }\n                nudged = false;\n                if (x === -1) {\n                    points[offset] = 0.0;\n                    nudged = true;\n                }\n                else if (x === width) {\n                    points[offset] = width - 1;\n                    nudged = true;\n                }\n                if (y === -1) {\n                    points[offset + 1] = 0.0;\n                    nudged = true;\n                }\n                else if (y === height) {\n                    points[offset + 1] = height - 1;\n                    nudged = true;\n                }\n            }\n            // Check and nudge points from end:\n            nudged = true;\n            for (let offset = points.length - 2; offset >= 0 && nudged; offset -= 2) {\n                const x = Math.floor(points[offset]);\n                const y = Math.floor(points[offset + 1]);\n                if (x < -1 || x > width || y < -1 || y > height) {\n                    throw new NotFoundException();\n                }\n                nudged = false;\n                if (x === -1) {\n                    points[offset] = 0.0;\n                    nudged = true;\n                }\n                else if (x === width) {\n                    points[offset] = width - 1;\n                    nudged = true;\n                }\n                if (y === -1) {\n                    points[offset + 1] = 0.0;\n                    nudged = true;\n                }\n                else if (y === height) {\n                    points[offset + 1] = height - 1;\n                    nudged = true;\n                }\n            }\n        }\n    }\n\n    /*\n     * Copyright 2007 ZXing authors\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n    /*namespace com.google.zxing.common {*/\n    /**\n     * <p>This class implements a perspective transform in two dimensions. Given four source and four\n     * destination points, it will compute the transformation implied between them. The code is based\n     * directly upon section 3.4.2 of George Wolberg's \"Digital Image Warping\"; see pages 54-56.</p>\n     *\n     * @author Sean Owen\n     */\n    class PerspectiveTransform {\n        constructor(a11 /*float*/, a21 /*float*/, a31 /*float*/, a12 /*float*/, a22 /*float*/, a32 /*float*/, a13 /*float*/, a23 /*float*/, a33 /*float*/) {\n            this.a11 = a11;\n            this.a21 = a21;\n            this.a31 = a31;\n            this.a12 = a12;\n            this.a22 = a22;\n            this.a32 = a32;\n            this.a13 = a13;\n            this.a23 = a23;\n            this.a33 = a33;\n        }\n        static quadrilateralToQuadrilateral(x0 /*float*/, y0 /*float*/, x1 /*float*/, y1 /*float*/, x2 /*float*/, y2 /*float*/, x3 /*float*/, y3 /*float*/, x0p /*float*/, y0p /*float*/, x1p /*float*/, y1p /*float*/, x2p /*float*/, y2p /*float*/, x3p /*float*/, y3p /*float*/) {\n            const qToS = PerspectiveTransform.quadrilateralToSquare(x0, y0, x1, y1, x2, y2, x3, y3);\n            const sToQ = PerspectiveTransform.squareToQuadrilateral(x0p, y0p, x1p, y1p, x2p, y2p, x3p, y3p);\n            return sToQ.times(qToS);\n        }\n        transformPoints(points) {\n            const max = points.length;\n            const a11 = this.a11;\n            const a12 = this.a12;\n            const a13 = this.a13;\n            const a21 = this.a21;\n            const a22 = this.a22;\n            const a23 = this.a23;\n            const a31 = this.a31;\n            const a32 = this.a32;\n            const a33 = this.a33;\n            for (let i = 0; i < max; i += 2) {\n                const x = points[i];\n                const y = points[i + 1];\n                const denominator = a13 * x + a23 * y + a33;\n                points[i] = (a11 * x + a21 * y + a31) / denominator;\n                points[i + 1] = (a12 * x + a22 * y + a32) / denominator;\n            }\n        }\n        transformPointsWithValues(xValues, yValues) {\n            const a11 = this.a11;\n            const a12 = this.a12;\n            const a13 = this.a13;\n            const a21 = this.a21;\n            const a22 = this.a22;\n            const a23 = this.a23;\n            const a31 = this.a31;\n            const a32 = this.a32;\n            const a33 = this.a33;\n            const n = xValues.length;\n            for (let i = 0; i < n; i++) {\n                const x = xValues[i];\n                const y = yValues[i];\n                const denominator = a13 * x + a23 * y + a33;\n                xValues[i] = (a11 * x + a21 * y + a31) / denominator;\n                yValues[i] = (a12 * x + a22 * y + a32) / denominator;\n            }\n        }\n        static squareToQuadrilateral(x0 /*float*/, y0 /*float*/, x1 /*float*/, y1 /*float*/, x2 /*float*/, y2 /*float*/, x3 /*float*/, y3 /*float*/) {\n            const dx3 = x0 - x1 + x2 - x3;\n            const dy3 = y0 - y1 + y2 - y3;\n            if (dx3 === 0.0 && dy3 === 0.0) {\n                // Affine\n                return new PerspectiveTransform(x1 - x0, x2 - x1, x0, y1 - y0, y2 - y1, y0, 0.0, 0.0, 1.0);\n            }\n            else {\n                const dx1 = x1 - x2;\n                const dx2 = x3 - x2;\n                const dy1 = y1 - y2;\n                const dy2 = y3 - y2;\n                const denominator = dx1 * dy2 - dx2 * dy1;\n                const a13 = (dx3 * dy2 - dx2 * dy3) / denominator;\n                const a23 = (dx1 * dy3 - dx3 * dy1) / denominator;\n                return new PerspectiveTransform(x1 - x0 + a13 * x1, x3 - x0 + a23 * x3, x0, y1 - y0 + a13 * y1, y3 - y0 + a23 * y3, y0, a13, a23, 1.0);\n            }\n        }\n        static quadrilateralToSquare(x0 /*float*/, y0 /*float*/, x1 /*float*/, y1 /*float*/, x2 /*float*/, y2 /*float*/, x3 /*float*/, y3 /*float*/) {\n            // Here, the adjoint serves as the inverse:\n            return PerspectiveTransform.squareToQuadrilateral(x0, y0, x1, y1, x2, y2, x3, y3).buildAdjoint();\n        }\n        buildAdjoint() {\n            // Adjoint is the transpose of the cofactor matrix:\n            return new PerspectiveTransform(this.a22 * this.a33 - this.a23 * this.a32, this.a23 * this.a31 - this.a21 * this.a33, this.a21 * this.a32 - this.a22 * this.a31, this.a13 * this.a32 - this.a12 * this.a33, this.a11 * this.a33 - this.a13 * this.a31, this.a12 * this.a31 - this.a11 * this.a32, this.a12 * this.a23 - this.a13 * this.a22, this.a13 * this.a21 - this.a11 * this.a23, this.a11 * this.a22 - this.a12 * this.a21);\n        }\n        times(other) {\n            return new PerspectiveTransform(this.a11 * other.a11 + this.a21 * other.a12 + this.a31 * other.a13, this.a11 * other.a21 + this.a21 * other.a22 + this.a31 * other.a23, this.a11 * other.a31 + this.a21 * other.a32 + this.a31 * other.a33, this.a12 * other.a11 + this.a22 * other.a12 + this.a32 * other.a13, this.a12 * other.a21 + this.a22 * other.a22 + this.a32 * other.a23, this.a12 * other.a31 + this.a22 * other.a32 + this.a32 * other.a33, this.a13 * other.a11 + this.a23 * other.a12 + this.a33 * other.a13, this.a13 * other.a21 + this.a23 * other.a22 + this.a33 * other.a23, this.a13 * other.a31 + this.a23 * other.a32 + this.a33 * other.a33);\n        }\n    }\n\n    /*\n     * Copyright 2007 ZXing authors\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n    /**\n     * @author Sean Owen\n     */\n    class DefaultGridSampler extends GridSampler {\n        /*@Override*/\n        sampleGrid(image, dimensionX /*int*/, dimensionY /*int*/, p1ToX /*float*/, p1ToY /*float*/, p2ToX /*float*/, p2ToY /*float*/, p3ToX /*float*/, p3ToY /*float*/, p4ToX /*float*/, p4ToY /*float*/, p1FromX /*float*/, p1FromY /*float*/, p2FromX /*float*/, p2FromY /*float*/, p3FromX /*float*/, p3FromY /*float*/, p4FromX /*float*/, p4FromY /*float*/) {\n            const transform = PerspectiveTransform.quadrilateralToQuadrilateral(p1ToX, p1ToY, p2ToX, p2ToY, p3ToX, p3ToY, p4ToX, p4ToY, p1FromX, p1FromY, p2FromX, p2FromY, p3FromX, p3FromY, p4FromX, p4FromY);\n            return this.sampleGridWithTransform(image, dimensionX, dimensionY, transform);\n        }\n        /*@Override*/\n        sampleGridWithTransform(image, dimensionX /*int*/, dimensionY /*int*/, transform) {\n            if (dimensionX <= 0 || dimensionY <= 0) {\n                throw new NotFoundException();\n            }\n            const bits = new BitMatrix(dimensionX, dimensionY);\n            const points = new Float32Array(2 * dimensionX);\n            for (let y = 0; y < dimensionY; y++) {\n                const max = points.length;\n                const iValue = y + 0.5;\n                for (let x = 0; x < max; x += 2) {\n                    points[x] = (x / 2) + 0.5;\n                    points[x + 1] = iValue;\n                }\n                transform.transformPoints(points);\n                // Quick check to see if points transformed to something inside the image\n                // sufficient to check the endpoints\n                GridSampler.checkAndNudgePoints(image, points);\n                try {\n                    for (let x = 0; x < max; x += 2) {\n                        if (image.get(Math.floor(points[x]), Math.floor(points[x + 1]))) {\n                            // Black(-ish) pixel\n                            bits.set(x / 2, y);\n                        }\n                    }\n                }\n                catch (aioobe /*: ArrayIndexOutOfBoundsException*/) {\n                    // This feels wrong, but, sometimes if the finder patterns are misidentified, the resulting\n                    // transform gets \"twisted\" such that it maps a straight line of points to a set of points\n                    // whose endpoints are in bounds, but others are not. There is probably some mathematical\n                    // way to detect this about the transformation that I don't know yet.\n                    // This results in an ugly runtime exception despite our clever checks above -- can't have\n                    // that. We could check each point's coordinates but that feels duplicative. We settle for\n                    // catching and wrapping ArrayIndexOutOfBoundsException.\n                    throw new NotFoundException();\n                }\n            }\n            return bits;\n        }\n    }\n\n    class GridSamplerInstance {\n        /**\n         * Sets the implementation of GridSampler used by the library. One global\n         * instance is stored, which may sound problematic. But, the implementation provided\n         * ought to be appropriate for the entire platform, and all uses of this library\n         * in the whole lifetime of the JVM. For instance, an Android activity can swap in\n         * an implementation that takes advantage of native platform libraries.\n         *\n         * @param newGridSampler The platform-specific object to install.\n         */\n        static setGridSampler(newGridSampler) {\n            GridSamplerInstance.gridSampler = newGridSampler;\n        }\n        /**\n         * @return the current implementation of GridSampler\n         */\n        static getInstance() {\n            return GridSamplerInstance.gridSampler;\n        }\n    }\n    GridSamplerInstance.gridSampler = new DefaultGridSampler();\n\n    /*\n     * Copyright 2010 ZXing authors\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n    class Point {\n        constructor(x, y) {\n            this.x = x;\n            this.y = y;\n        }\n        toResultPoint() {\n            return new ResultPoint(this.getX(), this.getY());\n        }\n        getX() {\n            return this.x;\n        }\n        getY() {\n            return this.y;\n        }\n    }\n    /**\n     * Encapsulates logic that can detect an Aztec Code in an image, even if the Aztec Code\n     * is rotated or skewed, or partially obscured.\n     *\n     * @author David Olivier\n     * @author Frank Yellin\n     */\n    class Detector {\n        constructor(image) {\n            this.EXPECTED_CORNER_BITS = new Int32Array([\n                0xee0,\n                0x1dc,\n                0x83b,\n                0x707,\n            ]);\n            this.image = image;\n        }\n        detect() {\n            return this.detectMirror(false);\n        }\n        /**\n         * Detects an Aztec Code in an image.\n         *\n         * @param isMirror if true, image is a mirror-image of original\n         * @return {@link AztecDetectorResult} encapsulating results of detecting an Aztec Code\n         * @throws NotFoundException if no Aztec Code can be found\n         */\n        detectMirror(isMirror) {\n            // 1. Get the center of the aztec matrix\n            let pCenter = this.getMatrixCenter();\n            // 2. Get the center points of the four diagonal points just outside the bull's eye\n            //  [topRight, bottomRight, bottomLeft, topLeft]\n            let bullsEyeCorners = this.getBullsEyeCorners(pCenter);\n            if (isMirror) {\n                let temp = bullsEyeCorners[0];\n                bullsEyeCorners[0] = bullsEyeCorners[2];\n                bullsEyeCorners[2] = temp;\n            }\n            // 3. Get the size of the matrix and other parameters from the bull's eye\n            this.extractParameters(bullsEyeCorners);\n            // 4. Sample the grid\n            let bits = this.sampleGrid(this.image, bullsEyeCorners[this.shift % 4], bullsEyeCorners[(this.shift + 1) % 4], bullsEyeCorners[(this.shift + 2) % 4], bullsEyeCorners[(this.shift + 3) % 4]);\n            // 5. Get the corners of the matrix.\n            let corners = this.getMatrixCornerPoints(bullsEyeCorners);\n            return new AztecDetectorResult(bits, corners, this.compact, this.nbDataBlocks, this.nbLayers);\n        }\n        /**\n         * Extracts the number of data layers and data blocks from the layer around the bull's eye.\n         *\n         * @param bullsEyeCorners the array of bull's eye corners\n         * @throws NotFoundException in case of too many errors or invalid parameters\n         */\n        extractParameters(bullsEyeCorners) {\n            if (!this.isValidPoint(bullsEyeCorners[0]) || !this.isValidPoint(bullsEyeCorners[1]) ||\n                !this.isValidPoint(bullsEyeCorners[2]) || !this.isValidPoint(bullsEyeCorners[3])) {\n                throw new NotFoundException();\n            }\n            let length = 2 * this.nbCenterLayers;\n            // Get the bits around the bull's eye\n            let sides = new Int32Array([\n                this.sampleLine(bullsEyeCorners[0], bullsEyeCorners[1], length),\n                this.sampleLine(bullsEyeCorners[1], bullsEyeCorners[2], length),\n                this.sampleLine(bullsEyeCorners[2], bullsEyeCorners[3], length),\n                this.sampleLine(bullsEyeCorners[3], bullsEyeCorners[0], length) // Top\n            ]);\n            // bullsEyeCorners[shift] is the corner of the bulls'eye that has three\n            // orientation marks.\n            // sides[shift] is the row/column that goes from the corner with three\n            // orientation marks to the corner with two.\n            this.shift = this.getRotation(sides, length);\n            // Flatten the parameter bits into a single 28- or 40-bit long\n            let parameterData = 0;\n            for (let i = 0; i < 4; i++) {\n                let side = sides[(this.shift + i) % 4];\n                if (this.compact) {\n                    // Each side of the form ..XXXXXXX. where Xs are parameter data\n                    parameterData <<= 7;\n                    parameterData += (side >> 1) & 0x7F;\n                }\n                else {\n                    // Each side of the form ..XXXXX.XXXXX. where Xs are parameter data\n                    parameterData <<= 10;\n                    parameterData += ((side >> 2) & (0x1f << 5)) + ((side >> 1) & 0x1F);\n                }\n            }\n            // Corrects parameter data using RS.  Returns just the data portion\n            // without the error correction.\n            let correctedData = this.getCorrectedParameterData(parameterData, this.compact);\n            if (this.compact) {\n                // 8 bits:  2 bits layers and 6 bits data blocks\n                this.nbLayers = (correctedData >> 6) + 1;\n                this.nbDataBlocks = (correctedData & 0x3F) + 1;\n            }\n            else {\n                // 16 bits:  5 bits layers and 11 bits data blocks\n                this.nbLayers = (correctedData >> 11) + 1;\n                this.nbDataBlocks = (correctedData & 0x7FF) + 1;\n            }\n        }\n        getRotation(sides, length) {\n            // In a normal pattern, we expect to See\n            //   **    .*             D       A\n            //   *      *\n            //\n            //   .      *\n            //   ..    ..             C       B\n            //\n            // Grab the 3 bits from each of the sides the form the locator pattern and concatenate\n            // into a 12-bit integer.  Start with the bit at A\n            let cornerBits = 0;\n            sides.forEach((side, idx, arr) => {\n                // XX......X where X's are orientation marks\n                let t = ((side >> (length - 2)) << 1) + (side & 1);\n                cornerBits = (cornerBits << 3) + t;\n            });\n            // for (var side in sides) {\n            //     // XX......X where X's are orientation marks\n            //     var t = ((side >> (length - 2)) << 1) + (side & 1);\n            //     cornerBits = (cornerBits << 3) + t;\n            // }\n            // Mov the bottom bit to the top, so that the three bits of the locator pattern at A are\n            // together.  cornerBits is now:\n            //  3 orientation bits at A || 3 orientation bits at B || ... || 3 orientation bits at D\n            cornerBits = ((cornerBits & 1) << 11) + (cornerBits >> 1);\n            // The result shift indicates which element of BullsEyeCorners[] goes into the top-left\n            // corner. Since the four rotation values have a Hamming distance of 8, we\n            // can easily tolerate two errors.\n            for (let shift = 0; shift < 4; shift++) {\n                if (Integer.bitCount(cornerBits ^ this.EXPECTED_CORNER_BITS[shift]) <= 2) {\n                    return shift;\n                }\n            }\n            throw new NotFoundException();\n        }\n        /**\n         * Corrects the parameter bits using Reed-Solomon algorithm.\n         *\n         * @param parameterData parameter bits\n         * @param compact true if this is a compact Aztec code\n         * @throws NotFoundException if the array contains too many errors\n         */\n        getCorrectedParameterData(parameterData, compact) {\n            let numCodewords;\n            let numDataCodewords;\n            if (compact) {\n                numCodewords = 7;\n                numDataCodewords = 2;\n            }\n            else {\n                numCodewords = 10;\n                numDataCodewords = 4;\n            }\n            let numECCodewords = numCodewords - numDataCodewords;\n            let parameterWords = new Int32Array(numCodewords);\n            for (let i = numCodewords - 1; i >= 0; --i) {\n                parameterWords[i] = parameterData & 0xF;\n                parameterData >>= 4;\n            }\n            try {\n                let rsDecoder = new ReedSolomonDecoder(GenericGF.AZTEC_PARAM);\n                rsDecoder.decode(parameterWords, numECCodewords);\n            }\n            catch (ignored) {\n                throw new NotFoundException();\n            }\n            // Toss the error correction.  Just return the data as an integer\n            let result = 0;\n            for (let i = 0; i < numDataCodewords; i++) {\n                result = (result << 4) + parameterWords[i];\n            }\n            return result;\n        }\n        /**\n         * Finds the corners of a bull-eye centered on the passed point.\n         * This returns the centers of the diagonal points just outside the bull's eye\n         * Returns [topRight, bottomRight, bottomLeft, topLeft]\n         *\n         * @param pCenter Center point\n         * @return The corners of the bull-eye\n         * @throws NotFoundException If no valid bull-eye can be found\n         */\n        getBullsEyeCorners(pCenter) {\n            let pina = pCenter;\n            let pinb = pCenter;\n            let pinc = pCenter;\n            let pind = pCenter;\n            let color = true;\n            for (this.nbCenterLayers = 1; this.nbCenterLayers < 9; this.nbCenterLayers++) {\n                let pouta = this.getFirstDifferent(pina, color, 1, -1);\n                let poutb = this.getFirstDifferent(pinb, color, 1, 1);\n                let poutc = this.getFirstDifferent(pinc, color, -1, 1);\n                let poutd = this.getFirstDifferent(pind, color, -1, -1);\n                // d      a\n                //\n                // c      b\n                if (this.nbCenterLayers > 2) {\n                    let q = (this.distancePoint(poutd, pouta) * this.nbCenterLayers) / (this.distancePoint(pind, pina) * (this.nbCenterLayers + 2));\n                    if (q < 0.75 || q > 1.25 || !this.isWhiteOrBlackRectangle(pouta, poutb, poutc, poutd)) {\n                        break;\n                    }\n                }\n                pina = pouta;\n                pinb = poutb;\n                pinc = poutc;\n                pind = poutd;\n                color = !color;\n            }\n            if (this.nbCenterLayers !== 5 && this.nbCenterLayers !== 7) {\n                throw new NotFoundException();\n            }\n            this.compact = this.nbCenterLayers === 5;\n            // Expand the square by .5 pixel in each direction so that we're on the border\n            // between the white square and the black square\n            let pinax = new ResultPoint(pina.getX() + 0.5, pina.getY() - 0.5);\n            let pinbx = new ResultPoint(pinb.getX() + 0.5, pinb.getY() + 0.5);\n            let pincx = new ResultPoint(pinc.getX() - 0.5, pinc.getY() + 0.5);\n            let pindx = new ResultPoint(pind.getX() - 0.5, pind.getY() - 0.5);\n            // Expand the square so that its corners are the centers of the points\n            // just outside the bull's eye.\n            return this.expandSquare([pinax, pinbx, pincx, pindx], 2 * this.nbCenterLayers - 3, 2 * this.nbCenterLayers);\n        }\n        /**\n         * Finds a candidate center point of an Aztec code from an image\n         *\n         * @return the center point\n         */\n        getMatrixCenter() {\n            let pointA;\n            let pointB;\n            let pointC;\n            let pointD;\n            // Get a white rectangle that can be the border of the matrix in center bull's eye or\n            try {\n                let cornerPoints = new WhiteRectangleDetector(this.image).detect();\n                pointA = cornerPoints[0];\n                pointB = cornerPoints[1];\n                pointC = cornerPoints[2];\n                pointD = cornerPoints[3];\n            }\n            catch (e) {\n                // This exception can be in case the initial rectangle is white\n                // In that case, surely in the bull's eye, we try to expand the rectangle.\n                let cx = this.image.getWidth() / 2;\n                let cy = this.image.getHeight() / 2;\n                pointA = this.getFirstDifferent(new Point(cx + 7, cy - 7), false, 1, -1).toResultPoint();\n                pointB = this.getFirstDifferent(new Point(cx + 7, cy + 7), false, 1, 1).toResultPoint();\n                pointC = this.getFirstDifferent(new Point(cx - 7, cy + 7), false, -1, 1).toResultPoint();\n                pointD = this.getFirstDifferent(new Point(cx - 7, cy - 7), false, -1, -1).toResultPoint();\n            }\n            // Compute the center of the rectangle\n            let cx = MathUtils.round((pointA.getX() + pointD.getX() + pointB.getX() + pointC.getX()) / 4.0);\n            let cy = MathUtils.round((pointA.getY() + pointD.getY() + pointB.getY() + pointC.getY()) / 4.0);\n            // Redetermine the white rectangle starting from previously computed center.\n            // This will ensure that we end up with a white rectangle in center bull's eye\n            // in order to compute a more accurate center.\n            try {\n                let cornerPoints = new WhiteRectangleDetector(this.image, 15, cx, cy).detect();\n                pointA = cornerPoints[0];\n                pointB = cornerPoints[1];\n                pointC = cornerPoints[2];\n                pointD = cornerPoints[3];\n            }\n            catch (e) {\n                // This exception can be in case the initial rectangle is white\n                // In that case we try to expand the rectangle.\n                pointA = this.getFirstDifferent(new Point(cx + 7, cy - 7), false, 1, -1).toResultPoint();\n                pointB = this.getFirstDifferent(new Point(cx + 7, cy + 7), false, 1, 1).toResultPoint();\n                pointC = this.getFirstDifferent(new Point(cx - 7, cy + 7), false, -1, 1).toResultPoint();\n                pointD = this.getFirstDifferent(new Point(cx - 7, cy - 7), false, -1, -1).toResultPoint();\n            }\n            // Recompute the center of the rectangle\n            cx = MathUtils.round((pointA.getX() + pointD.getX() + pointB.getX() + pointC.getX()) / 4.0);\n            cy = MathUtils.round((pointA.getY() + pointD.getY() + pointB.getY() + pointC.getY()) / 4.0);\n            return new Point(cx, cy);\n        }\n        /**\n         * Gets the Aztec code corners from the bull's eye corners and the parameters.\n         *\n         * @param bullsEyeCorners the array of bull's eye corners\n         * @return the array of aztec code corners\n         */\n        getMatrixCornerPoints(bullsEyeCorners) {\n            return this.expandSquare(bullsEyeCorners, 2 * this.nbCenterLayers, this.getDimension());\n        }\n        /**\n         * Creates a BitMatrix by sampling the provided image.\n         * topLeft, topRight, bottomRight, and bottomLeft are the centers of the squares on the\n         * diagonal just outside the bull's eye.\n         */\n        sampleGrid(image, topLeft, topRight, bottomRight, bottomLeft) {\n            let sampler = GridSamplerInstance.getInstance();\n            let dimension = this.getDimension();\n            let low = dimension / 2 - this.nbCenterLayers;\n            let high = dimension / 2 + this.nbCenterLayers;\n            return sampler.sampleGrid(image, dimension, dimension, low, low, // topleft\n            high, low, // topright\n            high, high, // bottomright\n            low, high, // bottomleft\n            topLeft.getX(), topLeft.getY(), topRight.getX(), topRight.getY(), bottomRight.getX(), bottomRight.getY(), bottomLeft.getX(), bottomLeft.getY());\n        }\n        /**\n         * Samples a line.\n         *\n         * @param p1   start point (inclusive)\n         * @param p2   end point (exclusive)\n         * @param size number of bits\n         * @return the array of bits as an int (first bit is high-order bit of result)\n         */\n        sampleLine(p1, p2, size) {\n            let result = 0;\n            let d = this.distanceResultPoint(p1, p2);\n            let moduleSize = d / size;\n            let px = p1.getX();\n            let py = p1.getY();\n            let dx = moduleSize * (p2.getX() - p1.getX()) / d;\n            let dy = moduleSize * (p2.getY() - p1.getY()) / d;\n            for (let i = 0; i < size; i++) {\n                if (this.image.get(MathUtils.round(px + i * dx), MathUtils.round(py + i * dy))) {\n                    result |= 1 << (size - i - 1);\n                }\n            }\n            return result;\n        }\n        /**\n         * @return true if the border of the rectangle passed in parameter is compound of white points only\n         *         or black points only\n         */\n        isWhiteOrBlackRectangle(p1, p2, p3, p4) {\n            let corr = 3;\n            p1 = new Point(p1.getX() - corr, p1.getY() + corr);\n            p2 = new Point(p2.getX() - corr, p2.getY() - corr);\n            p3 = new Point(p3.getX() + corr, p3.getY() - corr);\n            p4 = new Point(p4.getX() + corr, p4.getY() + corr);\n            let cInit = this.getColor(p4, p1);\n            if (cInit === 0) {\n                return false;\n            }\n            let c = this.getColor(p1, p2);\n            if (c !== cInit) {\n                return false;\n            }\n            c = this.getColor(p2, p3);\n            if (c !== cInit) {\n                return false;\n            }\n            c = this.getColor(p3, p4);\n            return c === cInit;\n        }\n        /**\n         * Gets the color of a segment\n         *\n         * @return 1 if segment more than 90% black, -1 if segment is more than 90% white, 0 else\n         */\n        getColor(p1, p2) {\n            let d = this.distancePoint(p1, p2);\n            let dx = (p2.getX() - p1.getX()) / d;\n            let dy = (p2.getY() - p1.getY()) / d;\n            let error = 0;\n            let px = p1.getX();\n            let py = p1.getY();\n            let colorModel = this.image.get(p1.getX(), p1.getY());\n            let iMax = Math.ceil(d);\n            for (let i = 0; i < iMax; i++) {\n                px += dx;\n                py += dy;\n                if (this.image.get(MathUtils.round(px), MathUtils.round(py)) !== colorModel) {\n                    error++;\n                }\n            }\n            let errRatio = error / d;\n            if (errRatio > 0.1 && errRatio < 0.9) {\n                return 0;\n            }\n            return (errRatio <= 0.1) === colorModel ? 1 : -1;\n        }\n        /**\n         * Gets the coordinate of the first point with a different color in the given direction\n         */\n        getFirstDifferent(init, color, dx, dy) {\n            let x = init.getX() + dx;\n            let y = init.getY() + dy;\n            while (this.isValid(x, y) && this.image.get(x, y) === color) {\n                x += dx;\n                y += dy;\n            }\n            x -= dx;\n            y -= dy;\n            while (this.isValid(x, y) && this.image.get(x, y) === color) {\n                x += dx;\n            }\n            x -= dx;\n            while (this.isValid(x, y) && this.image.get(x, y) === color) {\n                y += dy;\n            }\n            y -= dy;\n            return new Point(x, y);\n        }\n        /**\n         * Expand the square represented by the corner points by pushing out equally in all directions\n         *\n         * @param cornerPoints the corners of the square, which has the bull's eye at its center\n         * @param oldSide the original length of the side of the square in the target bit matrix\n         * @param newSide the new length of the size of the square in the target bit matrix\n         * @return the corners of the expanded square\n         */\n        expandSquare(cornerPoints, oldSide, newSide) {\n            let ratio = newSide / (2.0 * oldSide);\n            let dx = cornerPoints[0].getX() - cornerPoints[2].getX();\n            let dy = cornerPoints[0].getY() - cornerPoints[2].getY();\n            let centerx = (cornerPoints[0].getX() + cornerPoints[2].getX()) / 2.0;\n            let centery = (cornerPoints[0].getY() + cornerPoints[2].getY()) / 2.0;\n            let result0 = new ResultPoint(centerx + ratio * dx, centery + ratio * dy);\n            let result2 = new ResultPoint(centerx - ratio * dx, centery - ratio * dy);\n            dx = cornerPoints[1].getX() - cornerPoints[3].getX();\n            dy = cornerPoints[1].getY() - cornerPoints[3].getY();\n            centerx = (cornerPoints[1].getX() + cornerPoints[3].getX()) / 2.0;\n            centery = (cornerPoints[1].getY() + cornerPoints[3].getY()) / 2.0;\n            let result1 = new ResultPoint(centerx + ratio * dx, centery + ratio * dy);\n            let result3 = new ResultPoint(centerx - ratio * dx, centery - ratio * dy);\n            let results = [result0, result1, result2, result3];\n            return results;\n        }\n        isValid(x, y) {\n            return x >= 0 && x < this.image.getWidth() && y > 0 && y < this.image.getHeight();\n        }\n        isValidPoint(point) {\n            let x = MathUtils.round(point.getX());\n            let y = MathUtils.round(point.getY());\n            return this.isValid(x, y);\n        }\n        distancePoint(a, b) {\n            return MathUtils.distance(a.getX(), a.getY(), b.getX(), b.getY());\n        }\n        distanceResultPoint(a, b) {\n            return MathUtils.distance(a.getX(), a.getY(), b.getX(), b.getY());\n        }\n        getDimension() {\n            if (this.compact) {\n                return 4 * this.nbLayers + 11;\n            }\n            if (this.nbLayers <= 4) {\n                return 4 * this.nbLayers + 15;\n            }\n            return 4 * this.nbLayers + 2 * (Integer.truncDivision((this.nbLayers - 4), 8) + 1) + 15;\n        }\n    }\n\n    /*\n     * Copyright 2010 ZXing authors\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n    // import java.util.List;\n    // import java.util.Map;\n    /**\n     * This implementation can detect and decode Aztec codes in an image.\n     *\n     * @author David Olivier\n     */\n    class AztecReader {\n        /**\n         * Locates and decodes a Data Matrix code in an image.\n         *\n         * @return a String representing the content encoded by the Data Matrix code\n         * @throws NotFoundException if a Data Matrix code cannot be found\n         * @throws FormatException if a Data Matrix code cannot be decoded\n         */\n        decode(image, hints = null) {\n            let exception = null;\n            let detector = new Detector(image.getBlackMatrix());\n            let points = null;\n            let decoderResult = null;\n            try {\n                let detectorResult = detector.detectMirror(false);\n                points = detectorResult.getPoints();\n                this.reportFoundResultPoints(hints, points);\n                decoderResult = new Decoder().decode(detectorResult);\n            }\n            catch (e) {\n                exception = e;\n            }\n            if (decoderResult == null) {\n                try {\n                    let detectorResult = detector.detectMirror(true);\n                    points = detectorResult.getPoints();\n                    this.reportFoundResultPoints(hints, points);\n                    decoderResult = new Decoder().decode(detectorResult);\n                }\n                catch (e) {\n                    if (exception != null) {\n                        throw exception;\n                    }\n                    throw e;\n                }\n            }\n            let result = new Result(decoderResult.getText(), decoderResult.getRawBytes(), decoderResult.getNumBits(), points, BarcodeFormat$1.AZTEC, System.currentTimeMillis());\n            let byteSegments = decoderResult.getByteSegments();\n            if (byteSegments != null) {\n                result.putMetadata(ResultMetadataType$1.BYTE_SEGMENTS, byteSegments);\n            }\n            let ecLevel = decoderResult.getECLevel();\n            if (ecLevel != null) {\n                result.putMetadata(ResultMetadataType$1.ERROR_CORRECTION_LEVEL, ecLevel);\n            }\n            return result;\n        }\n        reportFoundResultPoints(hints, points) {\n            if (hints != null) {\n                let rpcb = hints.get(DecodeHintType$1.NEED_RESULT_POINT_CALLBACK);\n                if (rpcb != null) {\n                    points.forEach((point, idx, arr) => {\n                        rpcb.foundPossibleResultPoint(point);\n                    });\n                }\n            }\n        }\n        // @Override\n        reset() {\n            // do nothing\n        }\n    }\n\n    /**\n     * Aztec Code reader to use from browser.\n     *\n     * @class BrowserAztecCodeReader\n     * @extends {BrowserCodeReader}\n     */\n    class BrowserAztecCodeReader extends BrowserCodeReader {\n        /**\n         * Creates an instance of BrowserAztecCodeReader.\n         * @param {number} [timeBetweenScansMillis=500] the time delay between subsequent decode tries\n         *\n         * @memberOf BrowserAztecCodeReader\n         */\n        constructor(timeBetweenScansMillis = 500) {\n            super(new AztecReader(), timeBetweenScansMillis);\n        }\n    }\n\n    /**\n     * Encapsulates functionality and implementation that is common to all families\n     * of one-dimensional barcodes.\n     *\n     * @author dswitkin@google.com (Daniel Switkin)\n     * @author Sean Owen\n     */\n    class OneDReader {\n        /*\n        @Override\n        public Result decode(BinaryBitmap image) throws NotFoundException, FormatException {\n          return decode(image, null);\n        }\n        */\n        // Note that we don't try rotation without the try harder flag, even if rotation was supported.\n        // @Override\n        decode(image, hints) {\n            try {\n                return this.doDecode(image, hints);\n            }\n            catch (nfe) {\n                const tryHarder = hints && (hints.get(DecodeHintType$1.TRY_HARDER) === true);\n                if (tryHarder && image.isRotateSupported()) {\n                    const rotatedImage = image.rotateCounterClockwise();\n                    const result = this.doDecode(rotatedImage, hints);\n                    // Record that we found it rotated 90 degrees CCW / 270 degrees CW\n                    const metadata = result.getResultMetadata();\n                    let orientation = 270;\n                    if (metadata !== null && (metadata.get(ResultMetadataType$1.ORIENTATION) === true)) {\n                        // But if we found it reversed in doDecode(), add in that result here:\n                        orientation = (orientation + metadata.get(ResultMetadataType$1.ORIENTATION) % 360);\n                    }\n                    result.putMetadata(ResultMetadataType$1.ORIENTATION, orientation);\n                    // Update result points\n                    const points = result.getResultPoints();\n                    if (points !== null) {\n                        const height = rotatedImage.getHeight();\n                        for (let i = 0; i < points.length; i++) {\n                            points[i] = new ResultPoint(height - points[i].getY() - 1, points[i].getX());\n                        }\n                    }\n                    return result;\n                }\n                else {\n                    throw new NotFoundException();\n                }\n            }\n        }\n        // @Override\n        reset() {\n            // do nothing\n        }\n        /**\n         * We're going to examine rows from the middle outward, searching alternately above and below the\n         * middle, and farther out each time. rowStep is the number of rows between each successive\n         * attempt above and below the middle. So we'd scan row middle, then middle - rowStep, then\n         * middle + rowStep, then middle - (2 * rowStep), etc.\n         * rowStep is bigger as the image is taller, but is always at least 1. We've somewhat arbitrarily\n         * decided that moving up and down by about 1/16 of the image is pretty good; we try more of the\n         * image if \"trying harder\".\n         *\n         * @param image The image to decode\n         * @param hints Any hints that were requested\n         * @return The contents of the decoded barcode\n         * @throws NotFoundException Any spontaneous errors which occur\n         */\n        doDecode(image, hints) {\n            const width = image.getWidth();\n            const height = image.getHeight();\n            let row = new BitArray(width);\n            const tryHarder = hints && (hints.get(DecodeHintType$1.TRY_HARDER) === true);\n            const rowStep = Math.max(1, height >> (tryHarder ? 8 : 5));\n            let maxLines;\n            if (tryHarder) {\n                maxLines = height; // Look at the whole image, not just the center\n            }\n            else {\n                maxLines = 15; // 15 rows spaced 1/32 apart is roughly the middle half of the image\n            }\n            const middle = Math.trunc(height / 2);\n            for (let x = 0; x < maxLines; x++) {\n                // Scanning from the middle out. Determine which row we're looking at next:\n                const rowStepsAboveOrBelow = Math.trunc((x + 1) / 2);\n                const isAbove = (x & 0x01) === 0; // i.e. is x even?\n                const rowNumber = middle + rowStep * (isAbove ? rowStepsAboveOrBelow : -rowStepsAboveOrBelow);\n                if (rowNumber < 0 || rowNumber >= height) {\n                    // Oops, if we run off the top or bottom, stop\n                    break;\n                }\n                // Estimate black point for this row and load it:\n                try {\n                    row = image.getBlackRow(rowNumber, row);\n                }\n                catch (ignored) {\n                    continue;\n                }\n                // While we have the image data in a BitArray, it's fairly cheap to reverse it in place to\n                // handle decoding upside down barcodes.\n                for (let attempt = 0; attempt < 2; attempt++) {\n                    if (attempt === 1) { // trying again?\n                        row.reverse(); // reverse the row and continue\n                        // This means we will only ever draw result points *once* in the life of this method\n                        // since we want to avoid drawing the wrong points after flipping the row, and,\n                        // don't want to clutter with noise from every single row scan -- just the scans\n                        // that start on the center line.\n                        if (hints && (hints.get(DecodeHintType$1.NEED_RESULT_POINT_CALLBACK) === true)) {\n                            const newHints = new Map();\n                            hints.forEach((hint, key) => newHints.set(key, hint));\n                            newHints.delete(DecodeHintType$1.NEED_RESULT_POINT_CALLBACK);\n                            hints = newHints;\n                        }\n                    }\n                    try {\n                        // Look for a barcode\n                        const result = this.decodeRow(rowNumber, row, hints);\n                        // We found our barcode\n                        if (attempt === 1) {\n                            // But it was upside down, so note that\n                            result.putMetadata(ResultMetadataType$1.ORIENTATION, 180);\n                            // And remember to flip the result points horizontally.\n                            const points = result.getResultPoints();\n                            if (points !== null) {\n                                points[0] = new ResultPoint(width - points[0].getX() - 1, points[0].getY());\n                                points[1] = new ResultPoint(width - points[1].getX() - 1, points[1].getY());\n                            }\n                        }\n                        return result;\n                    }\n                    catch (re) {\n                        // continue -- just couldn't decode this row\n                    }\n                }\n            }\n            throw new NotFoundException();\n        }\n        /**\n         * Records the size of successive runs of white and black pixels in a row, starting at a given point.\n         * The values are recorded in the given array, and the number of runs recorded is equal to the size\n         * of the array. If the row starts on a white pixel at the given start point, then the first count\n         * recorded is the run of white pixels starting from that point; likewise it is the count of a run\n         * of black pixels if the row begin on a black pixels at that point.\n         *\n         * @param row row to count from\n         * @param start offset into row to start at\n         * @param counters array into which to record counts\n         * @throws NotFoundException if counters cannot be filled entirely from row before running out\n         *  of pixels\n         */\n        static recordPattern(row, start, counters) {\n            const numCounters = counters.length;\n            for (let index = 0; index < numCounters; index++)\n                counters[index] = 0;\n            const end = row.getSize();\n            if (start >= end) {\n                throw new NotFoundException();\n            }\n            let isWhite = !row.get(start);\n            let counterPosition = 0;\n            let i = start;\n            while (i < end) {\n                if (row.get(i) !== isWhite) {\n                    counters[counterPosition]++;\n                }\n                else {\n                    if (++counterPosition === numCounters) {\n                        break;\n                    }\n                    else {\n                        counters[counterPosition] = 1;\n                        isWhite = !isWhite;\n                    }\n                }\n                i++;\n            }\n            // If we read fully the last section of pixels and filled up our counters -- or filled\n            // the last counter but ran off the side of the image, OK. Otherwise, a problem.\n            if (!(counterPosition === numCounters || (counterPosition === numCounters - 1 && i === end))) {\n                throw new NotFoundException();\n            }\n        }\n        static recordPatternInReverse(row, start, counters) {\n            // This could be more efficient I guess\n            let numTransitionsLeft = counters.length;\n            let last = row.get(start);\n            while (start > 0 && numTransitionsLeft >= 0) {\n                if (row.get(--start) !== last) {\n                    numTransitionsLeft--;\n                    last = !last;\n                }\n            }\n            if (numTransitionsLeft >= 0) {\n                throw new NotFoundException();\n            }\n            OneDReader.recordPattern(row, start + 1, counters);\n        }\n        /**\n         * Determines how closely a set of observed counts of runs of black/white values matches a given\n         * target pattern. This is reported as the ratio of the total variance from the expected pattern\n         * proportions across all pattern elements, to the length of the pattern.\n         *\n         * @param counters observed counters\n         * @param pattern expected pattern\n         * @param maxIndividualVariance The most any counter can differ before we give up\n         * @return ratio of total variance between counters and pattern compared to total pattern size\n         */\n        static patternMatchVariance(counters, pattern, maxIndividualVariance) {\n            const numCounters = counters.length;\n            let total = 0;\n            let patternLength = 0;\n            for (let i = 0; i < numCounters; i++) {\n                total += counters[i];\n                patternLength += pattern[i];\n            }\n            if (total < patternLength) {\n                // If we don't even have one pixel per unit of bar width, assume this is too small\n                // to reliably match, so fail:\n                return Number.POSITIVE_INFINITY;\n            }\n            const unitBarWidth = total / patternLength;\n            maxIndividualVariance *= unitBarWidth;\n            let totalVariance = 0.0;\n            for (let x = 0; x < numCounters; x++) {\n                const counter = counters[x];\n                const scaledPattern = pattern[x] * unitBarWidth;\n                const variance = counter > scaledPattern ? counter - scaledPattern : scaledPattern - counter;\n                if (variance > maxIndividualVariance) {\n                    return Number.POSITIVE_INFINITY;\n                }\n                totalVariance += variance;\n            }\n            return totalVariance / total;\n        }\n    }\n\n    /**\n     * <p>Decodes Code 128 barcodes.</p>\n     *\n     * @author Sean Owen\n     */\n    class Code128Reader extends OneDReader {\n        static findStartPattern(row) {\n            const width = row.getSize();\n            const rowOffset = row.getNextSet(0);\n            let counterPosition = 0;\n            let counters = Int32Array.from([0, 0, 0, 0, 0, 0]);\n            let patternStart = rowOffset;\n            let isWhite = false;\n            const patternLength = 6;\n            for (let i = rowOffset; i < width; i++) {\n                if (row.get(i) !== isWhite) {\n                    counters[counterPosition]++;\n                }\n                else {\n                    if (counterPosition === (patternLength - 1)) {\n                        let bestVariance = Code128Reader.MAX_AVG_VARIANCE;\n                        let bestMatch = -1;\n                        for (let startCode = Code128Reader.CODE_START_A; startCode <= Code128Reader.CODE_START_C; startCode++) {\n                            const variance = OneDReader.patternMatchVariance(counters, Code128Reader.CODE_PATTERNS[startCode], Code128Reader.MAX_INDIVIDUAL_VARIANCE);\n                            if (variance < bestVariance) {\n                                bestVariance = variance;\n                                bestMatch = startCode;\n                            }\n                        }\n                        // Look for whitespace before start pattern, >= 50% of width of start pattern\n                        if (bestMatch >= 0 &&\n                            row.isRange(Math.max(0, patternStart - (i - patternStart) / 2), patternStart, false)) {\n                            return Int32Array.from([patternStart, i, bestMatch]);\n                        }\n                        patternStart += counters[0] + counters[1];\n                        counters = counters.slice(2, counters.length - 1);\n                        counters[counterPosition - 1] = 0;\n                        counters[counterPosition] = 0;\n                        counterPosition--;\n                    }\n                    else {\n                        counterPosition++;\n                    }\n                    counters[counterPosition] = 1;\n                    isWhite = !isWhite;\n                }\n            }\n            throw new NotFoundException();\n        }\n        static decodeCode(row, counters, rowOffset) {\n            OneDReader.recordPattern(row, rowOffset, counters);\n            let bestVariance = Code128Reader.MAX_AVG_VARIANCE; // worst variance we'll accept\n            let bestMatch = -1;\n            for (let d = 0; d < Code128Reader.CODE_PATTERNS.length; d++) {\n                const pattern = Code128Reader.CODE_PATTERNS[d];\n                const variance = this.patternMatchVariance(counters, pattern, Code128Reader.MAX_INDIVIDUAL_VARIANCE);\n                if (variance < bestVariance) {\n                    bestVariance = variance;\n                    bestMatch = d;\n                }\n            }\n            // TODO We're overlooking the fact that the STOP pattern has 7 values, not 6.\n            if (bestMatch >= 0) {\n                return bestMatch;\n            }\n            else {\n                throw new NotFoundException();\n            }\n        }\n        decodeRow(rowNumber, row, hints) {\n            const convertFNC1 = hints && (hints.get(DecodeHintType$1.ASSUME_GS1) === true);\n            const startPatternInfo = Code128Reader.findStartPattern(row);\n            const startCode = startPatternInfo[2];\n            let currentRawCodesIndex = 0;\n            const rawCodes = new Uint8Array(20);\n            rawCodes[currentRawCodesIndex++] = startCode;\n            let codeSet;\n            switch (startCode) {\n                case Code128Reader.CODE_START_A:\n                    codeSet = Code128Reader.CODE_CODE_A;\n                    break;\n                case Code128Reader.CODE_START_B:\n                    codeSet = Code128Reader.CODE_CODE_B;\n                    break;\n                case Code128Reader.CODE_START_C:\n                    codeSet = Code128Reader.CODE_CODE_C;\n                    break;\n                default:\n                    throw new FormatException();\n            }\n            let done = false;\n            let isNextShifted = false;\n            let result = '';\n            let lastStart = startPatternInfo[0];\n            let nextStart = startPatternInfo[1];\n            const counters = Int32Array.from([0, 0, 0, 0, 0, 0]);\n            let lastCode = 0;\n            let code = 0;\n            let checksumTotal = startCode;\n            let multiplier = 0;\n            let lastCharacterWasPrintable = true;\n            let upperMode = false;\n            let shiftUpperMode = false;\n            while (!done) {\n                const unshift = isNextShifted;\n                isNextShifted = false;\n                // Save off last code\n                lastCode = code;\n                // Decode another code from image\n                code = Code128Reader.decodeCode(row, counters, nextStart);\n                rawCodes[currentRawCodesIndex++] = code;\n                // Remember whether the last code was printable or not (excluding CODE_STOP)\n                if (code !== Code128Reader.CODE_STOP) {\n                    lastCharacterWasPrintable = true;\n                }\n                // Add to checksum computation (if not CODE_STOP of course)\n                if (code !== Code128Reader.CODE_STOP) {\n                    multiplier++;\n                    checksumTotal += multiplier * code;\n                }\n                // Advance to where the next code will to start\n                lastStart = nextStart;\n                nextStart += counters.reduce((previous, current) => previous + current, 0);\n                // Take care of illegal start codes\n                switch (code) {\n                    case Code128Reader.CODE_START_A:\n                    case Code128Reader.CODE_START_B:\n                    case Code128Reader.CODE_START_C:\n                        throw new FormatException();\n                }\n                switch (codeSet) {\n                    case Code128Reader.CODE_CODE_A:\n                        if (code < 64) {\n                            if (shiftUpperMode === upperMode) {\n                                result += String.fromCharCode((' '.charCodeAt(0) + code));\n                            }\n                            else {\n                                result += String.fromCharCode((' '.charCodeAt(0) + code + 128));\n                            }\n                            shiftUpperMode = false;\n                        }\n                        else if (code < 96) {\n                            if (shiftUpperMode === upperMode) {\n                                result += String.fromCharCode((code - 64));\n                            }\n                            else {\n                                result += String.fromCharCode((code + 64));\n                            }\n                            shiftUpperMode = false;\n                        }\n                        else {\n                            // Don't let CODE_STOP, which always appears, affect whether whether we think the last\n                            // code was printable or not.\n                            if (code !== Code128Reader.CODE_STOP) {\n                                lastCharacterWasPrintable = false;\n                            }\n                            switch (code) {\n                                case Code128Reader.CODE_FNC_1:\n                                    if (convertFNC1) {\n                                        if (result.length === 0) {\n                                            // GS1 specification 5.4.3.7. and 5.4.6.4. If the first char after the start code\n                                            // is FNC1 then this is GS1-128. We add the symbology identifier.\n                                            result += ']C1';\n                                        }\n                                        else {\n                                            // GS1 specification 5.4.7.5. Every subsequent FNC1 is returned as ASCII 29 (GS)\n                                            result += String.fromCharCode(29);\n                                        }\n                                    }\n                                    break;\n                                case Code128Reader.CODE_FNC_2:\n                                case Code128Reader.CODE_FNC_3:\n                                    // do nothing?\n                                    break;\n                                case Code128Reader.CODE_FNC_4_A:\n                                    if (!upperMode && shiftUpperMode) {\n                                        upperMode = true;\n                                        shiftUpperMode = false;\n                                    }\n                                    else if (upperMode && shiftUpperMode) {\n                                        upperMode = false;\n                                        shiftUpperMode = false;\n                                    }\n                                    else {\n                                        shiftUpperMode = true;\n                                    }\n                                    break;\n                                case Code128Reader.CODE_SHIFT:\n                                    isNextShifted = true;\n                                    codeSet = Code128Reader.CODE_CODE_B;\n                                    break;\n                                case Code128Reader.CODE_CODE_B:\n                                    codeSet = Code128Reader.CODE_CODE_B;\n                                    break;\n                                case Code128Reader.CODE_CODE_C:\n                                    codeSet = Code128Reader.CODE_CODE_C;\n                                    break;\n                                case Code128Reader.CODE_STOP:\n                                    done = true;\n                                    break;\n                            }\n                        }\n                        break;\n                    case Code128Reader.CODE_CODE_B:\n                        if (code < 96) {\n                            if (shiftUpperMode === upperMode) {\n                                result += String.fromCharCode((' '.charCodeAt(0) + code));\n                            }\n                            else {\n                                result += String.fromCharCode((' '.charCodeAt(0) + code + 128));\n                            }\n                            shiftUpperMode = false;\n                        }\n                        else {\n                            if (code !== Code128Reader.CODE_STOP) {\n                                lastCharacterWasPrintable = false;\n                            }\n                            switch (code) {\n                                case Code128Reader.CODE_FNC_1:\n                                    if (convertFNC1) {\n                                        if (result.length === 0) {\n                                            // GS1 specification 5.4.3.7. and 5.4.6.4. If the first char after the start code\n                                            // is FNC1 then this is GS1-128. We add the symbology identifier.\n                                            result += ']C1';\n                                        }\n                                        else {\n                                            // GS1 specification 5.4.7.5. Every subsequent FNC1 is returned as ASCII 29 (GS)\n                                            result += String.fromCharCode(29);\n                                        }\n                                    }\n                                    break;\n                                case Code128Reader.CODE_FNC_2:\n                                case Code128Reader.CODE_FNC_3:\n                                    // do nothing?\n                                    break;\n                                case Code128Reader.CODE_FNC_4_B:\n                                    if (!upperMode && shiftUpperMode) {\n                                        upperMode = true;\n                                        shiftUpperMode = false;\n                                    }\n                                    else if (upperMode && shiftUpperMode) {\n                                        upperMode = false;\n                                        shiftUpperMode = false;\n                                    }\n                                    else {\n                                        shiftUpperMode = true;\n                                    }\n                                    break;\n                                case Code128Reader.CODE_SHIFT:\n                                    isNextShifted = true;\n                                    codeSet = Code128Reader.CODE_CODE_A;\n                                    break;\n                                case Code128Reader.CODE_CODE_A:\n                                    codeSet = Code128Reader.CODE_CODE_A;\n                                    break;\n                                case Code128Reader.CODE_CODE_C:\n                                    codeSet = Code128Reader.CODE_CODE_C;\n                                    break;\n                                case Code128Reader.CODE_STOP:\n                                    done = true;\n                                    break;\n                            }\n                        }\n                        break;\n                    case Code128Reader.CODE_CODE_C:\n                        if (code < 100) {\n                            if (code < 10) {\n                                result += '0';\n                            }\n                            result += code;\n                        }\n                        else {\n                            if (code !== Code128Reader.CODE_STOP) {\n                                lastCharacterWasPrintable = false;\n                            }\n                            switch (code) {\n                                case Code128Reader.CODE_FNC_1:\n                                    if (convertFNC1) {\n                                        if (result.length === 0) {\n                                            // GS1 specification 5.4.3.7. and 5.4.6.4. If the first char after the start code\n                                            // is FNC1 then this is GS1-128. We add the symbology identifier.\n                                            result += ']C1';\n                                        }\n                                        else {\n                                            // GS1 specification 5.4.7.5. Every subsequent FNC1 is returned as ASCII 29 (GS)\n                                            result += String.fromCharCode(29);\n                                        }\n                                    }\n                                    break;\n                                case Code128Reader.CODE_CODE_A:\n                                    codeSet = Code128Reader.CODE_CODE_A;\n                                    break;\n                                case Code128Reader.CODE_CODE_B:\n                                    codeSet = Code128Reader.CODE_CODE_B;\n                                    break;\n                                case Code128Reader.CODE_STOP:\n                                    done = true;\n                                    break;\n                            }\n                        }\n                        break;\n                }\n                // Unshift back to another code set if we were shifted\n                if (unshift) {\n                    codeSet = codeSet === Code128Reader.CODE_CODE_A ? Code128Reader.CODE_CODE_B : Code128Reader.CODE_CODE_A;\n                }\n            }\n            const lastPatternSize = nextStart - lastStart;\n            // Check for ample whitespace following pattern, but, to do this we first need to remember that\n            // we fudged decoding CODE_STOP since it actually has 7 bars, not 6. There is a black bar left\n            // to read off. Would be slightly better to properly read. Here we just skip it:\n            nextStart = row.getNextUnset(nextStart);\n            if (!row.isRange(nextStart, Math.min(row.getSize(), nextStart + (nextStart - lastStart) / 2), false)) {\n                throw new NotFoundException();\n            }\n            // Pull out from sum the value of the penultimate check code\n            checksumTotal -= multiplier * lastCode;\n            // lastCode is the checksum then:\n            if (checksumTotal % 103 !== lastCode) {\n                throw new ChecksumException();\n            }\n            // Need to pull out the check digits from string\n            const resultLength = result.length;\n            if (resultLength === 0) {\n                // false positive\n                throw new NotFoundException();\n            }\n            // Only bother if the result had at least one character, and if the checksum digit happened to\n            // be a printable character. If it was just interpreted as a control code, nothing to remove.\n            if (resultLength > 0 && lastCharacterWasPrintable) {\n                if (codeSet === Code128Reader.CODE_CODE_C) {\n                    result = result.substring(0, resultLength - 2);\n                }\n                else {\n                    result = result.substring(0, resultLength - 1);\n                }\n            }\n            const left = (startPatternInfo[1] + startPatternInfo[0]) / 2.0;\n            const right = lastStart + lastPatternSize / 2.0;\n            const rawCodesSize = rawCodes.length;\n            const rawBytes = new Uint8Array(rawCodesSize);\n            for (let i = 0; i < rawCodesSize; i++) {\n                rawBytes[i] = rawCodes[i];\n            }\n            const points = [new ResultPoint(left, rowNumber), new ResultPoint(right, rowNumber)];\n            return new Result(result, rawBytes, 0, points, BarcodeFormat$1.CODE_128, new Date().getTime());\n        }\n    }\n    Code128Reader.CODE_PATTERNS = [\n        Int32Array.from([2, 1, 2, 2, 2, 2]),\n        Int32Array.from([2, 2, 2, 1, 2, 2]),\n        Int32Array.from([2, 2, 2, 2, 2, 1]),\n        Int32Array.from([1, 2, 1, 2, 2, 3]),\n        Int32Array.from([1, 2, 1, 3, 2, 2]),\n        Int32Array.from([1, 3, 1, 2, 2, 2]),\n        Int32Array.from([1, 2, 2, 2, 1, 3]),\n        Int32Array.from([1, 2, 2, 3, 1, 2]),\n        Int32Array.from([1, 3, 2, 2, 1, 2]),\n        Int32Array.from([2, 2, 1, 2, 1, 3]),\n        Int32Array.from([2, 2, 1, 3, 1, 2]),\n        Int32Array.from([2, 3, 1, 2, 1, 2]),\n        Int32Array.from([1, 1, 2, 2, 3, 2]),\n        Int32Array.from([1, 2, 2, 1, 3, 2]),\n        Int32Array.from([1, 2, 2, 2, 3, 1]),\n        Int32Array.from([1, 1, 3, 2, 2, 2]),\n        Int32Array.from([1, 2, 3, 1, 2, 2]),\n        Int32Array.from([1, 2, 3, 2, 2, 1]),\n        Int32Array.from([2, 2, 3, 2, 1, 1]),\n        Int32Array.from([2, 2, 1, 1, 3, 2]),\n        Int32Array.from([2, 2, 1, 2, 3, 1]),\n        Int32Array.from([2, 1, 3, 2, 1, 2]),\n        Int32Array.from([2, 2, 3, 1, 1, 2]),\n        Int32Array.from([3, 1, 2, 1, 3, 1]),\n        Int32Array.from([3, 1, 1, 2, 2, 2]),\n        Int32Array.from([3, 2, 1, 1, 2, 2]),\n        Int32Array.from([3, 2, 1, 2, 2, 1]),\n        Int32Array.from([3, 1, 2, 2, 1, 2]),\n        Int32Array.from([3, 2, 2, 1, 1, 2]),\n        Int32Array.from([3, 2, 2, 2, 1, 1]),\n        Int32Array.from([2, 1, 2, 1, 2, 3]),\n        Int32Array.from([2, 1, 2, 3, 2, 1]),\n        Int32Array.from([2, 3, 2, 1, 2, 1]),\n        Int32Array.from([1, 1, 1, 3, 2, 3]),\n        Int32Array.from([1, 3, 1, 1, 2, 3]),\n        Int32Array.from([1, 3, 1, 3, 2, 1]),\n        Int32Array.from([1, 1, 2, 3, 1, 3]),\n        Int32Array.from([1, 3, 2, 1, 1, 3]),\n        Int32Array.from([1, 3, 2, 3, 1, 1]),\n        Int32Array.from([2, 1, 1, 3, 1, 3]),\n        Int32Array.from([2, 3, 1, 1, 1, 3]),\n        Int32Array.from([2, 3, 1, 3, 1, 1]),\n        Int32Array.from([1, 1, 2, 1, 3, 3]),\n        Int32Array.from([1, 1, 2, 3, 3, 1]),\n        Int32Array.from([1, 3, 2, 1, 3, 1]),\n        Int32Array.from([1, 1, 3, 1, 2, 3]),\n        Int32Array.from([1, 1, 3, 3, 2, 1]),\n        Int32Array.from([1, 3, 3, 1, 2, 1]),\n        Int32Array.from([3, 1, 3, 1, 2, 1]),\n        Int32Array.from([2, 1, 1, 3, 3, 1]),\n        Int32Array.from([2, 3, 1, 1, 3, 1]),\n        Int32Array.from([2, 1, 3, 1, 1, 3]),\n        Int32Array.from([2, 1, 3, 3, 1, 1]),\n        Int32Array.from([2, 1, 3, 1, 3, 1]),\n        Int32Array.from([3, 1, 1, 1, 2, 3]),\n        Int32Array.from([3, 1, 1, 3, 2, 1]),\n        Int32Array.from([3, 3, 1, 1, 2, 1]),\n        Int32Array.from([3, 1, 2, 1, 1, 3]),\n        Int32Array.from([3, 1, 2, 3, 1, 1]),\n        Int32Array.from([3, 3, 2, 1, 1, 1]),\n        Int32Array.from([3, 1, 4, 1, 1, 1]),\n        Int32Array.from([2, 2, 1, 4, 1, 1]),\n        Int32Array.from([4, 3, 1, 1, 1, 1]),\n        Int32Array.from([1, 1, 1, 2, 2, 4]),\n        Int32Array.from([1, 1, 1, 4, 2, 2]),\n        Int32Array.from([1, 2, 1, 1, 2, 4]),\n        Int32Array.from([1, 2, 1, 4, 2, 1]),\n        Int32Array.from([1, 4, 1, 1, 2, 2]),\n        Int32Array.from([1, 4, 1, 2, 2, 1]),\n        Int32Array.from([1, 1, 2, 2, 1, 4]),\n        Int32Array.from([1, 1, 2, 4, 1, 2]),\n        Int32Array.from([1, 2, 2, 1, 1, 4]),\n        Int32Array.from([1, 2, 2, 4, 1, 1]),\n        Int32Array.from([1, 4, 2, 1, 1, 2]),\n        Int32Array.from([1, 4, 2, 2, 1, 1]),\n        Int32Array.from([2, 4, 1, 2, 1, 1]),\n        Int32Array.from([2, 2, 1, 1, 1, 4]),\n        Int32Array.from([4, 1, 3, 1, 1, 1]),\n        Int32Array.from([2, 4, 1, 1, 1, 2]),\n        Int32Array.from([1, 3, 4, 1, 1, 1]),\n        Int32Array.from([1, 1, 1, 2, 4, 2]),\n        Int32Array.from([1, 2, 1, 1, 4, 2]),\n        Int32Array.from([1, 2, 1, 2, 4, 1]),\n        Int32Array.from([1, 1, 4, 2, 1, 2]),\n        Int32Array.from([1, 2, 4, 1, 1, 2]),\n        Int32Array.from([1, 2, 4, 2, 1, 1]),\n        Int32Array.from([4, 1, 1, 2, 1, 2]),\n        Int32Array.from([4, 2, 1, 1, 1, 2]),\n        Int32Array.from([4, 2, 1, 2, 1, 1]),\n        Int32Array.from([2, 1, 2, 1, 4, 1]),\n        Int32Array.from([2, 1, 4, 1, 2, 1]),\n        Int32Array.from([4, 1, 2, 1, 2, 1]),\n        Int32Array.from([1, 1, 1, 1, 4, 3]),\n        Int32Array.from([1, 1, 1, 3, 4, 1]),\n        Int32Array.from([1, 3, 1, 1, 4, 1]),\n        Int32Array.from([1, 1, 4, 1, 1, 3]),\n        Int32Array.from([1, 1, 4, 3, 1, 1]),\n        Int32Array.from([4, 1, 1, 1, 1, 3]),\n        Int32Array.from([4, 1, 1, 3, 1, 1]),\n        Int32Array.from([1, 1, 3, 1, 4, 1]),\n        Int32Array.from([1, 1, 4, 1, 3, 1]),\n        Int32Array.from([3, 1, 1, 1, 4, 1]),\n        Int32Array.from([4, 1, 1, 1, 3, 1]),\n        Int32Array.from([2, 1, 1, 4, 1, 2]),\n        Int32Array.from([2, 1, 1, 2, 1, 4]),\n        Int32Array.from([2, 1, 1, 2, 3, 2]),\n        Int32Array.from([2, 3, 3, 1, 1, 1, 2]),\n    ];\n    Code128Reader.MAX_AVG_VARIANCE = 0.25;\n    Code128Reader.MAX_INDIVIDUAL_VARIANCE = 0.7;\n    Code128Reader.CODE_SHIFT = 98;\n    Code128Reader.CODE_CODE_C = 99;\n    Code128Reader.CODE_CODE_B = 100;\n    Code128Reader.CODE_CODE_A = 101;\n    Code128Reader.CODE_FNC_1 = 102;\n    Code128Reader.CODE_FNC_2 = 97;\n    Code128Reader.CODE_FNC_3 = 96;\n    Code128Reader.CODE_FNC_4_A = 101;\n    Code128Reader.CODE_FNC_4_B = 100;\n    Code128Reader.CODE_START_A = 103;\n    Code128Reader.CODE_START_B = 104;\n    Code128Reader.CODE_START_C = 105;\n    Code128Reader.CODE_STOP = 106;\n\n    /**\n     * <p>Decodes Code 39 barcodes. Supports \"Full ASCII Code 39\" if USE_CODE_39_EXTENDED_MODE is set.</p>\n     *\n     * @author Sean Owen\n     * @see Code93Reader\n     */\n    class Code39Reader extends OneDReader {\n        /**\n         * Creates a reader that assumes all encoded data is data, and does not treat the final\n         * character as a check digit. It will not decoded \"extended Code 39\" sequences.\n         */\n        // public Code39Reader() {\n        //   this(false);\n        // }\n        /**\n         * Creates a reader that can be configured to check the last character as a check digit.\n         * It will not decoded \"extended Code 39\" sequences.\n         *\n         * @param usingCheckDigit if true, treat the last data character as a check digit, not\n         * data, and verify that the checksum passes.\n         */\n        // public Code39Reader(boolean usingCheckDigit) {\n        //   this(usingCheckDigit, false);\n        // }\n        /**\n         * Creates a reader that can be configured to check the last character as a check digit,\n         * or optionally attempt to decode \"extended Code 39\" sequences that are used to encode\n         * the full ASCII character set.\n         *\n         * @param usingCheckDigit if true, treat the last data character as a check digit, not\n         * data, and verify that the checksum passes.\n         * @param extendedMode if true, will attempt to decode extended Code 39 sequences in the\n         * text.\n         */\n        constructor(usingCheckDigit = false, extendedMode = false) {\n            super();\n            this.usingCheckDigit = usingCheckDigit;\n            this.extendedMode = extendedMode;\n            this.decodeRowResult = '';\n            this.counters = new Int32Array(9);\n        }\n        decodeRow(rowNumber, row, hints) {\n            let theCounters = this.counters;\n            theCounters.fill(0);\n            this.decodeRowResult = '';\n            let start = Code39Reader.findAsteriskPattern(row, theCounters);\n            // Read off white space\n            let nextStart = row.getNextSet(start[1]);\n            let end = row.getSize();\n            let decodedChar;\n            let lastStart;\n            do {\n                Code39Reader.recordPattern(row, nextStart, theCounters);\n                let pattern = Code39Reader.toNarrowWidePattern(theCounters);\n                if (pattern < 0) {\n                    throw new NotFoundException();\n                }\n                decodedChar = Code39Reader.patternToChar(pattern);\n                this.decodeRowResult += decodedChar;\n                lastStart = nextStart;\n                for (let counter of theCounters) {\n                    nextStart += counter;\n                }\n                // Read off white space\n                nextStart = row.getNextSet(nextStart);\n            } while (decodedChar !== '*');\n            this.decodeRowResult = this.decodeRowResult.substring(0, this.decodeRowResult.length - 1); // remove asterisk\n            // Look for whitespace after pattern:\n            let lastPatternSize = 0;\n            for (let counter of theCounters) {\n                lastPatternSize += counter;\n            }\n            let whiteSpaceAfterEnd = nextStart - lastStart - lastPatternSize;\n            // If 50% of last pattern size, following last pattern, is not whitespace, fail\n            // (but if it's whitespace to the very end of the image, that's OK)\n            if (nextStart !== end && (whiteSpaceAfterEnd * 2) < lastPatternSize) {\n                throw new NotFoundException();\n            }\n            if (this.usingCheckDigit) {\n                let max = this.decodeRowResult.length - 1;\n                let total = 0;\n                for (let i = 0; i < max; i++) {\n                    total += Code39Reader.ALPHABET_STRING.indexOf(this.decodeRowResult.charAt(i));\n                }\n                if (this.decodeRowResult.charAt(max) !== Code39Reader.ALPHABET_STRING.charAt(total % 43)) {\n                    throw new ChecksumException();\n                }\n                this.decodeRowResult = this.decodeRowResult.substring(0, max);\n            }\n            if (this.decodeRowResult.length === 0) {\n                // false positive\n                throw new NotFoundException();\n            }\n            let resultString;\n            if (this.extendedMode) {\n                resultString = Code39Reader.decodeExtended(this.decodeRowResult);\n            }\n            else {\n                resultString = this.decodeRowResult;\n            }\n            let left = (start[1] + start[0]) / 2.0;\n            let right = lastStart + lastPatternSize / 2.0;\n            return new Result(resultString, null, 0, [new ResultPoint(left, rowNumber), new ResultPoint(right, rowNumber)], BarcodeFormat$1.CODE_39, new Date().getTime());\n        }\n        static findAsteriskPattern(row, counters) {\n            let width = row.getSize();\n            let rowOffset = row.getNextSet(0);\n            let counterPosition = 0;\n            let patternStart = rowOffset;\n            let isWhite = false;\n            let patternLength = counters.length;\n            for (let i = rowOffset; i < width; i++) {\n                if (row.get(i) !== isWhite) {\n                    counters[counterPosition]++;\n                }\n                else {\n                    if (counterPosition === patternLength - 1) {\n                        // Look for whitespace before start pattern, >= 50% of width of start pattern\n                        if (this.toNarrowWidePattern(counters) === Code39Reader.ASTERISK_ENCODING &&\n                            row.isRange(Math.max(0, patternStart - Math.floor((i - patternStart) / 2)), patternStart, false)) {\n                            return [patternStart, i];\n                        }\n                        patternStart += counters[0] + counters[1];\n                        counters.copyWithin(0, 2, 2 + counterPosition - 1);\n                        counters[counterPosition - 1] = 0;\n                        counters[counterPosition] = 0;\n                        counterPosition--;\n                    }\n                    else {\n                        counterPosition++;\n                    }\n                    counters[counterPosition] = 1;\n                    isWhite = !isWhite;\n                }\n            }\n            throw new NotFoundException();\n        }\n        // For efficiency, returns -1 on failure. Not throwing here saved as many as 700 exceptions\n        // per image when using some of our blackbox images.\n        static toNarrowWidePattern(counters) {\n            let numCounters = counters.length;\n            let maxNarrowCounter = 0;\n            let wideCounters;\n            do {\n                let minCounter = 0x7fffffff;\n                for (let counter of counters) {\n                    if (counter < minCounter && counter > maxNarrowCounter) {\n                        minCounter = counter;\n                    }\n                }\n                maxNarrowCounter = minCounter;\n                wideCounters = 0;\n                let totalWideCountersWidth = 0;\n                let pattern = 0;\n                for (let i = 0; i < numCounters; i++) {\n                    let counter = counters[i];\n                    if (counter > maxNarrowCounter) {\n                        pattern |= 1 << (numCounters - 1 - i);\n                        wideCounters++;\n                        totalWideCountersWidth += counter;\n                    }\n                }\n                if (wideCounters === 3) {\n                    // Found 3 wide counters, but are they close enough in width?\n                    // We can perform a cheap, conservative check to see if any individual\n                    // counter is more than 1.5 times the average:\n                    for (let i = 0; i < numCounters && wideCounters > 0; i++) {\n                        let counter = counters[i];\n                        if (counter > maxNarrowCounter) {\n                            wideCounters--;\n                            // totalWideCountersWidth = 3 * average, so this checks if counter >= 3/2 * average\n                            if ((counter * 2) >= totalWideCountersWidth) {\n                                return -1;\n                            }\n                        }\n                    }\n                    return pattern;\n                }\n            } while (wideCounters > 3);\n            return -1;\n        }\n        static patternToChar(pattern) {\n            for (let i = 0; i < Code39Reader.CHARACTER_ENCODINGS.length; i++) {\n                if (Code39Reader.CHARACTER_ENCODINGS[i] === pattern) {\n                    return Code39Reader.ALPHABET_STRING.charAt(i);\n                }\n            }\n            if (pattern === Code39Reader.ASTERISK_ENCODING) {\n                return '*';\n            }\n            throw new NotFoundException();\n        }\n        static decodeExtended(encoded) {\n            let length = encoded.length;\n            let decoded = '';\n            for (let i = 0; i < length; i++) {\n                let c = encoded.charAt(i);\n                if (c === '+' || c === '$' || c === '%' || c === '/') {\n                    let next = encoded.charAt(i + 1);\n                    let decodedChar = '\\0';\n                    switch (c) {\n                        case '+':\n                            // +A to +Z map to a to z\n                            if (next >= 'A' && next <= 'Z') {\n                                decodedChar = String.fromCharCode(next.charCodeAt(0) + 32);\n                            }\n                            else {\n                                throw new FormatException();\n                            }\n                            break;\n                        case '$':\n                            // $A to $Z map to control codes SH to SB\n                            if (next >= 'A' && next <= 'Z') {\n                                decodedChar = String.fromCharCode(next.charCodeAt(0) - 64);\n                            }\n                            else {\n                                throw new FormatException();\n                            }\n                            break;\n                        case '%':\n                            // %A to %E map to control codes ESC to US\n                            if (next >= 'A' && next <= 'E') {\n                                decodedChar = String.fromCharCode(next.charCodeAt(0) - 38);\n                            }\n                            else if (next >= 'F' && next <= 'J') {\n                                decodedChar = String.fromCharCode(next.charCodeAt(0) - 11);\n                            }\n                            else if (next >= 'K' && next <= 'O') {\n                                decodedChar = String.fromCharCode(next.charCodeAt(0) + 16);\n                            }\n                            else if (next >= 'P' && next <= 'T') {\n                                decodedChar = String.fromCharCode(next.charCodeAt(0) + 43);\n                            }\n                            else if (next === 'U') {\n                                decodedChar = '\\0';\n                            }\n                            else if (next === 'V') {\n                                decodedChar = '@';\n                            }\n                            else if (next === 'W') {\n                                decodedChar = '`';\n                            }\n                            else if (next === 'X' || next === 'Y' || next === 'Z') {\n                                decodedChar = '\\x7f';\n                            }\n                            else {\n                                throw new FormatException();\n                            }\n                            break;\n                        case '/':\n                            // /A to /O map to ! to , and /Z maps to :\n                            if (next >= 'A' && next <= 'O') {\n                                decodedChar = String.fromCharCode(next.charCodeAt(0) - 32);\n                            }\n                            else if (next === 'Z') {\n                                decodedChar = ':';\n                            }\n                            else {\n                                throw new FormatException();\n                            }\n                            break;\n                    }\n                    decoded += decodedChar;\n                    // bump up i again since we read two characters\n                    i++;\n                }\n                else {\n                    decoded += c;\n                }\n            }\n            return decoded;\n        }\n    }\n    Code39Reader.ALPHABET_STRING = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%';\n    /**\n     * These represent the encodings of characters, as patterns of wide and narrow bars.\n     * The 9 least-significant bits of each int correspond to the pattern of wide and narrow,\n     * with 1s representing \"wide\" and 0s representing narrow.\n     */\n    Code39Reader.CHARACTER_ENCODINGS = [\n        0x034, 0x121, 0x061, 0x160, 0x031, 0x130, 0x070, 0x025, 0x124, 0x064,\n        0x109, 0x049, 0x148, 0x019, 0x118, 0x058, 0x00D, 0x10C, 0x04C, 0x01C,\n        0x103, 0x043, 0x142, 0x013, 0x112, 0x052, 0x007, 0x106, 0x046, 0x016,\n        0x181, 0x0C1, 0x1C0, 0x091, 0x190, 0x0D0, 0x085, 0x184, 0x0C4, 0x0A8,\n        0x0A2, 0x08A, 0x02A // /-%\n    ];\n    Code39Reader.ASTERISK_ENCODING = 0x094;\n\n    /**\n     * <p>Decodes ITF barcodes.</p>\n     *\n     * @author Tjieco\n     */\n    class ITFReader extends OneDReader {\n        constructor() {\n            // private static W = 3; // Pixel width of a 3x wide line\n            // private static w = 2; // Pixel width of a 2x wide line\n            // private static N = 1; // Pixed width of a narrow line\n            super(...arguments);\n            // Stores the actual narrow line width of the image being decoded.\n            this.narrowLineWidth = -1;\n        }\n        // See ITFWriter.PATTERNS\n        /*\n      \n        /!**\n         * Patterns of Wide / Narrow lines to indicate each digit\n         *!/\n        */\n        decodeRow(rowNumber, row, hints) {\n            // Find out where the Middle section (payload) starts & ends\n            let startRange = this.decodeStart(row);\n            let endRange = this.decodeEnd(row);\n            let result = new StringBuilder();\n            ITFReader.decodeMiddle(row, startRange[1], endRange[0], result);\n            let resultString = result.toString();\n            let allowedLengths = null;\n            if (hints != null) {\n                allowedLengths = hints.get(DecodeHintType$1.ALLOWED_LENGTHS);\n            }\n            if (allowedLengths == null) {\n                allowedLengths = ITFReader.DEFAULT_ALLOWED_LENGTHS;\n            }\n            // To avoid false positives with 2D barcodes (and other patterns), make\n            // an assumption that the decoded string must be a 'standard' length if it's short\n            let length = resultString.length;\n            let lengthOK = false;\n            let maxAllowedLength = 0;\n            for (let value of allowedLengths) {\n                if (length === value) {\n                    lengthOK = true;\n                    break;\n                }\n                if (value > maxAllowedLength) {\n                    maxAllowedLength = value;\n                }\n            }\n            if (!lengthOK && length > maxAllowedLength) {\n                lengthOK = true;\n            }\n            if (!lengthOK) {\n                throw new FormatException();\n            }\n            const points = [new ResultPoint(startRange[1], rowNumber), new ResultPoint(endRange[0], rowNumber)];\n            let resultReturn = new Result(resultString, null, // no natural byte representation for these barcodes\n            0, points, BarcodeFormat$1.ITF, new Date().getTime());\n            return resultReturn;\n        }\n        /*\n        /!**\n         * @param row          row of black/white values to search\n         * @param payloadStart offset of start pattern\n         * @param resultString {@link StringBuilder} to append decoded chars to\n         * @throws NotFoundException if decoding could not complete successfully\n         *!/*/\n        static decodeMiddle(row, payloadStart, payloadEnd, resultString) {\n            // Digits are interleaved in pairs - 5 black lines for one digit, and the\n            // 5\n            // interleaved white lines for the second digit.\n            // Therefore, need to scan 10 lines and then\n            // split these into two arrays\n            let counterDigitPair = new Int32Array(10); // 10\n            let counterBlack = new Int32Array(5); // 5\n            let counterWhite = new Int32Array(5); // 5\n            counterDigitPair.fill(0);\n            counterBlack.fill(0);\n            counterWhite.fill(0);\n            while (payloadStart < payloadEnd) {\n                // Get 10 runs of black/white.\n                OneDReader.recordPattern(row, payloadStart, counterDigitPair);\n                // Split them into each array\n                for (let k = 0; k < 5; k++) {\n                    let twoK = 2 * k;\n                    counterBlack[k] = counterDigitPair[twoK];\n                    counterWhite[k] = counterDigitPair[twoK + 1];\n                }\n                let bestMatch = ITFReader.decodeDigit(counterBlack);\n                resultString.append(bestMatch.toString());\n                bestMatch = this.decodeDigit(counterWhite);\n                resultString.append(bestMatch.toString());\n                counterDigitPair.forEach(function (counterDigit) {\n                    payloadStart += counterDigit;\n                });\n            }\n        }\n        /*/!**\n         * Identify where the start of the middle / payload section starts.\n         *\n         * @param row row of black/white values to search\n         * @return Array, containing index of start of 'start block' and end of\n         *         'start block'\n         *!/*/\n        decodeStart(row) {\n            let endStart = ITFReader.skipWhiteSpace(row);\n            let startPattern = ITFReader.findGuardPattern(row, endStart, ITFReader.START_PATTERN);\n            // Determine the width of a narrow line in pixels. We can do this by\n            // getting the width of the start pattern and dividing by 4 because its\n            // made up of 4 narrow lines.\n            this.narrowLineWidth = (startPattern[1] - startPattern[0]) / 4;\n            this.validateQuietZone(row, startPattern[0]);\n            return startPattern;\n        }\n        /*/!**\n         * The start & end patterns must be pre/post fixed by a quiet zone. This\n         * zone must be at least 10 times the width of a narrow line.  Scan back until\n         * we either get to the start of the barcode or match the necessary number of\n         * quiet zone pixels.\n         *\n         * Note: Its assumed the row is reversed when using this method to find\n         * quiet zone after the end pattern.\n         *\n         * ref: http://www.barcode-1.net/i25code.html\n         *\n         * @param row bit array representing the scanned barcode.\n         * @param startPattern index into row of the start or end pattern.\n         * @throws NotFoundException if the quiet zone cannot be found\n         *!/*/\n        validateQuietZone(row, startPattern) {\n            let quietCount = this.narrowLineWidth * 10; // expect to find this many pixels of quiet zone\n            // if there are not so many pixel at all let's try as many as possible\n            quietCount = quietCount < startPattern ? quietCount : startPattern;\n            for (let i = startPattern - 1; quietCount > 0 && i >= 0; i--) {\n                if (row.get(i)) {\n                    break;\n                }\n                quietCount--;\n            }\n            if (quietCount !== 0) {\n                // Unable to find the necessary number of quiet zone pixels.\n                throw new NotFoundException();\n            }\n        }\n        /*\n        /!**\n         * Skip all whitespace until we get to the first black line.\n         *\n         * @param row row of black/white values to search\n         * @return index of the first black line.\n         * @throws NotFoundException Throws exception if no black lines are found in the row\n         *!/*/\n        static skipWhiteSpace(row) {\n            const width = row.getSize();\n            const endStart = row.getNextSet(0);\n            if (endStart === width) {\n                throw new NotFoundException();\n            }\n            return endStart;\n        }\n        /*/!**\n         * Identify where the end of the middle / payload section ends.\n         *\n         * @param row row of black/white values to search\n         * @return Array, containing index of start of 'end block' and end of 'end\n         *         block'\n         *!/*/\n        decodeEnd(row) {\n            // For convenience, reverse the row and then\n            // search from 'the start' for the end block\n            row.reverse();\n            try {\n                let endStart = ITFReader.skipWhiteSpace(row);\n                let endPattern;\n                try {\n                    endPattern = ITFReader.findGuardPattern(row, endStart, ITFReader.END_PATTERN_REVERSED[0]);\n                }\n                catch (error) {\n                    if (error instanceof NotFoundException) {\n                        endPattern = ITFReader.findGuardPattern(row, endStart, ITFReader.END_PATTERN_REVERSED[1]);\n                    }\n                }\n                // The start & end patterns must be pre/post fixed by a quiet zone. This\n                // zone must be at least 10 times the width of a narrow line.\n                // ref: http://www.barcode-1.net/i25code.html\n                this.validateQuietZone(row, endPattern[0]);\n                // Now recalculate the indices of where the 'endblock' starts & stops to\n                // accommodate\n                // the reversed nature of the search\n                let temp = endPattern[0];\n                endPattern[0] = row.getSize() - endPattern[1];\n                endPattern[1] = row.getSize() - temp;\n                return endPattern;\n            }\n            finally {\n                // Put the row back the right way.\n                row.reverse();\n            }\n        }\n        /*\n        /!**\n         * @param row       row of black/white values to search\n         * @param rowOffset position to start search\n         * @param pattern   pattern of counts of number of black and white pixels that are\n         *                  being searched for as a pattern\n         * @return start/end horizontal offset of guard pattern, as an array of two\n         *         ints\n         * @throws NotFoundException if pattern is not found\n         *!/*/\n        static findGuardPattern(row, rowOffset, pattern) {\n            let patternLength = pattern.length;\n            let counters = new Int32Array(patternLength);\n            let width = row.getSize();\n            let isWhite = false;\n            let counterPosition = 0;\n            let patternStart = rowOffset;\n            counters.fill(0);\n            for (let x = rowOffset; x < width; x++) {\n                if (row.get(x) !== isWhite) {\n                    counters[counterPosition]++;\n                }\n                else {\n                    if (counterPosition === patternLength - 1) {\n                        if (OneDReader.patternMatchVariance(counters, pattern, ITFReader.MAX_INDIVIDUAL_VARIANCE) < ITFReader.MAX_AVG_VARIANCE) {\n                            return [patternStart, x];\n                        }\n                        patternStart += counters[0] + counters[1];\n                        System.arraycopy(counters, 2, counters, 0, counterPosition - 1);\n                        counters[counterPosition - 1] = 0;\n                        counters[counterPosition] = 0;\n                        counterPosition--;\n                    }\n                    else {\n                        counterPosition++;\n                    }\n                    counters[counterPosition] = 1;\n                    isWhite = !isWhite;\n                }\n            }\n            throw new NotFoundException();\n        }\n        /*/!**\n         * Attempts to decode a sequence of ITF black/white lines into single\n         * digit.\n         *\n         * @param counters the counts of runs of observed black/white/black/... values\n         * @return The decoded digit\n         * @throws NotFoundException if digit cannot be decoded\n         *!/*/\n        static decodeDigit(counters) {\n            let bestVariance = ITFReader.MAX_AVG_VARIANCE; // worst variance we'll accept\n            let bestMatch = -1;\n            let max = ITFReader.PATTERNS.length;\n            for (let i = 0; i < max; i++) {\n                let pattern = ITFReader.PATTERNS[i];\n                let variance = OneDReader.patternMatchVariance(counters, pattern, ITFReader.MAX_INDIVIDUAL_VARIANCE);\n                if (variance < bestVariance) {\n                    bestVariance = variance;\n                    bestMatch = i;\n                }\n                else if (variance === bestVariance) {\n                    // if we find a second 'best match' with the same variance, we can not reliably report to have a suitable match\n                    bestMatch = -1;\n                }\n            }\n            if (bestMatch >= 0) {\n                return bestMatch % 10;\n            }\n            else {\n                throw new NotFoundException();\n            }\n        }\n    }\n    ITFReader.PATTERNS = [\n        Int32Array.from([1, 1, 2, 2, 1]),\n        Int32Array.from([2, 1, 1, 1, 2]),\n        Int32Array.from([1, 2, 1, 1, 2]),\n        Int32Array.from([2, 2, 1, 1, 1]),\n        Int32Array.from([1, 1, 2, 1, 2]),\n        Int32Array.from([2, 1, 2, 1, 1]),\n        Int32Array.from([1, 2, 2, 1, 1]),\n        Int32Array.from([1, 1, 1, 2, 2]),\n        Int32Array.from([2, 1, 1, 2, 1]),\n        Int32Array.from([1, 2, 1, 2, 1]),\n        Int32Array.from([1, 1, 3, 3, 1]),\n        Int32Array.from([3, 1, 1, 1, 3]),\n        Int32Array.from([1, 3, 1, 1, 3]),\n        Int32Array.from([3, 3, 1, 1, 1]),\n        Int32Array.from([1, 1, 3, 1, 3]),\n        Int32Array.from([3, 1, 3, 1, 1]),\n        Int32Array.from([1, 3, 3, 1, 1]),\n        Int32Array.from([1, 1, 1, 3, 3]),\n        Int32Array.from([3, 1, 1, 3, 1]),\n        Int32Array.from([1, 3, 1, 3, 1]) // 9\n    ];\n    ITFReader.MAX_AVG_VARIANCE = 0.38;\n    ITFReader.MAX_INDIVIDUAL_VARIANCE = 0.5;\n    /* /!** Valid ITF lengths. Anything longer than the largest value is also allowed. *!/*/\n    ITFReader.DEFAULT_ALLOWED_LENGTHS = [6, 8, 10, 12, 14];\n    /*/!**\n     * Start/end guard pattern.\n     *\n     * Note: The end pattern is reversed because the row is reversed before\n     * searching for the END_PATTERN\n     *!/*/\n    ITFReader.START_PATTERN = Int32Array.from([1, 1, 1, 1]);\n    ITFReader.END_PATTERN_REVERSED = [\n        Int32Array.from([1, 1, 2]),\n        Int32Array.from([1, 1, 3]) // 3x\n    ];\n\n    /**\n     * <p>Encapsulates functionality and implementation that is common to UPC and EAN families\n     * of one-dimensional barcodes.</p>\n     *\n     * @author dswitkin@google.com (Daniel Switkin)\n     * @author Sean Owen\n     * @author alasdair@google.com (Alasdair Mackintosh)\n     */\n    class AbstractUPCEANReader extends OneDReader {\n        constructor() {\n            super(...arguments);\n            this.decodeRowStringBuffer = '';\n        }\n\n        static findStartGuardPattern(row) {\n            let foundStart = false;\n            let startRange;\n            let nextStart = 0;\n            let counters = Int32Array.from([0, 0, 0]);\n            while (!foundStart) {\n                counters = Int32Array.from([0, 0, 0]);\n                startRange = AbstractUPCEANReader.findGuardPattern(row, nextStart, false, this.START_END_PATTERN, counters);\n                let start = startRange[0];\n                nextStart = startRange[1];\n                let quietStart = start - (nextStart - start);\n                if (quietStart >= 0) {\n                    foundStart = row.isRange(quietStart, start, false);\n                }\n            }\n            return startRange;\n        }\n        static checkChecksum(s) {\n            return AbstractUPCEANReader.checkStandardUPCEANChecksum(s);\n        }\n        static checkStandardUPCEANChecksum(s) {\n            let length = s.length;\n            if (length === 0)\n                return false;\n            let check = parseInt(s.charAt(length - 1), 10);\n            return AbstractUPCEANReader.getStandardUPCEANChecksum(s.substring(0, length - 1)) === check;\n        }\n        static getStandardUPCEANChecksum(s) {\n            let length = s.length;\n            let sum = 0;\n            for (let i = length - 1; i >= 0; i -= 2) {\n                let digit = s.charAt(i).charCodeAt(0) - '0'.charCodeAt(0);\n                if (digit < 0 || digit > 9) {\n                    throw new FormatException();\n                }\n                sum += digit;\n            }\n            sum *= 3;\n            for (let i = length - 2; i >= 0; i -= 2) {\n                let digit = s.charAt(i).charCodeAt(0) - '0'.charCodeAt(0);\n                if (digit < 0 || digit > 9) {\n                    throw new FormatException();\n                }\n                sum += digit;\n            }\n            return (1000 - sum) % 10;\n        }\n        static decodeEnd(row, endStart) {\n            return AbstractUPCEANReader.findGuardPattern(row, endStart, false, AbstractUPCEANReader.START_END_PATTERN, new Int32Array(AbstractUPCEANReader.START_END_PATTERN.length).fill(0));\n        }\n        /**\n         * @throws NotFoundException\n         */\n        static findGuardPatternWithoutCounters(row, rowOffset, whiteFirst, pattern) {\n            return this.findGuardPattern(row, rowOffset, whiteFirst, pattern, new Int32Array(pattern.length));\n        }\n        /**\n         * @param row row of black/white values to search\n         * @param rowOffset position to start search\n         * @param whiteFirst if true, indicates that the pattern specifies white/black/white/...\n         * pixel counts, otherwise, it is interpreted as black/white/black/...\n         * @param pattern pattern of counts of number of black and white pixels that are being\n         * searched for as a pattern\n         * @param counters array of counters, as long as pattern, to re-use\n         * @return start/end horizontal offset of guard pattern, as an array of two ints\n         * @throws NotFoundException if pattern is not found\n         */\n        static findGuardPattern(row, rowOffset, whiteFirst, pattern, counters) {\n            let width = row.getSize();\n            rowOffset = whiteFirst ? row.getNextUnset(rowOffset) : row.getNextSet(rowOffset);\n            let counterPosition = 0;\n            let patternStart = rowOffset;\n            let patternLength = pattern.length;\n            let isWhite = whiteFirst;\n            for (let x = rowOffset; x < width; x++) {\n                if (row.get(x) !== isWhite) {\n                    counters[counterPosition]++;\n                }\n                else {\n                    if (counterPosition === patternLength - 1) {\n                        if (OneDReader.patternMatchVariance(counters, pattern, AbstractUPCEANReader.MAX_INDIVIDUAL_VARIANCE) < AbstractUPCEANReader.MAX_AVG_VARIANCE) {\n                            return Int32Array.from([patternStart, x]);\n                        }\n                        patternStart += counters[0] + counters[1];\n                        let slice = counters.slice(2, counters.length - 1);\n                        for (let i = 0; i < counterPosition - 1; i++) {\n                            counters[i] = slice[i];\n                        }\n                        counters[counterPosition - 1] = 0;\n                        counters[counterPosition] = 0;\n                        counterPosition--;\n                    }\n                    else {\n                        counterPosition++;\n                    }\n                    counters[counterPosition] = 1;\n                    isWhite = !isWhite;\n                }\n            }\n            throw new NotFoundException();\n        }\n        static decodeDigit(row, counters, rowOffset, patterns) {\n            this.recordPattern(row, rowOffset, counters);\n            let bestVariance = this.MAX_AVG_VARIANCE;\n            let bestMatch = -1;\n            let max = patterns.length;\n            for (let i = 0; i < max; i++) {\n                let pattern = patterns[i];\n                let variance = OneDReader.patternMatchVariance(counters, pattern, AbstractUPCEANReader.MAX_INDIVIDUAL_VARIANCE);\n                if (variance < bestVariance) {\n                    bestVariance = variance;\n                    bestMatch = i;\n                }\n            }\n            if (bestMatch >= 0) {\n                return bestMatch;\n            }\n            else {\n                throw new NotFoundException();\n            }\n        }\n    }\n    // These two values are critical for determining how permissive the decoding will be.\n    // We've arrived at these values through a lot of trial and error. Setting them any higher\n    // lets false positives creep in quickly.\n    AbstractUPCEANReader.MAX_AVG_VARIANCE = 0.48;\n    AbstractUPCEANReader.MAX_INDIVIDUAL_VARIANCE = 0.7;\n    /**\n     * Start/end guard pattern.\n     */\n    AbstractUPCEANReader.START_END_PATTERN = Int32Array.from([1, 1, 1]);\n    /**\n     * Pattern marking the middle of a UPC/EAN pattern, separating the two halves.\n     */\n    AbstractUPCEANReader.MIDDLE_PATTERN = Int32Array.from([1, 1, 1, 1, 1]);\n    /**\n     * end guard pattern.\n     */\n    AbstractUPCEANReader.END_PATTERN = Int32Array.from([1, 1, 1, 1, 1, 1]);\n    /**\n     * \"Odd\", or \"L\" patterns used to encode UPC/EAN digits.\n     */\n    AbstractUPCEANReader.L_PATTERNS = [\n        Int32Array.from([3, 2, 1, 1]),\n        Int32Array.from([2, 2, 2, 1]),\n        Int32Array.from([2, 1, 2, 2]),\n        Int32Array.from([1, 4, 1, 1]),\n        Int32Array.from([1, 1, 3, 2]),\n        Int32Array.from([1, 2, 3, 1]),\n        Int32Array.from([1, 1, 1, 4]),\n        Int32Array.from([1, 3, 1, 2]),\n        Int32Array.from([1, 2, 1, 3]),\n        Int32Array.from([3, 1, 1, 2]),\n    ];\n\n    /**\n     * @see UPCEANExtension2Support\n     */\n    class UPCEANExtension5Support {\n        constructor() {\n            this.CHECK_DIGIT_ENCODINGS = [0x18, 0x14, 0x12, 0x11, 0x0C, 0x06, 0x03, 0x0A, 0x09, 0x05];\n            this.decodeMiddleCounters = Int32Array.from([0, 0, 0, 0]);\n            this.decodeRowStringBuffer = '';\n        }\n        decodeRow(rowNumber, row, extensionStartRange) {\n            let result = this.decodeRowStringBuffer;\n            let end = this.decodeMiddle(row, extensionStartRange, result);\n            let resultString = result.toString();\n            let extensionData = UPCEANExtension5Support.parseExtensionString(resultString);\n            let resultPoints = [\n                new ResultPoint((extensionStartRange[0] + extensionStartRange[1]) / 2.0, rowNumber),\n                new ResultPoint(end, rowNumber)\n            ];\n            let extensionResult = new Result(resultString, null, 0, resultPoints, BarcodeFormat$1.UPC_EAN_EXTENSION, new Date().getTime());\n            if (extensionData != null) {\n                extensionResult.putAllMetadata(extensionData);\n            }\n            return extensionResult;\n        }\n        decodeMiddle(row, startRange, resultString) {\n            let counters = this.decodeMiddleCounters;\n            counters[0] = 0;\n            counters[1] = 0;\n            counters[2] = 0;\n            counters[3] = 0;\n            let end = row.getSize();\n            let rowOffset = startRange[1];\n            let lgPatternFound = 0;\n            for (let x = 0; x < 5 && rowOffset < end; x++) {\n                let bestMatch = AbstractUPCEANReader.decodeDigit(\n                    row,\n                    counters,\n                    rowOffset,\n                    AbstractUPCEANReader.L_AND_G_PATTERNS);\n                resultString += String.fromCharCode(('0'.charCodeAt(0) + bestMatch % 10));\n                for (let counter of counters) {\n                    rowOffset += counter;\n                }\n                if (bestMatch >= 10) {\n                    lgPatternFound |= 1 << (4 - x);\n                }\n                if (x !== 4) {\n                    // Read off separator if not last\n                    rowOffset = row.getNextSet(rowOffset);\n                    rowOffset = row.getNextUnset(rowOffset);\n                }\n            }\n            if (resultString.length !== 5) {\n                throw new NotFoundException();\n            }\n            let checkDigit = this.determineCheckDigit(lgPatternFound);\n            if (UPCEANExtension5Support.extensionChecksum(resultString.toString()) !== checkDigit) {\n                throw new NotFoundException();\n            }\n            return rowOffset;\n        }\n        static extensionChecksum(s) {\n            let length = s.length;\n            let sum = 0;\n            for (let i = length - 2; i >= 0; i -= 2) {\n                sum += s.charAt(i).charCodeAt(0) - '0'.charCodeAt(0);\n            }\n            sum *= 3;\n            for (let i = length - 1; i >= 0; i -= 2) {\n                sum += s.charAt(i).charCodeAt(0) - '0'.charCodeAt(0);\n            }\n            sum *= 3;\n            return sum % 10;\n        }\n        determineCheckDigit(lgPatternFound) {\n            for (let d = 0; d < 10; d++) {\n                if (lgPatternFound === this.CHECK_DIGIT_ENCODINGS[d]) {\n                    return d;\n                }\n            }\n            throw new NotFoundException();\n        }\n        static parseExtensionString(raw) {\n            if (raw.length !== 5) {\n                return null;\n            }\n            let value = UPCEANExtension5Support.parseExtension5String(raw);\n            if (value == null) {\n                return null;\n            }\n            return new Map([[ResultMetadataType$1.SUGGESTED_PRICE, value]]);\n        }\n        static parseExtension5String(raw) {\n            let currency;\n            switch (raw.charAt(0)) {\n                case '0':\n                    currency = '\u00A3';\n                    break;\n                case '5':\n                    currency = '$';\n                    break;\n                case '9':\n                    // Reference: http://www.jollytech.com\n                    switch (raw) {\n                        case '90000':\n                            // No suggested retail price\n                            return null;\n                        case '99991':\n                            // Complementary\n                            return '0.00';\n                        case '99990':\n                            return 'Used';\n                    }\n                    // Otherwise... unknown currency?\n                    currency = '';\n                    break;\n                default:\n                    currency = '';\n                    break;\n            }\n            let rawAmount = parseInt(raw.substring(1));\n            let unitsString = (rawAmount / 100).toString();\n            let hundredths = rawAmount % 100;\n            let hundredthsString = hundredths < 10 ? '0' + hundredths : hundredths.toString(); // fixme\n            return currency + unitsString + '.' + hundredthsString;\n        }\n    }\n\n    /**\n     * @see UPCEANExtension5Support\n     */\n    class UPCEANExtension2Support {\n        constructor() {\n            this.decodeMiddleCounters = Int32Array.from([0, 0, 0, 0]);\n            this.decodeRowStringBuffer = '';\n        }\n        decodeRow(rowNumber, row, extensionStartRange) {\n            let result = this.decodeRowStringBuffer;\n            let end = this.decodeMiddle(row, extensionStartRange, result);\n            let resultString = result.toString();\n            let extensionData = UPCEANExtension2Support.parseExtensionString(resultString);\n            let resultPoints = [\n                new ResultPoint((extensionStartRange[0] + extensionStartRange[1]) / 2.0, rowNumber),\n                new ResultPoint(end, rowNumber)\n            ];\n            let extensionResult = new Result(resultString, null, 0, resultPoints, BarcodeFormat$1.UPC_EAN_EXTENSION, new Date().getTime());\n            if (extensionData != null) {\n                extensionResult.putAllMetadata(extensionData);\n            }\n            return extensionResult;\n        }\n        decodeMiddle(row, startRange, resultString) {\n            let counters = this.decodeMiddleCounters;\n            counters[0] = 0;\n            counters[1] = 0;\n            counters[2] = 0;\n            counters[3] = 0;\n            let end = row.getSize();\n            let rowOffset = startRange[1];\n            let checkParity = 0;\n            for (let x = 0; x < 2 && rowOffset < end; x++) {\n                let bestMatch = AbstractUPCEANReader.decodeDigit(row, counters, rowOffset, AbstractUPCEANReader.L_AND_G_PATTERNS);\n                resultString += String.fromCharCode(('0'.charCodeAt(0) + bestMatch % 10));\n                for (let counter of counters) {\n                    rowOffset += counter;\n                }\n                if (bestMatch >= 10) {\n                    checkParity |= 1 << (1 - x);\n                }\n                if (x !== 1) {\n                    // Read off separator if not last\n                    rowOffset = row.getNextSet(rowOffset);\n                    rowOffset = row.getNextUnset(rowOffset);\n                }\n            }\n            if (resultString.length !== 2) {\n                throw new NotFoundException();\n            }\n            if (parseInt(resultString.toString()) % 4 !== checkParity) {\n                throw new NotFoundException();\n            }\n            return rowOffset;\n        }\n        static parseExtensionString(raw) {\n            if (raw.length !== 2) {\n                return null;\n            }\n            return new Map([[ResultMetadataType$1.ISSUE_NUMBER, parseInt(raw)]]);\n        }\n    }\n\n    class UPCEANExtensionSupport {\n        static decodeRow(rowNumber, row, rowOffset) {\n            let extensionStartRange = AbstractUPCEANReader.findGuardPattern(\n                row,\n                rowOffset,\n                false,\n                this.EXTENSION_START_PATTERN,\n                new Int32Array(this.EXTENSION_START_PATTERN.length).fill(0));\n            try {\n                // return null;\n                let fiveSupport = new UPCEANExtension5Support();\n                return fiveSupport.decodeRow(rowNumber, row, extensionStartRange);\n            }\n            catch (err) {\n                // return null;\n                let twoSupport = new UPCEANExtension2Support();\n                return twoSupport.decodeRow(rowNumber, row, extensionStartRange);\n            }\n        }\n    }\n    UPCEANExtensionSupport.EXTENSION_START_PATTERN = Int32Array.from([1, 1, 2]);\n\n    /**\n     * <p>Encapsulates functionality and implementation that is common to UPC and EAN families\n     * of one-dimensional barcodes.</p>\n     *\n     * @author dswitkin@google.com (Daniel Switkin)\n     * @author Sean Owen\n     * @author alasdair@google.com (Alasdair Mackintosh)\n     */\n    class UPCEANReader extends AbstractUPCEANReader {\n        constructor() {\n            super();\n            this.decodeRowStringBuffer = '';\n            UPCEANReader.L_AND_G_PATTERNS = UPCEANReader.L_PATTERNS.map(arr => Int32Array.from(arr));\n            for (let i = 10; i < 20; i++) {\n                let widths = UPCEANReader.L_PATTERNS[i - 10];\n                let reversedWidths = new Int32Array(widths.length);\n                for (let j = 0; j < widths.length; j++) {\n                    reversedWidths[j] = widths[widths.length - j - 1];\n                }\n                UPCEANReader.L_AND_G_PATTERNS[i] = reversedWidths;\n            }\n        }\n        decodeRow(rowNumber, row, hints) {\n            let startGuardRange = UPCEANReader.findStartGuardPattern(row);\n            let resultPointCallback = hints == null ? null : hints.get(DecodeHintType$1.NEED_RESULT_POINT_CALLBACK);\n            if (resultPointCallback != null) {\n                const resultPoint = new ResultPoint((startGuardRange[0] + startGuardRange[1]) / 2.0, rowNumber);\n                resultPointCallback.foundPossibleResultPoint(resultPoint);\n            }\n            let budello = this.decodeMiddle(row, startGuardRange, this.decodeRowStringBuffer);\n            let endStart = budello.rowOffset;\n            let result = budello.resultString;\n            if (resultPointCallback != null) {\n                const resultPoint = new ResultPoint(endStart, rowNumber);\n                resultPointCallback.foundPossibleResultPoint(resultPoint);\n            }\n            let endRange = this.decodeEnd(row, endStart);\n            if (resultPointCallback != null) {\n                const resultPoint = new ResultPoint((endRange[0] + endRange[1]) / 2.0, rowNumber);\n                resultPointCallback.foundPossibleResultPoint(resultPoint);\n            }\n            // Make sure there is a quiet zone at least as big as the end pattern after the barcode. The\n            // spec might want more whitespace, but in practice this is the maximum we can count on.\n            let end = endRange[1];\n            let quietEnd = end + (end - endRange[0]);\n            if (quietEnd >= row.getSize() || !row.isRange(end, quietEnd, false)) {\n                throw new NotFoundException();\n            }\n            let resultString = result.toString();\n            // UPC/EAN should never be less than 8 chars anyway\n            if (resultString.length < 8) {\n                throw new FormatException();\n            }\n            if (!UPCEANReader.checkChecksum(resultString)) {\n                throw new ChecksumException();\n            }\n            let left = (startGuardRange[1] + startGuardRange[0]) / 2.0;\n            let right = (endRange[1] + endRange[0]) / 2.0;\n            let format = this.getBarcodeFormat();\n            let resultPoint = [new ResultPoint(left, rowNumber), new ResultPoint(right, rowNumber)];\n            let decodeResult = new Result(resultString, null, 0, resultPoint, format, new Date().getTime());\n            let extensionLength = 0;\n            try {\n                let extensionResult = UPCEANExtensionSupport.decodeRow(rowNumber, row, endRange[1]);\n                decodeResult.putMetadata(ResultMetadataType$1.UPC_EAN_EXTENSION, extensionResult.getText());\n                decodeResult.putAllMetadata(extensionResult.getResultMetadata());\n                decodeResult.addResultPoints(extensionResult.getResultPoints());\n                extensionLength = extensionResult.getText().length;\n            }\n            catch (ignoreError) {}\n            let allowedExtensions = hints == null ? null : hints.get(DecodeHintType$1.ALLOWED_EAN_EXTENSIONS);\n            if (allowedExtensions != null) {\n                let valid = false;\n                for (let length in allowedExtensions) {\n                    if (extensionLength.toString() === length) { // check me\n                        valid = true;\n                        break;\n                    }\n                }\n                if (!valid) {\n                    throw new NotFoundException();\n                }\n            }\n            return decodeResult;\n        }\n        decodeEnd(row, endStart) {\n            return UPCEANReader.findGuardPattern(\n                row, endStart, false, UPCEANReader.START_END_PATTERN,\n                new Int32Array(UPCEANReader.START_END_PATTERN.length).fill(0));\n        }\n        static checkChecksum(s) {\n            return UPCEANReader.checkStandardUPCEANChecksum(s);\n        }\n        static checkStandardUPCEANChecksum(s) {\n            let length = s.length;\n            if (length === 0)\n                return false;\n            let check = parseInt(s.charAt(length - 1), 10);\n            return UPCEANReader.getStandardUPCEANChecksum(s.substring(0, length - 1)) === check;\n        }\n        static getStandardUPCEANChecksum(s) {\n            let length = s.length;\n            let sum = 0;\n            for (let i = length - 1; i >= 0; i -= 2) {\n                let digit = s.charAt(i).charCodeAt(0) - '0'.charCodeAt(0);\n                if (digit < 0 || digit > 9) {\n                    throw new FormatException();\n                }\n                sum += digit;\n            }\n            sum *= 3;\n            for (let i = length - 2; i >= 0; i -= 2) {\n                let digit = s.charAt(i).charCodeAt(0) - '0'.charCodeAt(0);\n                if (digit < 0 || digit > 9) {\n                    throw new FormatException();\n                }\n                sum += digit;\n            }\n            return (1000 - sum) % 10;\n        }\n    }\n\n    /**\n     * <p>Implements decoding of the EAN-13 format.</p>\n     *\n     * @author dswitkin@google.com (Daniel Switkin)\n     * @author Sean Owen\n     * @author alasdair@google.com (Alasdair Mackintosh)\n     */\n    class EAN13Reader extends UPCEANReader {\n        constructor() {\n            super();\n            this.decodeMiddleCounters = Int32Array.from([0, 0, 0, 0]);\n        }\n        decodeMiddle(row, startRange, resultString) {\n            let counters = this.decodeMiddleCounters;\n            counters[0] = 0;\n            counters[1] = 0;\n            counters[2] = 0;\n            counters[3] = 0;\n            let end = row.getSize();\n            let rowOffset = startRange[1];\n            let lgPatternFound = 0;\n            for (let x = 0; x < 6 && rowOffset < end; x++) {\n                let bestMatch = UPCEANReader.decodeDigit(row, counters, rowOffset, UPCEANReader.L_AND_G_PATTERNS);\n                resultString += String.fromCharCode(('0'.charCodeAt(0) + bestMatch % 10));\n                for (let counter of counters) {\n                    rowOffset += counter;\n                }\n                if (bestMatch >= 10) {\n                    lgPatternFound |= 1 << (5 - x);\n                }\n            }\n            resultString = EAN13Reader.determineFirstDigit(resultString, lgPatternFound);\n            let middleRange = UPCEANReader.findGuardPattern(\n                row,\n                rowOffset,\n                true,\n                UPCEANReader.MIDDLE_PATTERN,\n                new Int32Array(UPCEANReader.MIDDLE_PATTERN.length).fill(0));\n            rowOffset = middleRange[1];\n            for (let x = 0; x < 6 && rowOffset < end; x++) {\n                let bestMatch = UPCEANReader.decodeDigit(row, counters, rowOffset, UPCEANReader.L_PATTERNS);\n                resultString += String.fromCharCode(('0'.charCodeAt(0) + bestMatch));\n                for (let counter of counters) {\n                    rowOffset += counter;\n                }\n            }\n            return { rowOffset, resultString };\n        }\n        getBarcodeFormat() {\n            return BarcodeFormat$1.EAN_13;\n        }\n        static determineFirstDigit(resultString, lgPatternFound) {\n            for (let d = 0; d < 10; d++) {\n                if (lgPatternFound === this.FIRST_DIGIT_ENCODINGS[d]) {\n                    resultString = String.fromCharCode(('0'.charCodeAt(0) + d)) + resultString;\n                    return resultString;\n                }\n            }\n            throw new NotFoundException();\n        }\n    }\n    EAN13Reader.FIRST_DIGIT_ENCODINGS = [0x00, 0x0B, 0x0D, 0xE, 0x13, 0x19, 0x1C, 0x15, 0x16, 0x1A];\n\n    /**\n     * <p>Implements decoding of the EAN-8 format.</p>\n     *\n     * @author Sean Owen\n     */\n    class EAN8Reader extends UPCEANReader {\n        constructor() {\n            super();\n            this.decodeMiddleCounters = Int32Array.from([0, 0, 0, 0]);\n        }\n        decodeMiddle(row, startRange, resultString) {\n            const counters = this.decodeMiddleCounters;\n            counters[0] = 0;\n            counters[1] = 0;\n            counters[2] = 0;\n            counters[3] = 0;\n            let end = row.getSize();\n            let rowOffset = startRange[1];\n            for (let x = 0; x < 4 && rowOffset < end; x++) {\n                let bestMatch = UPCEANReader.decodeDigit(row, counters, rowOffset, UPCEANReader.L_PATTERNS);\n                resultString += String.fromCharCode(('0'.charCodeAt(0) + bestMatch));\n                for (let counter of counters) {\n                    rowOffset += counter;\n                }\n            }\n            let middleRange = UPCEANReader.findGuardPattern(row, rowOffset, true, UPCEANReader.MIDDLE_PATTERN, new Int32Array(UPCEANReader.MIDDLE_PATTERN.length).fill(0));\n            rowOffset = middleRange[1];\n            for (let x = 0; x < 4 && rowOffset < end; x++) {\n                let bestMatch = UPCEANReader.decodeDigit(row, counters, rowOffset, UPCEANReader.L_PATTERNS);\n                resultString += String.fromCharCode(('0'.charCodeAt(0) + bestMatch));\n                for (let counter of counters) {\n                    rowOffset += counter;\n                }\n            }\n            return { rowOffset, resultString };\n        }\n        getBarcodeFormat() {\n            return BarcodeFormat$1.EAN_8;\n        }\n    }\n\n    /**\n     * Encapsulates functionality and implementation that is common to all families\n     * of one-dimensional barcodes.\n     *\n     * @author dswitkin@google.com (Daniel Switkin)\n     * @author Sean Owen\n     * @author sam2332 (Sam Rudloff)\n     *\n     * @source https://github.com/zxing/zxing/blob/3c96923276dd5785d58eb970b6ba3f80d36a9505/core/src/main/java/com/google/zxing/oned/UPCAReader.java\n     *\n     * @experimental\n     */\n    class UPCAReader extends UPCEANReader {\n        constructor() {\n            super(...arguments);\n            this.ean13Reader = new EAN13Reader();\n        }\n        // @Override\n        getBarcodeFormat() {\n            return BarcodeFormat$1.UPC_A;\n        }\n        // Note that we don't try rotation without the try harder flag, even if rotation was supported.\n        // @Override\n        decode(image, hints) {\n            return this.maybeReturnResult(this.ean13Reader.decode(image));\n        }\n        // @Override\n        decodeRow(rowNumber, row, hints) {\n            return this.maybeReturnResult(this.ean13Reader.decodeRow(rowNumber, row, hints));\n        }\n        // @Override\n        decodeMiddle(row, startRange, resultString) {\n            return this.ean13Reader.decodeMiddle(row, startRange, resultString);\n        }\n        maybeReturnResult(result) {\n            let text = result.getText();\n            if (text.charAt(0) === '0') {\n                let upcaResult = new Result(text.substring(1), null, null, result.getResultPoints(), BarcodeFormat$1.UPC_A);\n                if (result.getResultMetadata() != null) {\n                    upcaResult.putAllMetadata(result.getResultMetadata());\n                }\n                return upcaResult;\n            }\n            else {\n                throw new NotFoundException();\n            }\n        }\n        reset() {\n            this.ean13Reader.reset();\n        }\n    }\n\n    /**\n     * <p>Implements decoding of the UPC-E format.</p>\n     * <p><a href=\"http://www.barcodeisland.com/upce.phtml\">This</a> is a great reference for\n     * UPC-E information.</p>\n     *\n     * @author Sean Owen\n     *\n     * @source https://github.com/zxing/zxing/blob/3c96923276dd5785d58eb970b6ba3f80d36a9505/core/src/main/java/com/google/zxing/oned/UPCEReader.java\n     *\n     * @experimental\n     */\n    /* final */ class UPCEReader extends UPCEANReader {\n        constructor() {\n            super();\n            this.decodeMiddleCounters = new Int32Array(4);\n        }\n        /**\n         * @throws NotFoundException\n         */\n        // @Override\n        decodeMiddle(row, startRange, result) {\n            const counters = this.decodeMiddleCounters.map(x => x);\n            counters[0] = 0;\n            counters[1] = 0;\n            counters[2] = 0;\n            counters[3] = 0;\n            const end = row.getSize();\n            let rowOffset = startRange[1];\n            let lgPatternFound = 0;\n            for (let x = 0; x < 6 && rowOffset < end; x++) {\n                const bestMatch = UPCEReader.decodeDigit(\n                    row, counters, rowOffset, UPCEReader.L_AND_G_PATTERNS);\n                result += String.fromCharCode(('0'.charCodeAt(0) + (bestMatch % 10)));\n                for (let counter of counters) {\n                    rowOffset += counter;\n                }\n                if (bestMatch >= 10) {\n                    lgPatternFound |= (1 << (5 - x));\n                }\n            }\n            let resultString = UPCEReader.determineNumSysAndCheckDigit(\n                result, lgPatternFound);\n            return {rowOffset, resultString};\n        }\n        /**\n         * @throws NotFoundException\n         */\n        // @Override\n        decodeEnd(row, endStart) {\n            return UPCEReader.findGuardPatternWithoutCounters(\n                row, endStart, true, UPCEReader.MIDDLE_END_PATTERN);\n        }\n        /**\n         * @throws FormatException\n         */\n        // @Override\n        checkChecksum(s) {\n            return UPCEANReader.checkChecksum(UPCEReader.convertUPCEtoUPCA(s));\n        }\n        /**\n         * @throws NotFoundException\n         */\n        static determineNumSysAndCheckDigit(resultString, lgPatternFound) {\n            for (let numSys = 0; numSys <= 1; numSys++) {\n                for (let d = 0; d < 10; d++) {\n                    if (lgPatternFound === this.NUMSYS_AND_CHECK_DIGIT_PATTERNS[numSys][d]) {\n                        let prefix = String.fromCharCode('0'.charCodeAt(0) + numSys);\n                        let suffix = String.fromCharCode('0'.charCodeAt(0) + d);\n                        return prefix + resultString + suffix;\n                    }\n                }\n            }\n            throw NotFoundException.getNotFoundInstance();\n        }\n        // @Override\n        getBarcodeFormat() {\n            return BarcodeFormat$1.UPC_E;\n        }\n        /**\n         * Expands a UPC-E value back into its full, equivalent UPC-A code value.\n         *\n         * @param upce UPC-E code as string of digits\n         * @return equivalent UPC-A code as string of digits\n         */\n        static convertUPCEtoUPCA(upce) {\n            // the following line is equivalent to upce.getChars(1, 7, upceChars, 0);\n            const upceChars = upce.slice(1, 7).split('').map(x => x.charCodeAt(0));\n            const result = new StringBuilder( /*12*/);\n            result.append(upce.charAt(0));\n            let lastChar = upceChars[5];\n            switch (lastChar) {\n                case 0:\n                case 1:\n                case 2:\n                    result.appendChars(upceChars, 0, 2);\n                    result.append(lastChar);\n                    result.append('0000');\n                    result.appendChars(upceChars, 2, 3);\n                    break;\n                case 3:\n                    result.appendChars(upceChars, 0, 3);\n                    result.append('00000');\n                    result.appendChars(upceChars, 3, 2);\n                    break;\n                case 4:\n                    result.appendChars(upceChars, 0, 4);\n                    result.append('00000');\n                    result.append(upceChars[4]);\n                    break;\n                default:\n                    result.appendChars(upceChars, 0, 5);\n                    result.append('0000');\n                    result.append(lastChar);\n                    break;\n            }\n            // Only append check digit in conversion if supplied\n            if (upce.length >= 8) {\n                result.append(upce.charAt(7));\n            }\n            return result.toString();\n        }\n    }\n    /**\n     * The pattern that marks the middle, and end, of a UPC-E pattern.\n     * There is no \"second half\" to a UPC-E barcode.\n     */\n    UPCEReader.MIDDLE_END_PATTERN = Int32Array.from([1, 1, 1, 1, 1, 1]);\n    // For an UPC-E barcode, the final digit is represented by the parities used\n    // to encode the middle six digits, according to the table below.\n    //\n    //                Parity of next 6 digits\n    //    Digit   0     1     2     3     4     5\n    //       0    Even   Even  Even Odd  Odd   Odd\n    //       1    Even   Even  Odd  Even Odd   Odd\n    //       2    Even   Even  Odd  Odd  Even  Odd\n    //       3    Even   Even  Odd  Odd  Odd   Even\n    //       4    Even   Odd   Even Even Odd   Odd\n    //       5    Even   Odd   Odd  Even Even  Odd\n    //       6    Even   Odd   Odd  Odd  Even  Even\n    //       7    Even   Odd   Even Odd  Even  Odd\n    //       8    Even   Odd   Even Odd  Odd   Even\n    //       9    Even   Odd   Odd  Even Odd   Even\n    //\n    // The encoding is represented by the following array, which is a bit pattern\n    // using Odd = 0 and Even = 1. For example, 5 is represented by:\n    //\n    //              Odd Even Even Odd Odd Even\n    // in binary:\n    //                0    1    1   0   0    1   == 0x19\n    //\n    /**\n     * See {@link #L_AND_G_PATTERNS}; these values similarly represent patterns of\n     * even-odd parity encodings of digits that imply both the number system (0 or 1)\n     * used, and the check digit.\n     */\n    UPCEReader.NUMSYS_AND_CHECK_DIGIT_PATTERNS = [\n        Int32Array.from([0x38, 0x34, 0x32, 0x31, 0x2C, 0x26, 0x23, 0x2A, 0x29, 0x25]),\n        Int32Array.from([0x07, 0x0B, 0x0D, 0x0E, 0x13, 0x19, 0x1C, 0x15, 0x16, 0x1A]),\n    ];\n\n    /**\n     * <p>A reader that can read all available UPC/EAN formats. If a caller wants to try to\n     * read all such formats, it is most efficient to use this implementation rather than invoke\n     * individual readers.</p>\n     *\n     * @author Sean Owen\n     */\n    class MultiFormatUPCEANReader extends OneDReader {\n        constructor(hints) {\n            super();\n            let possibleFormats = hints == null ? null : hints.get(DecodeHintType$1.POSSIBLE_FORMATS);\n            let readers = [];\n            if (!isNullOrUndefined(possibleFormats)) {\n                if (possibleFormats.indexOf(BarcodeFormat$1.EAN_13) > -1) {\n                    readers.push(new EAN13Reader());\n                }\n                if (possibleFormats.indexOf(BarcodeFormat$1.UPC_A) > -1) {\n                    readers.push(new UPCAReader());\n                }\n                if (possibleFormats.indexOf(BarcodeFormat$1.EAN_8) > -1) {\n                    readers.push(new EAN8Reader());\n                }\n                if (possibleFormats.indexOf(BarcodeFormat$1.UPC_E) > -1) {\n                    readers.push(new UPCEReader());\n                }\n            } else {\n                // No hints provided.\n                readers.push(new EAN13Reader());\n                readers.push(new UPCAReader());\n                readers.push(new EAN8Reader());\n                readers.push(new UPCEReader());\n            }\n            this.readers = readers;\n        }\n        decodeRow(rowNumber, row, hints) {\n            for (let reader of this.readers) {\n                try {\n                    // const result: Result = reader.decodeRow(rowNumber, row, startGuardPattern, hints);\n                    const result = reader.decodeRow(rowNumber, row, hints);\n                    // Special case: a 12-digit code encoded in UPC-A is identical to a \"0\"\n                    // followed by those 12 digits encoded as EAN-13. Each will recognize such a code,\n                    // UPC-A as a 12-digit string and EAN-13 as a 13-digit string starting with \"0\".\n                    // Individually these are correct and their readers will both read such a code\n                    // and correctly call it EAN-13, or UPC-A, respectively.\n                    //\n                    // In this case, if we've been looking for both types, we'd like to call it\n                    // a UPC-A code. But for efficiency we only run the EAN-13 decoder to also read\n                    // UPC-A. So we special case it here, and convert an EAN-13 result to a UPC-A\n                    // result if appropriate.\n                    //\n                    // But, don't return UPC-A if UPC-A was not a requested format!\n                    const ean13MayBeUPCA = result.getBarcodeFormat() === BarcodeFormat$1.EAN_13 &&\n                        result.getText().charAt(0) === '0';\n                    // @SuppressWarnings(\"unchecked\")\n                    const possibleFormats = hints == null ? null : hints.get(DecodeHintType$1.POSSIBLE_FORMATS);\n                    const canReturnUPCA = possibleFormats == null || possibleFormats.includes(BarcodeFormat$1.UPC_A);\n                    if (ean13MayBeUPCA && canReturnUPCA) {\n                        const rawBytes = result.getRawBytes();\n                        // Transfer the metadata across\n                        const resultUPCA = new Result(\n                            result.getText().substring(1),\n                            rawBytes,\n                            (rawBytes ? rawBytes.length : null),\n                            result.getResultPoints(),\n                            BarcodeFormat$1.UPC_A);\n                        resultUPCA.putAllMetadata(result.getResultMetadata());\n                        return resultUPCA;\n                    }\n                    return result;\n                }\n                catch (err) {\n                    // continue;\n                }\n            }\n            throw new NotFoundException();\n        }\n        reset() {\n            for (let reader of this.readers) {\n                reader.reset();\n            }\n        }\n    }\n\n    // import Integer from '../../util/Integer';\n    // import Float from '../../util/Float';\n    class AbstractRSSReader extends OneDReader {\n        constructor() {\n            super();\n            this.decodeFinderCounters = new Int32Array(4);\n            this.dataCharacterCounters = new Int32Array(8);\n            this.oddRoundingErrors = new Array(4);\n            this.evenRoundingErrors = new Array(4);\n            this.oddCounts = new Array(this.dataCharacterCounters.length / 2);\n            this.evenCounts = new Array(this.dataCharacterCounters.length / 2);\n        }\n        getDecodeFinderCounters() {\n            return this.decodeFinderCounters;\n        }\n        getDataCharacterCounters() {\n            return this.dataCharacterCounters;\n        }\n        getOddRoundingErrors() {\n            return this.oddRoundingErrors;\n        }\n        getEvenRoundingErrors() {\n            return this.evenRoundingErrors;\n        }\n        getOddCounts() {\n            return this.oddCounts;\n        }\n        getEvenCounts() {\n            return this.evenCounts;\n        }\n        parseFinderValue(counters, finderPatterns) {\n            for (let value = 0; value < finderPatterns.length; value++) {\n                if (OneDReader.patternMatchVariance(counters, finderPatterns[value], AbstractRSSReader.MAX_INDIVIDUAL_VARIANCE) < AbstractRSSReader.MAX_AVG_VARIANCE) {\n                    return value;\n                }\n            }\n            throw new NotFoundException();\n        }\n        /**\n         * @param array values to sum\n         * @return sum of values\n         * @deprecated call {@link MathUtils#sum(int[])}\n         */\n        static count(array) {\n            return MathUtils.sum(new Int32Array(array));\n        }\n        static increment(array, errors) {\n            let index = 0;\n            let biggestError = errors[0];\n            for (let i = 1; i < array.length; i++) {\n                if (errors[i] > biggestError) {\n                    biggestError = errors[i];\n                    index = i;\n                }\n            }\n            array[index]++;\n        }\n        static decrement(array, errors) {\n            let index = 0;\n            let biggestError = errors[0];\n            for (let i = 1; i < array.length; i++) {\n                if (errors[i] < biggestError) {\n                    biggestError = errors[i];\n                    index = i;\n                }\n            }\n            array[index]--;\n        }\n        static isFinderPattern(counters) {\n            let firstTwoSum = counters[0] + counters[1];\n            let sum = firstTwoSum + counters[2] + counters[3];\n            let ratio = firstTwoSum / sum;\n            if (ratio >= AbstractRSSReader.MIN_FINDER_PATTERN_RATIO && ratio <= AbstractRSSReader.MAX_FINDER_PATTERN_RATIO) {\n                // passes ratio test in spec, but see if the counts are unreasonable\n                let minCounter = Number.MAX_SAFE_INTEGER;\n                let maxCounter = Number.MIN_SAFE_INTEGER;\n                for (let counter of counters) {\n                    if (counter > maxCounter) {\n                        maxCounter = counter;\n                    }\n                    if (counter < minCounter) {\n                        minCounter = counter;\n                    }\n                }\n                return maxCounter < 10 * minCounter;\n            }\n            return false;\n        }\n    }\n    AbstractRSSReader.MAX_AVG_VARIANCE = 0.2;\n    AbstractRSSReader.MAX_INDIVIDUAL_VARIANCE = 0.45;\n    AbstractRSSReader.MIN_FINDER_PATTERN_RATIO = 9.5 / 12.0;\n    AbstractRSSReader.MAX_FINDER_PATTERN_RATIO = 12.5 / 14.0;\n\n    class DataCharacter {\n        constructor(value, checksumPortion) {\n            this.value = value;\n            this.checksumPortion = checksumPortion;\n        }\n        getValue() {\n            return this.value;\n        }\n        getChecksumPortion() {\n            return this.checksumPortion;\n        }\n        toString() {\n            return this.value + '(' + this.checksumPortion + ')';\n        }\n        equals(o) {\n            if (!(o instanceof DataCharacter)) {\n                return false;\n            }\n            const that = o;\n            return this.value === that.value && this.checksumPortion === that.checksumPortion;\n        }\n        hashCode() {\n            return this.value ^ this.checksumPortion;\n        }\n    }\n\n    class FinderPattern {\n        constructor(value, startEnd, start, end, rowNumber) {\n            this.value = value;\n            this.startEnd = startEnd;\n            this.value = value;\n            this.startEnd = startEnd;\n            this.resultPoints = new Array();\n            this.resultPoints.push(new ResultPoint(start, rowNumber));\n            this.resultPoints.push(new ResultPoint(end, rowNumber));\n        }\n        getValue() {\n            return this.value;\n        }\n        getStartEnd() {\n            return this.startEnd;\n        }\n        getResultPoints() {\n            return this.resultPoints;\n        }\n        equals(o) {\n            if (!(o instanceof FinderPattern)) {\n                return false;\n            }\n            const that = o;\n            return this.value === that.value;\n        }\n        hashCode() {\n            return this.value;\n        }\n    }\n\n    /**\n     * RSS util functions.\n     */\n    class RSSUtils {\n        constructor() { }\n        static getRSSvalue(widths, maxWidth, noNarrow) {\n            let n = 0;\n            for (let width of widths) {\n                n += width;\n            }\n            let val = 0;\n            let narrowMask = 0;\n            let elements = widths.length;\n            for (let bar = 0; bar < elements - 1; bar++) {\n                let elmWidth;\n                for (elmWidth = 1, narrowMask |= 1 << bar; elmWidth < widths[bar]; elmWidth++, narrowMask &= ~(1 << bar)) {\n                    let subVal = RSSUtils.combins(n - elmWidth - 1, elements - bar - 2);\n                    if (noNarrow && (narrowMask === 0) && (n - elmWidth - (elements - bar - 1) >= elements - bar - 1)) {\n                        subVal -= RSSUtils.combins(n - elmWidth - (elements - bar), elements - bar - 2);\n                    }\n                    if (elements - bar - 1 > 1) {\n                        let lessVal = 0;\n                        for (let mxwElement = n - elmWidth - (elements - bar - 2); mxwElement > maxWidth; mxwElement--) {\n                            lessVal += RSSUtils.combins(n - elmWidth - mxwElement - 1, elements - bar - 3);\n                        }\n                        subVal -= lessVal * (elements - 1 - bar);\n                    }\n                    else if (n - elmWidth > maxWidth) {\n                        subVal--;\n                    }\n                    val += subVal;\n                }\n                n -= elmWidth;\n            }\n            return val;\n        }\n        static combins(n, r) {\n            let maxDenom;\n            let minDenom;\n            if (n - r > r) {\n                minDenom = r;\n                maxDenom = n - r;\n            }\n            else {\n                minDenom = n - r;\n                maxDenom = r;\n            }\n            let val = 1;\n            let j = 1;\n            for (let i = n; i > maxDenom; i--) {\n                val *= i;\n                if (j <= minDenom) {\n                    val /= j;\n                    j++;\n                }\n            }\n            while ((j <= minDenom)) {\n                val /= j;\n                j++;\n            }\n            return val;\n        }\n    }\n\n    class BitArrayBuilder {\n        static buildBitArray(pairs) {\n            let charNumber = (pairs.length * 2) - 1;\n            if (pairs[pairs.length - 1].getRightChar() == null) {\n                charNumber -= 1;\n            }\n            let size = 12 * charNumber;\n            let binary = new BitArray(size);\n            let accPos = 0;\n            let firstPair = pairs[0];\n            let firstValue = firstPair.getRightChar().getValue();\n            for (let i = 11; i >= 0; --i) {\n                if ((firstValue & (1 << i)) != 0) {\n                    binary.set(accPos);\n                }\n                accPos++;\n            }\n            for (let i = 1; i < pairs.length; ++i) {\n                let currentPair = pairs[i];\n                let leftValue = currentPair.getLeftChar().getValue();\n                for (let j = 11; j >= 0; --j) {\n                    if ((leftValue & (1 << j)) != 0) {\n                        binary.set(accPos);\n                    }\n                    accPos++;\n                }\n                if (currentPair.getRightChar() != null) {\n                    let rightValue = currentPair.getRightChar().getValue();\n                    for (let j = 11; j >= 0; --j) {\n                        if ((rightValue & (1 << j)) != 0) {\n                            binary.set(accPos);\n                        }\n                        accPos++;\n                    }\n                }\n            }\n            return binary;\n        }\n    }\n\n    class BlockParsedResult {\n        constructor(finished, decodedInformation) {\n            if (decodedInformation) {\n                this.decodedInformation = null;\n            }\n            else {\n                this.finished = finished;\n                this.decodedInformation = decodedInformation;\n            }\n        }\n        getDecodedInformation() {\n            return this.decodedInformation;\n        }\n        isFinished() {\n            return this.finished;\n        }\n    }\n\n    class DecodedObject {\n        constructor(newPosition) {\n            this.newPosition = newPosition;\n        }\n        getNewPosition() {\n            return this.newPosition;\n        }\n    }\n\n    class DecodedChar extends DecodedObject {\n        constructor(newPosition, value) {\n            super(newPosition);\n            this.value = value;\n        }\n        getValue() {\n            return this.value;\n        }\n        isFNC1() {\n            return this.value === DecodedChar.FNC1;\n        }\n    }\n    DecodedChar.FNC1 = '$';\n\n    class DecodedInformation extends DecodedObject {\n        constructor(newPosition, newString, remainingValue) {\n            super(newPosition);\n            if (remainingValue) {\n                this.remaining = true;\n                this.remainingValue = this.remainingValue;\n            }\n            else {\n                this.remaining = false;\n                this.remainingValue = 0;\n            }\n            this.newString = newString;\n        }\n        getNewString() {\n            return this.newString;\n        }\n        isRemaining() {\n            return this.remaining;\n        }\n        getRemainingValue() {\n            return this.remainingValue;\n        }\n    }\n\n    class DecodedNumeric extends DecodedObject {\n        constructor(newPosition, firstDigit, secondDigit) {\n            super(newPosition);\n            if (firstDigit < 0 || firstDigit > 10 || secondDigit < 0 || secondDigit > 10) {\n                throw new FormatException();\n            }\n            this.firstDigit = firstDigit;\n            this.secondDigit = secondDigit;\n        }\n        getFirstDigit() {\n            return this.firstDigit;\n        }\n        getSecondDigit() {\n            return this.secondDigit;\n        }\n        getValue() {\n            return this.firstDigit * 10 + this.secondDigit;\n        }\n        isFirstDigitFNC1() {\n            return this.firstDigit === DecodedNumeric.FNC1;\n        }\n        isSecondDigitFNC1() {\n            return this.secondDigit === DecodedNumeric.FNC1;\n        }\n        isAnyFNC1() {\n            return this.firstDigit === DecodedNumeric.FNC1 || this.secondDigit === DecodedNumeric.FNC1;\n        }\n    }\n    DecodedNumeric.FNC1 = 10;\n\n    class FieldParser {\n        constructor() {\n        }\n        static parseFieldsInGeneralPurpose(rawInformation) {\n            if (!rawInformation) {\n                return null;\n            }\n            // Processing 2-digit AIs\n            if (rawInformation.length < 2) {\n                throw new NotFoundException();\n            }\n            let firstTwoDigits = rawInformation.substring(0, 2);\n            for (let dataLength of FieldParser.TWO_DIGIT_DATA_LENGTH) {\n                if (dataLength[0] === firstTwoDigits) {\n                    if (dataLength[1] === FieldParser.VARIABLE_LENGTH) {\n                        return FieldParser.processVariableAI(2, dataLength[2], rawInformation);\n                    }\n                    return FieldParser.processFixedAI(2, dataLength[1], rawInformation);\n                }\n            }\n            if (rawInformation.length < 3) {\n                throw new NotFoundException();\n            }\n            let firstThreeDigits = rawInformation.substring(0, 3);\n            for (let dataLength of FieldParser.THREE_DIGIT_DATA_LENGTH) {\n                if (dataLength[0] === firstThreeDigits) {\n                    if (dataLength[1] === FieldParser.VARIABLE_LENGTH) {\n                        return FieldParser.processVariableAI(3, dataLength[2], rawInformation);\n                    }\n                    return FieldParser.processFixedAI(3, dataLength[1], rawInformation);\n                }\n            }\n            for (let dataLength of FieldParser.THREE_DIGIT_PLUS_DIGIT_DATA_LENGTH) {\n                if (dataLength[0] === firstThreeDigits) {\n                    if (dataLength[1] === FieldParser.VARIABLE_LENGTH) {\n                        return FieldParser.processVariableAI(4, dataLength[2], rawInformation);\n                    }\n                    return FieldParser.processFixedAI(4, dataLength[1], rawInformation);\n                }\n            }\n            if (rawInformation.length < 4) {\n                throw new NotFoundException();\n            }\n            let firstFourDigits = rawInformation.substring(0, 4);\n            for (let dataLength of FieldParser.FOUR_DIGIT_DATA_LENGTH) {\n                if (dataLength[0] === firstFourDigits) {\n                    if (dataLength[1] === FieldParser.VARIABLE_LENGTH) {\n                        return FieldParser.processVariableAI(4, dataLength[2], rawInformation);\n                    }\n                    return FieldParser.processFixedAI(4, dataLength[1], rawInformation);\n                }\n            }\n            throw new NotFoundException();\n        }\n        static processFixedAI(aiSize, fieldSize, rawInformation) {\n            if (rawInformation.length < aiSize) {\n                throw new NotFoundException();\n            }\n            let ai = rawInformation.substring(0, aiSize);\n            if (rawInformation.length < aiSize + fieldSize) {\n                throw new NotFoundException();\n            }\n            let field = rawInformation.substring(aiSize, aiSize + fieldSize);\n            let remaining = rawInformation.substring(aiSize + fieldSize);\n            let result = '(' + ai + ')' + field;\n            let parsedAI = FieldParser.parseFieldsInGeneralPurpose(remaining);\n            return parsedAI == null ? result : result + parsedAI;\n        }\n        static processVariableAI(aiSize, variableFieldSize, rawInformation) {\n            let ai = rawInformation.substring(0, aiSize);\n            let maxSize;\n            if (rawInformation.length < aiSize + variableFieldSize) {\n                maxSize = rawInformation.length;\n            }\n            else {\n                maxSize = aiSize + variableFieldSize;\n            }\n            let field = rawInformation.substring(aiSize, maxSize);\n            let remaining = rawInformation.substring(maxSize);\n            let result = '(' + ai + ')' + field;\n            let parsedAI = FieldParser.parseFieldsInGeneralPurpose(remaining);\n            return parsedAI == null ? result : result + parsedAI;\n        }\n    }\n    FieldParser.VARIABLE_LENGTH = [];\n    FieldParser.TWO_DIGIT_DATA_LENGTH = [\n        ['00', 18],\n        ['01', 14],\n        ['02', 14],\n        ['10', FieldParser.VARIABLE_LENGTH, 20],\n        ['11', 6],\n        ['12', 6],\n        ['13', 6],\n        ['15', 6],\n        ['17', 6],\n        ['20', 2],\n        ['21', FieldParser.VARIABLE_LENGTH, 20],\n        ['22', FieldParser.VARIABLE_LENGTH, 29],\n        ['30', FieldParser.VARIABLE_LENGTH, 8],\n        ['37', FieldParser.VARIABLE_LENGTH, 8],\n        // internal company codes\n        ['90', FieldParser.VARIABLE_LENGTH, 30],\n        ['91', FieldParser.VARIABLE_LENGTH, 30],\n        ['92', FieldParser.VARIABLE_LENGTH, 30],\n        ['93', FieldParser.VARIABLE_LENGTH, 30],\n        ['94', FieldParser.VARIABLE_LENGTH, 30],\n        ['95', FieldParser.VARIABLE_LENGTH, 30],\n        ['96', FieldParser.VARIABLE_LENGTH, 30],\n        ['97', FieldParser.VARIABLE_LENGTH, 3],\n        ['98', FieldParser.VARIABLE_LENGTH, 30],\n        ['99', FieldParser.VARIABLE_LENGTH, 30],\n    ];\n    FieldParser.THREE_DIGIT_DATA_LENGTH = [\n        // Same format as above\n        ['240', FieldParser.VARIABLE_LENGTH, 30],\n        ['241', FieldParser.VARIABLE_LENGTH, 30],\n        ['242', FieldParser.VARIABLE_LENGTH, 6],\n        ['250', FieldParser.VARIABLE_LENGTH, 30],\n        ['251', FieldParser.VARIABLE_LENGTH, 30],\n        ['253', FieldParser.VARIABLE_LENGTH, 17],\n        ['254', FieldParser.VARIABLE_LENGTH, 20],\n        ['400', FieldParser.VARIABLE_LENGTH, 30],\n        ['401', FieldParser.VARIABLE_LENGTH, 30],\n        ['402', 17],\n        ['403', FieldParser.VARIABLE_LENGTH, 30],\n        ['410', 13],\n        ['411', 13],\n        ['412', 13],\n        ['413', 13],\n        ['414', 13],\n        ['420', FieldParser.VARIABLE_LENGTH, 20],\n        ['421', FieldParser.VARIABLE_LENGTH, 15],\n        ['422', 3],\n        ['423', FieldParser.VARIABLE_LENGTH, 15],\n        ['424', 3],\n        ['425', 3],\n        ['426', 3],\n    ];\n    FieldParser.THREE_DIGIT_PLUS_DIGIT_DATA_LENGTH = [\n        // Same format as above\n        ['310', 6],\n        ['311', 6],\n        ['312', 6],\n        ['313', 6],\n        ['314', 6],\n        ['315', 6],\n        ['316', 6],\n        ['320', 6],\n        ['321', 6],\n        ['322', 6],\n        ['323', 6],\n        ['324', 6],\n        ['325', 6],\n        ['326', 6],\n        ['327', 6],\n        ['328', 6],\n        ['329', 6],\n        ['330', 6],\n        ['331', 6],\n        ['332', 6],\n        ['333', 6],\n        ['334', 6],\n        ['335', 6],\n        ['336', 6],\n        ['340', 6],\n        ['341', 6],\n        ['342', 6],\n        ['343', 6],\n        ['344', 6],\n        ['345', 6],\n        ['346', 6],\n        ['347', 6],\n        ['348', 6],\n        ['349', 6],\n        ['350', 6],\n        ['351', 6],\n        ['352', 6],\n        ['353', 6],\n        ['354', 6],\n        ['355', 6],\n        ['356', 6],\n        ['357', 6],\n        ['360', 6],\n        ['361', 6],\n        ['362', 6],\n        ['363', 6],\n        ['364', 6],\n        ['365', 6],\n        ['366', 6],\n        ['367', 6],\n        ['368', 6],\n        ['369', 6],\n        ['390', FieldParser.VARIABLE_LENGTH, 15],\n        ['391', FieldParser.VARIABLE_LENGTH, 18],\n        ['392', FieldParser.VARIABLE_LENGTH, 15],\n        ['393', FieldParser.VARIABLE_LENGTH, 18],\n        ['703', FieldParser.VARIABLE_LENGTH, 30],\n    ];\n    FieldParser.FOUR_DIGIT_DATA_LENGTH = [\n        // Same format as above\n        ['7001', 13],\n        ['7002', FieldParser.VARIABLE_LENGTH, 30],\n        ['7003', 10],\n        ['8001', 14],\n        ['8002', FieldParser.VARIABLE_LENGTH, 20],\n        ['8003', FieldParser.VARIABLE_LENGTH, 30],\n        ['8004', FieldParser.VARIABLE_LENGTH, 30],\n        ['8005', 6],\n        ['8006', 18],\n        ['8007', FieldParser.VARIABLE_LENGTH, 30],\n        ['8008', FieldParser.VARIABLE_LENGTH, 12],\n        ['8018', 18],\n        ['8020', FieldParser.VARIABLE_LENGTH, 25],\n        ['8100', 6],\n        ['8101', 10],\n        ['8102', 2],\n        ['8110', FieldParser.VARIABLE_LENGTH, 70],\n        ['8200', FieldParser.VARIABLE_LENGTH, 70],\n    ];\n\n    class GeneralAppIdDecoder {\n        constructor(information) {\n            this.buffer = new StringBuilder();\n            this.information = information;\n        }\n        decodeAllCodes(buff, initialPosition) {\n            let currentPosition = initialPosition;\n            let remaining = null;\n            do {\n                let info = this.decodeGeneralPurposeField(currentPosition, remaining);\n                let parsedFields = FieldParser.parseFieldsInGeneralPurpose(info.getNewString());\n                if (parsedFields != null) {\n                    buff.append(parsedFields);\n                }\n                if (info.isRemaining()) {\n                    remaining = '' + info.getRemainingValue();\n                }\n                else {\n                    remaining = null;\n                }\n                if (currentPosition === info.getNewPosition()) { // No step forward!\n                    break;\n                }\n                currentPosition = info.getNewPosition();\n            } while (true);\n            return buff.toString();\n        }\n        isStillNumeric(pos) {\n            // It's numeric if it still has 7 positions\n            // and one of the first 4 bits is \"1\".\n            if (pos + 7 > this.information.getSize()) {\n                return pos + 4 <= this.information.getSize();\n            }\n            for (let i = pos; i < pos + 3; ++i) {\n                if (this.information.get(i)) {\n                    return true;\n                }\n            }\n            return this.information.get(pos + 3);\n        }\n        decodeNumeric(pos) {\n            if (pos + 7 > this.information.getSize()) {\n                let numeric = this.extractNumericValueFromBitArray(pos, 4);\n                if (numeric === 0) {\n                    return new DecodedNumeric(this.information.getSize(), DecodedNumeric.FNC1, DecodedNumeric.FNC1);\n                }\n                return new DecodedNumeric(this.information.getSize(), numeric - 1, DecodedNumeric.FNC1);\n            }\n            let numeric = this.extractNumericValueFromBitArray(pos, 7);\n            let digit1 = (numeric - 8) / 11;\n            let digit2 = (numeric - 8) % 11;\n            return new DecodedNumeric(pos + 7, digit1, digit2);\n        }\n        extractNumericValueFromBitArray(pos, bits) {\n            return GeneralAppIdDecoder.extractNumericValueFromBitArray(this.information, pos, bits);\n        }\n        static extractNumericValueFromBitArray(information, pos, bits) {\n            let value = 0;\n            for (let i = 0; i < bits; ++i) {\n                if (information.get(pos + i)) {\n                    value |= 1 << (bits - i - 1);\n                }\n            }\n            return value;\n        }\n        decodeGeneralPurposeField(pos, remaining) {\n            // this.buffer.setLength(0);\n            this.buffer.setLengthToZero();\n            if (remaining != null) {\n                this.buffer.append(remaining);\n            }\n            this.current.setPosition(pos);\n            let lastDecoded = this.parseBlocks();\n            if (lastDecoded != null && lastDecoded.isRemaining()) {\n                return new DecodedInformation(this.current.getPosition(), this.buffer.toString(), lastDecoded.getRemainingValue());\n            }\n            return new DecodedInformation(this.current.getPosition(), this.buffer.toString());\n        }\n        parseBlocks() {\n            let isFinished;\n            let result;\n            do {\n                let initialPosition = this.current.getPosition();\n                if (this.current.isAlpha()) {\n                    result = this.parseAlphaBlock();\n                    isFinished = result.isFinished();\n                }\n                else if (this.current.isIsoIec646()) {\n                    result = this.parseIsoIec646Block();\n                    isFinished = result.isFinished();\n                }\n                else { // it must be numeric\n                    result = this.parseNumericBlock();\n                    isFinished = result.isFinished();\n                }\n                let positionChanged = initialPosition !== this.current.getPosition();\n                if (!positionChanged && !isFinished) {\n                    break;\n                }\n            } while (!isFinished);\n            return result.getDecodedInformation();\n        }\n        parseNumericBlock() {\n            while (this.isStillNumeric(this.current.getPosition())) {\n                let numeric = this.decodeNumeric(this.current.getPosition());\n                this.current.setPosition(numeric.getNewPosition());\n                if (numeric.isFirstDigitFNC1()) {\n                    let information;\n                    if (numeric.isSecondDigitFNC1()) {\n                        information = new DecodedInformation(this.current.getPosition(), this.buffer.toString());\n                    }\n                    else {\n                        information = new DecodedInformation(this.current.getPosition(), this.buffer.toString(), numeric.getSecondDigit());\n                    }\n                    return new BlockParsedResult(true, information);\n                }\n                this.buffer.append(numeric.getFirstDigit());\n                if (numeric.isSecondDigitFNC1()) {\n                    let information = new DecodedInformation(this.current.getPosition(), this.buffer.toString());\n                    return new BlockParsedResult(true, information);\n                }\n                this.buffer.append(numeric.getSecondDigit());\n            }\n            if (this.isNumericToAlphaNumericLatch(this.current.getPosition())) {\n                this.current.setAlpha();\n                this.current.incrementPosition(4);\n            }\n            return new BlockParsedResult(false);\n        }\n        parseIsoIec646Block() {\n            while (this.isStillIsoIec646(this.current.getPosition())) {\n                let iso = this.decodeIsoIec646(this.current.getPosition());\n                this.current.setPosition(iso.getNewPosition());\n                if (iso.isFNC1()) {\n                    let information = new DecodedInformation(this.current.getPosition(), this.buffer.toString());\n                    return new BlockParsedResult(true, information);\n                }\n                this.buffer.append(iso.getValue());\n            }\n            if (this.isAlphaOr646ToNumericLatch(this.current.getPosition())) {\n                this.current.incrementPosition(3);\n                this.current.setNumeric();\n            }\n            else if (this.isAlphaTo646ToAlphaLatch(this.current.getPosition())) {\n                if (this.current.getPosition() + 5 < this.information.getSize()) {\n                    this.current.incrementPosition(5);\n                }\n                else {\n                    this.current.setPosition(this.information.getSize());\n                }\n                this.current.setAlpha();\n            }\n            return new BlockParsedResult(false);\n        }\n        parseAlphaBlock() {\n            while (this.isStillAlpha(this.current.getPosition())) {\n                let alpha = this.decodeAlphanumeric(this.current.getPosition());\n                this.current.setPosition(alpha.getNewPosition());\n                if (alpha.isFNC1()) {\n                    let information = new DecodedInformation(this.current.getPosition(), this.buffer.toString());\n                    return new BlockParsedResult(true, information); // end of the char block\n                }\n                this.buffer.append(alpha.getValue());\n            }\n            if (this.isAlphaOr646ToNumericLatch(this.current.getPosition())) {\n                this.current.incrementPosition(3);\n                this.current.setNumeric();\n            }\n            else if (this.isAlphaTo646ToAlphaLatch(this.current.getPosition())) {\n                if (this.current.getPosition() + 5 < this.information.getSize()) {\n                    this.current.incrementPosition(5);\n                }\n                else {\n                    this.current.setPosition(this.information.getSize());\n                }\n                this.current.setIsoIec646();\n            }\n            return new BlockParsedResult(false);\n        }\n        isStillIsoIec646(pos) {\n            if (pos + 5 > this.information.getSize()) {\n                return false;\n            }\n            let fiveBitValue = this.extractNumericValueFromBitArray(pos, 5);\n            if (fiveBitValue >= 5 && fiveBitValue < 16) {\n                return true;\n            }\n            if (pos + 7 > this.information.getSize()) {\n                return false;\n            }\n            let sevenBitValue = this.extractNumericValueFromBitArray(pos, 7);\n            if (sevenBitValue >= 64 && sevenBitValue < 116) {\n                return true;\n            }\n            if (pos + 8 > this.information.getSize()) {\n                return false;\n            }\n            let eightBitValue = this.extractNumericValueFromBitArray(pos, 8);\n            return eightBitValue >= 232 && eightBitValue < 253;\n        }\n        decodeIsoIec646(pos) {\n            let fiveBitValue = this.extractNumericValueFromBitArray(pos, 5);\n            if (fiveBitValue === 15) {\n                return new DecodedChar(pos + 5, DecodedChar.FNC1);\n            }\n            if (fiveBitValue >= 5 && fiveBitValue < 15) {\n                return new DecodedChar(pos + 5, ('0' + (fiveBitValue - 5)));\n            }\n            let sevenBitValue = this.extractNumericValueFromBitArray(pos, 7);\n            if (sevenBitValue >= 64 && sevenBitValue < 90) {\n                return new DecodedChar(pos + 7, ('' + (sevenBitValue + 1)));\n            }\n            if (sevenBitValue >= 90 && sevenBitValue < 116) {\n                return new DecodedChar(pos + 7, ('' + (sevenBitValue + 7)));\n            }\n            let eightBitValue = this.extractNumericValueFromBitArray(pos, 8);\n            let c;\n            switch (eightBitValue) {\n                case 232:\n                    c = '!';\n                    break;\n                case 233:\n                    c = '\"';\n                    break;\n                case 234:\n                    c = '%';\n                    break;\n                case 235:\n                    c = '&';\n                    break;\n                case 236:\n                    c = '\\'';\n                    break;\n                case 237:\n                    c = '(';\n                    break;\n                case 238:\n                    c = ')';\n                    break;\n                case 239:\n                    c = '*';\n                    break;\n                case 240:\n                    c = '+';\n                    break;\n                case 241:\n                    c = ',';\n                    break;\n                case 242:\n                    c = '-';\n                    break;\n                case 243:\n                    c = '.';\n                    break;\n                case 244:\n                    c = '/';\n                    break;\n                case 245:\n                    c = ':';\n                    break;\n                case 246:\n                    c = ';';\n                    break;\n                case 247:\n                    c = '<';\n                    break;\n                case 248:\n                    c = '=';\n                    break;\n                case 249:\n                    c = '>';\n                    break;\n                case 250:\n                    c = '?';\n                    break;\n                case 251:\n                    c = '_';\n                    break;\n                case 252:\n                    c = ' ';\n                    break;\n                default:\n                    throw new FormatException();\n            }\n            return new DecodedChar(pos + 8, c);\n        }\n        isStillAlpha(pos) {\n            if (pos + 5 > this.information.getSize()) {\n                return false;\n            }\n            // We now check if it's a valid 5-bit value (0..9 and FNC1)\n            let fiveBitValue = this.extractNumericValueFromBitArray(pos, 5);\n            if (fiveBitValue >= 5 && fiveBitValue < 16) {\n                return true;\n            }\n            if (pos + 6 > this.information.getSize()) {\n                return false;\n            }\n            let sixBitValue = this.extractNumericValueFromBitArray(pos, 6);\n            return sixBitValue >= 16 && sixBitValue < 63; // 63 not included\n        }\n        decodeAlphanumeric(pos) {\n            let fiveBitValue = this.extractNumericValueFromBitArray(pos, 5);\n            if (fiveBitValue === 15) {\n                return new DecodedChar(pos + 5, DecodedChar.FNC1);\n            }\n            if (fiveBitValue >= 5 && fiveBitValue < 15) {\n                return new DecodedChar(pos + 5, ('0' + (fiveBitValue - 5)));\n            }\n            let sixBitValue = this.extractNumericValueFromBitArray(pos, 6);\n            if (sixBitValue >= 32 && sixBitValue < 58) {\n                return new DecodedChar(pos + 6, ('' + (sixBitValue + 33)));\n            }\n            let c;\n            switch (sixBitValue) {\n                case 58:\n                    c = '*';\n                    break;\n                case 59:\n                    c = ',';\n                    break;\n                case 60:\n                    c = '-';\n                    break;\n                case 61:\n                    c = '.';\n                    break;\n                case 62:\n                    c = '/';\n                    break;\n                default:\n                    throw new IllegalStateException('Decoding invalid alphanumeric value: ' + sixBitValue);\n            }\n            return new DecodedChar(pos + 6, c);\n        }\n        isAlphaTo646ToAlphaLatch(pos) {\n            if (pos + 1 > this.information.getSize()) {\n                return false;\n            }\n            for (let i = 0; i < 5 && i + pos < this.information.getSize(); ++i) {\n                if (i === 2) {\n                    if (!this.information.get(pos + 2)) {\n                        return false;\n                    }\n                }\n                else if (this.information.get(pos + i)) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        isAlphaOr646ToNumericLatch(pos) {\n            // Next is alphanumeric if there are 3 positions and they are all zeros\n            if (pos + 3 > this.information.getSize()) {\n                return false;\n            }\n            for (let i = pos; i < pos + 3; ++i) {\n                if (this.information.get(i)) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        isNumericToAlphaNumericLatch(pos) {\n            // Next is alphanumeric if there are 4 positions and they are all zeros, or\n            // if there is a subset of this just before the end of the symbol\n            if (pos + 1 > this.information.getSize()) {\n                return false;\n            }\n            for (let i = 0; i < 4 && i + pos < this.information.getSize(); ++i) {\n                if (this.information.get(pos + i)) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    }\n\n    class AbstractExpandedDecoder {\n        constructor(information) {\n            this.information = information;\n            this.generalDecoder = new GeneralAppIdDecoder(information);\n        }\n        getInformation() {\n            return this.information;\n        }\n        getGeneralDecoder() {\n            return this.generalDecoder;\n        }\n    }\n\n    class AI01decoder extends AbstractExpandedDecoder {\n        constructor(information) {\n            super(information);\n        }\n        encodeCompressedGtin(buf, currentPos) {\n            buf.append('(01)');\n            let initialPosition = buf.length();\n            buf.append('9');\n            this.encodeCompressedGtinWithoutAI(buf, currentPos, initialPosition);\n        }\n        encodeCompressedGtinWithoutAI(buf, currentPos, initialBufferPosition) {\n            for (let i = 0; i < 4; ++i) {\n                let currentBlock = this.getGeneralDecoder().extractNumericValueFromBitArray(currentPos + 10 * i, 10);\n                if (currentBlock / 100 === 0) {\n                    buf.append('0');\n                }\n                if (currentBlock / 10 === 0) {\n                    buf.append('0');\n                }\n                buf.append(currentBlock);\n            }\n            AI01decoder.appendCheckDigit(buf, initialBufferPosition);\n        }\n        static appendCheckDigit(buf, currentPos) {\n            let checkDigit = 0;\n            for (let i = 0; i < 13; i++) {\n                // let digit = buf.charAt(i + currentPos) - '0';\n                // To be checked\n                let digit = buf.charAt(i + currentPos).charCodeAt(0) - '0'.charCodeAt(0);\n                checkDigit += (i & 0x01) === 0 ? 3 * digit : digit;\n            }\n            checkDigit = 10 - (checkDigit % 10);\n            if (checkDigit === 10) {\n                checkDigit = 0;\n            }\n            buf.append(checkDigit);\n        }\n    }\n    AI01decoder.GTIN_SIZE = 40;\n\n    class AI01AndOtherAIs extends AI01decoder {\n        // the second one is the encodation method, and the other two are for the variable length\n        constructor(information) {\n            super(information);\n        }\n        parseInformation() {\n            let buff = new StringBuilder();\n            buff.append('(01)');\n            let initialGtinPosition = buff.length();\n            let firstGtinDigit = this.getGeneralDecoder().extractNumericValueFromBitArray(AI01AndOtherAIs.HEADER_SIZE, 4);\n            buff.append(firstGtinDigit);\n            this.encodeCompressedGtinWithoutAI(buff, AI01AndOtherAIs.HEADER_SIZE + 4, initialGtinPosition);\n            return this.getGeneralDecoder().decodeAllCodes(buff, AI01AndOtherAIs.HEADER_SIZE + 44);\n        }\n    }\n    AI01AndOtherAIs.HEADER_SIZE = 1 + 1 + 2; // first bit encodes the linkage flag,\n\n    class AnyAIDecoder extends AbstractExpandedDecoder {\n        constructor(information) {\n            super(information);\n        }\n        parseInformation() {\n            let buf = new StringBuilder();\n            return this.getGeneralDecoder().decodeAllCodes(buf, AnyAIDecoder.HEADER_SIZE);\n        }\n    }\n    AnyAIDecoder.HEADER_SIZE = 2 + 1 + 2;\n\n    class AI01weightDecoder extends AI01decoder {\n        constructor(information) {\n            super(information);\n        }\n        encodeCompressedWeight(buf, currentPos, weightSize) {\n            let originalWeightNumeric = this.getGeneralDecoder().extractNumericValueFromBitArray(currentPos, weightSize);\n            this.addWeightCode(buf, originalWeightNumeric);\n            let weightNumeric = this.checkWeight(originalWeightNumeric);\n            let currentDivisor = 100000;\n            for (let i = 0; i < 5; ++i) {\n                if (weightNumeric / currentDivisor === 0) {\n                    buf.append('0');\n                }\n                currentDivisor /= 10;\n            }\n            buf.append(weightNumeric);\n        }\n    }\n\n    class AI013x0xDecoder extends AI01weightDecoder {\n        constructor(information) {\n            super(information);\n        }\n        parseInformation() {\n            if (this.getInformation().getSize() != AI013x0xDecoder.HEADER_SIZE + AI01weightDecoder.GTIN_SIZE + AI013x0xDecoder.WEIGHT_SIZE) {\n                throw new NotFoundException();\n            }\n            let buf = new StringBuilder();\n            this.encodeCompressedGtin(buf, AI013x0xDecoder.HEADER_SIZE);\n            this.encodeCompressedWeight(buf, AI013x0xDecoder.HEADER_SIZE + AI01weightDecoder.GTIN_SIZE, AI013x0xDecoder.WEIGHT_SIZE);\n            return buf.toString();\n        }\n    }\n    AI013x0xDecoder.HEADER_SIZE = 4 + 1;\n    AI013x0xDecoder.WEIGHT_SIZE = 15;\n\n    class AI013103decoder extends AI013x0xDecoder {\n        constructor(information) {\n            super(information);\n        }\n        addWeightCode(buf, weight) {\n            buf.append('(3103)');\n        }\n        checkWeight(weight) {\n            return weight;\n        }\n    }\n\n    class AI01320xDecoder extends AI013x0xDecoder {\n        constructor(information) {\n            super(information);\n        }\n        addWeightCode(buf, weight) {\n            if (weight < 10000) {\n                buf.append('(3202)');\n            }\n            else {\n                buf.append('(3203)');\n            }\n        }\n        checkWeight(weight) {\n            if (weight < 10000) {\n                return weight;\n            }\n            return weight - 10000;\n        }\n    }\n\n    class AI01392xDecoder extends AI01decoder {\n        constructor(information) {\n            super(information);\n        }\n        parseInformation() {\n            if (this.getInformation().getSize() < AI01392xDecoder.HEADER_SIZE + AI01decoder.GTIN_SIZE) {\n                throw new NotFoundException();\n            }\n            let buf = new StringBuilder();\n            this.encodeCompressedGtin(buf, AI01392xDecoder.HEADER_SIZE);\n            let lastAIdigit = this.getGeneralDecoder().extractNumericValueFromBitArray(AI01392xDecoder.HEADER_SIZE + AI01decoder.GTIN_SIZE, AI01392xDecoder.LAST_DIGIT_SIZE);\n            buf.append('(392');\n            buf.append(lastAIdigit);\n            buf.append(')');\n            let decodedInformation = this.getGeneralDecoder().decodeGeneralPurposeField(AI01392xDecoder.HEADER_SIZE + AI01decoder.GTIN_SIZE + AI01392xDecoder.LAST_DIGIT_SIZE, null);\n            buf.append(decodedInformation.getNewString());\n            return buf.toString();\n        }\n    }\n    AI01392xDecoder.HEADER_SIZE = 5 + 1 + 2;\n    AI01392xDecoder.LAST_DIGIT_SIZE = 2;\n\n    class AI01393xDecoder extends AI01decoder {\n        constructor(information) {\n            super(information);\n        }\n        parseInformation() {\n            if (this.getInformation().getSize() < AI01393xDecoder.HEADER_SIZE + AI01decoder.GTIN_SIZE) {\n                throw new NotFoundException();\n            }\n            let buf = new StringBuilder();\n            this.encodeCompressedGtin(buf, AI01393xDecoder.HEADER_SIZE);\n            let lastAIdigit = this.getGeneralDecoder().extractNumericValueFromBitArray(AI01393xDecoder.HEADER_SIZE + AI01decoder.GTIN_SIZE, AI01393xDecoder.LAST_DIGIT_SIZE);\n            buf.append('(393');\n            buf.append(lastAIdigit);\n            buf.append(')');\n            let firstThreeDigits = this.getGeneralDecoder().extractNumericValueFromBitArray(AI01393xDecoder.HEADER_SIZE + AI01decoder.GTIN_SIZE + AI01393xDecoder.LAST_DIGIT_SIZE, AI01393xDecoder.FIRST_THREE_DIGITS_SIZE);\n            if (firstThreeDigits / 100 == 0) {\n                buf.append('0');\n            }\n            if (firstThreeDigits / 10 == 0) {\n                buf.append('0');\n            }\n            buf.append(firstThreeDigits);\n            let generalInformation = this.getGeneralDecoder().decodeGeneralPurposeField(AI01393xDecoder.HEADER_SIZE + AI01decoder.GTIN_SIZE + AI01393xDecoder.LAST_DIGIT_SIZE + AI01393xDecoder.FIRST_THREE_DIGITS_SIZE, null);\n            buf.append(generalInformation.getNewString());\n            return buf.toString();\n        }\n    }\n    AI01393xDecoder.HEADER_SIZE = 5 + 1 + 2;\n    AI01393xDecoder.LAST_DIGIT_SIZE = 2;\n    AI01393xDecoder.FIRST_THREE_DIGITS_SIZE = 10;\n\n    class AI013x0x1xDecoder extends AI01weightDecoder {\n        constructor(information, firstAIdigits, dateCode) {\n            super(information);\n            this.dateCode = dateCode;\n            this.firstAIdigits = firstAIdigits;\n        }\n        parseInformation() {\n            if (this.getInformation().getSize() != AI013x0x1xDecoder.HEADER_SIZE + AI013x0x1xDecoder.GTIN_SIZE + AI013x0x1xDecoder.WEIGHT_SIZE + AI013x0x1xDecoder.DATE_SIZE) {\n                throw new NotFoundException();\n            }\n            let buf = new StringBuilder();\n            this.encodeCompressedGtin(buf, AI013x0x1xDecoder.HEADER_SIZE);\n            this.encodeCompressedWeight(buf, AI013x0x1xDecoder.HEADER_SIZE + AI013x0x1xDecoder.GTIN_SIZE, AI013x0x1xDecoder.WEIGHT_SIZE);\n            this.encodeCompressedDate(buf, AI013x0x1xDecoder.HEADER_SIZE + AI013x0x1xDecoder.GTIN_SIZE + AI013x0x1xDecoder.WEIGHT_SIZE);\n            return buf.toString();\n        }\n        encodeCompressedDate(buf, currentPos) {\n            let numericDate = this.getGeneralDecoder().extractNumericValueFromBitArray(currentPos, AI013x0x1xDecoder.DATE_SIZE);\n            if (numericDate == 38400) {\n                return;\n            }\n            buf.append('(');\n            buf.append(this.dateCode);\n            buf.append(')');\n            let day = numericDate % 32;\n            numericDate /= 32;\n            let month = numericDate % 12 + 1;\n            numericDate /= 12;\n            let year = numericDate;\n            if (year / 10 == 0) {\n                buf.append('0');\n            }\n            buf.append(year);\n            if (month / 10 == 0) {\n                buf.append('0');\n            }\n            buf.append(month);\n            if (day / 10 == 0) {\n                buf.append('0');\n            }\n            buf.append(day);\n        }\n        addWeightCode(buf, weight) {\n            buf.append('(');\n            buf.append(this.firstAIdigits);\n            buf.append(weight / 100000);\n            buf.append(')');\n        }\n        checkWeight(weight) {\n            return weight % 100000;\n        }\n    }\n    AI013x0x1xDecoder.HEADER_SIZE = 7 + 1;\n    AI013x0x1xDecoder.WEIGHT_SIZE = 20;\n    AI013x0x1xDecoder.DATE_SIZE = 16;\n\n    function createDecoder(information) {\n        try {\n            if (information.get(1)) {\n                return new AI01AndOtherAIs(information);\n            }\n            if (!information.get(2)) {\n                return new AnyAIDecoder(information);\n            }\n            let fourBitEncodationMethod = GeneralAppIdDecoder.extractNumericValueFromBitArray(information, 1, 4);\n            switch (fourBitEncodationMethod) {\n                case 4: return new AI013103decoder(information);\n                case 5: return new AI01320xDecoder(information);\n            }\n            let fiveBitEncodationMethod = GeneralAppIdDecoder.extractNumericValueFromBitArray(information, 1, 5);\n            switch (fiveBitEncodationMethod) {\n                case 12: return new AI01392xDecoder(information);\n                case 13: return new AI01393xDecoder(information);\n            }\n            let sevenBitEncodationMethod = GeneralAppIdDecoder.extractNumericValueFromBitArray(information, 1, 7);\n            switch (sevenBitEncodationMethod) {\n                case 56: return new AI013x0x1xDecoder(information, '310', '11');\n                case 57: return new AI013x0x1xDecoder(information, '320', '11');\n                case 58: return new AI013x0x1xDecoder(information, '310', '13');\n                case 59: return new AI013x0x1xDecoder(information, '320', '13');\n                case 60: return new AI013x0x1xDecoder(information, '310', '15');\n                case 61: return new AI013x0x1xDecoder(information, '320', '15');\n                case 62: return new AI013x0x1xDecoder(information, '310', '17');\n                case 63: return new AI013x0x1xDecoder(information, '320', '17');\n            }\n        }\n        catch (e) {\n            console.log(e);\n            throw new IllegalStateException('unknown decoder: ' + information);\n        }\n    }\n\n    class ExpandedPair {\n        constructor(leftChar, rightChar, finderPatter, mayBeLast) {\n            this.leftchar = leftChar;\n            this.rightchar = rightChar;\n            this.finderpattern = finderPatter;\n            this.maybeLast = mayBeLast;\n        }\n        mayBeLast() {\n            return this.maybeLast;\n        }\n        getLeftChar() {\n            return this.leftchar;\n        }\n        getRightChar() {\n            return this.rightchar;\n        }\n        getFinderPattern() {\n            return this.finderpattern;\n        }\n        mustBeLast() {\n            return this.rightchar == null;\n        }\n        toString() {\n            return '[ ' + this.leftchar + ', ' + this.rightchar + ' : ' + (this.finderpattern == null ? 'null' : this.finderpattern.getValue()) + ' ]';\n        }\n        static equals(o1, o2) {\n            if (!(o1 instanceof ExpandedPair)) {\n                return false;\n            }\n            return ExpandedPair.equalsOrNull(o1.leftchar, o2.leftchar) &&\n                ExpandedPair.equalsOrNull(o1.rightchar, o2.rightchar) &&\n                ExpandedPair.equalsOrNull(o1.finderpattern, o2.finderpattern);\n        }\n        static equalsOrNull(o1, o2) {\n            return o1 === null ? o2 === null : ExpandedPair.equals(o1, o2);\n        }\n        hashCode() {\n            // return ExpandedPair.hashNotNull(leftChar) ^ hashNotNull(rightChar) ^ hashNotNull(finderPattern);\n            let value = this.leftchar.getValue() ^ this.rightchar.getValue() ^ this.finderpattern.getValue();\n            return value;\n        }\n    }\n\n    class ExpandedRow {\n        constructor(pairs, rowNumber, wasReversed) {\n            this.pairs = pairs;\n            this.rowNumber = rowNumber;\n            this.wasReversed = wasReversed;\n        }\n        getPairs() {\n            return this.pairs;\n        }\n        getRowNumber() {\n            return this.rowNumber;\n        }\n        isReversed() {\n            return this.wasReversed;\n        }\n        // check implementation\n        isEquivalent(otherPairs) {\n            return this.checkEqualitity(this, otherPairs);\n        }\n        // @Override\n        toString() {\n            return '{ ' + this.pairs + ' }';\n        }\n        /**\n         * Two rows are equal if they contain the same pairs in the same order.\n         */\n        // @Override\n        // check implementation\n        equals(o1, o2) {\n            if (!(o1 instanceof ExpandedRow)) {\n                return false;\n            }\n            return this.checkEqualitity(o1, o2) && o1.wasReversed === o2.wasReversed;\n        }\n        checkEqualitity(pair1, pair2) {\n            if (!pair1 || !pair2)\n                return;\n            let result;\n            pair1.forEach((e1, i) => {\n                pair2.forEach(e2 => {\n                    if (e1.getLeftChar().getValue() === e2.getLeftChar().getValue() && e1.getRightChar().getValue() === e2.getRightChar().getValue() && e1.getFinderPatter().getValue() === e2.getFinderPatter().getValue()) {\n                        result = true;\n                    }\n                });\n            });\n            return result;\n        }\n    }\n\n    // import java.util.ArrayList;\n    // import java.util.Iterator;\n    // import java.util.List;\n    // import java.util.Map;\n    // import java.util.Collections;\n    class RSSExpandedReader extends AbstractRSSReader {\n        constructor(verbose) {\n            super(...arguments);\n            this.pairs = new Array(RSSExpandedReader.MAX_PAIRS);\n            this.rows = new Array();\n            this.startEnd = [2];\n            this.verbose = (verbose === true);\n        }\n        decodeRow(rowNumber, row, hints) {\n            // Rows can start with even pattern in case in prev rows there where odd number of patters.\n            // So lets try twice\n            // this.pairs.clear();\n            this.pairs.length = 0;\n            this.startFromEven = false;\n            try {\n                return RSSExpandedReader.constructResult(this.decodeRow2pairs(rowNumber, row));\n            }\n            catch (e) {\n                // OK\n                if (this.verbose) {\n                    console.log(e);\n                }\n            }\n            this.pairs.length = 0;\n            this.startFromEven = true;\n            return RSSExpandedReader.constructResult(this.decodeRow2pairs(rowNumber, row));\n        }\n        reset() {\n            this.pairs.length = 0;\n            this.rows.length = 0;\n        }\n        // Not private for testing\n        decodeRow2pairs(rowNumber, row) {\n            let done = false;\n            while (!done) {\n                try {\n                    this.pairs.push(this.retrieveNextPair(row, this.pairs, rowNumber));\n                }\n                catch (error) {\n                    if (error instanceof NotFoundException) {\n                        if (!this.pairs.length) {\n                            throw new NotFoundException();\n                        }\n                        // exit this loop when retrieveNextPair() fails and throws\n                        done = true;\n                    }\n                }\n            }\n            // TODO: verify sequence of finder patterns as in checkPairSequence()\n            if (this.checkChecksum()) {\n                return this.pairs;\n            }\n            let tryStackedDecode;\n            if (this.rows.length) {\n                tryStackedDecode = true;\n            }\n            else {\n                tryStackedDecode = false;\n            }\n            // let tryStackedDecode = !this.rows.isEmpty();\n            this.storeRow(rowNumber, false); // TODO: deal with reversed rows\n            if (tryStackedDecode) {\n                // When the image is 180-rotated, then rows are sorted in wrong direction.\n                // Try twice with both the directions.\n                let ps = this.checkRowsBoolean(false);\n                if (ps != null) {\n                    return ps;\n                }\n                ps = this.checkRowsBoolean(true);\n                if (ps != null) {\n                    return ps;\n                }\n            }\n            throw new NotFoundException();\n        }\n        // Need to Verify\n        checkRowsBoolean(reverse) {\n            // Limit number of rows we are checking\n            // We use recursive algorithm with pure complexity and don't want it to take forever\n            // Stacked barcode can have up to 11 rows, so 25 seems reasonable enough\n            if (this.rows.length > 25) {\n                this.rows.length = 0; // We will never have a chance to get result, so clear it\n                return null;\n            }\n            this.pairs.length = 0;\n            if (reverse) {\n                this.rows = this.rows.reverse();\n                // Collections.reverse(this.rows);\n            }\n            let ps = null;\n            try {\n                ps = this.checkRows(new Array(), 0);\n            }\n            catch (e) {\n                // OK\n                if (this.verbose) {\n                    console.log(e);\n                }\n            }\n            if (reverse) {\n                this.rows = this.rows.reverse();\n                // Collections.reverse(this.rows);\n            }\n            return ps;\n        }\n        // Try to construct a valid rows sequence\n        // Recursion is used to implement backtracking\n        checkRows(collectedRows, currentRow) {\n            for (let i = currentRow; i < this.rows.length; i++) {\n                let row = this.rows[i];\n                this.pairs.length = 0;\n                for (let collectedRow of collectedRows) {\n                    this.pairs.push(collectedRow.getPairs());\n                }\n                this.pairs.push(row.getPairs());\n                if (!RSSExpandedReader.isValidSequence(this.pairs)) {\n                    continue;\n                }\n                if (this.checkChecksum()) {\n                    return this.pairs;\n                }\n                let rs = new Array(collectedRows);\n                rs.push(row);\n                try {\n                    // Recursion: try to add more rows\n                    return this.checkRows(rs, i + 1);\n                }\n                catch (e) {\n                    // We failed, try the next candidate\n                    if (this.verbose) {\n                        console.log(e);\n                    }\n                }\n            }\n            throw new NotFoundException();\n        }\n        // Whether the pairs form a valid find pattern sequence,\n        // either complete or a prefix\n        static isValidSequence(pairs) {\n            for (let sequence of RSSExpandedReader.FINDER_PATTERN_SEQUENCES) {\n                if (pairs.length > sequence.length) {\n                    continue;\n                }\n                let stop = true;\n                for (let j = 0; j < pairs.length; j++) {\n                    if (pairs[j].getFinderPattern().getValue() != sequence[j]) {\n                        stop = false;\n                        break;\n                    }\n                }\n                if (stop) {\n                    return true;\n                }\n            }\n            return false;\n        }\n        storeRow(rowNumber, wasReversed) {\n            // Discard if duplicate above or below; otherwise insert in order by row number.\n            let insertPos = 0;\n            let prevIsSame = false;\n            let nextIsSame = false;\n            while (insertPos < this.rows.length) {\n                let erow = this.rows[insertPos];\n                if (erow.getRowNumber() > rowNumber) {\n                    nextIsSame = erow.isEquivalent(this.pairs);\n                    break;\n                }\n                prevIsSame = erow.isEquivalent(this.pairs);\n                insertPos++;\n            }\n            if (nextIsSame || prevIsSame) {\n                return;\n            }\n            // When the row was partially decoded (e.g. 2 pairs found instead of 3),\n            // it will prevent us from detecting the barcode.\n            // Try to merge partial rows\n            // Check whether the row is part of an allready detected row\n            if (RSSExpandedReader.isPartialRow(this.pairs, this.rows)) {\n                return;\n            }\n            this.rows.push(insertPos, new ExpandedRow(this.pairs, rowNumber, wasReversed));\n            this.removePartialRows(this.pairs, this.rows);\n        }\n        // Remove all the rows that contains only specified pairs\n        removePartialRows(pairs, rows) {\n            // for (Iterator<ExpandedRow> iterator = rows.iterator(); iterator.hasNext();) {\n            //   ExpandedRow r = iterator.next();\n            //   if (r.getPairs().size() == pairs.size()) {\n            //     continue;\n            //   }\n            //   boolean allFound = true;\n            //   for (ExpandedPair p : r.getPairs()) {\n            //     boolean found = false;\n            //     for (ExpandedPair pp : pairs) {\n            //       if (p.equals(pp)) {\n            //         found = true;\n            //         break;\n            //       }\n            //     }\n            //     if (!found) {\n            //       allFound = false;\n            //       break;\n            //     }\n            //   }\n            //   if (allFound) {\n            //     // 'pairs' contains all the pairs from the row 'r'\n            //     iterator.remove();\n            //   }\n            // }\n            for (let row of rows) {\n                if (row.getPairs().length === pairs.length) {\n                    continue;\n                }\n                for (let p of row.getPairs()) {\n                    for (let pp of pairs) {\n                        if (ExpandedPair.equals(p, pp)) {\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        // Returns true when one of the rows already contains all the pairs\n        static isPartialRow(pairs, rows) {\n            for (let r of rows) {\n                let allFound = true;\n                for (let p of pairs) {\n                    let found = false;\n                    for (let pp of r.getPairs()) {\n                        if (p.equals(pp)) {\n                            found = true;\n                            break;\n                        }\n                    }\n                    if (!found) {\n                        allFound = false;\n                        break;\n                    }\n                }\n                if (allFound) {\n                    // the row 'r' contain all the pairs from 'pairs'\n                    return true;\n                }\n            }\n            return false;\n        }\n        // Only used for unit testing\n        getRows() {\n            return this.rows;\n        }\n        // Not private for unit testing\n        static constructResult(pairs) {\n            let binary = BitArrayBuilder.buildBitArray(pairs);\n            let decoder = createDecoder(binary);\n            let resultingString = decoder.parseInformation();\n            let firstPoints = pairs[0].getFinderPattern().getResultPoints();\n            let lastPoints = pairs[pairs.length - 1].getFinderPattern().getResultPoints();\n            let points = [firstPoints[0], firstPoints[1], lastPoints[0], lastPoints[1]];\n            return new Result(resultingString, null, null, points, BarcodeFormat$1.RSS_EXPANDED, null);\n        }\n        checkChecksum() {\n            let firstPair = this.pairs.get(0);\n            let checkCharacter = firstPair.getLeftChar();\n            let firstCharacter = firstPair.getRightChar();\n            if (firstCharacter == null) {\n                return false;\n            }\n            let checksum = firstCharacter.getChecksumPortion();\n            let s = 2;\n            for (let i = 1; i < this.pairs.size(); ++i) {\n                let currentPair = this.pairs.get(i);\n                checksum += currentPair.getLeftChar().getChecksumPortion();\n                s++;\n                let currentRightChar = currentPair.getRightChar();\n                if (currentRightChar != null) {\n                    checksum += currentRightChar.getChecksumPortion();\n                    s++;\n                }\n            }\n            checksum %= 211;\n            let checkCharacterValue = 211 * (s - 4) + checksum;\n            return checkCharacterValue == checkCharacter.getValue();\n        }\n        static getNextSecondBar(row, initialPos) {\n            let currentPos;\n            if (row.get(initialPos)) {\n                currentPos = row.getNextUnset(initialPos);\n                currentPos = row.getNextSet(currentPos);\n            }\n            else {\n                currentPos = row.getNextSet(initialPos);\n                currentPos = row.getNextUnset(currentPos);\n            }\n            return currentPos;\n        }\n        // not private for testing\n        retrieveNextPair(row, previousPairs, rowNumber) {\n            let isOddPattern = previousPairs.length % 2 == 0;\n            if (this.startFromEven) {\n                isOddPattern = !isOddPattern;\n            }\n            let pattern;\n            let keepFinding = true;\n            let forcedOffset = -1;\n            do {\n                this.findNextPair(row, previousPairs, forcedOffset);\n                pattern = this.parseFoundFinderPattern(row, rowNumber, isOddPattern);\n                if (pattern == null) {\n                    forcedOffset = RSSExpandedReader.getNextSecondBar(row, this.startEnd[0]);\n                }\n                else {\n                    keepFinding = false;\n                }\n            } while (keepFinding);\n            // When stacked symbol is split over multiple rows, there's no way to guess if this pair can be last or not.\n            // boolean mayBeLast = checkPairSequence(previousPairs, pattern);\n            let leftChar = this.decodeDataCharacter(row, pattern, isOddPattern, true);\n            if (!this.isEmptyPair(previousPairs) && previousPairs[previousPairs.length - 1].mustBeLast()) {\n                throw new NotFoundException();\n            }\n            let rightChar;\n            try {\n                rightChar = this.decodeDataCharacter(row, pattern, isOddPattern, false);\n            }\n            catch (e) {\n                rightChar = null;\n                if (this.verbose) {\n                    console.log(e);\n                }\n            }\n            return new ExpandedPair(leftChar, rightChar, pattern, true);\n        }\n        isEmptyPair(pairs) {\n            if (pairs.length === 0) {\n                return true;\n            }\n            return false;\n        }\n        findNextPair(row, previousPairs, forcedOffset) {\n            let counters = this.getDecodeFinderCounters();\n            counters[0] = 0;\n            counters[1] = 0;\n            counters[2] = 0;\n            counters[3] = 0;\n            let width = row.getSize();\n            let rowOffset;\n            if (forcedOffset >= 0) {\n                rowOffset = forcedOffset;\n            }\n            else if (this.isEmptyPair(previousPairs)) {\n                rowOffset = 0;\n            }\n            else {\n                let lastPair = previousPairs[previousPairs.length - 1];\n                rowOffset = lastPair.getFinderPattern().getStartEnd()[1];\n            }\n            let searchingEvenPair = previousPairs.length % 2 != 0;\n            if (this.startFromEven) {\n                searchingEvenPair = !searchingEvenPair;\n            }\n            let isWhite = false;\n            while (rowOffset < width) {\n                isWhite = !row.get(rowOffset);\n                if (!isWhite) {\n                    break;\n                }\n                rowOffset++;\n            }\n            let counterPosition = 0;\n            let patternStart = rowOffset;\n            for (let x = rowOffset; x < width; x++) {\n                if (row.get(x) != isWhite) {\n                    counters[counterPosition]++;\n                }\n                else {\n                    if (counterPosition == 3) {\n                        if (searchingEvenPair) {\n                            RSSExpandedReader.reverseCounters(counters);\n                        }\n                        if (RSSExpandedReader.isFinderPattern(counters)) {\n                            this.startEnd[0] = patternStart;\n                            this.startEnd[1] = x;\n                            return;\n                        }\n                        if (searchingEvenPair) {\n                            RSSExpandedReader.reverseCounters(counters);\n                        }\n                        patternStart += counters[0] + counters[1];\n                        counters[0] = counters[2];\n                        counters[1] = counters[3];\n                        counters[2] = 0;\n                        counters[3] = 0;\n                        counterPosition--;\n                    }\n                    else {\n                        counterPosition++;\n                    }\n                    counters[counterPosition] = 1;\n                    isWhite = !isWhite;\n                }\n            }\n            throw new NotFoundException();\n        }\n        static reverseCounters(counters) {\n            let length = counters.length;\n            for (let i = 0; i < length / 2; ++i) {\n                let tmp = counters[i];\n                counters[i] = counters[length - i - 1];\n                counters[length - i - 1] = tmp;\n            }\n        }\n        parseFoundFinderPattern(row, rowNumber, oddPattern) {\n            // Actually we found elements 2-5.\n            let firstCounter;\n            let start;\n            let end;\n            if (oddPattern) {\n                // If pattern number is odd, we need to locate element 1 *before* the current block.\n                let firstElementStart = this.startEnd[0] - 1;\n                // Locate element 1\n                while (firstElementStart >= 0 && !row.get(firstElementStart)) {\n                    firstElementStart--;\n                }\n                firstElementStart++;\n                firstCounter = this.startEnd[0] - firstElementStart;\n                start = firstElementStart;\n                end = this.startEnd[1];\n            }\n            else {\n                // If pattern number is even, the pattern is reversed, so we need to locate element 1 *after* the current block.\n                start = this.startEnd[0];\n                end = row.getNextUnset(this.startEnd[1] + 1);\n                firstCounter = end - this.startEnd[1];\n            }\n            // Make 'counters' hold 1-4\n            let counters = this.getDecodeFinderCounters();\n            System.arraycopy(counters, 0, counters, 1, counters.length - 1);\n            counters[0] = firstCounter;\n            let value;\n            try {\n                value = this.parseFinderValue(counters, RSSExpandedReader.FINDER_PATTERNS);\n            }\n            catch (e) {\n                return null;\n            }\n            // return new FinderPattern(value, new int[] { start, end }, start, end, rowNumber});\n            return new FinderPattern(value, [start, end], start, end, rowNumber);\n        }\n        decodeDataCharacter(row, pattern, isOddPattern, leftChar) {\n            let counters = this.getDataCharacterCounters();\n            for (let x = 0; x < counters.length; x++) {\n                counters[x] = 0;\n            }\n            if (leftChar) {\n                RSSExpandedReader.recordPatternInReverse(row, pattern.getStartEnd()[0], counters);\n            }\n            else {\n                RSSExpandedReader.recordPattern(row, pattern.getStartEnd()[1], counters);\n                // reverse it\n                for (let i = 0, j = counters.length - 1; i < j; i++, j--) {\n                    let temp = counters[i];\n                    counters[i] = counters[j];\n                    counters[j] = temp;\n                }\n            } // counters[] has the pixels of the module\n            let numModules = 17; // left and right data characters have all the same length\n            let elementWidth = MathUtils.sum(new Int32Array(counters)) / numModules;\n            // Sanity check: element width for pattern and the character should match\n            let expectedElementWidth = (pattern.getStartEnd()[1] - pattern.getStartEnd()[0]) / 15.0;\n            if (Math.abs(elementWidth - expectedElementWidth) / expectedElementWidth > 0.3) {\n                throw new NotFoundException();\n            }\n            let oddCounts = this.getOddCounts();\n            let evenCounts = this.getEvenCounts();\n            let oddRoundingErrors = this.getOddRoundingErrors();\n            let evenRoundingErrors = this.getEvenRoundingErrors();\n            for (let i = 0; i < counters.length; i++) {\n                let value = 1.0 * counters[i] / elementWidth;\n                let count = value + 0.5; // Round\n                if (count < 1) {\n                    if (value < 0.3) {\n                        throw new NotFoundException();\n                    }\n                    count = 1;\n                }\n                else if (count > 8) {\n                    if (value > 8.7) {\n                        throw new NotFoundException();\n                    }\n                    count = 8;\n                }\n                let offset = i / 2;\n                if ((i & 0x01) == 0) {\n                    oddCounts[offset] = count;\n                    oddRoundingErrors[offset] = value - count;\n                }\n                else {\n                    evenCounts[offset] = count;\n                    evenRoundingErrors[offset] = value - count;\n                }\n            }\n            this.adjustOddEvenCounts(numModules);\n            let weightRowNumber = 4 * pattern.getValue() + (isOddPattern ? 0 : 2) + (leftChar ? 0 : 1) - 1;\n            let oddSum = 0;\n            let oddChecksumPortion = 0;\n            for (let i = oddCounts.length - 1; i >= 0; i--) {\n                if (RSSExpandedReader.isNotA1left(pattern, isOddPattern, leftChar)) {\n                    let weight = RSSExpandedReader.WEIGHTS[weightRowNumber][2 * i];\n                    oddChecksumPortion += oddCounts[i] * weight;\n                }\n                oddSum += oddCounts[i];\n            }\n            let evenChecksumPortion = 0;\n            // int evenSum = 0;\n            for (let i = evenCounts.length - 1; i >= 0; i--) {\n                if (RSSExpandedReader.isNotA1left(pattern, isOddPattern, leftChar)) {\n                    let weight = RSSExpandedReader.WEIGHTS[weightRowNumber][2 * i + 1];\n                    evenChecksumPortion += evenCounts[i] * weight;\n                }\n                // evenSum += evenCounts[i];\n            }\n            let checksumPortion = oddChecksumPortion + evenChecksumPortion;\n            if ((oddSum & 0x01) != 0 || oddSum > 13 || oddSum < 4) {\n                throw new NotFoundException();\n            }\n            let group = (13 - oddSum) / 2;\n            let oddWidest = RSSExpandedReader.SYMBOL_WIDEST[group];\n            let evenWidest = 9 - oddWidest;\n            let vOdd = RSSUtils.getRSSvalue(oddCounts, oddWidest, true);\n            let vEven = RSSUtils.getRSSvalue(evenCounts, evenWidest, false);\n            let tEven = RSSExpandedReader.EVEN_TOTAL_SUBSET[group];\n            let gSum = RSSExpandedReader.GSUM[group];\n            let value = vOdd * tEven + vEven + gSum;\n            return new DataCharacter(value, checksumPortion);\n        }\n        static isNotA1left(pattern, isOddPattern, leftChar) {\n            // A1: pattern.getValue is 0 (A), and it's an oddPattern, and it is a left char\n            return !(pattern.getValue() == 0 && isOddPattern && leftChar);\n        }\n        adjustOddEvenCounts(numModules) {\n            let oddSum = MathUtils.sum(new Int32Array(this.getOddCounts()));\n            let evenSum = MathUtils.sum(new Int32Array(this.getEvenCounts()));\n            let incrementOdd = false;\n            let decrementOdd = false;\n            if (oddSum > 13) {\n                decrementOdd = true;\n            }\n            else if (oddSum < 4) {\n                incrementOdd = true;\n            }\n            let incrementEven = false;\n            let decrementEven = false;\n            if (evenSum > 13) {\n                decrementEven = true;\n            }\n            else if (evenSum < 4) {\n                incrementEven = true;\n            }\n            let mismatch = oddSum + evenSum - numModules;\n            let oddParityBad = (oddSum & 0x01) == 1;\n            let evenParityBad = (evenSum & 0x01) == 0;\n            if (mismatch == 1) {\n                if (oddParityBad) {\n                    if (evenParityBad) {\n                        throw new NotFoundException();\n                    }\n                    decrementOdd = true;\n                }\n                else {\n                    if (!evenParityBad) {\n                        throw new NotFoundException();\n                    }\n                    decrementEven = true;\n                }\n            }\n            else if (mismatch == -1) {\n                if (oddParityBad) {\n                    if (evenParityBad) {\n                        throw new NotFoundException();\n                    }\n                    incrementOdd = true;\n                }\n                else {\n                    if (!evenParityBad) {\n                        throw new NotFoundException();\n                    }\n                    incrementEven = true;\n                }\n            }\n            else if (mismatch == 0) {\n                if (oddParityBad) {\n                    if (!evenParityBad) {\n                        throw new NotFoundException();\n                    }\n                    // Both bad\n                    if (oddSum < evenSum) {\n                        incrementOdd = true;\n                        decrementEven = true;\n                    }\n                    else {\n                        decrementOdd = true;\n                        incrementEven = true;\n                    }\n                }\n                else {\n                    if (evenParityBad) {\n                        throw new NotFoundException();\n                    }\n                    // Nothing to do!\n                }\n            }\n            else {\n                throw new NotFoundException();\n            }\n            if (incrementOdd) {\n                if (decrementOdd) {\n                    throw new NotFoundException();\n                }\n                RSSExpandedReader.increment(this.getOddCounts(), this.getOddRoundingErrors());\n            }\n            if (decrementOdd) {\n                RSSExpandedReader.decrement(this.getOddCounts(), this.getOddRoundingErrors());\n            }\n            if (incrementEven) {\n                if (decrementEven) {\n                    throw new NotFoundException();\n                }\n                RSSExpandedReader.increment(this.getEvenCounts(), this.getOddRoundingErrors());\n            }\n            if (decrementEven) {\n                RSSExpandedReader.decrement(this.getEvenCounts(), this.getEvenRoundingErrors());\n            }\n        }\n    }\n    RSSExpandedReader.SYMBOL_WIDEST = [7, 5, 4, 3, 1];\n    RSSExpandedReader.EVEN_TOTAL_SUBSET = [4, 20, 52, 104, 204];\n    RSSExpandedReader.GSUM = [0, 348, 1388, 2948, 3988];\n    RSSExpandedReader.FINDER_PATTERNS = [\n        Int32Array.from([1, 8, 4, 1]),\n        Int32Array.from([3, 6, 4, 1]),\n        Int32Array.from([3, 4, 6, 1]),\n        Int32Array.from([3, 2, 8, 1]),\n        Int32Array.from([2, 6, 5, 1]),\n        Int32Array.from([2, 2, 9, 1]) // F\n    ];\n    RSSExpandedReader.WEIGHTS = [\n        [1, 3, 9, 27, 81, 32, 96, 77],\n        [20, 60, 180, 118, 143, 7, 21, 63],\n        [189, 145, 13, 39, 117, 140, 209, 205],\n        [193, 157, 49, 147, 19, 57, 171, 91],\n        [62, 186, 136, 197, 169, 85, 44, 132],\n        [185, 133, 188, 142, 4, 12, 36, 108],\n        [113, 128, 173, 97, 80, 29, 87, 50],\n        [150, 28, 84, 41, 123, 158, 52, 156],\n        [46, 138, 203, 187, 139, 206, 196, 166],\n        [76, 17, 51, 153, 37, 111, 122, 155],\n        [43, 129, 176, 106, 107, 110, 119, 146],\n        [16, 48, 144, 10, 30, 90, 59, 177],\n        [109, 116, 137, 200, 178, 112, 125, 164],\n        [70, 210, 208, 202, 184, 130, 179, 115],\n        [134, 191, 151, 31, 93, 68, 204, 190],\n        [148, 22, 66, 198, 172, 94, 71, 2],\n        [6, 18, 54, 162, 64, 192, 154, 40],\n        [120, 149, 25, 75, 14, 42, 126, 167],\n        [79, 26, 78, 23, 69, 207, 199, 175],\n        [103, 98, 83, 38, 114, 131, 182, 124],\n        [161, 61, 183, 127, 170, 88, 53, 159],\n        [55, 165, 73, 8, 24, 72, 5, 15],\n        [45, 135, 194, 160, 58, 174, 100, 89]\n    ];\n    RSSExpandedReader.FINDER_PAT_A = 0;\n    RSSExpandedReader.FINDER_PAT_B = 1;\n    RSSExpandedReader.FINDER_PAT_C = 2;\n    RSSExpandedReader.FINDER_PAT_D = 3;\n    RSSExpandedReader.FINDER_PAT_E = 4;\n    RSSExpandedReader.FINDER_PAT_F = 5;\n    RSSExpandedReader.FINDER_PATTERN_SEQUENCES = [\n        [RSSExpandedReader.FINDER_PAT_A, RSSExpandedReader.FINDER_PAT_A],\n        [RSSExpandedReader.FINDER_PAT_A, RSSExpandedReader.FINDER_PAT_B, RSSExpandedReader.FINDER_PAT_B],\n        [RSSExpandedReader.FINDER_PAT_A, RSSExpandedReader.FINDER_PAT_C, RSSExpandedReader.FINDER_PAT_B, RSSExpandedReader.FINDER_PAT_D],\n        [RSSExpandedReader.FINDER_PAT_A, RSSExpandedReader.FINDER_PAT_E, RSSExpandedReader.FINDER_PAT_B, RSSExpandedReader.FINDER_PAT_D, RSSExpandedReader.FINDER_PAT_C],\n        [RSSExpandedReader.FINDER_PAT_A, RSSExpandedReader.FINDER_PAT_E, RSSExpandedReader.FINDER_PAT_B, RSSExpandedReader.FINDER_PAT_D, RSSExpandedReader.FINDER_PAT_D, RSSExpandedReader.FINDER_PAT_F],\n        [RSSExpandedReader.FINDER_PAT_A, RSSExpandedReader.FINDER_PAT_E, RSSExpandedReader.FINDER_PAT_B, RSSExpandedReader.FINDER_PAT_D, RSSExpandedReader.FINDER_PAT_E, RSSExpandedReader.FINDER_PAT_F, RSSExpandedReader.FINDER_PAT_F],\n        [RSSExpandedReader.FINDER_PAT_A, RSSExpandedReader.FINDER_PAT_A, RSSExpandedReader.FINDER_PAT_B, RSSExpandedReader.FINDER_PAT_B, RSSExpandedReader.FINDER_PAT_C, RSSExpandedReader.FINDER_PAT_C, RSSExpandedReader.FINDER_PAT_D, RSSExpandedReader.FINDER_PAT_D],\n        [RSSExpandedReader.FINDER_PAT_A, RSSExpandedReader.FINDER_PAT_A, RSSExpandedReader.FINDER_PAT_B, RSSExpandedReader.FINDER_PAT_B, RSSExpandedReader.FINDER_PAT_C, RSSExpandedReader.FINDER_PAT_C, RSSExpandedReader.FINDER_PAT_D, RSSExpandedReader.FINDER_PAT_E, RSSExpandedReader.FINDER_PAT_E],\n        [RSSExpandedReader.FINDER_PAT_A, RSSExpandedReader.FINDER_PAT_A, RSSExpandedReader.FINDER_PAT_B, RSSExpandedReader.FINDER_PAT_B, RSSExpandedReader.FINDER_PAT_C, RSSExpandedReader.FINDER_PAT_C, RSSExpandedReader.FINDER_PAT_D, RSSExpandedReader.FINDER_PAT_E, RSSExpandedReader.FINDER_PAT_F, RSSExpandedReader.FINDER_PAT_F],\n        [RSSExpandedReader.FINDER_PAT_A, RSSExpandedReader.FINDER_PAT_A, RSSExpandedReader.FINDER_PAT_B, RSSExpandedReader.FINDER_PAT_B, RSSExpandedReader.FINDER_PAT_C, RSSExpandedReader.FINDER_PAT_D, RSSExpandedReader.FINDER_PAT_D, RSSExpandedReader.FINDER_PAT_E, RSSExpandedReader.FINDER_PAT_E, RSSExpandedReader.FINDER_PAT_F, RSSExpandedReader.FINDER_PAT_F],\n    ];\n    RSSExpandedReader.MAX_PAIRS = 11;\n\n    class Pair extends DataCharacter {\n        constructor(value, checksumPortion, finderPattern) {\n            super(value, checksumPortion);\n            this.count = 0;\n            this.finderPattern = finderPattern;\n        }\n        getFinderPattern() {\n            return this.finderPattern;\n        }\n        getCount() {\n            return this.count;\n        }\n        incrementCount() {\n            this.count++;\n        }\n    }\n\n    class RSS14Reader extends AbstractRSSReader {\n        constructor() {\n            super(...arguments);\n            this.possibleLeftPairs = [];\n            this.possibleRightPairs = [];\n        }\n        decodeRow(rowNumber, row, hints) {\n            const leftPair = this.decodePair(row, false, rowNumber, hints);\n            RSS14Reader.addOrTally(this.possibleLeftPairs, leftPair);\n            row.reverse();\n            let rightPair = this.decodePair(row, true, rowNumber, hints);\n            RSS14Reader.addOrTally(this.possibleRightPairs, rightPair);\n            row.reverse();\n            for (let left of this.possibleLeftPairs) {\n                if (left.getCount() > 1) {\n                    for (let right of this.possibleRightPairs) {\n                        if (right.getCount() > 1 && RSS14Reader.checkChecksum(left, right)) {\n                            return RSS14Reader.constructResult(left, right);\n                        }\n                    }\n                }\n            }\n            throw new NotFoundException();\n        }\n        static addOrTally(possiblePairs, pair) {\n            if (pair == null) {\n                return;\n            }\n            let found = false;\n            for (let other of possiblePairs) {\n                if (other.getValue() === pair.getValue()) {\n                    other.incrementCount();\n                    found = true;\n                    break;\n                }\n            }\n            if (!found) {\n                possiblePairs.push(pair);\n            }\n        }\n        reset() {\n            this.possibleLeftPairs.length = 0;\n            this.possibleRightPairs.length = 0;\n        }\n        static constructResult(leftPair, rightPair) {\n            let symbolValue = 4537077 * leftPair.getValue() + rightPair.getValue();\n            let text = new String(symbolValue).toString();\n            let buffer = new StringBuilder();\n            for (let i = 13 - text.length; i > 0; i--) {\n                buffer.append('0');\n            }\n            buffer.append(text);\n            let checkDigit = 0;\n            for (let i = 0; i < 13; i++) {\n                let digit = buffer.charAt(i).charCodeAt(0) - '0'.charCodeAt(0);\n                checkDigit += ((i & 0x01) === 0) ? 3 * digit : digit;\n            }\n            checkDigit = 10 - (checkDigit % 10);\n            if (checkDigit === 10) {\n                checkDigit = 0;\n            }\n            buffer.append(checkDigit.toString());\n            let leftPoints = leftPair.getFinderPattern().getResultPoints();\n            let rightPoints = rightPair.getFinderPattern().getResultPoints();\n            return new Result(buffer.toString(), null, 0, [leftPoints[0], leftPoints[1], rightPoints[0], rightPoints[1]], BarcodeFormat$1.RSS_14, new Date().getTime());\n        }\n        static checkChecksum(leftPair, rightPair) {\n            let checkValue = (leftPair.getChecksumPortion() + 16 * rightPair.getChecksumPortion()) % 79;\n            let targetCheckValue = 9 * leftPair.getFinderPattern().getValue() + rightPair.getFinderPattern().getValue();\n            if (targetCheckValue > 72) {\n                targetCheckValue--;\n            }\n            if (targetCheckValue > 8) {\n                targetCheckValue--;\n            }\n            return checkValue === targetCheckValue;\n        }\n        decodePair(row, right, rowNumber, hints) {\n            try {\n                let startEnd = this.findFinderPattern(row, right);\n                let pattern = this.parseFoundFinderPattern(row, rowNumber, right, startEnd);\n                let resultPointCallback = hints == null ? null : hints.get(DecodeHintType$1.NEED_RESULT_POINT_CALLBACK);\n                if (resultPointCallback != null) {\n                    let center = (startEnd[0] + startEnd[1]) / 2.0;\n                    if (right) {\n                        // row is actually reversed\n                        center = row.getSize() - 1 - center;\n                    }\n                    resultPointCallback.foundPossibleResultPoint(new ResultPoint(center, rowNumber));\n                }\n                let outside = this.decodeDataCharacter(row, pattern, true);\n                let inside = this.decodeDataCharacter(row, pattern, false);\n                return new Pair(1597 * outside.getValue() + inside.getValue(), outside.getChecksumPortion() + 4 * inside.getChecksumPortion(), pattern);\n            }\n            catch (err) {\n                return null;\n            }\n        }\n        decodeDataCharacter(row, pattern, outsideChar) {\n            let counters = this.getDataCharacterCounters();\n            for (let x = 0; x < counters.length; x++) {\n                counters[x] = 0;\n            }\n            if (outsideChar) {\n                OneDReader.recordPatternInReverse(row, pattern.getStartEnd()[0], counters);\n            }\n            else {\n                OneDReader.recordPattern(row, pattern.getStartEnd()[1] + 1, counters);\n                // reverse it\n                for (let i = 0, j = counters.length - 1; i < j; i++, j--) {\n                    let temp = counters[i];\n                    counters[i] = counters[j];\n                    counters[j] = temp;\n                }\n            }\n            let numModules = outsideChar ? 16 : 15;\n            let elementWidth = MathUtils.sum(new Int32Array(counters)) / numModules;\n            let oddCounts = this.getOddCounts();\n            let evenCounts = this.getEvenCounts();\n            let oddRoundingErrors = this.getOddRoundingErrors();\n            let evenRoundingErrors = this.getEvenRoundingErrors();\n            for (let i = 0; i < counters.length; i++) {\n                let value = counters[i] / elementWidth;\n                let count = Math.floor(value + 0.5);\n                if (count < 1) {\n                    count = 1;\n                }\n                else if (count > 8) {\n                    count = 8;\n                }\n                let offset = Math.floor(i / 2);\n                if ((i & 0x01) === 0) {\n                    oddCounts[offset] = count;\n                    oddRoundingErrors[offset] = value - count;\n                }\n                else {\n                    evenCounts[offset] = count;\n                    evenRoundingErrors[offset] = value - count;\n                }\n            }\n            this.adjustOddEvenCounts(outsideChar, numModules);\n            let oddSum = 0;\n            let oddChecksumPortion = 0;\n            for (let i = oddCounts.length - 1; i >= 0; i--) {\n                oddChecksumPortion *= 9;\n                oddChecksumPortion += oddCounts[i];\n                oddSum += oddCounts[i];\n            }\n            let evenChecksumPortion = 0;\n            let evenSum = 0;\n            for (let i = evenCounts.length - 1; i >= 0; i--) {\n                evenChecksumPortion *= 9;\n                evenChecksumPortion += evenCounts[i];\n                evenSum += evenCounts[i];\n            }\n            let checksumPortion = oddChecksumPortion + 3 * evenChecksumPortion;\n            if (outsideChar) {\n                if ((oddSum & 0x01) !== 0 || oddSum > 12 || oddSum < 4) {\n                    throw new NotFoundException();\n                }\n                let group = (12 - oddSum) / 2;\n                let oddWidest = RSS14Reader.OUTSIDE_ODD_WIDEST[group];\n                let evenWidest = 9 - oddWidest;\n                let vOdd = RSSUtils.getRSSvalue(oddCounts, oddWidest, false);\n                let vEven = RSSUtils.getRSSvalue(evenCounts, evenWidest, true);\n                let tEven = RSS14Reader.OUTSIDE_EVEN_TOTAL_SUBSET[group];\n                let gSum = RSS14Reader.OUTSIDE_GSUM[group];\n                return new DataCharacter(vOdd * tEven + vEven + gSum, checksumPortion);\n            }\n            else {\n                if ((evenSum & 0x01) !== 0 || evenSum > 10 || evenSum < 4) {\n                    throw new NotFoundException();\n                }\n                let group = (10 - evenSum) / 2;\n                let oddWidest = RSS14Reader.INSIDE_ODD_WIDEST[group];\n                let evenWidest = 9 - oddWidest;\n                let vOdd = RSSUtils.getRSSvalue(oddCounts, oddWidest, true);\n                let vEven = RSSUtils.getRSSvalue(evenCounts, evenWidest, false);\n                let tOdd = RSS14Reader.INSIDE_ODD_TOTAL_SUBSET[group];\n                let gSum = RSS14Reader.INSIDE_GSUM[group];\n                return new DataCharacter(vEven * tOdd + vOdd + gSum, checksumPortion);\n            }\n        }\n        findFinderPattern(row, rightFinderPattern) {\n            let counters = this.getDecodeFinderCounters();\n            counters[0] = 0;\n            counters[1] = 0;\n            counters[2] = 0;\n            counters[3] = 0;\n            let width = row.getSize();\n            let isWhite = false;\n            let rowOffset = 0;\n            while (rowOffset < width) {\n                isWhite = !row.get(rowOffset);\n                if (rightFinderPattern === isWhite) {\n                    // Will encounter white first when searching for right finder pattern\n                    break;\n                }\n                rowOffset++;\n            }\n            let counterPosition = 0;\n            let patternStart = rowOffset;\n            for (let x = rowOffset; x < width; x++) {\n                if (row.get(x) !== isWhite) {\n                    counters[counterPosition]++;\n                }\n                else {\n                    if (counterPosition === 3) {\n                        if (AbstractRSSReader.isFinderPattern(counters)) {\n                            return [patternStart, x];\n                        }\n                        patternStart += counters[0] + counters[1];\n                        counters[0] = counters[2];\n                        counters[1] = counters[3];\n                        counters[2] = 0;\n                        counters[3] = 0;\n                        counterPosition--;\n                    }\n                    else {\n                        counterPosition++;\n                    }\n                    counters[counterPosition] = 1;\n                    isWhite = !isWhite;\n                }\n            }\n            throw new NotFoundException();\n        }\n        parseFoundFinderPattern(row, rowNumber, right, startEnd) {\n            // Actually we found elements 2-5\n            let firstIsBlack = row.get(startEnd[0]);\n            let firstElementStart = startEnd[0] - 1;\n            // Locate element 1\n            while (firstElementStart >= 0 && firstIsBlack !== row.get(firstElementStart)) {\n                firstElementStart--;\n            }\n            firstElementStart++;\n            const firstCounter = startEnd[0] - firstElementStart;\n            // Make 'counters' hold 1-4\n            const counters = this.getDecodeFinderCounters();\n            const copy = new Int32Array(counters.length);\n            System.arraycopy(counters, 0, copy, 1, counters.length - 1);\n            copy[0] = firstCounter;\n            const value = this.parseFinderValue(copy, RSS14Reader.FINDER_PATTERNS);\n            let start = firstElementStart;\n            let end = startEnd[1];\n            if (right) {\n                // row is actually reversed\n                start = row.getSize() - 1 - start;\n                end = row.getSize() - 1 - end;\n            }\n            return new FinderPattern(value, [firstElementStart, startEnd[1]], start, end, rowNumber);\n        }\n        adjustOddEvenCounts(outsideChar, numModules) {\n            let oddSum = MathUtils.sum(new Int32Array(this.getOddCounts()));\n            let evenSum = MathUtils.sum(new Int32Array(this.getEvenCounts()));\n            let incrementOdd = false;\n            let decrementOdd = false;\n            let incrementEven = false;\n            let decrementEven = false;\n            if (outsideChar) {\n                if (oddSum > 12) {\n                    decrementOdd = true;\n                }\n                else if (oddSum < 4) {\n                    incrementOdd = true;\n                }\n                if (evenSum > 12) {\n                    decrementEven = true;\n                }\n                else if (evenSum < 4) {\n                    incrementEven = true;\n                }\n            }\n            else {\n                if (oddSum > 11) {\n                    decrementOdd = true;\n                }\n                else if (oddSum < 5) {\n                    incrementOdd = true;\n                }\n                if (evenSum > 10) {\n                    decrementEven = true;\n                }\n                else if (evenSum < 4) {\n                    incrementEven = true;\n                }\n            }\n            let mismatch = oddSum + evenSum - numModules;\n            let oddParityBad = (oddSum & 0x01) === (outsideChar ? 1 : 0);\n            let evenParityBad = (evenSum & 0x01) === 1;\n            if (mismatch === 1) {\n                if (oddParityBad) {\n                    if (evenParityBad) {\n                        throw new NotFoundException();\n                    }\n                    decrementOdd = true;\n                }\n                else {\n                    if (!evenParityBad) {\n                        throw new NotFoundException();\n                    }\n                    decrementEven = true;\n                }\n            }\n            else if (mismatch === -1) {\n                if (oddParityBad) {\n                    if (evenParityBad) {\n                        throw new NotFoundException();\n                    }\n                    incrementOdd = true;\n                }\n                else {\n                    if (!evenParityBad) {\n                        throw new NotFoundException();\n                    }\n                    incrementEven = true;\n                }\n            }\n            else if (mismatch === 0) {\n                if (oddParityBad) {\n                    if (!evenParityBad) {\n                        throw new NotFoundException();\n                    }\n                    // Both bad\n                    if (oddSum < evenSum) {\n                        incrementOdd = true;\n                        decrementEven = true;\n                    }\n                    else {\n                        decrementOdd = true;\n                        incrementEven = true;\n                    }\n                }\n                else {\n                    if (evenParityBad) {\n                        throw new NotFoundException();\n                    }\n                    // Nothing to do!\n                }\n            }\n            else {\n                throw new NotFoundException();\n            }\n            if (incrementOdd) {\n                if (decrementOdd) {\n                    throw new NotFoundException();\n                }\n                AbstractRSSReader.increment(this.getOddCounts(), this.getOddRoundingErrors());\n            }\n            if (decrementOdd) {\n                AbstractRSSReader.decrement(this.getOddCounts(), this.getOddRoundingErrors());\n            }\n            if (incrementEven) {\n                if (decrementEven) {\n                    throw new NotFoundException();\n                }\n                AbstractRSSReader.increment(this.getEvenCounts(), this.getOddRoundingErrors());\n            }\n            if (decrementEven) {\n                AbstractRSSReader.decrement(this.getEvenCounts(), this.getEvenRoundingErrors());\n            }\n        }\n    }\n    RSS14Reader.OUTSIDE_EVEN_TOTAL_SUBSET = [1, 10, 34, 70, 126];\n    RSS14Reader.INSIDE_ODD_TOTAL_SUBSET = [4, 20, 48, 81];\n    RSS14Reader.OUTSIDE_GSUM = [0, 161, 961, 2015, 2715];\n    RSS14Reader.INSIDE_GSUM = [0, 336, 1036, 1516];\n    RSS14Reader.OUTSIDE_ODD_WIDEST = [8, 6, 4, 3, 1];\n    RSS14Reader.INSIDE_ODD_WIDEST = [2, 4, 6, 8];\n    RSS14Reader.FINDER_PATTERNS = [\n        Int32Array.from([3, 8, 2, 1]),\n        Int32Array.from([3, 5, 5, 1]),\n        Int32Array.from([3, 3, 7, 1]),\n        Int32Array.from([3, 1, 9, 1]),\n        Int32Array.from([2, 7, 4, 1]),\n        Int32Array.from([2, 5, 6, 1]),\n        Int32Array.from([2, 3, 8, 1]),\n        Int32Array.from([1, 5, 7, 1]),\n        Int32Array.from([1, 3, 9, 1]),\n    ];\n\n    /**\n     * @author Daniel Switkin <dswitkin@google.com>\n     * @author Sean Owen\n     */\n    class MultiFormatOneDReader extends OneDReader {\n        constructor(hints, verbose) {\n            super();\n            this.readers = [];\n            this.verbose = (verbose === true);\n            const possibleFormats = !hints ? null : hints.get(DecodeHintType$1.POSSIBLE_FORMATS);\n            const useCode39CheckDigit = hints && hints.get(DecodeHintType$1.ASSUME_CODE_39_CHECK_DIGIT) !== undefined;\n            if (possibleFormats) {\n                if (possibleFormats.includes(BarcodeFormat$1.EAN_13) ||\n                    possibleFormats.includes(BarcodeFormat$1.UPC_A) ||\n                    possibleFormats.includes(BarcodeFormat$1.EAN_8) ||\n                    possibleFormats.includes(BarcodeFormat$1.UPC_E)) {\n                    this.readers.push(new MultiFormatUPCEANReader(hints));\n                }\n                if (possibleFormats.includes(BarcodeFormat$1.CODE_39)) {\n                    this.readers.push(new Code39Reader(useCode39CheckDigit));\n                }\n                // if (possibleFormats.includes(BarcodeFormat.CODE_93)) {\n                //    this.readers.push(new Code93Reader());\n                // }\n                if (possibleFormats.includes(BarcodeFormat$1.CODE_128)) {\n                    this.readers.push(new Code128Reader());\n                }\n                if (possibleFormats.includes(BarcodeFormat$1.ITF)) {\n                    this.readers.push(new ITFReader());\n                }\n                // if (possibleFormats.includes(BarcodeFormat.CODABAR)) {\n                //    this.readers.push(new CodaBarReader());\n                // }\n                if (possibleFormats.includes(BarcodeFormat$1.RSS_14)) {\n                    this.readers.push(new RSS14Reader());\n                }\n                if (possibleFormats.includes(BarcodeFormat$1.RSS_EXPANDED)) {\n                    this.readers.push(new RSSExpandedReader(this.verbose));\n                }\n            } else {\n                // Case when no hints were provided -> add all.\n                this.readers.push(new MultiFormatUPCEANReader(hints));\n                this.readers.push(new Code39Reader());\n                // this.readers.push(new CodaBarReader());\n                // this.readers.push(new Code93Reader());\n                this.readers.push(new MultiFormatUPCEANReader(hints));\n                this.readers.push(new Code128Reader());\n                this.readers.push(new ITFReader());\n                this.readers.push(new RSS14Reader());\n                this.readers.push(new RSSExpandedReader(this.verbose));\n            }\n        }\n        // @Override\n        decodeRow(rowNumber, row, hints) {\n            for (let i = 0; i < this.readers.length; i++) {\n                try {\n                    return this.readers[i].decodeRow(rowNumber, row, hints);\n                }\n                catch (re) {\n                    // continue\n                }\n            }\n            throw new NotFoundException();\n        }\n        // @Override\n        reset() {\n            this.readers.forEach(reader => reader.reset());\n        }\n    }\n\n    /**\n     * @deprecated Moving to @zxing/browser\n     *\n     * Barcode reader reader to use from browser.\n     */\n    class BrowserBarcodeReader extends BrowserCodeReader {\n        /**\n         * Creates an instance of BrowserBarcodeReader.\n         * @param {number} [timeBetweenScansMillis=500] the time delay between subsequent decode tries\n         * @param {Map<DecodeHintType, any>} hints\n         */\n        constructor(timeBetweenScansMillis = 500, hints) {\n            super(new MultiFormatOneDReader(hints), timeBetweenScansMillis, hints);\n        }\n    }\n\n    /*\n     * Copyright 2007 ZXing authors\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n    /**\n     * <p>Encapsulates a set of error-correction blocks in one symbol version. Most versions will\n     * use blocks of differing sizes within one version, so, this encapsulates the parameters for\n     * each set of blocks. It also holds the number of error-correction codewords per block since it\n     * will be the same across all blocks within one version.</p>\n     */\n    class ECBlocks {\n        constructor(ecCodewords, ecBlocks1, ecBlocks2) {\n            this.ecCodewords = ecCodewords;\n            this.ecBlocks = [ecBlocks1];\n            ecBlocks2 && this.ecBlocks.push(ecBlocks2);\n        }\n        getECCodewords() {\n            return this.ecCodewords;\n        }\n        getECBlocks() {\n            return this.ecBlocks;\n        }\n    }\n    /**\n     * <p>Encapsulates the parameters for one error-correction block in one symbol version.\n     * This includes the number of data codewords, and the number of times a block with these\n     * parameters is used consecutively in the Data Matrix code version's format.</p>\n     */\n    class ECB {\n        constructor(count, dataCodewords) {\n            this.count = count;\n            this.dataCodewords = dataCodewords;\n        }\n        getCount() {\n            return this.count;\n        }\n        getDataCodewords() {\n            return this.dataCodewords;\n        }\n    }\n    /**\n     * The Version object encapsulates attributes about a particular\n     * size Data Matrix Code.\n     *\n     * @author bbrown@google.com (Brian Brown)\n     */\n    class Version {\n        constructor(versionNumber, symbolSizeRows, symbolSizeColumns, dataRegionSizeRows, dataRegionSizeColumns, ecBlocks) {\n            this.versionNumber = versionNumber;\n            this.symbolSizeRows = symbolSizeRows;\n            this.symbolSizeColumns = symbolSizeColumns;\n            this.dataRegionSizeRows = dataRegionSizeRows;\n            this.dataRegionSizeColumns = dataRegionSizeColumns;\n            this.ecBlocks = ecBlocks;\n            // Calculate the total number of codewords\n            let total = 0;\n            const ecCodewords = ecBlocks.getECCodewords();\n            const ecbArray = ecBlocks.getECBlocks();\n            for (let ecBlock of ecbArray) {\n                total += ecBlock.getCount() * (ecBlock.getDataCodewords() + ecCodewords);\n            }\n            this.totalCodewords = total;\n        }\n        getVersionNumber() {\n            return this.versionNumber;\n        }\n        getSymbolSizeRows() {\n            return this.symbolSizeRows;\n        }\n        getSymbolSizeColumns() {\n            return this.symbolSizeColumns;\n        }\n        getDataRegionSizeRows() {\n            return this.dataRegionSizeRows;\n        }\n        getDataRegionSizeColumns() {\n            return this.dataRegionSizeColumns;\n        }\n        getTotalCodewords() {\n            return this.totalCodewords;\n        }\n        getECBlocks() {\n            return this.ecBlocks;\n        }\n        /**\n         * <p>Deduces version information from Data Matrix dimensions.</p>\n         *\n         * @param numRows Number of rows in modules\n         * @param numColumns Number of columns in modules\n         * @return Version for a Data Matrix Code of those dimensions\n         * @throws FormatException if dimensions do correspond to a valid Data Matrix size\n         */\n        static getVersionForDimensions(numRows, numColumns) {\n            if ((numRows & 0x01) !== 0 || (numColumns & 0x01) !== 0) {\n                throw new FormatException();\n            }\n            for (let version of Version.VERSIONS) {\n                if (version.symbolSizeRows === numRows && version.symbolSizeColumns === numColumns) {\n                    return version;\n                }\n            }\n            throw new FormatException();\n        }\n        //  @Override\n        toString() {\n            return '' + this.versionNumber;\n        }\n        /**\n         * See ISO 16022:2006 5.5.1 Table 7\n         */\n        static buildVersions() {\n            return [\n                new Version(1, 10, 10, 8, 8, new ECBlocks(5, new ECB(1, 3))),\n                new Version(2, 12, 12, 10, 10, new ECBlocks(7, new ECB(1, 5))),\n                new Version(3, 14, 14, 12, 12, new ECBlocks(10, new ECB(1, 8))),\n                new Version(4, 16, 16, 14, 14, new ECBlocks(12, new ECB(1, 12))),\n                new Version(5, 18, 18, 16, 16, new ECBlocks(14, new ECB(1, 18))),\n                new Version(6, 20, 20, 18, 18, new ECBlocks(18, new ECB(1, 22))),\n                new Version(7, 22, 22, 20, 20, new ECBlocks(20, new ECB(1, 30))),\n                new Version(8, 24, 24, 22, 22, new ECBlocks(24, new ECB(1, 36))),\n                new Version(9, 26, 26, 24, 24, new ECBlocks(28, new ECB(1, 44))),\n                new Version(10, 32, 32, 14, 14, new ECBlocks(36, new ECB(1, 62))),\n                new Version(11, 36, 36, 16, 16, new ECBlocks(42, new ECB(1, 86))),\n                new Version(12, 40, 40, 18, 18, new ECBlocks(48, new ECB(1, 114))),\n                new Version(13, 44, 44, 20, 20, new ECBlocks(56, new ECB(1, 144))),\n                new Version(14, 48, 48, 22, 22, new ECBlocks(68, new ECB(1, 174))),\n                new Version(15, 52, 52, 24, 24, new ECBlocks(42, new ECB(2, 102))),\n                new Version(16, 64, 64, 14, 14, new ECBlocks(56, new ECB(2, 140))),\n                new Version(17, 72, 72, 16, 16, new ECBlocks(36, new ECB(4, 92))),\n                new Version(18, 80, 80, 18, 18, new ECBlocks(48, new ECB(4, 114))),\n                new Version(19, 88, 88, 20, 20, new ECBlocks(56, new ECB(4, 144))),\n                new Version(20, 96, 96, 22, 22, new ECBlocks(68, new ECB(4, 174))),\n                new Version(21, 104, 104, 24, 24, new ECBlocks(56, new ECB(6, 136))),\n                new Version(22, 120, 120, 18, 18, new ECBlocks(68, new ECB(6, 175))),\n                new Version(23, 132, 132, 20, 20, new ECBlocks(62, new ECB(8, 163))),\n                new Version(24, 144, 144, 22, 22, new ECBlocks(62, new ECB(8, 156), new ECB(2, 155))),\n                new Version(25, 8, 18, 6, 16, new ECBlocks(7, new ECB(1, 5))),\n                new Version(26, 8, 32, 6, 14, new ECBlocks(11, new ECB(1, 10))),\n                new Version(27, 12, 26, 10, 24, new ECBlocks(14, new ECB(1, 16))),\n                new Version(28, 12, 36, 10, 16, new ECBlocks(18, new ECB(1, 22))),\n                new Version(29, 16, 36, 14, 16, new ECBlocks(24, new ECB(1, 32))),\n                new Version(30, 16, 48, 14, 22, new ECBlocks(28, new ECB(1, 49)))\n            ];\n        }\n    }\n    Version.VERSIONS = Version.buildVersions();\n\n    /*\n     * Copyright 2007 ZXing authors\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n    /**\n     * @author bbrown@google.com (Brian Brown)\n     */\n    class BitMatrixParser {\n        /**\n         * @param bitMatrix {@link BitMatrix} to parse\n         * @throws FormatException if dimension is < 8 or > 144 or not 0 mod 2\n         */\n        constructor(bitMatrix) {\n            const dimension = bitMatrix.getHeight();\n            if (dimension < 8 || dimension > 144 || (dimension & 0x01) !== 0) {\n                throw new FormatException();\n            }\n            this.version = BitMatrixParser.readVersion(bitMatrix);\n            this.mappingBitMatrix = this.extractDataRegion(bitMatrix);\n            this.readMappingMatrix = new BitMatrix(this.mappingBitMatrix.getWidth(), this.mappingBitMatrix.getHeight());\n        }\n        getVersion() {\n            return this.version;\n        }\n        /**\n         * <p>Creates the version object based on the dimension of the original bit matrix from\n         * the datamatrix code.</p>\n         *\n         * <p>See ISO 16022:2006 Table 7 - ECC 200 symbol attributes</p>\n         *\n         * @param bitMatrix Original {@link BitMatrix} including alignment patterns\n         * @return {@link Version} encapsulating the Data Matrix Code's \"version\"\n         * @throws FormatException if the dimensions of the mapping matrix are not valid\n         * Data Matrix dimensions.\n         */\n        static readVersion(bitMatrix) {\n            const numRows = bitMatrix.getHeight();\n            const numColumns = bitMatrix.getWidth();\n            return Version.getVersionForDimensions(numRows, numColumns);\n        }\n        /**\n         * <p>Reads the bits in the {@link BitMatrix} representing the mapping matrix (No alignment patterns)\n         * in the correct order in order to reconstitute the codewords bytes contained within the\n         * Data Matrix Code.</p>\n         *\n         * @return bytes encoded within the Data Matrix Code\n         * @throws FormatException if the exact number of bytes expected is not read\n         */\n        readCodewords() {\n            const result = new Int8Array(this.version.getTotalCodewords());\n            let resultOffset = 0;\n            let row = 4;\n            let column = 0;\n            const numRows = this.mappingBitMatrix.getHeight();\n            const numColumns = this.mappingBitMatrix.getWidth();\n            let corner1Read = false;\n            let corner2Read = false;\n            let corner3Read = false;\n            let corner4Read = false;\n            // Read all of the codewords\n            do {\n                // Check the four corner cases\n                if ((row === numRows) && (column === 0) && !corner1Read) {\n                    result[resultOffset++] = this.readCorner1(numRows, numColumns) & 0xff;\n                    row -= 2;\n                    column += 2;\n                    corner1Read = true;\n                }\n                else if ((row === numRows - 2) && (column === 0) && ((numColumns & 0x03) !== 0) && !corner2Read) {\n                    result[resultOffset++] = this.readCorner2(numRows, numColumns) & 0xff;\n                    row -= 2;\n                    column += 2;\n                    corner2Read = true;\n                }\n                else if ((row === numRows + 4) && (column === 2) && ((numColumns & 0x07) === 0) && !corner3Read) {\n                    result[resultOffset++] = this.readCorner3(numRows, numColumns) & 0xff;\n                    row -= 2;\n                    column += 2;\n                    corner3Read = true;\n                }\n                else if ((row === numRows - 2) && (column === 0) && ((numColumns & 0x07) === 4) && !corner4Read) {\n                    result[resultOffset++] = this.readCorner4(numRows, numColumns) & 0xff;\n                    row -= 2;\n                    column += 2;\n                    corner4Read = true;\n                }\n                else {\n                    // Sweep upward diagonally to the right\n                    do {\n                        if ((row < numRows) && (column >= 0) && !this.readMappingMatrix.get(column, row)) {\n                            result[resultOffset++] = this.readUtah(row, column, numRows, numColumns) & 0xff;\n                        }\n                        row -= 2;\n                        column += 2;\n                    } while ((row >= 0) && (column < numColumns));\n                    row += 1;\n                    column += 3;\n                    // Sweep downward diagonally to the left\n                    do {\n                        if ((row >= 0) && (column < numColumns) && !this.readMappingMatrix.get(column, row)) {\n                            result[resultOffset++] = this.readUtah(row, column, numRows, numColumns) & 0xff;\n                        }\n                        row += 2;\n                        column -= 2;\n                    } while ((row < numRows) && (column >= 0));\n                    row += 3;\n                    column += 1;\n                }\n            } while ((row < numRows) || (column < numColumns));\n            if (resultOffset !== this.version.getTotalCodewords()) {\n                throw new FormatException();\n            }\n            return result;\n        }\n        /**\n         * <p>Reads a bit of the mapping matrix accounting for boundary wrapping.</p>\n         *\n         * @param row Row to read in the mapping matrix\n         * @param column Column to read in the mapping matrix\n         * @param numRows Number of rows in the mapping matrix\n         * @param numColumns Number of columns in the mapping matrix\n         * @return value of the given bit in the mapping matrix\n         */\n        readModule(row, column, numRows, numColumns) {\n            // Adjust the row and column indices based on boundary wrapping\n            if (row < 0) {\n                row += numRows;\n                column += 4 - ((numRows + 4) & 0x07);\n            }\n            if (column < 0) {\n                column += numColumns;\n                row += 4 - ((numColumns + 4) & 0x07);\n            }\n            this.readMappingMatrix.set(column, row);\n            return this.mappingBitMatrix.get(column, row);\n        }\n        /**\n         * <p>Reads the 8 bits of the standard Utah-shaped pattern.</p>\n         *\n         * <p>See ISO 16022:2006, 5.8.1 Figure 6</p>\n         *\n         * @param row Current row in the mapping matrix, anchored at the 8th bit (LSB) of the pattern\n         * @param column Current column in the mapping matrix, anchored at the 8th bit (LSB) of the pattern\n         * @param numRows Number of rows in the mapping matrix\n         * @param numColumns Number of columns in the mapping matrix\n         * @return byte from the utah shape\n         */\n        readUtah(row, column, numRows, numColumns) {\n            let currentByte = 0;\n            if (this.readModule(row - 2, column - 2, numRows, numColumns)) {\n                currentByte |= 1;\n            }\n            currentByte <<= 1;\n            if (this.readModule(row - 2, column - 1, numRows, numColumns)) {\n                currentByte |= 1;\n            }\n            currentByte <<= 1;\n            if (this.readModule(row - 1, column - 2, numRows, numColumns)) {\n                currentByte |= 1;\n            }\n            currentByte <<= 1;\n            if (this.readModule(row - 1, column - 1, numRows, numColumns)) {\n                currentByte |= 1;\n            }\n            currentByte <<= 1;\n            if (this.readModule(row - 1, column, numRows, numColumns)) {\n                currentByte |= 1;\n            }\n            currentByte <<= 1;\n            if (this.readModule(row, column - 2, numRows, numColumns)) {\n                currentByte |= 1;\n            }\n            currentByte <<= 1;\n            if (this.readModule(row, column - 1, numRows, numColumns)) {\n                currentByte |= 1;\n            }\n            currentByte <<= 1;\n            if (this.readModule(row, column, numRows, numColumns)) {\n                currentByte |= 1;\n            }\n            return currentByte;\n        }\n        /**\n         * <p>Reads the 8 bits of the special corner condition 1.</p>\n         *\n         * <p>See ISO 16022:2006, Figure F.3</p>\n         *\n         * @param numRows Number of rows in the mapping matrix\n         * @param numColumns Number of columns in the mapping matrix\n         * @return byte from the Corner condition 1\n         */\n        readCorner1(numRows, numColumns) {\n            let currentByte = 0;\n            if (this.readModule(numRows - 1, 0, numRows, numColumns)) {\n                currentByte |= 1;\n            }\n            currentByte <<= 1;\n            if (this.readModule(numRows - 1, 1, numRows, numColumns)) {\n                currentByte |= 1;\n            }\n            currentByte <<= 1;\n            if (this.readModule(numRows - 1, 2, numRows, numColumns)) {\n                currentByte |= 1;\n            }\n            currentByte <<= 1;\n            if (this.readModule(0, numColumns - 2, numRows, numColumns)) {\n                currentByte |= 1;\n            }\n            currentByte <<= 1;\n            if (this.readModule(0, numColumns - 1, numRows, numColumns)) {\n                currentByte |= 1;\n            }\n            currentByte <<= 1;\n            if (this.readModule(1, numColumns - 1, numRows, numColumns)) {\n                currentByte |= 1;\n            }\n            currentByte <<= 1;\n            if (this.readModule(2, numColumns - 1, numRows, numColumns)) {\n                currentByte |= 1;\n            }\n            currentByte <<= 1;\n            if (this.readModule(3, numColumns - 1, numRows, numColumns)) {\n                currentByte |= 1;\n            }\n            return currentByte;\n        }\n        /**\n         * <p>Reads the 8 bits of the special corner condition 2.</p>\n         *\n         * <p>See ISO 16022:2006, Figure F.4</p>\n         *\n         * @param numRows Number of rows in the mapping matrix\n         * @param numColumns Number of columns in the mapping matrix\n         * @return byte from the Corner condition 2\n         */\n        readCorner2(numRows, numColumns) {\n            let currentByte = 0;\n            if (this.readModule(numRows - 3, 0, numRows, numColumns)) {\n                currentByte |= 1;\n            }\n            currentByte <<= 1;\n            if (this.readModule(numRows - 2, 0, numRows, numColumns)) {\n                currentByte |= 1;\n            }\n            currentByte <<= 1;\n            if (this.readModule(numRows - 1, 0, numRows, numColumns)) {\n                currentByte |= 1;\n            }\n            currentByte <<= 1;\n            if (this.readModule(0, numColumns - 4, numRows, numColumns)) {\n                currentByte |= 1;\n            }\n            currentByte <<= 1;\n            if (this.readModule(0, numColumns - 3, numRows, numColumns)) {\n                currentByte |= 1;\n            }\n            currentByte <<= 1;\n            if (this.readModule(0, numColumns - 2, numRows, numColumns)) {\n                currentByte |= 1;\n            }\n            currentByte <<= 1;\n            if (this.readModule(0, numColumns - 1, numRows, numColumns)) {\n                currentByte |= 1;\n            }\n            currentByte <<= 1;\n            if (this.readModule(1, numColumns - 1, numRows, numColumns)) {\n                currentByte |= 1;\n            }\n            return currentByte;\n        }\n        /**\n         * <p>Reads the 8 bits of the special corner condition 3.</p>\n         *\n         * <p>See ISO 16022:2006, Figure F.5</p>\n         *\n         * @param numRows Number of rows in the mapping matrix\n         * @param numColumns Number of columns in the mapping matrix\n         * @return byte from the Corner condition 3\n         */\n        readCorner3(numRows, numColumns) {\n            let currentByte = 0;\n            if (this.readModule(numRows - 1, 0, numRows, numColumns)) {\n                currentByte |= 1;\n            }\n            currentByte <<= 1;\n            if (this.readModule(numRows - 1, numColumns - 1, numRows, numColumns)) {\n                currentByte |= 1;\n            }\n            currentByte <<= 1;\n            if (this.readModule(0, numColumns - 3, numRows, numColumns)) {\n                currentByte |= 1;\n            }\n            currentByte <<= 1;\n            if (this.readModule(0, numColumns - 2, numRows, numColumns)) {\n                currentByte |= 1;\n            }\n            currentByte <<= 1;\n            if (this.readModule(0, numColumns - 1, numRows, numColumns)) {\n                currentByte |= 1;\n            }\n            currentByte <<= 1;\n            if (this.readModule(1, numColumns - 3, numRows, numColumns)) {\n                currentByte |= 1;\n            }\n            currentByte <<= 1;\n            if (this.readModule(1, numColumns - 2, numRows, numColumns)) {\n                currentByte |= 1;\n            }\n            currentByte <<= 1;\n            if (this.readModule(1, numColumns - 1, numRows, numColumns)) {\n                currentByte |= 1;\n            }\n            return currentByte;\n        }\n        /**\n         * <p>Reads the 8 bits of the special corner condition 4.</p>\n         *\n         * <p>See ISO 16022:2006, Figure F.6</p>\n         *\n         * @param numRows Number of rows in the mapping matrix\n         * @param numColumns Number of columns in the mapping matrix\n         * @return byte from the Corner condition 4\n         */\n        readCorner4(numRows, numColumns) {\n            let currentByte = 0;\n            if (this.readModule(numRows - 3, 0, numRows, numColumns)) {\n                currentByte |= 1;\n            }\n            currentByte <<= 1;\n            if (this.readModule(numRows - 2, 0, numRows, numColumns)) {\n                currentByte |= 1;\n            }\n            currentByte <<= 1;\n            if (this.readModule(numRows - 1, 0, numRows, numColumns)) {\n                currentByte |= 1;\n            }\n            currentByte <<= 1;\n            if (this.readModule(0, numColumns - 2, numRows, numColumns)) {\n                currentByte |= 1;\n            }\n            currentByte <<= 1;\n            if (this.readModule(0, numColumns - 1, numRows, numColumns)) {\n                currentByte |= 1;\n            }\n            currentByte <<= 1;\n            if (this.readModule(1, numColumns - 1, numRows, numColumns)) {\n                currentByte |= 1;\n            }\n            currentByte <<= 1;\n            if (this.readModule(2, numColumns - 1, numRows, numColumns)) {\n                currentByte |= 1;\n            }\n            currentByte <<= 1;\n            if (this.readModule(3, numColumns - 1, numRows, numColumns)) {\n                currentByte |= 1;\n            }\n            return currentByte;\n        }\n        /**\n         * <p>Extracts the data region from a {@link BitMatrix} that contains\n         * alignment patterns.</p>\n         *\n         * @param bitMatrix Original {@link BitMatrix} with alignment patterns\n         * @return BitMatrix that has the alignment patterns removed\n         */\n        extractDataRegion(bitMatrix) {\n            const symbolSizeRows = this.version.getSymbolSizeRows();\n            const symbolSizeColumns = this.version.getSymbolSizeColumns();\n            if (bitMatrix.getHeight() !== symbolSizeRows) {\n                throw new IllegalArgumentException('Dimension of bitMatrix must match the version size');\n            }\n            const dataRegionSizeRows = this.version.getDataRegionSizeRows();\n            const dataRegionSizeColumns = this.version.getDataRegionSizeColumns();\n            const numDataRegionsRow = symbolSizeRows / dataRegionSizeRows | 0;\n            const numDataRegionsColumn = symbolSizeColumns / dataRegionSizeColumns | 0;\n            const sizeDataRegionRow = numDataRegionsRow * dataRegionSizeRows;\n            const sizeDataRegionColumn = numDataRegionsColumn * dataRegionSizeColumns;\n            const bitMatrixWithoutAlignment = new BitMatrix(sizeDataRegionColumn, sizeDataRegionRow);\n            for (let dataRegionRow = 0; dataRegionRow < numDataRegionsRow; ++dataRegionRow) {\n                const dataRegionRowOffset = dataRegionRow * dataRegionSizeRows;\n                for (let dataRegionColumn = 0; dataRegionColumn < numDataRegionsColumn; ++dataRegionColumn) {\n                    const dataRegionColumnOffset = dataRegionColumn * dataRegionSizeColumns;\n                    for (let i = 0; i < dataRegionSizeRows; ++i) {\n                        const readRowOffset = dataRegionRow * (dataRegionSizeRows + 2) + 1 + i;\n                        const writeRowOffset = dataRegionRowOffset + i;\n                        for (let j = 0; j < dataRegionSizeColumns; ++j) {\n                            const readColumnOffset = dataRegionColumn * (dataRegionSizeColumns + 2) + 1 + j;\n                            if (bitMatrix.get(readColumnOffset, readRowOffset)) {\n                                const writeColumnOffset = dataRegionColumnOffset + j;\n                                bitMatrixWithoutAlignment.set(writeColumnOffset, writeRowOffset);\n                            }\n                        }\n                    }\n                }\n            }\n            return bitMatrixWithoutAlignment;\n        }\n    }\n\n    /**\n     * <p>Encapsulates a block of data within a Data Matrix Code. Data Matrix Codes may split their data into\n     * multiple blocks, each of which is a unit of data and error-correction codewords. Each\n     * is represented by an instance of this class.</p>\n     *\n     * @author bbrown@google.com (Brian Brown)\n     */\n    class DataBlock {\n        constructor(numDataCodewords, codewords) {\n            this.numDataCodewords = numDataCodewords;\n            this.codewords = codewords;\n        }\n        /**\n         * <p>When Data Matrix Codes use multiple data blocks, they actually interleave the bytes of each of them.\n         * That is, the first byte of data block 1 to n is written, then the second bytes, and so on. This\n         * method will separate the data into original blocks.</p>\n         *\n         * @param rawCodewords bytes as read directly from the Data Matrix Code\n         * @param version version of the Data Matrix Code\n         * @return DataBlocks containing original bytes, \"de-interleaved\" from representation in the\n         *         Data Matrix Code\n         */\n        static getDataBlocks(rawCodewords, version) {\n            // Figure out the number and size of data blocks used by this version\n            const ecBlocks = version.getECBlocks();\n            // First count the total number of data blocks\n            let totalBlocks = 0;\n            const ecBlockArray = ecBlocks.getECBlocks();\n            for (let ecBlock of ecBlockArray) {\n                totalBlocks += ecBlock.getCount();\n            }\n            // Now establish DataBlocks of the appropriate size and number of data codewords\n            const result = new Array(totalBlocks);\n            let numResultBlocks = 0;\n            for (let ecBlock of ecBlockArray) {\n                for (let i = 0; i < ecBlock.getCount(); i++) {\n                    const numDataCodewords = ecBlock.getDataCodewords();\n                    const numBlockCodewords = ecBlocks.getECCodewords() + numDataCodewords;\n                    result[numResultBlocks++] = new DataBlock(numDataCodewords, new Uint8Array(numBlockCodewords));\n                }\n            }\n            // All blocks have the same amount of data, except that the last n\n            // (where n may be 0) have 1 less byte. Figure out where these start.\n            // TODO(bbrown): There is only one case where there is a difference for Data Matrix for size 144\n            const longerBlocksTotalCodewords = result[0].codewords.length;\n            // int shorterBlocksTotalCodewords = longerBlocksTotalCodewords - 1;\n            const longerBlocksNumDataCodewords = longerBlocksTotalCodewords - ecBlocks.getECCodewords();\n            const shorterBlocksNumDataCodewords = longerBlocksNumDataCodewords - 1;\n            // The last elements of result may be 1 element shorter for 144 matrix\n            // first fill out as many elements as all of them have minus 1\n            let rawCodewordsOffset = 0;\n            for (let i = 0; i < shorterBlocksNumDataCodewords; i++) {\n                for (let j = 0; j < numResultBlocks; j++) {\n                    result[j].codewords[i] = rawCodewords[rawCodewordsOffset++];\n                }\n            }\n            // Fill out the last data block in the longer ones\n            const specialVersion = version.getVersionNumber() === 24;\n            const numLongerBlocks = specialVersion ? 8 : numResultBlocks;\n            for (let j = 0; j < numLongerBlocks; j++) {\n                result[j].codewords[longerBlocksNumDataCodewords - 1] = rawCodewords[rawCodewordsOffset++];\n            }\n            // Now add in error correction blocks\n            const max = result[0].codewords.length;\n            for (let i = longerBlocksNumDataCodewords; i < max; i++) {\n                for (let j = 0; j < numResultBlocks; j++) {\n                    const jOffset = specialVersion ? (j + 8) % numResultBlocks : j;\n                    const iOffset = specialVersion && jOffset > 7 ? i - 1 : i;\n                    result[jOffset].codewords[iOffset] = rawCodewords[rawCodewordsOffset++];\n                }\n            }\n            if (rawCodewordsOffset !== rawCodewords.length) {\n                throw new IllegalArgumentException();\n            }\n            return result;\n        }\n        getNumDataCodewords() {\n            return this.numDataCodewords;\n        }\n        getCodewords() {\n            return this.codewords;\n        }\n    }\n\n    /*\n     * Copyright 2007 ZXing authors\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n    /**\n     * <p>This provides an easy abstraction to read bits at a time from a sequence of bytes, where the\n     * number of bits read is not often a multiple of 8.</p>\n     *\n     * <p>This class is thread-safe but not reentrant -- unless the caller modifies the bytes array\n     * it passed in, in which case all bets are off.</p>\n     *\n     * @author Sean Owen\n     */\n    class BitSource {\n        /**\n         * @param bytes bytes from which this will read bits. Bits will be read from the first byte first.\n         * Bits are read within a byte from most-significant to least-significant bit.\n         */\n        constructor(bytes) {\n            this.bytes = bytes;\n            this.byteOffset = 0;\n            this.bitOffset = 0;\n        }\n        /**\n         * @return index of next bit in current byte which would be read by the next call to {@link #readBits(int)}.\n         */\n        getBitOffset() {\n            return this.bitOffset;\n        }\n        /**\n         * @return index of next byte in input byte array which would be read by the next call to {@link #readBits(int)}.\n         */\n        getByteOffset() {\n            return this.byteOffset;\n        }\n        /**\n         * @param numBits number of bits to read\n         * @return int representing the bits read. The bits will appear as the least-significant\n         *         bits of the int\n         * @throws IllegalArgumentException if numBits isn't in [1,32] or more than is available\n         */\n        readBits(numBits /*int*/) {\n            if (numBits < 1 || numBits > 32 || numBits > this.available()) {\n                throw new IllegalArgumentException('' + numBits);\n            }\n            let result = 0;\n            let bitOffset = this.bitOffset;\n            let byteOffset = this.byteOffset;\n            const bytes = this.bytes;\n            // First, read remainder from current byte\n            if (bitOffset > 0) {\n                const bitsLeft = 8 - bitOffset;\n                const toRead = numBits < bitsLeft ? numBits : bitsLeft;\n                const bitsToNotRead = bitsLeft - toRead;\n                const mask = (0xFF >> (8 - toRead)) << bitsToNotRead;\n                result = (bytes[byteOffset] & mask) >> bitsToNotRead;\n                numBits -= toRead;\n                bitOffset += toRead;\n                if (bitOffset === 8) {\n                    bitOffset = 0;\n                    byteOffset++;\n                }\n            }\n            // Next read whole bytes\n            if (numBits > 0) {\n                while (numBits >= 8) {\n                    result = (result << 8) | (bytes[byteOffset] & 0xFF);\n                    byteOffset++;\n                    numBits -= 8;\n                }\n                // Finally read a partial byte\n                if (numBits > 0) {\n                    const bitsToNotRead = 8 - numBits;\n                    const mask = (0xFF >> bitsToNotRead) << bitsToNotRead;\n                    result = (result << numBits) | ((bytes[byteOffset] & mask) >> bitsToNotRead);\n                    bitOffset += numBits;\n                }\n            }\n            this.bitOffset = bitOffset;\n            this.byteOffset = byteOffset;\n            return result;\n        }\n        /**\n         * @return number of bits that can be read successfully\n         */\n        available() {\n            return 8 * (this.bytes.length - this.byteOffset) - this.bitOffset;\n        }\n    }\n\n    var Mode;\n    (function (Mode) {\n        Mode[Mode[\"PAD_ENCODE\"] = 0] = \"PAD_ENCODE\";\n        Mode[Mode[\"ASCII_ENCODE\"] = 1] = \"ASCII_ENCODE\";\n        Mode[Mode[\"C40_ENCODE\"] = 2] = \"C40_ENCODE\";\n        Mode[Mode[\"TEXT_ENCODE\"] = 3] = \"TEXT_ENCODE\";\n        Mode[Mode[\"ANSIX12_ENCODE\"] = 4] = \"ANSIX12_ENCODE\";\n        Mode[Mode[\"EDIFACT_ENCODE\"] = 5] = \"EDIFACT_ENCODE\";\n        Mode[Mode[\"BASE256_ENCODE\"] = 6] = \"BASE256_ENCODE\";\n    })(Mode || (Mode = {}));\n    /**\n     * <p>Data Matrix Codes can encode text as bits in one of several modes, and can use multiple modes\n     * in one Data Matrix Code. This class decodes the bits back into text.</p>\n     *\n     * <p>See ISO 16022:2006, 5.2.1 - 5.2.9.2</p>\n     *\n     * @author bbrown@google.com (Brian Brown)\n     * @author Sean Owen\n     */\n    class DecodedBitStreamParser {\n        static decode(bytes) {\n            const bits = new BitSource(bytes);\n            const result = new StringBuilder();\n            const resultTrailer = new StringBuilder();\n            const byteSegments = new Array();\n            let mode = Mode.ASCII_ENCODE;\n            do {\n                if (mode === Mode.ASCII_ENCODE) {\n                    mode = this.decodeAsciiSegment(bits, result, resultTrailer);\n                }\n                else {\n                    switch (mode) {\n                        case Mode.C40_ENCODE:\n                            this.decodeC40Segment(bits, result);\n                            break;\n                        case Mode.TEXT_ENCODE:\n                            this.decodeTextSegment(bits, result);\n                            break;\n                        case Mode.ANSIX12_ENCODE:\n                            this.decodeAnsiX12Segment(bits, result);\n                            break;\n                        case Mode.EDIFACT_ENCODE:\n                            this.decodeEdifactSegment(bits, result);\n                            break;\n                        case Mode.BASE256_ENCODE:\n                            this.decodeBase256Segment(bits, result, byteSegments);\n                            break;\n                        default:\n                            throw new FormatException();\n                    }\n                    mode = Mode.ASCII_ENCODE;\n                }\n            } while (mode !== Mode.PAD_ENCODE && bits.available() > 0);\n            if (resultTrailer.length() > 0) {\n                result.append(resultTrailer.toString());\n            }\n            return new DecoderResult(bytes, result.toString(), byteSegments.length === 0 ? null : byteSegments, null);\n        }\n        /**\n         * See ISO 16022:2006, 5.2.3 and Annex C, Table C.2\n         */\n        static decodeAsciiSegment(bits, result, resultTrailer) {\n            let upperShift = false;\n            do {\n                let oneByte = bits.readBits(8);\n                if (oneByte === 0) {\n                    throw new FormatException();\n                }\n                else if (oneByte <= 128) { // ASCII data (ASCII value + 1)\n                    if (upperShift) {\n                        oneByte += 128;\n                        // upperShift = false;\n                    }\n                    result.append(String.fromCharCode(oneByte - 1));\n                    return Mode.ASCII_ENCODE;\n                }\n                else if (oneByte === 129) { // Pad\n                    return Mode.PAD_ENCODE;\n                }\n                else if (oneByte <= 229) { // 2-digit data 00-99 (Numeric Value + 130)\n                    const value = oneByte - 130;\n                    if (value < 10) { // pad with '0' for single digit values\n                        result.append('0');\n                    }\n                    result.append('' + value);\n                }\n                else {\n                    switch (oneByte) {\n                        case 230: // Latch to C40 encodation\n                            return Mode.C40_ENCODE;\n                        case 231: // Latch to Base 256 encodation\n                            return Mode.BASE256_ENCODE;\n                        case 232: // FNC1\n                            result.append(String.fromCharCode(29)); // translate as ASCII 29\n                            break;\n                        case 233: // Structured Append\n                        case 234: // Reader Programming\n                            // Ignore these symbols for now\n                            // throw ReaderException.getInstance();\n                            break;\n                        case 235: // Upper Shift (shift to Extended ASCII)\n                            upperShift = true;\n                            break;\n                        case 236: // 05 Macro\n                            result.append('[)>\\u001E05\\u001D');\n                            resultTrailer.insert(0, '\\u001E\\u0004');\n                            break;\n                        case 237: // 06 Macro\n                            result.append('[)>\\u001E06\\u001D');\n                            resultTrailer.insert(0, '\\u001E\\u0004');\n                            break;\n                        case 238: // Latch to ANSI X12 encodation\n                            return Mode.ANSIX12_ENCODE;\n                        case 239: // Latch to Text encodation\n                            return Mode.TEXT_ENCODE;\n                        case 240: // Latch to EDIFACT encodation\n                            return Mode.EDIFACT_ENCODE;\n                        case 241: // ECI Character\n                            // TODO(bbrown): I think we need to support ECI\n                            // throw ReaderException.getInstance();\n                            // Ignore this symbol for now\n                            break;\n                        default:\n                            // Not to be used in ASCII encodation\n                            // but work around encoders that end with 254, latch back to ASCII\n                            if (oneByte !== 254 || bits.available() !== 0) {\n                                throw new FormatException();\n                            }\n                            break;\n                    }\n                }\n            } while (bits.available() > 0);\n            return Mode.ASCII_ENCODE;\n        }\n        /**\n         * See ISO 16022:2006, 5.2.5 and Annex C, Table C.1\n         */\n        static decodeC40Segment(bits, result) {\n            // Three C40 values are encoded in a 16-bit value as\n            // (1600 * C1) + (40 * C2) + C3 + 1\n            // TODO(bbrown): The Upper Shift with C40 doesn't work in the 4 value scenario all the time\n            let upperShift = false;\n            const cValues = [];\n            let shift = 0;\n            do {\n                // If there is only one byte left then it will be encoded as ASCII\n                if (bits.available() === 8) {\n                    return;\n                }\n                const firstByte = bits.readBits(8);\n                if (firstByte === 254) { // Unlatch codeword\n                    return;\n                }\n                this.parseTwoBytes(firstByte, bits.readBits(8), cValues);\n                for (let i = 0; i < 3; i++) {\n                    const cValue = cValues[i];\n                    switch (shift) {\n                        case 0:\n                            if (cValue < 3) {\n                                shift = cValue + 1;\n                            }\n                            else if (cValue < this.C40_BASIC_SET_CHARS.length) {\n                                const c40char = this.C40_BASIC_SET_CHARS[cValue];\n                                if (upperShift) {\n                                    result.append(String.fromCharCode(c40char.charCodeAt(0) + 128));\n                                    upperShift = false;\n                                }\n                                else {\n                                    result.append(c40char);\n                                }\n                            }\n                            else {\n                                throw new FormatException();\n                            }\n                            break;\n                        case 1:\n                            if (upperShift) {\n                                result.append(String.fromCharCode(cValue + 128));\n                                upperShift = false;\n                            }\n                            else {\n                                result.append(String.fromCharCode(cValue));\n                            }\n                            shift = 0;\n                            break;\n                        case 2:\n                            if (cValue < this.C40_SHIFT2_SET_CHARS.length) {\n                                const c40char = this.C40_SHIFT2_SET_CHARS[cValue];\n                                if (upperShift) {\n                                    result.append(String.fromCharCode(c40char.charCodeAt(0) + 128));\n                                    upperShift = false;\n                                }\n                                else {\n                                    result.append(c40char);\n                                }\n                            }\n                            else {\n                                switch (cValue) {\n                                    case 27: // FNC1\n                                        result.append(String.fromCharCode(29)); // translate as ASCII 29\n                                        break;\n                                    case 30: // Upper Shift\n                                        upperShift = true;\n                                        break;\n                                    default:\n                                        throw new FormatException();\n                                }\n                            }\n                            shift = 0;\n                            break;\n                        case 3:\n                            if (upperShift) {\n                                result.append(String.fromCharCode(cValue + 224));\n                                upperShift = false;\n                            }\n                            else {\n                                result.append(String.fromCharCode(cValue + 96));\n                            }\n                            shift = 0;\n                            break;\n                        default:\n                            throw new FormatException();\n                    }\n                }\n            } while (bits.available() > 0);\n        }\n        /**\n         * See ISO 16022:2006, 5.2.6 and Annex C, Table C.2\n         */\n        static decodeTextSegment(bits, result) {\n            // Three Text values are encoded in a 16-bit value as\n            // (1600 * C1) + (40 * C2) + C3 + 1\n            // TODO(bbrown): The Upper Shift with Text doesn't work in the 4 value scenario all the time\n            let upperShift = false;\n            let cValues = [];\n            let shift = 0;\n            do {\n                // If there is only one byte left then it will be encoded as ASCII\n                if (bits.available() === 8) {\n                    return;\n                }\n                const firstByte = bits.readBits(8);\n                if (firstByte === 254) { // Unlatch codeword\n                    return;\n                }\n                this.parseTwoBytes(firstByte, bits.readBits(8), cValues);\n                for (let i = 0; i < 3; i++) {\n                    const cValue = cValues[i];\n                    switch (shift) {\n                        case 0:\n                            if (cValue < 3) {\n                                shift = cValue + 1;\n                            }\n                            else if (cValue < this.TEXT_BASIC_SET_CHARS.length) {\n                                const textChar = this.TEXT_BASIC_SET_CHARS[cValue];\n                                if (upperShift) {\n                                    result.append(String.fromCharCode(textChar.charCodeAt(0) + 128));\n                                    upperShift = false;\n                                }\n                                else {\n                                    result.append(textChar);\n                                }\n                            }\n                            else {\n                                throw new FormatException();\n                            }\n                            break;\n                        case 1:\n                            if (upperShift) {\n                                result.append(String.fromCharCode(cValue + 128));\n                                upperShift = false;\n                            }\n                            else {\n                                result.append(String.fromCharCode(cValue));\n                            }\n                            shift = 0;\n                            break;\n                        case 2:\n                            // Shift 2 for Text is the same encoding as C40\n                            if (cValue < this.TEXT_SHIFT2_SET_CHARS.length) {\n                                const textChar = this.TEXT_SHIFT2_SET_CHARS[cValue];\n                                if (upperShift) {\n                                    result.append(String.fromCharCode(textChar.charCodeAt(0) + 128));\n                                    upperShift = false;\n                                }\n                                else {\n                                    result.append(textChar);\n                                }\n                            }\n                            else {\n                                switch (cValue) {\n                                    case 27: // FNC1\n                                        result.append(String.fromCharCode(29)); // translate as ASCII 29\n                                        break;\n                                    case 30: // Upper Shift\n                                        upperShift = true;\n                                        break;\n                                    default:\n                                        throw new FormatException();\n                                }\n                            }\n                            shift = 0;\n                            break;\n                        case 3:\n                            if (cValue < this.TEXT_SHIFT3_SET_CHARS.length) {\n                                const textChar = this.TEXT_SHIFT3_SET_CHARS[cValue];\n                                if (upperShift) {\n                                    result.append(String.fromCharCode(textChar.charCodeAt(0) + 128));\n                                    upperShift = false;\n                                }\n                                else {\n                                    result.append(textChar);\n                                }\n                                shift = 0;\n                            }\n                            else {\n                                throw new FormatException();\n                            }\n                            break;\n                        default:\n                            throw new FormatException();\n                    }\n                }\n            } while (bits.available() > 0);\n        }\n        /**\n         * See ISO 16022:2006, 5.2.7\n         */\n        static decodeAnsiX12Segment(bits, result) {\n            // Three ANSI X12 values are encoded in a 16-bit value as\n            // (1600 * C1) + (40 * C2) + C3 + 1\n            const cValues = [];\n            do {\n                // If there is only one byte left then it will be encoded as ASCII\n                if (bits.available() === 8) {\n                    return;\n                }\n                const firstByte = bits.readBits(8);\n                if (firstByte === 254) { // Unlatch codeword\n                    return;\n                }\n                this.parseTwoBytes(firstByte, bits.readBits(8), cValues);\n                for (let i = 0; i < 3; i++) {\n                    const cValue = cValues[i];\n                    switch (cValue) {\n                        case 0: // X12 segment terminator <CR>\n                            result.append('\\r');\n                            break;\n                        case 1: // X12 segment separator *\n                            result.append('*');\n                            break;\n                        case 2: // X12 sub-element separator >\n                            result.append('>');\n                            break;\n                        case 3: // space\n                            result.append(' ');\n                            break;\n                        default:\n                            if (cValue < 14) { // 0 - 9\n                                result.append(String.fromCharCode(cValue + 44));\n                            }\n                            else if (cValue < 40) { // A - Z\n                                result.append(String.fromCharCode(cValue + 51));\n                            }\n                            else {\n                                throw new FormatException();\n                            }\n                            break;\n                    }\n                }\n            } while (bits.available() > 0);\n        }\n        static parseTwoBytes(firstByte, secondByte, result) {\n            let fullBitValue = (firstByte << 8) + secondByte - 1;\n            let temp = Math.floor(fullBitValue / 1600);\n            result[0] = temp;\n            fullBitValue -= temp * 1600;\n            temp = Math.floor(fullBitValue / 40);\n            result[1] = temp;\n            result[2] = fullBitValue - temp * 40;\n        }\n        /**\n         * See ISO 16022:2006, 5.2.8 and Annex C Table C.3\n         */\n        static decodeEdifactSegment(bits, result) {\n            do {\n                // If there is only two or less bytes left then it will be encoded as ASCII\n                if (bits.available() <= 16) {\n                    return;\n                }\n                for (let i = 0; i < 4; i++) {\n                    let edifactValue = bits.readBits(6);\n                    // Check for the unlatch character\n                    if (edifactValue === 0x1F) { // 011111\n                        // Read rest of byte, which should be 0, and stop\n                        const bitsLeft = 8 - bits.getBitOffset();\n                        if (bitsLeft !== 8) {\n                            bits.readBits(bitsLeft);\n                        }\n                        return;\n                    }\n                    if ((edifactValue & 0x20) === 0) { // no 1 in the leading (6th) bit\n                        edifactValue |= 0x40; // Add a leading 01 to the 6 bit binary value\n                    }\n                    result.append(String.fromCharCode(edifactValue));\n                }\n            } while (bits.available() > 0);\n        }\n        /**\n         * See ISO 16022:2006, 5.2.9 and Annex B, B.2\n         */\n        static decodeBase256Segment(bits, result, byteSegments) {\n            // Figure out how long the Base 256 Segment is.\n            let codewordPosition = 1 + bits.getByteOffset(); // position is 1-indexed\n            const d1 = this.unrandomize255State(bits.readBits(8), codewordPosition++);\n            let count;\n            if (d1 === 0) { // Read the remainder of the symbol\n                count = bits.available() / 8 | 0;\n            }\n            else if (d1 < 250) {\n                count = d1;\n            }\n            else {\n                count = 250 * (d1 - 249) + this.unrandomize255State(bits.readBits(8), codewordPosition++);\n            }\n            // We're seeing NegativeArraySizeException errors from users.\n            if (count < 0) {\n                throw new FormatException();\n            }\n            const bytes = new Uint8Array(count);\n            for (let i = 0; i < count; i++) {\n                // Have seen this particular error in the wild, such as at\n                // http://www.bcgen.com/demo/IDAutomationStreamingDataMatrix.aspx?MODE=3&D=Fred&PFMT=3&PT=F&X=0.3&O=0&LM=0.2\n                if (bits.available() < 8) {\n                    throw new FormatException();\n                }\n                bytes[i] = this.unrandomize255State(bits.readBits(8), codewordPosition++);\n            }\n            byteSegments.push(bytes);\n            try {\n                result.append(StringEncoding.decode(bytes, StringUtils.ISO88591));\n            }\n            catch (uee) {\n                throw new IllegalStateException('Platform does not support required encoding: ' + uee.message);\n            }\n        }\n        /**\n         * See ISO 16022:2006, Annex B, B.2\n         */\n        static unrandomize255State(randomizedBase256Codeword, base256CodewordPosition) {\n            const pseudoRandomNumber = ((149 * base256CodewordPosition) % 255) + 1;\n            const tempVariable = randomizedBase256Codeword - pseudoRandomNumber;\n            return tempVariable >= 0 ? tempVariable : tempVariable + 256;\n        }\n    }\n    /**\n     * See ISO 16022:2006, Annex C Table C.1\n     * The C40 Basic Character Set (*'s used for placeholders for the shift values)\n     */\n    DecodedBitStreamParser.C40_BASIC_SET_CHARS = [\n        '*', '*', '*', ' ', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n        'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N',\n        'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'\n    ];\n    DecodedBitStreamParser.C40_SHIFT2_SET_CHARS = [\n        '!', '\"', '#', '$', '%', '&', '\\'', '(', ')', '*', '+', ',', '-', '.',\n        '/', ':', ';', '<', '=', '>', '?', '@', '[', '\\\\', ']', '^', '_'\n    ];\n    /**\n     * See ISO 16022:2006, Annex C Table C.2\n     * The Text Basic Character Set (*'s used for placeholders for the shift values)\n     */\n    DecodedBitStreamParser.TEXT_BASIC_SET_CHARS = [\n        '*', '*', '*', ' ', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n        'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n        'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'\n    ];\n    // Shift 2 for Text is the same encoding as C40\n    DecodedBitStreamParser.TEXT_SHIFT2_SET_CHARS = DecodedBitStreamParser.C40_SHIFT2_SET_CHARS;\n    DecodedBitStreamParser.TEXT_SHIFT3_SET_CHARS = [\n        '`', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N',\n        'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '{', '|', '}', '~', String.fromCharCode(127)\n    ];\n\n    /*\n     * Copyright 2007 ZXing authors\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n    /**\n     * <p>The main class which implements Data Matrix Code decoding -- as opposed to locating and extracting\n     * the Data Matrix Code from an image.</p>\n     *\n     * @author bbrown@google.com (Brian Brown)\n     */\n    class Decoder$1 {\n        constructor() {\n            this.rsDecoder = new ReedSolomonDecoder(GenericGF.DATA_MATRIX_FIELD_256);\n        }\n        /**\n         * <p>Decodes a Data Matrix Code represented as a {@link BitMatrix}. A 1 or \"true\" is taken\n         * to mean a black module.</p>\n         *\n         * @param bits booleans representing white/black Data Matrix Code modules\n         * @return text and bytes encoded within the Data Matrix Code\n         * @throws FormatException if the Data Matrix Code cannot be decoded\n         * @throws ChecksumException if error correction fails\n         */\n        decode(bits) {\n            // Construct a parser and read version, error-correction level\n            const parser = new BitMatrixParser(bits);\n            const version = parser.getVersion();\n            // Read codewords\n            const codewords = parser.readCodewords();\n            // Separate into data blocks\n            const dataBlocks = DataBlock.getDataBlocks(codewords, version);\n            // Count total number of data bytes\n            let totalBytes = 0;\n            for (let db of dataBlocks) {\n                totalBytes += db.getNumDataCodewords();\n            }\n            const resultBytes = new Uint8Array(totalBytes);\n            const dataBlocksCount = dataBlocks.length;\n            // Error-correct and copy data blocks together into a stream of bytes\n            for (let j = 0; j < dataBlocksCount; j++) {\n                const dataBlock = dataBlocks[j];\n                const codewordBytes = dataBlock.getCodewords();\n                const numDataCodewords = dataBlock.getNumDataCodewords();\n                this.correctErrors(codewordBytes, numDataCodewords);\n                for (let i = 0; i < numDataCodewords; i++) {\n                    // De-interlace data blocks.\n                    resultBytes[i * dataBlocksCount + j] = codewordBytes[i];\n                }\n            }\n            // Decode the contents of that stream of bytes\n            return DecodedBitStreamParser.decode(resultBytes);\n        }\n        /**\n         * <p>Given data and error-correction codewords received, possibly corrupted by errors, attempts to\n         * correct the errors in-place using Reed-Solomon error correction.</p>\n         *\n         * @param codewordBytes data and error correction codewords\n         * @param numDataCodewords number of codewords that are data bytes\n         * @throws ChecksumException if error correction fails\n         */\n        correctErrors(codewordBytes, numDataCodewords) {\n            // const numCodewords = codewordBytes.length;\n            // First read into an array of ints\n            const codewordsInts = new Int32Array(codewordBytes);\n            // for (let i = 0; i < numCodewords; i++) {\n            //   codewordsInts[i] = codewordBytes[i] & 0xFF;\n            // }\n            try {\n                this.rsDecoder.decode(codewordsInts, codewordBytes.length - numDataCodewords);\n            }\n            catch (ignored /* ReedSolomonException */) {\n                throw new ChecksumException();\n            }\n            // Copy back into array of bytes -- only need to worry about the bytes that were data\n            // We don't care about errors in the error-correction codewords\n            for (let i = 0; i < numDataCodewords; i++) {\n                codewordBytes[i] = codewordsInts[i];\n            }\n        }\n    }\n\n    /**\n     * <p>Encapsulates logic that can detect a Data Matrix Code in an image, even if the Data Matrix Code\n     * is rotated or skewed, or partially obscured.</p>\n     *\n     * @author Sean Owen\n     */\n    class Detector$1 {\n        constructor(image) {\n            this.image = image;\n            this.rectangleDetector = new WhiteRectangleDetector(this.image);\n        }\n        /**\n         * <p>Detects a Data Matrix Code in an image.</p>\n         *\n         * @return {@link DetectorResult} encapsulating results of detecting a Data Matrix Code\n         * @throws NotFoundException if no Data Matrix Code can be found\n         */\n        detect() {\n            const cornerPoints = this.rectangleDetector.detect();\n            let points = this.detectSolid1(cornerPoints);\n            points = this.detectSolid2(points);\n            points[3] = this.correctTopRight(points);\n            if (!points[3]) {\n                throw new NotFoundException();\n            }\n            points = this.shiftToModuleCenter(points);\n            const topLeft = points[0];\n            const bottomLeft = points[1];\n            const bottomRight = points[2];\n            const topRight = points[3];\n            let dimensionTop = this.transitionsBetween(topLeft, topRight) + 1;\n            let dimensionRight = this.transitionsBetween(bottomRight, topRight) + 1;\n            if ((dimensionTop & 0x01) === 1) {\n                dimensionTop += 1;\n            }\n            if ((dimensionRight & 0x01) === 1) {\n                dimensionRight += 1;\n            }\n            if (4 * dimensionTop < 7 * dimensionRight && 4 * dimensionRight < 7 * dimensionTop) {\n                // The matrix is square\n                dimensionTop = dimensionRight = Math.max(dimensionTop, dimensionRight);\n            }\n            let bits = Detector$1.sampleGrid(this.image, topLeft, bottomLeft, bottomRight, topRight, dimensionTop, dimensionRight);\n            return new DetectorResult(bits, [topLeft, bottomLeft, bottomRight, topRight]);\n        }\n        static shiftPoint(point, to, div) {\n            let x = (to.getX() - point.getX()) / (div + 1);\n            let y = (to.getY() - point.getY()) / (div + 1);\n            return new ResultPoint(point.getX() + x, point.getY() + y);\n        }\n        static moveAway(point, fromX, fromY) {\n            let x = point.getX();\n            let y = point.getY();\n            if (x < fromX) {\n                x -= 1;\n            }\n            else {\n                x += 1;\n            }\n            if (y < fromY) {\n                y -= 1;\n            }\n            else {\n                y += 1;\n            }\n            return new ResultPoint(x, y);\n        }\n        /**\n         * Detect a solid side which has minimum transition.\n         */\n        detectSolid1(cornerPoints) {\n            // 0  2\n            // 1  3\n            let pointA = cornerPoints[0];\n            let pointB = cornerPoints[1];\n            let pointC = cornerPoints[3];\n            let pointD = cornerPoints[2];\n            let trAB = this.transitionsBetween(pointA, pointB);\n            let trBC = this.transitionsBetween(pointB, pointC);\n            let trCD = this.transitionsBetween(pointC, pointD);\n            let trDA = this.transitionsBetween(pointD, pointA);\n            // 0..3\n            // :  :\n            // 1--2\n            let min = trAB;\n            let points = [pointD, pointA, pointB, pointC];\n            if (min > trBC) {\n                min = trBC;\n                points[0] = pointA;\n                points[1] = pointB;\n                points[2] = pointC;\n                points[3] = pointD;\n            }\n            if (min > trCD) {\n                min = trCD;\n                points[0] = pointB;\n                points[1] = pointC;\n                points[2] = pointD;\n                points[3] = pointA;\n            }\n            if (min > trDA) {\n                points[0] = pointC;\n                points[1] = pointD;\n                points[2] = pointA;\n                points[3] = pointB;\n            }\n            return points;\n        }\n        /**\n         * Detect a second solid side next to first solid side.\n         */\n        detectSolid2(points) {\n            // A..D\n            // :  :\n            // B--C\n            let pointA = points[0];\n            let pointB = points[1];\n            let pointC = points[2];\n            let pointD = points[3];\n            // Transition detection on the edge is not stable.\n            // To safely detect, shift the points to the module center.\n            let tr = this.transitionsBetween(pointA, pointD);\n            let pointBs = Detector$1.shiftPoint(pointB, pointC, (tr + 1) * 4);\n            let pointCs = Detector$1.shiftPoint(pointC, pointB, (tr + 1) * 4);\n            let trBA = this.transitionsBetween(pointBs, pointA);\n            let trCD = this.transitionsBetween(pointCs, pointD);\n            // 0..3\n            // |  :\n            // 1--2\n            if (trBA < trCD) {\n                // solid sides: A-B-C\n                points[0] = pointA;\n                points[1] = pointB;\n                points[2] = pointC;\n                points[3] = pointD;\n            }\n            else {\n                // solid sides: B-C-D\n                points[0] = pointB;\n                points[1] = pointC;\n                points[2] = pointD;\n                points[3] = pointA;\n            }\n            return points;\n        }\n        /**\n         * Calculates the corner position of the white top right module.\n         */\n        correctTopRight(points) {\n            // A..D\n            // |  :\n            // B--C\n            let pointA = points[0];\n            let pointB = points[1];\n            let pointC = points[2];\n            let pointD = points[3];\n            // shift points for safe transition detection.\n            let trTop = this.transitionsBetween(pointA, pointD);\n            let trRight = this.transitionsBetween(pointB, pointD);\n            let pointAs = Detector$1.shiftPoint(pointA, pointB, (trRight + 1) * 4);\n            let pointCs = Detector$1.shiftPoint(pointC, pointB, (trTop + 1) * 4);\n            trTop = this.transitionsBetween(pointAs, pointD);\n            trRight = this.transitionsBetween(pointCs, pointD);\n            let candidate1 = new ResultPoint(pointD.getX() + (pointC.getX() - pointB.getX()) / (trTop + 1), pointD.getY() + (pointC.getY() - pointB.getY()) / (trTop + 1));\n            let candidate2 = new ResultPoint(pointD.getX() + (pointA.getX() - pointB.getX()) / (trRight + 1), pointD.getY() + (pointA.getY() - pointB.getY()) / (trRight + 1));\n            if (!this.isValid(candidate1)) {\n                if (this.isValid(candidate2)) {\n                    return candidate2;\n                }\n                return null;\n            }\n            if (!this.isValid(candidate2)) {\n                return candidate1;\n            }\n            let sumc1 = this.transitionsBetween(pointAs, candidate1) + this.transitionsBetween(pointCs, candidate1);\n            let sumc2 = this.transitionsBetween(pointAs, candidate2) + this.transitionsBetween(pointCs, candidate2);\n            if (sumc1 > sumc2) {\n                return candidate1;\n            }\n            else {\n                return candidate2;\n            }\n        }\n        /**\n         * Shift the edge points to the module center.\n         */\n        shiftToModuleCenter(points) {\n            // A..D\n            // |  :\n            // B--C\n            let pointA = points[0];\n            let pointB = points[1];\n            let pointC = points[2];\n            let pointD = points[3];\n            // calculate pseudo dimensions\n            let dimH = this.transitionsBetween(pointA, pointD) + 1;\n            let dimV = this.transitionsBetween(pointC, pointD) + 1;\n            // shift points for safe dimension detection\n            let pointAs = Detector$1.shiftPoint(pointA, pointB, dimV * 4);\n            let pointCs = Detector$1.shiftPoint(pointC, pointB, dimH * 4);\n            //  calculate more precise dimensions\n            dimH = this.transitionsBetween(pointAs, pointD) + 1;\n            dimV = this.transitionsBetween(pointCs, pointD) + 1;\n            if ((dimH & 0x01) === 1) {\n                dimH += 1;\n            }\n            if ((dimV & 0x01) === 1) {\n                dimV += 1;\n            }\n            // WhiteRectangleDetector returns points inside of the rectangle.\n            // I want points on the edges.\n            let centerX = (pointA.getX() + pointB.getX() + pointC.getX() + pointD.getX()) / 4;\n            let centerY = (pointA.getY() + pointB.getY() + pointC.getY() + pointD.getY()) / 4;\n            pointA = Detector$1.moveAway(pointA, centerX, centerY);\n            pointB = Detector$1.moveAway(pointB, centerX, centerY);\n            pointC = Detector$1.moveAway(pointC, centerX, centerY);\n            pointD = Detector$1.moveAway(pointD, centerX, centerY);\n            let pointBs;\n            let pointDs;\n            // shift points to the center of each modules\n            pointAs = Detector$1.shiftPoint(pointA, pointB, dimV * 4);\n            pointAs = Detector$1.shiftPoint(pointAs, pointD, dimH * 4);\n            pointBs = Detector$1.shiftPoint(pointB, pointA, dimV * 4);\n            pointBs = Detector$1.shiftPoint(pointBs, pointC, dimH * 4);\n            pointCs = Detector$1.shiftPoint(pointC, pointD, dimV * 4);\n            pointCs = Detector$1.shiftPoint(pointCs, pointB, dimH * 4);\n            pointDs = Detector$1.shiftPoint(pointD, pointC, dimV * 4);\n            pointDs = Detector$1.shiftPoint(pointDs, pointA, dimH * 4);\n            return [pointAs, pointBs, pointCs, pointDs];\n        }\n        isValid(p) {\n            return p.getX() >= 0 && p.getX() < this.image.getWidth() && p.getY() > 0 && p.getY() < this.image.getHeight();\n        }\n        static sampleGrid(image, topLeft, bottomLeft, bottomRight, topRight, dimensionX, dimensionY) {\n            const sampler = GridSamplerInstance.getInstance();\n            return sampler.sampleGrid(image, dimensionX, dimensionY, 0.5, 0.5, dimensionX - 0.5, 0.5, dimensionX - 0.5, dimensionY - 0.5, 0.5, dimensionY - 0.5, topLeft.getX(), topLeft.getY(), topRight.getX(), topRight.getY(), bottomRight.getX(), bottomRight.getY(), bottomLeft.getX(), bottomLeft.getY());\n        }\n        /**\n         * Counts the number of black/white transitions between two points, using something like Bresenham's algorithm.\n         */\n        transitionsBetween(from, to) {\n            // See QR Code Detector, sizeOfBlackWhiteBlackRun()\n            let fromX = Math.trunc(from.getX());\n            let fromY = Math.trunc(from.getY());\n            let toX = Math.trunc(to.getX());\n            let toY = Math.trunc(to.getY());\n            let steep = Math.abs(toY - fromY) > Math.abs(toX - fromX);\n            if (steep) {\n                let temp = fromX;\n                fromX = fromY;\n                fromY = temp;\n                temp = toX;\n                toX = toY;\n                toY = temp;\n            }\n            let dx = Math.abs(toX - fromX);\n            let dy = Math.abs(toY - fromY);\n            let error = -dx / 2;\n            let ystep = fromY < toY ? 1 : -1;\n            let xstep = fromX < toX ? 1 : -1;\n            let transitions = 0;\n            let inBlack = this.image.get(steep ? fromY : fromX, steep ? fromX : fromY);\n            for (let x = fromX, y = fromY; x !== toX; x += xstep) {\n                let isBlack = this.image.get(steep ? y : x, steep ? x : y);\n                if (isBlack !== inBlack) {\n                    transitions++;\n                    inBlack = isBlack;\n                }\n                error += dy;\n                if (error > 0) {\n                    if (y === toY) {\n                        break;\n                    }\n                    y += ystep;\n                    error -= dx;\n                }\n            }\n            return transitions;\n        }\n    }\n\n    /*\n     * Copyright 2007 ZXing authors\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n    /**\n     * This implementation can detect and decode Data Matrix codes in an image.\n     *\n     * @author bbrown@google.com (Brian Brown)\n     */\n    class DataMatrixReader {\n        constructor() {\n            this.decoder = new Decoder$1();\n        }\n        /**\n         * Locates and decodes a Data Matrix code in an image.\n         *\n         * @return a String representing the content encoded by the Data Matrix code\n         * @throws NotFoundException if a Data Matrix code cannot be found\n         * @throws FormatException if a Data Matrix code cannot be decoded\n         * @throws ChecksumException if error correction fails\n         */\n        // @Override\n        // public Result decode(BinaryBitmap image) throws NotFoundException, ChecksumException, FormatException {\n        //   return decode(image, null);\n        // }\n        // @Override\n        decode(image, hints = null) {\n            let decoderResult;\n            let points;\n            if (hints != null && hints.has(DecodeHintType$1.PURE_BARCODE)) {\n                const bits = DataMatrixReader.extractPureBits(image.getBlackMatrix());\n                decoderResult = this.decoder.decode(bits);\n                points = DataMatrixReader.NO_POINTS;\n            }\n            else {\n                const detectorResult = new Detector$1(image.getBlackMatrix()).detect();\n                decoderResult = this.decoder.decode(detectorResult.getBits());\n                points = detectorResult.getPoints();\n            }\n            const rawBytes = decoderResult.getRawBytes();\n            const result = new Result(decoderResult.getText(), rawBytes, 8 * rawBytes.length, points, BarcodeFormat$1.DATA_MATRIX, System.currentTimeMillis());\n            const byteSegments = decoderResult.getByteSegments();\n            if (byteSegments != null) {\n                result.putMetadata(ResultMetadataType$1.BYTE_SEGMENTS, byteSegments);\n            }\n            const ecLevel = decoderResult.getECLevel();\n            if (ecLevel != null) {\n                result.putMetadata(ResultMetadataType$1.ERROR_CORRECTION_LEVEL, ecLevel);\n            }\n            return result;\n        }\n        // @Override\n        reset() {\n            // do nothing\n        }\n        /**\n         * This method detects a code in a \"pure\" image -- that is, pure monochrome image\n         * which contains only an unrotated, unskewed, image of a code, with some white border\n         * around it. This is a specialized method that works exceptionally fast in this special\n         * case.\n         *\n         * @see com.google.zxing.qrcode.QRCodeReader#extractPureBits(BitMatrix)\n         */\n        static extractPureBits(image) {\n            const leftTopBlack = image.getTopLeftOnBit();\n            const rightBottomBlack = image.getBottomRightOnBit();\n            if (leftTopBlack == null || rightBottomBlack == null) {\n                throw new NotFoundException();\n            }\n            const moduleSize = this.moduleSize(leftTopBlack, image);\n            let top = leftTopBlack[1];\n            const bottom = rightBottomBlack[1];\n            let left = leftTopBlack[0];\n            const right = rightBottomBlack[0];\n            const matrixWidth = (right - left + 1) / moduleSize;\n            const matrixHeight = (bottom - top + 1) / moduleSize;\n            if (matrixWidth <= 0 || matrixHeight <= 0) {\n                throw new NotFoundException();\n            }\n            // Push in the \"border\" by half the module width so that we start\n            // sampling in the middle of the module. Just in case the image is a\n            // little off, this will help recover.\n            const nudge = moduleSize / 2;\n            top += nudge;\n            left += nudge;\n            // Now just read off the bits\n            const bits = new BitMatrix(matrixWidth, matrixHeight);\n            for (let y = 0; y < matrixHeight; y++) {\n                const iOffset = top + y * moduleSize;\n                for (let x = 0; x < matrixWidth; x++) {\n                    if (image.get(left + x * moduleSize, iOffset)) {\n                        bits.set(x, y);\n                    }\n                }\n            }\n            return bits;\n        }\n        static moduleSize(leftTopBlack, image) {\n            const width = image.getWidth();\n            let x = leftTopBlack[0];\n            const y = leftTopBlack[1];\n            while (x < width && image.get(x, y)) {\n                x++;\n            }\n            if (x === width) {\n                throw new NotFoundException();\n            }\n            const moduleSize = x - leftTopBlack[0];\n            if (moduleSize === 0) {\n                throw new NotFoundException();\n            }\n            return moduleSize;\n        }\n    }\n    DataMatrixReader.NO_POINTS = [];\n\n    /**\n     * @deprecated Moving to @zxing/browser\n     *\n     * QR Code reader to use from browser.\n     */\n    class BrowserDatamatrixCodeReader extends BrowserCodeReader {\n        /**\n         * Creates an instance of BrowserQRCodeReader.\n         * @param {number} [timeBetweenScansMillis=500] the time delay between subsequent decode tries\n         */\n        constructor(timeBetweenScansMillis = 500) {\n            super(new DataMatrixReader(), timeBetweenScansMillis);\n        }\n    }\n\n    /*\n     * Copyright 2007 ZXing authors\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n    var ErrorCorrectionLevelValues;\n    (function (ErrorCorrectionLevelValues) {\n        ErrorCorrectionLevelValues[ErrorCorrectionLevelValues[\"L\"] = 0] = \"L\";\n        ErrorCorrectionLevelValues[ErrorCorrectionLevelValues[\"M\"] = 1] = \"M\";\n        ErrorCorrectionLevelValues[ErrorCorrectionLevelValues[\"Q\"] = 2] = \"Q\";\n        ErrorCorrectionLevelValues[ErrorCorrectionLevelValues[\"H\"] = 3] = \"H\";\n    })(ErrorCorrectionLevelValues || (ErrorCorrectionLevelValues = {}));\n    /**\n     * <p>See ISO 18004:2006, 6.5.1. This enum encapsulates the four error correction levels\n     * defined by the QR code standard.</p>\n     *\n     * @author Sean Owen\n     */\n    class ErrorCorrectionLevel {\n        constructor(value, stringValue, bits /*int*/) {\n            this.value = value;\n            this.stringValue = stringValue;\n            this.bits = bits;\n            ErrorCorrectionLevel.FOR_BITS.set(bits, this);\n            ErrorCorrectionLevel.FOR_VALUE.set(value, this);\n        }\n        getValue() {\n            return this.value;\n        }\n        getBits() {\n            return this.bits;\n        }\n        static fromString(s) {\n            switch (s) {\n                case 'L': return ErrorCorrectionLevel.L;\n                case 'M': return ErrorCorrectionLevel.M;\n                case 'Q': return ErrorCorrectionLevel.Q;\n                case 'H': return ErrorCorrectionLevel.H;\n                default: throw new ArgumentException(s + 'not available');\n            }\n        }\n        toString() {\n            return this.stringValue;\n        }\n        equals(o) {\n            if (!(o instanceof ErrorCorrectionLevel)) {\n                return false;\n            }\n            const other = o;\n            return this.value === other.value;\n        }\n        /**\n         * @param bits int containing the two bits encoding a QR Code's error correction level\n         * @return ErrorCorrectionLevel representing the encoded error correction level\n         */\n        static forBits(bits /*int*/) {\n            if (bits < 0 || bits >= ErrorCorrectionLevel.FOR_BITS.size) {\n                throw new IllegalArgumentException();\n            }\n            return ErrorCorrectionLevel.FOR_BITS.get(bits);\n        }\n    }\n    ErrorCorrectionLevel.FOR_BITS = new Map();\n    ErrorCorrectionLevel.FOR_VALUE = new Map();\n    /** L = ~7% correction */\n    ErrorCorrectionLevel.L = new ErrorCorrectionLevel(ErrorCorrectionLevelValues.L, 'L', 0x01);\n    /** M = ~15% correction */\n    ErrorCorrectionLevel.M = new ErrorCorrectionLevel(ErrorCorrectionLevelValues.M, 'M', 0x00);\n    /** Q = ~25% correction */\n    ErrorCorrectionLevel.Q = new ErrorCorrectionLevel(ErrorCorrectionLevelValues.Q, 'Q', 0x03);\n    /** H = ~30% correction */\n    ErrorCorrectionLevel.H = new ErrorCorrectionLevel(ErrorCorrectionLevelValues.H, 'H', 0x02);\n\n    /*\n     * Copyright 2007 ZXing authors\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n    /**\n     * <p>Encapsulates a QR Code's format information, including the data mask used and\n     * error correction level.</p>\n     *\n     * @author Sean Owen\n     * @see DataMask\n     * @see ErrorCorrectionLevel\n     */\n    class FormatInformation {\n        constructor(formatInfo /*int*/) {\n            // Bits 3,4\n            this.errorCorrectionLevel = ErrorCorrectionLevel.forBits((formatInfo >> 3) & 0x03);\n            // Bottom 3 bits\n            this.dataMask = /*(byte) */ (formatInfo & 0x07);\n        }\n        static numBitsDiffering(a /*int*/, b /*int*/) {\n            return Integer.bitCount(a ^ b);\n        }\n        /**\n         * @param maskedFormatInfo1 format info indicator, with mask still applied\n         * @param maskedFormatInfo2 second copy of same info; both are checked at the same time\n         *  to establish best match\n         * @return information about the format it specifies, or {@code null}\n         *  if doesn't seem to match any known pattern\n         */\n        static decodeFormatInformation(maskedFormatInfo1 /*int*/, maskedFormatInfo2 /*int*/) {\n            const formatInfo = FormatInformation.doDecodeFormatInformation(maskedFormatInfo1, maskedFormatInfo2);\n            if (formatInfo !== null) {\n                return formatInfo;\n            }\n            // Should return null, but, some QR codes apparently\n            // do not mask this info. Try again by actually masking the pattern\n            // first\n            return FormatInformation.doDecodeFormatInformation(maskedFormatInfo1 ^ FormatInformation.FORMAT_INFO_MASK_QR, maskedFormatInfo2 ^ FormatInformation.FORMAT_INFO_MASK_QR);\n        }\n        static doDecodeFormatInformation(maskedFormatInfo1 /*int*/, maskedFormatInfo2 /*int*/) {\n            // Find the int in FORMAT_INFO_DECODE_LOOKUP with fewest bits differing\n            let bestDifference = Number.MAX_SAFE_INTEGER;\n            let bestFormatInfo = 0;\n            for (const decodeInfo of FormatInformation.FORMAT_INFO_DECODE_LOOKUP) {\n                const targetInfo = decodeInfo[0];\n                if (targetInfo === maskedFormatInfo1 || targetInfo === maskedFormatInfo2) {\n                    // Found an exact match\n                    return new FormatInformation(decodeInfo[1]);\n                }\n                let bitsDifference = FormatInformation.numBitsDiffering(maskedFormatInfo1, targetInfo);\n                if (bitsDifference < bestDifference) {\n                    bestFormatInfo = decodeInfo[1];\n                    bestDifference = bitsDifference;\n                }\n                if (maskedFormatInfo1 !== maskedFormatInfo2) {\n                    // also try the other option\n                    bitsDifference = FormatInformation.numBitsDiffering(maskedFormatInfo2, targetInfo);\n                    if (bitsDifference < bestDifference) {\n                        bestFormatInfo = decodeInfo[1];\n                        bestDifference = bitsDifference;\n                    }\n                }\n            }\n            // Hamming distance of the 32 masked codes is 7, by construction, so <= 3 bits\n            // differing means we found a match\n            if (bestDifference <= 3) {\n                return new FormatInformation(bestFormatInfo);\n            }\n            return null;\n        }\n        getErrorCorrectionLevel() {\n            return this.errorCorrectionLevel;\n        }\n        getDataMask() {\n            return this.dataMask;\n        }\n        /*@Override*/\n        hashCode() {\n            return (this.errorCorrectionLevel.getBits() << 3) | this.dataMask;\n        }\n        /*@Override*/\n        equals(o) {\n            if (!(o instanceof FormatInformation)) {\n                return false;\n            }\n            const other = o;\n            return this.errorCorrectionLevel === other.errorCorrectionLevel &&\n                this.dataMask === other.dataMask;\n        }\n    }\n    FormatInformation.FORMAT_INFO_MASK_QR = 0x5412;\n    /**\n     * See ISO 18004:2006, Annex C, Table C.1\n     */\n    FormatInformation.FORMAT_INFO_DECODE_LOOKUP = [\n        Int32Array.from([0x5412, 0x00]),\n        Int32Array.from([0x5125, 0x01]),\n        Int32Array.from([0x5E7C, 0x02]),\n        Int32Array.from([0x5B4B, 0x03]),\n        Int32Array.from([0x45F9, 0x04]),\n        Int32Array.from([0x40CE, 0x05]),\n        Int32Array.from([0x4F97, 0x06]),\n        Int32Array.from([0x4AA0, 0x07]),\n        Int32Array.from([0x77C4, 0x08]),\n        Int32Array.from([0x72F3, 0x09]),\n        Int32Array.from([0x7DAA, 0x0A]),\n        Int32Array.from([0x789D, 0x0B]),\n        Int32Array.from([0x662F, 0x0C]),\n        Int32Array.from([0x6318, 0x0D]),\n        Int32Array.from([0x6C41, 0x0E]),\n        Int32Array.from([0x6976, 0x0F]),\n        Int32Array.from([0x1689, 0x10]),\n        Int32Array.from([0x13BE, 0x11]),\n        Int32Array.from([0x1CE7, 0x12]),\n        Int32Array.from([0x19D0, 0x13]),\n        Int32Array.from([0x0762, 0x14]),\n        Int32Array.from([0x0255, 0x15]),\n        Int32Array.from([0x0D0C, 0x16]),\n        Int32Array.from([0x083B, 0x17]),\n        Int32Array.from([0x355F, 0x18]),\n        Int32Array.from([0x3068, 0x19]),\n        Int32Array.from([0x3F31, 0x1A]),\n        Int32Array.from([0x3A06, 0x1B]),\n        Int32Array.from([0x24B4, 0x1C]),\n        Int32Array.from([0x2183, 0x1D]),\n        Int32Array.from([0x2EDA, 0x1E]),\n        Int32Array.from([0x2BED, 0x1F]),\n    ];\n\n    /**\n     * <p>Encapsulates a set of error-correction blocks in one symbol version. Most versions will\n     * use blocks of differing sizes within one version, so, this encapsulates the parameters for\n     * each set of blocks. It also holds the number of error-correction codewords per block since it\n     * will be the same across all blocks within one version.</p>\n     */\n    class ECBlocks$1 {\n        constructor(ecCodewordsPerBlock /*int*/, ...ecBlocks) {\n            this.ecCodewordsPerBlock = ecCodewordsPerBlock;\n            this.ecBlocks = ecBlocks;\n        }\n        getECCodewordsPerBlock() {\n            return this.ecCodewordsPerBlock;\n        }\n        getNumBlocks() {\n            let total = 0;\n            const ecBlocks = this.ecBlocks;\n            for (const ecBlock of ecBlocks) {\n                total += ecBlock.getCount();\n            }\n            return total;\n        }\n        getTotalECCodewords() {\n            return this.ecCodewordsPerBlock * this.getNumBlocks();\n        }\n        getECBlocks() {\n            return this.ecBlocks;\n        }\n    }\n\n    /**\n     * <p>Encapsulates the parameters for one error-correction block in one symbol version.\n     * This includes the number of data codewords, and the number of times a block with these\n     * parameters is used consecutively in the QR code version's format.</p>\n     */\n    class ECB$1 {\n        constructor(count /*int*/, dataCodewords /*int*/) {\n            this.count = count;\n            this.dataCodewords = dataCodewords;\n        }\n        getCount() {\n            return this.count;\n        }\n        getDataCodewords() {\n            return this.dataCodewords;\n        }\n    }\n\n    /*\n     * Copyright 2007 ZXing authors\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n    /**\n     * See ISO 18004:2006 Annex D\n     *\n     * @author Sean Owen\n     */\n    class Version$1 {\n        constructor(versionNumber /*int*/, alignmentPatternCenters, ...ecBlocks) {\n            this.versionNumber = versionNumber;\n            this.alignmentPatternCenters = alignmentPatternCenters;\n            this.ecBlocks = ecBlocks;\n            let total = 0;\n            const ecCodewords = ecBlocks[0].getECCodewordsPerBlock();\n            const ecbArray = ecBlocks[0].getECBlocks();\n            for (const ecBlock of ecbArray) {\n                total += ecBlock.getCount() * (ecBlock.getDataCodewords() + ecCodewords);\n            }\n            this.totalCodewords = total;\n        }\n        getVersionNumber() {\n            return this.versionNumber;\n        }\n        getAlignmentPatternCenters() {\n            return this.alignmentPatternCenters;\n        }\n        getTotalCodewords() {\n            return this.totalCodewords;\n        }\n        getDimensionForVersion() {\n            return 17 + 4 * this.versionNumber;\n        }\n        getECBlocksForLevel(ecLevel) {\n            return this.ecBlocks[ecLevel.getValue()];\n            // TYPESCRIPTPORT: original was using ordinal, and using the order of levels as defined in ErrorCorrectionLevel enum (LMQH)\n            // I will use the direct value from ErrorCorrectionLevelValues enum which in typescript goes to a number\n        }\n        /**\n         * <p>Deduces version information purely from QR Code dimensions.</p>\n         *\n         * @param dimension dimension in modules\n         * @return Version for a QR Code of that dimension\n         * @throws FormatException if dimension is not 1 mod 4\n         */\n        static getProvisionalVersionForDimension(dimension /*int*/) {\n            if (dimension % 4 !== 1) {\n                throw new FormatException();\n            }\n            try {\n                return this.getVersionForNumber((dimension - 17) / 4);\n            }\n            catch (ignored /*: IllegalArgumentException*/) {\n                throw new FormatException();\n            }\n        }\n        static getVersionForNumber(versionNumber /*int*/) {\n            if (versionNumber < 1 || versionNumber > 40) {\n                throw new IllegalArgumentException();\n            }\n            return Version$1.VERSIONS[versionNumber - 1];\n        }\n        static decodeVersionInformation(versionBits /*int*/) {\n            let bestDifference = Number.MAX_SAFE_INTEGER;\n            let bestVersion = 0;\n            for (let i = 0; i < Version$1.VERSION_DECODE_INFO.length; i++) {\n                const targetVersion = Version$1.VERSION_DECODE_INFO[i];\n                // Do the version info bits match exactly? done.\n                if (targetVersion === versionBits) {\n                    return Version$1.getVersionForNumber(i + 7);\n                }\n                // Otherwise see if this is the closest to a real version info bit string\n                // we have seen so far\n                const bitsDifference = FormatInformation.numBitsDiffering(versionBits, targetVersion);\n                if (bitsDifference < bestDifference) {\n                    bestVersion = i + 7;\n                    bestDifference = bitsDifference;\n                }\n            }\n            // We can tolerate up to 3 bits of error since no two version info codewords will\n            // differ in less than 8 bits.\n            if (bestDifference <= 3) {\n                return Version$1.getVersionForNumber(bestVersion);\n            }\n            // If we didn't find a close enough match, fail\n            return null;\n        }\n        /**\n         * See ISO 18004:2006 Annex E\n         */\n        buildFunctionPattern() {\n            const dimension = this.getDimensionForVersion();\n            const bitMatrix = new BitMatrix(dimension);\n            // Top left finder pattern + separator + format\n            bitMatrix.setRegion(0, 0, 9, 9);\n            // Top right finder pattern + separator + format\n            bitMatrix.setRegion(dimension - 8, 0, 8, 9);\n            // Bottom left finder pattern + separator + format\n            bitMatrix.setRegion(0, dimension - 8, 9, 8);\n            // Alignment patterns\n            const max = this.alignmentPatternCenters.length;\n            for (let x = 0; x < max; x++) {\n                const i = this.alignmentPatternCenters[x] - 2;\n                for (let y = 0; y < max; y++) {\n                    if ((x === 0 && (y === 0 || y === max - 1)) || (x === max - 1 && y === 0)) {\n                        // No alignment patterns near the three finder patterns\n                        continue;\n                    }\n                    bitMatrix.setRegion(this.alignmentPatternCenters[y] - 2, i, 5, 5);\n                }\n            }\n            // Vertical timing pattern\n            bitMatrix.setRegion(6, 9, 1, dimension - 17);\n            // Horizontal timing pattern\n            bitMatrix.setRegion(9, 6, dimension - 17, 1);\n            if (this.versionNumber > 6) {\n                // Version info, top right\n                bitMatrix.setRegion(dimension - 11, 0, 3, 6);\n                // Version info, bottom left\n                bitMatrix.setRegion(0, dimension - 11, 6, 3);\n            }\n            return bitMatrix;\n        }\n        /*@Override*/\n        toString() {\n            return '' + this.versionNumber;\n        }\n    }\n    /**\n       * See ISO 18004:2006 Annex D.\n       * Element i represents the raw version bits that specify version i + 7\n       */\n    Version$1.VERSION_DECODE_INFO = Int32Array.from([\n        0x07C94, 0x085BC, 0x09A99, 0x0A4D3, 0x0BBF6,\n        0x0C762, 0x0D847, 0x0E60D, 0x0F928, 0x10B78,\n        0x1145D, 0x12A17, 0x13532, 0x149A6, 0x15683,\n        0x168C9, 0x177EC, 0x18EC4, 0x191E1, 0x1AFAB,\n        0x1B08E, 0x1CC1A, 0x1D33F, 0x1ED75, 0x1F250,\n        0x209D5, 0x216F0, 0x228BA, 0x2379F, 0x24B0B,\n        0x2542E, 0x26A64, 0x27541, 0x28C69\n    ]);\n    /**\n       * See ISO 18004:2006 6.5.1 Table 9\n       */\n    Version$1.VERSIONS = [\n        new Version$1(1, new Int32Array(0), new ECBlocks$1(7, new ECB$1(1, 19)), new ECBlocks$1(10, new ECB$1(1, 16)), new ECBlocks$1(13, new ECB$1(1, 13)), new ECBlocks$1(17, new ECB$1(1, 9))),\n        new Version$1(2, Int32Array.from([6, 18]), new ECBlocks$1(10, new ECB$1(1, 34)), new ECBlocks$1(16, new ECB$1(1, 28)), new ECBlocks$1(22, new ECB$1(1, 22)), new ECBlocks$1(28, new ECB$1(1, 16))),\n        new Version$1(3, Int32Array.from([6, 22]), new ECBlocks$1(15, new ECB$1(1, 55)), new ECBlocks$1(26, new ECB$1(1, 44)), new ECBlocks$1(18, new ECB$1(2, 17)), new ECBlocks$1(22, new ECB$1(2, 13))),\n        new Version$1(4, Int32Array.from([6, 26]), new ECBlocks$1(20, new ECB$1(1, 80)), new ECBlocks$1(18, new ECB$1(2, 32)), new ECBlocks$1(26, new ECB$1(2, 24)), new ECBlocks$1(16, new ECB$1(4, 9))),\n        new Version$1(5, Int32Array.from([6, 30]), new ECBlocks$1(26, new ECB$1(1, 108)), new ECBlocks$1(24, new ECB$1(2, 43)), new ECBlocks$1(18, new ECB$1(2, 15), new ECB$1(2, 16)), new ECBlocks$1(22, new ECB$1(2, 11), new ECB$1(2, 12))),\n        new Version$1(6, Int32Array.from([6, 34]), new ECBlocks$1(18, new ECB$1(2, 68)), new ECBlocks$1(16, new ECB$1(4, 27)), new ECBlocks$1(24, new ECB$1(4, 19)), new ECBlocks$1(28, new ECB$1(4, 15))),\n        new Version$1(7, Int32Array.from([6, 22, 38]), new ECBlocks$1(20, new ECB$1(2, 78)), new ECBlocks$1(18, new ECB$1(4, 31)), new ECBlocks$1(18, new ECB$1(2, 14), new ECB$1(4, 15)), new ECBlocks$1(26, new ECB$1(4, 13), new ECB$1(1, 14))),\n        new Version$1(8, Int32Array.from([6, 24, 42]), new ECBlocks$1(24, new ECB$1(2, 97)), new ECBlocks$1(22, new ECB$1(2, 38), new ECB$1(2, 39)), new ECBlocks$1(22, new ECB$1(4, 18), new ECB$1(2, 19)), new ECBlocks$1(26, new ECB$1(4, 14), new ECB$1(2, 15))),\n        new Version$1(9, Int32Array.from([6, 26, 46]), new ECBlocks$1(30, new ECB$1(2, 116)), new ECBlocks$1(22, new ECB$1(3, 36), new ECB$1(2, 37)), new ECBlocks$1(20, new ECB$1(4, 16), new ECB$1(4, 17)), new ECBlocks$1(24, new ECB$1(4, 12), new ECB$1(4, 13))),\n        new Version$1(10, Int32Array.from([6, 28, 50]), new ECBlocks$1(18, new ECB$1(2, 68), new ECB$1(2, 69)), new ECBlocks$1(26, new ECB$1(4, 43), new ECB$1(1, 44)), new ECBlocks$1(24, new ECB$1(6, 19), new ECB$1(2, 20)), new ECBlocks$1(28, new ECB$1(6, 15), new ECB$1(2, 16))),\n        new Version$1(11, Int32Array.from([6, 30, 54]), new ECBlocks$1(20, new ECB$1(4, 81)), new ECBlocks$1(30, new ECB$1(1, 50), new ECB$1(4, 51)), new ECBlocks$1(28, new ECB$1(4, 22), new ECB$1(4, 23)), new ECBlocks$1(24, new ECB$1(3, 12), new ECB$1(8, 13))),\n        new Version$1(12, Int32Array.from([6, 32, 58]), new ECBlocks$1(24, new ECB$1(2, 92), new ECB$1(2, 93)), new ECBlocks$1(22, new ECB$1(6, 36), new ECB$1(2, 37)), new ECBlocks$1(26, new ECB$1(4, 20), new ECB$1(6, 21)), new ECBlocks$1(28, new ECB$1(7, 14), new ECB$1(4, 15))),\n        new Version$1(13, Int32Array.from([6, 34, 62]), new ECBlocks$1(26, new ECB$1(4, 107)), new ECBlocks$1(22, new ECB$1(8, 37), new ECB$1(1, 38)), new ECBlocks$1(24, new ECB$1(8, 20), new ECB$1(4, 21)), new ECBlocks$1(22, new ECB$1(12, 11), new ECB$1(4, 12))),\n        new Version$1(14, Int32Array.from([6, 26, 46, 66]), new ECBlocks$1(30, new ECB$1(3, 115), new ECB$1(1, 116)), new ECBlocks$1(24, new ECB$1(4, 40), new ECB$1(5, 41)), new ECBlocks$1(20, new ECB$1(11, 16), new ECB$1(5, 17)), new ECBlocks$1(24, new ECB$1(11, 12), new ECB$1(5, 13))),\n        new Version$1(15, Int32Array.from([6, 26, 48, 70]), new ECBlocks$1(22, new ECB$1(5, 87), new ECB$1(1, 88)), new ECBlocks$1(24, new ECB$1(5, 41), new ECB$1(5, 42)), new ECBlocks$1(30, new ECB$1(5, 24), new ECB$1(7, 25)), new ECBlocks$1(24, new ECB$1(11, 12), new ECB$1(7, 13))),\n        new Version$1(16, Int32Array.from([6, 26, 50, 74]), new ECBlocks$1(24, new ECB$1(5, 98), new ECB$1(1, 99)), new ECBlocks$1(28, new ECB$1(7, 45), new ECB$1(3, 46)), new ECBlocks$1(24, new ECB$1(15, 19), new ECB$1(2, 20)), new ECBlocks$1(30, new ECB$1(3, 15), new ECB$1(13, 16))),\n        new Version$1(17, Int32Array.from([6, 30, 54, 78]), new ECBlocks$1(28, new ECB$1(1, 107), new ECB$1(5, 108)), new ECBlocks$1(28, new ECB$1(10, 46), new ECB$1(1, 47)), new ECBlocks$1(28, new ECB$1(1, 22), new ECB$1(15, 23)), new ECBlocks$1(28, new ECB$1(2, 14), new ECB$1(17, 15))),\n        new Version$1(18, Int32Array.from([6, 30, 56, 82]), new ECBlocks$1(30, new ECB$1(5, 120), new ECB$1(1, 121)), new ECBlocks$1(26, new ECB$1(9, 43), new ECB$1(4, 44)), new ECBlocks$1(28, new ECB$1(17, 22), new ECB$1(1, 23)), new ECBlocks$1(28, new ECB$1(2, 14), new ECB$1(19, 15))),\n        new Version$1(19, Int32Array.from([6, 30, 58, 86]), new ECBlocks$1(28, new ECB$1(3, 113), new ECB$1(4, 114)), new ECBlocks$1(26, new ECB$1(3, 44), new ECB$1(11, 45)), new ECBlocks$1(26, new ECB$1(17, 21), new ECB$1(4, 22)), new ECBlocks$1(26, new ECB$1(9, 13), new ECB$1(16, 14))),\n        new Version$1(20, Int32Array.from([6, 34, 62, 90]), new ECBlocks$1(28, new ECB$1(3, 107), new ECB$1(5, 108)), new ECBlocks$1(26, new ECB$1(3, 41), new ECB$1(13, 42)), new ECBlocks$1(30, new ECB$1(15, 24), new ECB$1(5, 25)), new ECBlocks$1(28, new ECB$1(15, 15), new ECB$1(10, 16))),\n        new Version$1(21, Int32Array.from([6, 28, 50, 72, 94]), new ECBlocks$1(28, new ECB$1(4, 116), new ECB$1(4, 117)), new ECBlocks$1(26, new ECB$1(17, 42)), new ECBlocks$1(28, new ECB$1(17, 22), new ECB$1(6, 23)), new ECBlocks$1(30, new ECB$1(19, 16), new ECB$1(6, 17))),\n        new Version$1(22, Int32Array.from([6, 26, 50, 74, 98]), new ECBlocks$1(28, new ECB$1(2, 111), new ECB$1(7, 112)), new ECBlocks$1(28, new ECB$1(17, 46)), new ECBlocks$1(30, new ECB$1(7, 24), new ECB$1(16, 25)), new ECBlocks$1(24, new ECB$1(34, 13))),\n        new Version$1(23, Int32Array.from([6, 30, 54, 78, 102]), new ECBlocks$1(30, new ECB$1(4, 121), new ECB$1(5, 122)), new ECBlocks$1(28, new ECB$1(4, 47), new ECB$1(14, 48)), new ECBlocks$1(30, new ECB$1(11, 24), new ECB$1(14, 25)), new ECBlocks$1(30, new ECB$1(16, 15), new ECB$1(14, 16))),\n        new Version$1(24, Int32Array.from([6, 28, 54, 80, 106]), new ECBlocks$1(30, new ECB$1(6, 117), new ECB$1(4, 118)), new ECBlocks$1(28, new ECB$1(6, 45), new ECB$1(14, 46)), new ECBlocks$1(30, new ECB$1(11, 24), new ECB$1(16, 25)), new ECBlocks$1(30, new ECB$1(30, 16), new ECB$1(2, 17))),\n        new Version$1(25, Int32Array.from([6, 32, 58, 84, 110]), new ECBlocks$1(26, new ECB$1(8, 106), new ECB$1(4, 107)), new ECBlocks$1(28, new ECB$1(8, 47), new ECB$1(13, 48)), new ECBlocks$1(30, new ECB$1(7, 24), new ECB$1(22, 25)), new ECBlocks$1(30, new ECB$1(22, 15), new ECB$1(13, 16))),\n        new Version$1(26, Int32Array.from([6, 30, 58, 86, 114]), new ECBlocks$1(28, new ECB$1(10, 114), new ECB$1(2, 115)), new ECBlocks$1(28, new ECB$1(19, 46), new ECB$1(4, 47)), new ECBlocks$1(28, new ECB$1(28, 22), new ECB$1(6, 23)), new ECBlocks$1(30, new ECB$1(33, 16), new ECB$1(4, 17))),\n        new Version$1(27, Int32Array.from([6, 34, 62, 90, 118]), new ECBlocks$1(30, new ECB$1(8, 122), new ECB$1(4, 123)), new ECBlocks$1(28, new ECB$1(22, 45), new ECB$1(3, 46)), new ECBlocks$1(30, new ECB$1(8, 23), new ECB$1(26, 24)), new ECBlocks$1(30, new ECB$1(12, 15), new ECB$1(28, 16))),\n        new Version$1(28, Int32Array.from([6, 26, 50, 74, 98, 122]), new ECBlocks$1(30, new ECB$1(3, 117), new ECB$1(10, 118)), new ECBlocks$1(28, new ECB$1(3, 45), new ECB$1(23, 46)), new ECBlocks$1(30, new ECB$1(4, 24), new ECB$1(31, 25)), new ECBlocks$1(30, new ECB$1(11, 15), new ECB$1(31, 16))),\n        new Version$1(29, Int32Array.from([6, 30, 54, 78, 102, 126]), new ECBlocks$1(30, new ECB$1(7, 116), new ECB$1(7, 117)), new ECBlocks$1(28, new ECB$1(21, 45), new ECB$1(7, 46)), new ECBlocks$1(30, new ECB$1(1, 23), new ECB$1(37, 24)), new ECBlocks$1(30, new ECB$1(19, 15), new ECB$1(26, 16))),\n        new Version$1(30, Int32Array.from([6, 26, 52, 78, 104, 130]), new ECBlocks$1(30, new ECB$1(5, 115), new ECB$1(10, 116)), new ECBlocks$1(28, new ECB$1(19, 47), new ECB$1(10, 48)), new ECBlocks$1(30, new ECB$1(15, 24), new ECB$1(25, 25)), new ECBlocks$1(30, new ECB$1(23, 15), new ECB$1(25, 16))),\n        new Version$1(31, Int32Array.from([6, 30, 56, 82, 108, 134]), new ECBlocks$1(30, new ECB$1(13, 115), new ECB$1(3, 116)), new ECBlocks$1(28, new ECB$1(2, 46), new ECB$1(29, 47)), new ECBlocks$1(30, new ECB$1(42, 24), new ECB$1(1, 25)), new ECBlocks$1(30, new ECB$1(23, 15), new ECB$1(28, 16))),\n        new Version$1(32, Int32Array.from([6, 34, 60, 86, 112, 138]), new ECBlocks$1(30, new ECB$1(17, 115)), new ECBlocks$1(28, new ECB$1(10, 46), new ECB$1(23, 47)), new ECBlocks$1(30, new ECB$1(10, 24), new ECB$1(35, 25)), new ECBlocks$1(30, new ECB$1(19, 15), new ECB$1(35, 16))),\n        new Version$1(33, Int32Array.from([6, 30, 58, 86, 114, 142]), new ECBlocks$1(30, new ECB$1(17, 115), new ECB$1(1, 116)), new ECBlocks$1(28, new ECB$1(14, 46), new ECB$1(21, 47)), new ECBlocks$1(30, new ECB$1(29, 24), new ECB$1(19, 25)), new ECBlocks$1(30, new ECB$1(11, 15), new ECB$1(46, 16))),\n        new Version$1(34, Int32Array.from([6, 34, 62, 90, 118, 146]), new ECBlocks$1(30, new ECB$1(13, 115), new ECB$1(6, 116)), new ECBlocks$1(28, new ECB$1(14, 46), new ECB$1(23, 47)), new ECBlocks$1(30, new ECB$1(44, 24), new ECB$1(7, 25)), new ECBlocks$1(30, new ECB$1(59, 16), new ECB$1(1, 17))),\n        new Version$1(35, Int32Array.from([6, 30, 54, 78, 102, 126, 150]), new ECBlocks$1(30, new ECB$1(12, 121), new ECB$1(7, 122)), new ECBlocks$1(28, new ECB$1(12, 47), new ECB$1(26, 48)), new ECBlocks$1(30, new ECB$1(39, 24), new ECB$1(14, 25)), new ECBlocks$1(30, new ECB$1(22, 15), new ECB$1(41, 16))),\n        new Version$1(36, Int32Array.from([6, 24, 50, 76, 102, 128, 154]), new ECBlocks$1(30, new ECB$1(6, 121), new ECB$1(14, 122)), new ECBlocks$1(28, new ECB$1(6, 47), new ECB$1(34, 48)), new ECBlocks$1(30, new ECB$1(46, 24), new ECB$1(10, 25)), new ECBlocks$1(30, new ECB$1(2, 15), new ECB$1(64, 16))),\n        new Version$1(37, Int32Array.from([6, 28, 54, 80, 106, 132, 158]), new ECBlocks$1(30, new ECB$1(17, 122), new ECB$1(4, 123)), new ECBlocks$1(28, new ECB$1(29, 46), new ECB$1(14, 47)), new ECBlocks$1(30, new ECB$1(49, 24), new ECB$1(10, 25)), new ECBlocks$1(30, new ECB$1(24, 15), new ECB$1(46, 16))),\n        new Version$1(38, Int32Array.from([6, 32, 58, 84, 110, 136, 162]), new ECBlocks$1(30, new ECB$1(4, 122), new ECB$1(18, 123)), new ECBlocks$1(28, new ECB$1(13, 46), new ECB$1(32, 47)), new ECBlocks$1(30, new ECB$1(48, 24), new ECB$1(14, 25)), new ECBlocks$1(30, new ECB$1(42, 15), new ECB$1(32, 16))),\n        new Version$1(39, Int32Array.from([6, 26, 54, 82, 110, 138, 166]), new ECBlocks$1(30, new ECB$1(20, 117), new ECB$1(4, 118)), new ECBlocks$1(28, new ECB$1(40, 47), new ECB$1(7, 48)), new ECBlocks$1(30, new ECB$1(43, 24), new ECB$1(22, 25)), new ECBlocks$1(30, new ECB$1(10, 15), new ECB$1(67, 16))),\n        new Version$1(40, Int32Array.from([6, 30, 58, 86, 114, 142, 170]), new ECBlocks$1(30, new ECB$1(19, 118), new ECB$1(6, 119)), new ECBlocks$1(28, new ECB$1(18, 47), new ECB$1(31, 48)), new ECBlocks$1(30, new ECB$1(34, 24), new ECB$1(34, 25)), new ECBlocks$1(30, new ECB$1(20, 15), new ECB$1(61, 16)))\n    ];\n\n    /*\n     * Copyright 2007 ZXing authors\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n    var DataMaskValues;\n    (function (DataMaskValues) {\n        DataMaskValues[DataMaskValues[\"DATA_MASK_000\"] = 0] = \"DATA_MASK_000\";\n        DataMaskValues[DataMaskValues[\"DATA_MASK_001\"] = 1] = \"DATA_MASK_001\";\n        DataMaskValues[DataMaskValues[\"DATA_MASK_010\"] = 2] = \"DATA_MASK_010\";\n        DataMaskValues[DataMaskValues[\"DATA_MASK_011\"] = 3] = \"DATA_MASK_011\";\n        DataMaskValues[DataMaskValues[\"DATA_MASK_100\"] = 4] = \"DATA_MASK_100\";\n        DataMaskValues[DataMaskValues[\"DATA_MASK_101\"] = 5] = \"DATA_MASK_101\";\n        DataMaskValues[DataMaskValues[\"DATA_MASK_110\"] = 6] = \"DATA_MASK_110\";\n        DataMaskValues[DataMaskValues[\"DATA_MASK_111\"] = 7] = \"DATA_MASK_111\";\n    })(DataMaskValues || (DataMaskValues = {}));\n    /**\n     * <p>Encapsulates data masks for the data bits in a QR code, per ISO 18004:2006 6.8. Implementations\n     * of this class can un-mask a raw BitMatrix. For simplicity, they will unmask the entire BitMatrix,\n     * including areas used for finder patterns, timing patterns, etc. These areas should be unused\n     * after the point they are unmasked anyway.</p>\n     *\n     * <p>Note that the diagram in section 6.8.1 is misleading since it indicates that i is column position\n     * and j is row position. In fact, as the text says, i is row position and j is column position.</p>\n     *\n     * @author Sean Owen\n     */\n    class DataMask {\n        // See ISO 18004:2006 6.8.1\n        constructor(value, isMasked) {\n            this.value = value;\n            this.isMasked = isMasked;\n        }\n        // End of enum constants.\n        /**\n         * <p>Implementations of this method reverse the data masking process applied to a QR Code and\n         * make its bits ready to read.</p>\n         *\n         * @param bits representation of QR Code bits\n         * @param dimension dimension of QR Code, represented by bits, being unmasked\n         */\n        unmaskBitMatrix(bits, dimension /*int*/) {\n            for (let i = 0; i < dimension; i++) {\n                for (let j = 0; j < dimension; j++) {\n                    if (this.isMasked(i, j)) {\n                        bits.flip(j, i);\n                    }\n                }\n            }\n        }\n    }\n    DataMask.values = new Map([\n        /**\n         * 000: mask bits for which (x + y) mod 2 == 0\n         */\n        [DataMaskValues.DATA_MASK_000, new DataMask(DataMaskValues.DATA_MASK_000, (i /*int*/, j /*int*/) => { return ((i + j) & 0x01) === 0; })],\n        /**\n         * 001: mask bits for which x mod 2 == 0\n         */\n        [DataMaskValues.DATA_MASK_001, new DataMask(DataMaskValues.DATA_MASK_001, (i /*int*/, j /*int*/) => { return (i & 0x01) === 0; })],\n        /**\n         * 010: mask bits for which y mod 3 == 0\n         */\n        [DataMaskValues.DATA_MASK_010, new DataMask(DataMaskValues.DATA_MASK_010, (i /*int*/, j /*int*/) => { return j % 3 === 0; })],\n        /**\n         * 011: mask bits for which (x + y) mod 3 == 0\n         */\n        [DataMaskValues.DATA_MASK_011, new DataMask(DataMaskValues.DATA_MASK_011, (i /*int*/, j /*int*/) => { return (i + j) % 3 === 0; })],\n        /**\n         * 100: mask bits for which (x/2 + y/3) mod 2 == 0\n         */\n        [DataMaskValues.DATA_MASK_100, new DataMask(DataMaskValues.DATA_MASK_100, (i /*int*/, j /*int*/) => { return ((Math.floor(i / 2) + Math.floor(j / 3)) & 0x01) === 0; })],\n        /**\n         * 101: mask bits for which xy mod 2 + xy mod 3 == 0\n         * equivalently, such that xy mod 6 == 0\n         */\n        [DataMaskValues.DATA_MASK_101, new DataMask(DataMaskValues.DATA_MASK_101, (i /*int*/, j /*int*/) => { return (i * j) % 6 === 0; })],\n        /**\n         * 110: mask bits for which (xy mod 2 + xy mod 3) mod 2 == 0\n         * equivalently, such that xy mod 6 < 3\n         */\n        [DataMaskValues.DATA_MASK_110, new DataMask(DataMaskValues.DATA_MASK_110, (i /*int*/, j /*int*/) => { return ((i * j) % 6) < 3; })],\n        /**\n         * 111: mask bits for which ((x+y)mod 2 + xy mod 3) mod 2 == 0\n         * equivalently, such that (x + y + xy mod 3) mod 2 == 0\n         */\n        [DataMaskValues.DATA_MASK_111, new DataMask(DataMaskValues.DATA_MASK_111, (i /*int*/, j /*int*/) => { return ((i + j + ((i * j) % 3)) & 0x01) === 0; })],\n    ]);\n\n    /*\n     * Copyright 2007 ZXing authors\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n    /**\n     * @author Sean Owen\n     */\n    class BitMatrixParser$1 {\n        /**\n         * @param bitMatrix {@link BitMatrix} to parse\n         * @throws FormatException if dimension is not >= 21 and 1 mod 4\n         */\n        constructor(bitMatrix) {\n            const dimension = bitMatrix.getHeight();\n            if (dimension < 21 || (dimension & 0x03) !== 1) {\n                throw new FormatException();\n            }\n            this.bitMatrix = bitMatrix;\n        }\n        /**\n         * <p>Reads format information from one of its two locations within the QR Code.</p>\n         *\n         * @return {@link FormatInformation} encapsulating the QR Code's format info\n         * @throws FormatException if both format information locations cannot be parsed as\n         * the valid encoding of format information\n         */\n        readFormatInformation() {\n            if (this.parsedFormatInfo !== null && this.parsedFormatInfo !== undefined) {\n                return this.parsedFormatInfo;\n            }\n            // Read top-left format info bits\n            let formatInfoBits1 = 0;\n            for (let i = 0; i < 6; i++) {\n                formatInfoBits1 = this.copyBit(i, 8, formatInfoBits1);\n            }\n            // .. and skip a bit in the timing pattern ...\n            formatInfoBits1 = this.copyBit(7, 8, formatInfoBits1);\n            formatInfoBits1 = this.copyBit(8, 8, formatInfoBits1);\n            formatInfoBits1 = this.copyBit(8, 7, formatInfoBits1);\n            // .. and skip a bit in the timing pattern ...\n            for (let j = 5; j >= 0; j--) {\n                formatInfoBits1 = this.copyBit(8, j, formatInfoBits1);\n            }\n            // Read the top-right/bottom-left pattern too\n            const dimension = this.bitMatrix.getHeight();\n            let formatInfoBits2 = 0;\n            const jMin = dimension - 7;\n            for (let j = dimension - 1; j >= jMin; j--) {\n                formatInfoBits2 = this.copyBit(8, j, formatInfoBits2);\n            }\n            for (let i = dimension - 8; i < dimension; i++) {\n                formatInfoBits2 = this.copyBit(i, 8, formatInfoBits2);\n            }\n            this.parsedFormatInfo = FormatInformation.decodeFormatInformation(formatInfoBits1, formatInfoBits2);\n            if (this.parsedFormatInfo !== null) {\n                return this.parsedFormatInfo;\n            }\n            throw new FormatException();\n        }\n        /**\n         * <p>Reads version information from one of its two locations within the QR Code.</p>\n         *\n         * @return {@link Version} encapsulating the QR Code's version\n         * @throws FormatException if both version information locations cannot be parsed as\n         * the valid encoding of version information\n         */\n        readVersion() {\n            if (this.parsedVersion !== null && this.parsedVersion !== undefined) {\n                return this.parsedVersion;\n            }\n            const dimension = this.bitMatrix.getHeight();\n            const provisionalVersion = Math.floor((dimension - 17) / 4);\n            if (provisionalVersion <= 6) {\n                return Version$1.getVersionForNumber(provisionalVersion);\n            }\n            // Read top-right version info: 3 wide by 6 tall\n            let versionBits = 0;\n            const ijMin = dimension - 11;\n            for (let j = 5; j >= 0; j--) {\n                for (let i = dimension - 9; i >= ijMin; i--) {\n                    versionBits = this.copyBit(i, j, versionBits);\n                }\n            }\n            let theParsedVersion = Version$1.decodeVersionInformation(versionBits);\n            if (theParsedVersion !== null && theParsedVersion.getDimensionForVersion() === dimension) {\n                this.parsedVersion = theParsedVersion;\n                return theParsedVersion;\n            }\n            // Hmm, failed. Try bottom left: 6 wide by 3 tall\n            versionBits = 0;\n            for (let i = 5; i >= 0; i--) {\n                for (let j = dimension - 9; j >= ijMin; j--) {\n                    versionBits = this.copyBit(i, j, versionBits);\n                }\n            }\n            theParsedVersion = Version$1.decodeVersionInformation(versionBits);\n            if (theParsedVersion !== null && theParsedVersion.getDimensionForVersion() === dimension) {\n                this.parsedVersion = theParsedVersion;\n                return theParsedVersion;\n            }\n            throw new FormatException();\n        }\n        copyBit(i /*int*/, j /*int*/, versionBits /*int*/) {\n            const bit = this.isMirror ? this.bitMatrix.get(j, i) : this.bitMatrix.get(i, j);\n            return bit ? (versionBits << 1) | 0x1 : versionBits << 1;\n        }\n        /**\n         * <p>Reads the bits in the {@link BitMatrix} representing the finder pattern in the\n         * correct order in order to reconstruct the codewords bytes contained within the\n         * QR Code.</p>\n         *\n         * @return bytes encoded within the QR Code\n         * @throws FormatException if the exact number of bytes expected is not read\n         */\n        readCodewords() {\n            const formatInfo = this.readFormatInformation();\n            const version = this.readVersion();\n            // Get the data mask for the format used in this QR Code. This will exclude\n            // some bits from reading as we wind through the bit matrix.\n            const dataMask = DataMask.values.get(formatInfo.getDataMask());\n            const dimension = this.bitMatrix.getHeight();\n            dataMask.unmaskBitMatrix(this.bitMatrix, dimension);\n            const functionPattern = version.buildFunctionPattern();\n            let readingUp = true;\n            const result = new Uint8Array(version.getTotalCodewords());\n            let resultOffset = 0;\n            let currentByte = 0;\n            let bitsRead = 0;\n            // Read columns in pairs, from right to left\n            for (let j = dimension - 1; j > 0; j -= 2) {\n                if (j === 6) {\n                    // Skip whole column with vertical alignment pattern\n                    // saves time and makes the other code proceed more cleanly\n                    j--;\n                }\n                // Read alternatingly from bottom to top then top to bottom\n                for (let count = 0; count < dimension; count++) {\n                    const i = readingUp ? dimension - 1 - count : count;\n                    for (let col = 0; col < 2; col++) {\n                        // Ignore bits covered by the function pattern\n                        if (!functionPattern.get(j - col, i)) {\n                            // Read a bit\n                            bitsRead++;\n                            currentByte <<= 1;\n                            if (this.bitMatrix.get(j - col, i)) {\n                                currentByte |= 1;\n                            }\n                            // If we've made a whole byte, save it off\n                            if (bitsRead === 8) {\n                                result[resultOffset++] = /*(byte) */ currentByte;\n                                bitsRead = 0;\n                                currentByte = 0;\n                            }\n                        }\n                    }\n                }\n                readingUp = !readingUp; // readingUp ^= true; // readingUp = !readingUp; // switch directions\n            }\n            if (resultOffset !== version.getTotalCodewords()) {\n                throw new FormatException();\n            }\n            return result;\n        }\n        /**\n         * Revert the mask removal done while reading the code words. The bit matrix should revert to its original state.\n         */\n        remask() {\n            if (this.parsedFormatInfo === null) {\n                return; // We have no format information, and have no data mask\n            }\n            const dataMask = DataMask.values[this.parsedFormatInfo.getDataMask()];\n            const dimension = this.bitMatrix.getHeight();\n            dataMask.unmaskBitMatrix(this.bitMatrix, dimension);\n        }\n        /**\n         * Prepare the parser for a mirrored operation.\n         * This flag has effect only on the {@link #readFormatInformation()} and the\n         * {@link #readVersion()}. Before proceeding with {@link #readCodewords()} the\n         * {@link #mirror()} method should be called.\n         *\n         * @param mirror Whether to read version and format information mirrored.\n         */\n        setMirror(isMirror) {\n            this.parsedVersion = null;\n            this.parsedFormatInfo = null;\n            this.isMirror = isMirror;\n        }\n        /** Mirror the bit matrix in order to attempt a second reading. */\n        mirror() {\n            const bitMatrix = this.bitMatrix;\n            for (let x = 0, width = bitMatrix.getWidth(); x < width; x++) {\n                for (let y = x + 1, height = bitMatrix.getHeight(); y < height; y++) {\n                    if (bitMatrix.get(x, y) !== bitMatrix.get(y, x)) {\n                        bitMatrix.flip(y, x);\n                        bitMatrix.flip(x, y);\n                    }\n                }\n            }\n        }\n    }\n\n    /*\n     * Copyright 2007 ZXing authors\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n    /**\n     * <p>Encapsulates a block of data within a QR Code. QR Codes may split their data into\n     * multiple blocks, each of which is a unit of data and error-correction codewords. Each\n     * is represented by an instance of this class.</p>\n     *\n     * @author Sean Owen\n     */\n    class DataBlock$1 {\n        constructor(numDataCodewords /*int*/, codewords) {\n            this.numDataCodewords = numDataCodewords;\n            this.codewords = codewords;\n        }\n        /**\n         * <p>When QR Codes use multiple data blocks, they are actually interleaved.\n         * That is, the first byte of data block 1 to n is written, then the second bytes, and so on. This\n         * method will separate the data into original blocks.</p>\n         *\n         * @param rawCodewords bytes as read directly from the QR Code\n         * @param version version of the QR Code\n         * @param ecLevel error-correction level of the QR Code\n         * @return DataBlocks containing original bytes, \"de-interleaved\" from representation in the\n         *         QR Code\n         */\n        static getDataBlocks(rawCodewords, version, ecLevel) {\n            if (rawCodewords.length !== version.getTotalCodewords()) {\n                throw new IllegalArgumentException();\n            }\n            // Figure out the number and size of data blocks used by this version and\n            // error correction level\n            const ecBlocks = version.getECBlocksForLevel(ecLevel);\n            // First count the total number of data blocks\n            let totalBlocks = 0;\n            const ecBlockArray = ecBlocks.getECBlocks();\n            for (const ecBlock of ecBlockArray) {\n                totalBlocks += ecBlock.getCount();\n            }\n            // Now establish DataBlocks of the appropriate size and number of data codewords\n            const result = new Array(totalBlocks);\n            let numResultBlocks = 0;\n            for (const ecBlock of ecBlockArray) {\n                for (let i = 0; i < ecBlock.getCount(); i++) {\n                    const numDataCodewords = ecBlock.getDataCodewords();\n                    const numBlockCodewords = ecBlocks.getECCodewordsPerBlock() + numDataCodewords;\n                    result[numResultBlocks++] = new DataBlock$1(numDataCodewords, new Uint8Array(numBlockCodewords));\n                }\n            }\n            // All blocks have the same amount of data, except that the last n\n            // (where n may be 0) have 1 more byte. Figure out where these start.\n            const shorterBlocksTotalCodewords = result[0].codewords.length;\n            let longerBlocksStartAt = result.length - 1;\n            // TYPESCRIPTPORT: check length is correct here\n            while (longerBlocksStartAt >= 0) {\n                const numCodewords = result[longerBlocksStartAt].codewords.length;\n                if (numCodewords === shorterBlocksTotalCodewords) {\n                    break;\n                }\n                longerBlocksStartAt--;\n            }\n            longerBlocksStartAt++;\n            const shorterBlocksNumDataCodewords = shorterBlocksTotalCodewords - ecBlocks.getECCodewordsPerBlock();\n            // The last elements of result may be 1 element longer\n            // first fill out as many elements as all of them have\n            let rawCodewordsOffset = 0;\n            for (let i = 0; i < shorterBlocksNumDataCodewords; i++) {\n                for (let j = 0; j < numResultBlocks; j++) {\n                    result[j].codewords[i] = rawCodewords[rawCodewordsOffset++];\n                }\n            }\n            // Fill out the last data block in the longer ones\n            for (let j = longerBlocksStartAt; j < numResultBlocks; j++) {\n                result[j].codewords[shorterBlocksNumDataCodewords] = rawCodewords[rawCodewordsOffset++];\n            }\n            // Now add in error correction blocks\n            const max = result[0].codewords.length;\n            for (let i = shorterBlocksNumDataCodewords; i < max; i++) {\n                for (let j = 0; j < numResultBlocks; j++) {\n                    const iOffset = j < longerBlocksStartAt ? i : i + 1;\n                    result[j].codewords[iOffset] = rawCodewords[rawCodewordsOffset++];\n                }\n            }\n            return result;\n        }\n        getNumDataCodewords() {\n            return this.numDataCodewords;\n        }\n        getCodewords() {\n            return this.codewords;\n        }\n    }\n\n    /*\n     * Copyright 2007 ZXing authors\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n    var ModeValues;\n    (function (ModeValues) {\n        ModeValues[ModeValues[\"TERMINATOR\"] = 0] = \"TERMINATOR\";\n        ModeValues[ModeValues[\"NUMERIC\"] = 1] = \"NUMERIC\";\n        ModeValues[ModeValues[\"ALPHANUMERIC\"] = 2] = \"ALPHANUMERIC\";\n        ModeValues[ModeValues[\"STRUCTURED_APPEND\"] = 3] = \"STRUCTURED_APPEND\";\n        ModeValues[ModeValues[\"BYTE\"] = 4] = \"BYTE\";\n        ModeValues[ModeValues[\"ECI\"] = 5] = \"ECI\";\n        ModeValues[ModeValues[\"KANJI\"] = 6] = \"KANJI\";\n        ModeValues[ModeValues[\"FNC1_FIRST_POSITION\"] = 7] = \"FNC1_FIRST_POSITION\";\n        ModeValues[ModeValues[\"FNC1_SECOND_POSITION\"] = 8] = \"FNC1_SECOND_POSITION\";\n        /** See GBT 18284-2000; \"Hanzi\" is a transliteration of this mode name. */\n        ModeValues[ModeValues[\"HANZI\"] = 9] = \"HANZI\";\n    })(ModeValues || (ModeValues = {}));\n    /**\n     * <p>See ISO 18004:2006, 6.4.1, Tables 2 and 3. This enum encapsulates the various modes in which\n     * data can be encoded to bits in the QR code standard.</p>\n     *\n     * @author Sean Owen\n     */\n    class Mode$1 {\n        constructor(value, stringValue, characterCountBitsForVersions, bits /*int*/) {\n            this.value = value;\n            this.stringValue = stringValue;\n            this.characterCountBitsForVersions = characterCountBitsForVersions;\n            this.bits = bits;\n            Mode$1.FOR_BITS.set(bits, this);\n            Mode$1.FOR_VALUE.set(value, this);\n        }\n        /**\n         * @param bits four bits encoding a QR Code data mode\n         * @return Mode encoded by these bits\n         * @throws IllegalArgumentException if bits do not correspond to a known mode\n         */\n        static forBits(bits /*int*/) {\n            const mode = Mode$1.FOR_BITS.get(bits);\n            if (undefined === mode) {\n                throw new IllegalArgumentException();\n            }\n            return mode;\n        }\n        /**\n         * @param version version in question\n         * @return number of bits used, in this QR Code symbol {@link Version}, to encode the\n         *         count of characters that will follow encoded in this Mode\n         */\n        getCharacterCountBits(version) {\n            const versionNumber = version.getVersionNumber();\n            let offset;\n            if (versionNumber <= 9) {\n                offset = 0;\n            }\n            else if (versionNumber <= 26) {\n                offset = 1;\n            }\n            else {\n                offset = 2;\n            }\n            return this.characterCountBitsForVersions[offset];\n        }\n        getValue() {\n            return this.value;\n        }\n        getBits() {\n            return this.bits;\n        }\n        equals(o) {\n            if (!(o instanceof Mode$1)) {\n                return false;\n            }\n            const other = o;\n            return this.value === other.value;\n        }\n        toString() {\n            return this.stringValue;\n        }\n    }\n    Mode$1.FOR_BITS = new Map();\n    Mode$1.FOR_VALUE = new Map();\n    Mode$1.TERMINATOR = new Mode$1(ModeValues.TERMINATOR, 'TERMINATOR', Int32Array.from([0, 0, 0]), 0x00); // Not really a mode...\n    Mode$1.NUMERIC = new Mode$1(ModeValues.NUMERIC, 'NUMERIC', Int32Array.from([10, 12, 14]), 0x01);\n    Mode$1.ALPHANUMERIC = new Mode$1(ModeValues.ALPHANUMERIC, 'ALPHANUMERIC', Int32Array.from([9, 11, 13]), 0x02);\n    Mode$1.STRUCTURED_APPEND = new Mode$1(ModeValues.STRUCTURED_APPEND, 'STRUCTURED_APPEND', Int32Array.from([0, 0, 0]), 0x03); // Not supported\n    Mode$1.BYTE = new Mode$1(ModeValues.BYTE, 'BYTE', Int32Array.from([8, 16, 16]), 0x04);\n    Mode$1.ECI = new Mode$1(ModeValues.ECI, 'ECI', Int32Array.from([0, 0, 0]), 0x07); // character counts don't apply\n    Mode$1.KANJI = new Mode$1(ModeValues.KANJI, 'KANJI', Int32Array.from([8, 10, 12]), 0x08);\n    Mode$1.FNC1_FIRST_POSITION = new Mode$1(ModeValues.FNC1_FIRST_POSITION, 'FNC1_FIRST_POSITION', Int32Array.from([0, 0, 0]), 0x05);\n    Mode$1.FNC1_SECOND_POSITION = new Mode$1(ModeValues.FNC1_SECOND_POSITION, 'FNC1_SECOND_POSITION', Int32Array.from([0, 0, 0]), 0x09);\n    /** See GBT 18284-2000; \"Hanzi\" is a transliteration of this mode name. */\n    Mode$1.HANZI = new Mode$1(ModeValues.HANZI, 'HANZI', Int32Array.from([8, 10, 12]), 0x0D);\n\n    /*\n     * Copyright 2007 ZXing authors\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n    /*import java.io.UnsupportedEncodingException;*/\n    /*import java.util.ArrayList;*/\n    /*import java.util.Collection;*/\n    /*import java.util.List;*/\n    /*import java.util.Map;*/\n    /**\n     * <p>QR Codes can encode text as bits in one of several modes, and can use multiple modes\n     * in one QR Code. This class decodes the bits back into text.</p>\n     *\n     * <p>See ISO 18004:2006, 6.4.3 - 6.4.7</p>\n     *\n     * @author Sean Owen\n     */\n    class DecodedBitStreamParser$1 {\n        static decode(bytes, version, ecLevel, hints) {\n            const bits = new BitSource(bytes);\n            let result = new StringBuilder();\n            const byteSegments = new Array(); // 1\n            // TYPESCRIPTPORT: I do not use constructor with size 1 as in original Java means capacity and the array length is checked below\n            let symbolSequence = -1;\n            let parityData = -1;\n            try {\n                let currentCharacterSetECI = null;\n                let fc1InEffect = false;\n                let mode;\n                do {\n                    // While still another segment to read...\n                    if (bits.available() < 4) {\n                        // OK, assume we're done. Really, a TERMINATOR mode should have been recorded here\n                        mode = Mode$1.TERMINATOR;\n                    }\n                    else {\n                        const modeBits = bits.readBits(4);\n                        mode = Mode$1.forBits(modeBits); // mode is encoded by 4 bits\n                    }\n                    switch (mode) {\n                        case Mode$1.TERMINATOR:\n                            break;\n                        case Mode$1.FNC1_FIRST_POSITION:\n                        case Mode$1.FNC1_SECOND_POSITION:\n                            // We do little with FNC1 except alter the parsed result a bit according to the spec\n                            fc1InEffect = true;\n                            break;\n                        case Mode$1.STRUCTURED_APPEND:\n                            if (bits.available() < 16) {\n                                throw new FormatException();\n                            }\n                            // sequence number and parity is added later to the result metadata\n                            // Read next 8 bits (symbol sequence #) and 8 bits (data: parity), then continue\n                            symbolSequence = bits.readBits(8);\n                            parityData = bits.readBits(8);\n                            break;\n                        case Mode$1.ECI:\n                            // Count doesn't apply to ECI\n                            const value = DecodedBitStreamParser$1.parseECIValue(bits);\n                            currentCharacterSetECI = CharacterSetECI.getCharacterSetECIByValue(value);\n                            if (currentCharacterSetECI === null) {\n                                throw new FormatException();\n                            }\n                            break;\n                        case Mode$1.HANZI:\n                            // First handle Hanzi mode which does not start with character count\n                            // Chinese mode contains a sub set indicator right after mode indicator\n                            const subset = bits.readBits(4);\n                            const countHanzi = bits.readBits(mode.getCharacterCountBits(version));\n                            if (subset === DecodedBitStreamParser$1.GB2312_SUBSET) {\n                                DecodedBitStreamParser$1.decodeHanziSegment(bits, result, countHanzi);\n                            }\n                            break;\n                        default:\n                            // \"Normal\" QR code modes:\n                            // How many characters will follow, encoded in this mode?\n                            const count = bits.readBits(mode.getCharacterCountBits(version));\n                            switch (mode) {\n                                case Mode$1.NUMERIC:\n                                    DecodedBitStreamParser$1.decodeNumericSegment(bits, result, count);\n                                    break;\n                                case Mode$1.ALPHANUMERIC:\n                                    DecodedBitStreamParser$1.decodeAlphanumericSegment(bits, result, count, fc1InEffect);\n                                    break;\n                                case Mode$1.BYTE:\n                                    DecodedBitStreamParser$1.decodeByteSegment(bits, result, count, currentCharacterSetECI, byteSegments, hints);\n                                    break;\n                                case Mode$1.KANJI:\n                                    DecodedBitStreamParser$1.decodeKanjiSegment(bits, result, count);\n                                    break;\n                                default:\n                                    throw new FormatException();\n                            }\n                            break;\n                    }\n                } while (mode !== Mode$1.TERMINATOR);\n            }\n            catch (iae /*: IllegalArgumentException*/) {\n                // from readBits() calls\n                throw new FormatException();\n            }\n            return new DecoderResult(bytes, result.toString(), byteSegments.length === 0 ? null : byteSegments, ecLevel === null ? null : ecLevel.toString(), symbolSequence, parityData);\n        }\n        /**\n         * See specification GBT 18284-2000\n         */\n        static decodeHanziSegment(bits, result, count /*int*/) {\n            // Don't crash trying to read more bits than we have available.\n            if (count * 13 > bits.available()) {\n                throw new FormatException();\n            }\n            // Each character will require 2 bytes. Read the characters as 2-byte pairs\n            // and decode as GB2312 afterwards\n            const buffer = new Uint8Array(2 * count);\n            let offset = 0;\n            while (count > 0) {\n                // Each 13 bits encodes a 2-byte character\n                const twoBytes = bits.readBits(13);\n                let assembledTwoBytes = (((twoBytes / 0x060) << 8) & 0xFFFFFFFF) | (twoBytes % 0x060);\n                if (assembledTwoBytes < 0x003BF) {\n                    // In the 0xA1A1 to 0xAAFE range\n                    assembledTwoBytes += 0x0A1A1;\n                }\n                else {\n                    // In the 0xB0A1 to 0xFAFE range\n                    assembledTwoBytes += 0x0A6A1;\n                }\n                buffer[offset] = /*(byte) */ ((assembledTwoBytes >> 8) & 0xFF);\n                buffer[offset + 1] = /*(byte) */ (assembledTwoBytes & 0xFF);\n                offset += 2;\n                count--;\n            }\n            try {\n                result.append(StringEncoding.decode(buffer, StringUtils.GB2312));\n                // TYPESCRIPTPORT: TODO: implement GB2312 decode. StringView from MDN could be a starting point\n            }\n            catch (ignored /*: UnsupportedEncodingException*/) {\n                throw new FormatException(ignored);\n            }\n        }\n        static decodeKanjiSegment(bits, result, count /*int*/) {\n            // Don't crash trying to read more bits than we have available.\n            if (count * 13 > bits.available()) {\n                throw new FormatException();\n            }\n            // Each character will require 2 bytes. Read the characters as 2-byte pairs\n            // and decode as Shift_JIS afterwards\n            const buffer = new Uint8Array(2 * count);\n            let offset = 0;\n            while (count > 0) {\n                // Each 13 bits encodes a 2-byte character\n                const twoBytes = bits.readBits(13);\n                let assembledTwoBytes = (((twoBytes / 0x0C0) << 8) & 0xFFFFFFFF) | (twoBytes % 0x0C0);\n                if (assembledTwoBytes < 0x01F00) {\n                    // In the 0x8140 to 0x9FFC range\n                    assembledTwoBytes += 0x08140;\n                }\n                else {\n                    // In the 0xE040 to 0xEBBF range\n                    assembledTwoBytes += 0x0C140;\n                }\n                buffer[offset] = /*(byte) */ (assembledTwoBytes >> 8);\n                buffer[offset + 1] = /*(byte) */ assembledTwoBytes;\n                offset += 2;\n                count--;\n            }\n            // Shift_JIS may not be supported in some environments:\n            try {\n                result.append(StringEncoding.decode(buffer, StringUtils.SHIFT_JIS));\n                // TYPESCRIPTPORT: TODO: implement SHIFT_JIS decode. StringView from MDN could be a starting point\n            }\n            catch (ignored /*: UnsupportedEncodingException*/) {\n                throw new FormatException(ignored);\n            }\n        }\n        static decodeByteSegment(bits, result, count /*int*/, currentCharacterSetECI, byteSegments, hints) {\n            // Don't crash trying to read more bits than we have available.\n            if (8 * count > bits.available()) {\n                throw new FormatException();\n            }\n            const readBytes = new Uint8Array(count);\n            for (let i = 0; i < count; i++) {\n                readBytes[i] = /*(byte) */ bits.readBits(8);\n            }\n            let encoding;\n            if (currentCharacterSetECI === null) {\n                // The spec isn't clear on this mode; see\n                // section 6.4.5: t does not say which encoding to assuming\n                // upon decoding. I have seen ISO-8859-1 used as well as\n                // Shift_JIS -- without anything like an ECI designator to\n                // give a hint.\n                encoding = StringUtils.guessEncoding(readBytes, hints);\n            }\n            else {\n                encoding = currentCharacterSetECI.getName();\n            }\n            try {\n                result.append(StringEncoding.decode(readBytes, encoding));\n            }\n            catch (ignored /*: UnsupportedEncodingException*/) {\n                throw new FormatException(ignored);\n            }\n            byteSegments.push(readBytes);\n        }\n        static toAlphaNumericChar(value /*int*/) {\n            if (value >= DecodedBitStreamParser$1.ALPHANUMERIC_CHARS.length) {\n                throw new FormatException();\n            }\n            return DecodedBitStreamParser$1.ALPHANUMERIC_CHARS[value];\n        }\n        static decodeAlphanumericSegment(bits, result, count /*int*/, fc1InEffect) {\n            // Read two characters at a time\n            const start = result.length();\n            while (count > 1) {\n                if (bits.available() < 11) {\n                    throw new FormatException();\n                }\n                const nextTwoCharsBits = bits.readBits(11);\n                result.append(DecodedBitStreamParser$1.toAlphaNumericChar(Math.floor(nextTwoCharsBits / 45)));\n                result.append(DecodedBitStreamParser$1.toAlphaNumericChar(nextTwoCharsBits % 45));\n                count -= 2;\n            }\n            if (count === 1) {\n                // special case: one character left\n                if (bits.available() < 6) {\n                    throw new FormatException();\n                }\n                result.append(DecodedBitStreamParser$1.toAlphaNumericChar(bits.readBits(6)));\n            }\n            // See section 6.4.8.1, 6.4.8.2\n            if (fc1InEffect) {\n                // We need to massage the result a bit if in an FNC1 mode:\n                for (let i = start; i < result.length(); i++) {\n                    if (result.charAt(i) === '%') {\n                        if (i < result.length() - 1 && result.charAt(i + 1) === '%') {\n                            // %% is rendered as %\n                            result.deleteCharAt(i + 1);\n                        }\n                        else {\n                            // In alpha mode, % should be converted to FNC1 separator 0x1D\n                            result.setCharAt(i, String.fromCharCode(0x1D));\n                        }\n                    }\n                }\n            }\n        }\n        static decodeNumericSegment(bits, result, count /*int*/) {\n            // Read three digits at a time\n            while (count >= 3) {\n                // Each 10 bits encodes three digits\n                if (bits.available() < 10) {\n                    throw new FormatException();\n                }\n                const threeDigitsBits = bits.readBits(10);\n                if (threeDigitsBits >= 1000) {\n                    throw new FormatException();\n                }\n                result.append(DecodedBitStreamParser$1.toAlphaNumericChar(Math.floor(threeDigitsBits / 100)));\n                result.append(DecodedBitStreamParser$1.toAlphaNumericChar(Math.floor(threeDigitsBits / 10) % 10));\n                result.append(DecodedBitStreamParser$1.toAlphaNumericChar(threeDigitsBits % 10));\n                count -= 3;\n            }\n            if (count === 2) {\n                // Two digits left over to read, encoded in 7 bits\n                if (bits.available() < 7) {\n                    throw new FormatException();\n                }\n                const twoDigitsBits = bits.readBits(7);\n                if (twoDigitsBits >= 100) {\n                    throw new FormatException();\n                }\n                result.append(DecodedBitStreamParser$1.toAlphaNumericChar(Math.floor(twoDigitsBits / 10)));\n                result.append(DecodedBitStreamParser$1.toAlphaNumericChar(twoDigitsBits % 10));\n            }\n            else if (count === 1) {\n                // One digit left over to read\n                if (bits.available() < 4) {\n                    throw new FormatException();\n                }\n                const digitBits = bits.readBits(4);\n                if (digitBits >= 10) {\n                    throw new FormatException();\n                }\n                result.append(DecodedBitStreamParser$1.toAlphaNumericChar(digitBits));\n            }\n        }\n        static parseECIValue(bits) {\n            const firstByte = bits.readBits(8);\n            if ((firstByte & 0x80) === 0) {\n                // just one byte\n                return firstByte & 0x7F;\n            }\n            if ((firstByte & 0xC0) === 0x80) {\n                // two bytes\n                const secondByte = bits.readBits(8);\n                return (((firstByte & 0x3F) << 8) & 0xFFFFFFFF) | secondByte;\n            }\n            if ((firstByte & 0xE0) === 0xC0) {\n                // three bytes\n                const secondThirdBytes = bits.readBits(16);\n                return (((firstByte & 0x1F) << 16) & 0xFFFFFFFF) | secondThirdBytes;\n            }\n            throw new FormatException();\n        }\n    }\n    /**\n     * See ISO 18004:2006, 6.4.4 Table 5\n     */\n    DecodedBitStreamParser$1.ALPHANUMERIC_CHARS = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ $%*+-./:';\n    DecodedBitStreamParser$1.GB2312_SUBSET = 1;\n    // function Uint8ArrayToString(a: Uint8Array): string {\n    //     const CHUNK_SZ = 0x8000;\n    //     const c = new StringBuilder();\n    //     for (let i = 0, length = a.length; i < length; i += CHUNK_SZ) {\n    //         c.append(String.fromCharCode.apply(null, a.subarray(i, i + CHUNK_SZ)));\n    //     }\n    //     return c.toString();\n    // }\n\n    /*\n     * Copyright 2013 ZXing authors\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n    /**\n     * Meta-data container for QR Code decoding. Instances of this class may be used to convey information back to the\n     * decoding caller. Callers are expected to process this.\n     *\n     * @see com.google.zxing.common.DecoderResult#getOther()\n     */\n    class QRCodeDecoderMetaData {\n        constructor(mirrored) {\n            this.mirrored = mirrored;\n        }\n        /**\n         * @return true if the QR Code was mirrored.\n         */\n        isMirrored() {\n            return this.mirrored;\n        }\n        /**\n         * Apply the result points' order correction due to mirroring.\n         *\n         * @param points Array of points to apply mirror correction to.\n         */\n        applyMirroredCorrection(points) {\n            if (!this.mirrored || points === null || points.length < 3) {\n                return;\n            }\n            const bottomLeft = points[0];\n            points[0] = points[2];\n            points[2] = bottomLeft;\n            // No need to 'fix' top-left and alignment pattern.\n        }\n    }\n\n    /*\n     * Copyright 2007 ZXing authors\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n    /*import java.util.Map;*/\n    /**\n     * <p>The main class which implements QR Code decoding -- as opposed to locating and extracting\n     * the QR Code from an image.</p>\n     *\n     * @author Sean Owen\n     */\n    class Decoder$2 {\n        constructor() {\n            this.rsDecoder = new ReedSolomonDecoder(GenericGF.QR_CODE_FIELD_256);\n        }\n        // public decode(image: boolean[][]): DecoderResult /*throws ChecksumException, FormatException*/ {\n        //   return decode(image, null)\n        // }\n        /**\n         * <p>Convenience method that can decode a QR Code represented as a 2D array of booleans.\n         * \"true\" is taken to mean a black module.</p>\n         *\n         * @param image booleans representing white/black QR Code modules\n         * @param hints decoding hints that should be used to influence decoding\n         * @return text and bytes encoded within the QR Code\n         * @throws FormatException if the QR Code cannot be decoded\n         * @throws ChecksumException if error correction fails\n         */\n        decodeBooleanArray(image, hints) {\n            return this.decodeBitMatrix(BitMatrix.parseFromBooleanArray(image), hints);\n        }\n        // public decodeBitMatrix(bits: BitMatrix): DecoderResult /*throws ChecksumException, FormatException*/ {\n        //   return decode(bits, null)\n        // }\n        /**\n         * <p>Decodes a QR Code represented as a {@link BitMatrix}. A 1 or \"true\" is taken to mean a black module.</p>\n         *\n         * @param bits booleans representing white/black QR Code modules\n         * @param hints decoding hints that should be used to influence decoding\n         * @return text and bytes encoded within the QR Code\n         * @throws FormatException if the QR Code cannot be decoded\n         * @throws ChecksumException if error correction fails\n         */\n        decodeBitMatrix(bits, hints) {\n            // Construct a parser and read version, error-correction level\n            const parser = new BitMatrixParser$1(bits);\n            let ex = null;\n            try {\n                return this.decodeBitMatrixParser(parser, hints);\n            }\n            catch (e /*: FormatException, ChecksumException*/) {\n                ex = e;\n            }\n            try {\n                // Revert the bit matrix\n                parser.remask();\n                // Will be attempting a mirrored reading of the version and format info.\n                parser.setMirror(true);\n                // Preemptively read the version.\n                parser.readVersion();\n                // Preemptively read the format information.\n                parser.readFormatInformation();\n                /*\n                 * Since we're here, this means we have successfully detected some kind\n                 * of version and format information when mirrored. This is a good sign,\n                 * that the QR code may be mirrored, and we should try once more with a\n                 * mirrored content.\n                 */\n                // Prepare for a mirrored reading.\n                parser.mirror();\n                const result = this.decodeBitMatrixParser(parser, hints);\n                // Success! Notify the caller that the code was mirrored.\n                result.setOther(new QRCodeDecoderMetaData(true));\n                return result;\n            }\n            catch (e /*FormatException | ChecksumException*/) {\n                // Throw the exception from the original reading\n                if (ex !== null) {\n                    throw ex;\n                }\n                throw e;\n            }\n        }\n        decodeBitMatrixParser(parser, hints) {\n            const version = parser.readVersion();\n            const ecLevel = parser.readFormatInformation().getErrorCorrectionLevel();\n            // Read codewords\n            const codewords = parser.readCodewords();\n            // Separate into data blocks\n            const dataBlocks = DataBlock$1.getDataBlocks(codewords, version, ecLevel);\n            // Count total number of data bytes\n            let totalBytes = 0;\n            for (const dataBlock of dataBlocks) {\n                totalBytes += dataBlock.getNumDataCodewords();\n            }\n            const resultBytes = new Uint8Array(totalBytes);\n            let resultOffset = 0;\n            // Error-correct and copy data blocks together into a stream of bytes\n            for (const dataBlock of dataBlocks) {\n                const codewordBytes = dataBlock.getCodewords();\n                const numDataCodewords = dataBlock.getNumDataCodewords();\n                this.correctErrors(codewordBytes, numDataCodewords);\n                for (let i = 0; i < numDataCodewords; i++) {\n                    resultBytes[resultOffset++] = codewordBytes[i];\n                }\n            }\n            // Decode the contents of that stream of bytes\n            return DecodedBitStreamParser$1.decode(resultBytes, version, ecLevel, hints);\n        }\n        /**\n         * <p>Given data and error-correction codewords received, possibly corrupted by errors, attempts to\n         * correct the errors in-place using Reed-Solomon error correction.</p>\n         *\n         * @param codewordBytes data and error correction codewords\n         * @param numDataCodewords number of codewords that are data bytes\n         * @throws ChecksumException if error correction fails\n         */\n        correctErrors(codewordBytes, numDataCodewords /*int*/) {\n            // const numCodewords = codewordBytes.length;\n            // First read into an array of ints\n            const codewordsInts = new Int32Array(codewordBytes);\n            // TYPESCRIPTPORT: not realy necessary to transform to ints? could redesign everything to work with unsigned bytes?\n            // const codewordsInts = new Int32Array(numCodewords)\n            // for (let i = 0; i < numCodewords; i++) {\n            //   codewordsInts[i] = codewordBytes[i] & 0xFF\n            // }\n            try {\n                this.rsDecoder.decode(codewordsInts, codewordBytes.length - numDataCodewords);\n            }\n            catch (ignored /*: ReedSolomonException*/) {\n                throw new ChecksumException();\n            }\n            // Copy back into array of bytes -- only need to worry about the bytes that were data\n            // We don't care about errors in the error-correction codewords\n            for (let i = 0; i < numDataCodewords; i++) {\n                codewordBytes[i] = /*(byte) */ codewordsInts[i];\n            }\n        }\n    }\n\n    /*\n     * Copyright 2007 ZXing authors\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n    /**\n     * <p>Encapsulates an alignment pattern, which are the smaller square patterns found in\n     * all but the simplest QR Codes.</p>\n     *\n     * @author Sean Owen\n     */\n    class AlignmentPattern extends ResultPoint {\n        constructor(posX /*float*/, posY /*float*/, estimatedModuleSize /*float*/) {\n            super(posX, posY);\n            this.estimatedModuleSize = estimatedModuleSize;\n        }\n        /**\n         * <p>Determines if this alignment pattern \"about equals\" an alignment pattern at the stated\n         * position and size -- meaning, it is at nearly the same center with nearly the same size.</p>\n         */\n        aboutEquals(moduleSize /*float*/, i /*float*/, j /*float*/) {\n            if (Math.abs(i - this.getY()) <= moduleSize && Math.abs(j - this.getX()) <= moduleSize) {\n                const moduleSizeDiff = Math.abs(moduleSize - this.estimatedModuleSize);\n                return moduleSizeDiff <= 1.0 || moduleSizeDiff <= this.estimatedModuleSize;\n            }\n            return false;\n        }\n        /**\n         * Combines this object's current estimate of a finder pattern position and module size\n         * with a new estimate. It returns a new {@code FinderPattern} containing an average of the two.\n         */\n        combineEstimate(i /*float*/, j /*float*/, newModuleSize /*float*/) {\n            const combinedX = (this.getX() + j) / 2.0;\n            const combinedY = (this.getY() + i) / 2.0;\n            const combinedModuleSize = (this.estimatedModuleSize + newModuleSize) / 2.0;\n            return new AlignmentPattern(combinedX, combinedY, combinedModuleSize);\n        }\n    }\n\n    /*\n     * Copyright 2007 ZXing authors\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n    /*import java.util.ArrayList;*/\n    /*import java.util.List;*/\n    /**\n     * <p>This class attempts to find alignment patterns in a QR Code. Alignment patterns look like finder\n     * patterns but are smaller and appear at regular intervals throughout the image.</p>\n     *\n     * <p>At the moment this only looks for the bottom-right alignment pattern.</p>\n     *\n     * <p>This is mostly a simplified copy of {@link FinderPatternFinder}. It is copied,\n     * pasted and stripped down here for maximum performance but does unfortunately duplicate\n     * some code.</p>\n     *\n     * <p>This class is thread-safe but not reentrant. Each thread must allocate its own object.</p>\n     *\n     * @author Sean Owen\n     */\n    class AlignmentPatternFinder {\n        /**\n         * <p>Creates a finder that will look in a portion of the whole image.</p>\n         *\n         * @param image image to search\n         * @param startX left column from which to start searching\n         * @param startY top row from which to start searching\n         * @param width width of region to search\n         * @param height height of region to search\n         * @param moduleSize estimated module size so far\n         */\n        constructor(image, startX /*int*/, startY /*int*/, width /*int*/, height /*int*/, moduleSize /*float*/, resultPointCallback) {\n            this.image = image;\n            this.startX = startX;\n            this.startY = startY;\n            this.width = width;\n            this.height = height;\n            this.moduleSize = moduleSize;\n            this.resultPointCallback = resultPointCallback;\n            this.possibleCenters = []; // new Array<any>(5))\n            // TYPESCRIPTPORT: array initialization without size as the length is checked below\n            this.crossCheckStateCount = new Int32Array(3);\n        }\n        /**\n         * <p>This method attempts to find the bottom-right alignment pattern in the image. It is a bit messy since\n         * it's pretty performance-critical and so is written to be fast foremost.</p>\n         *\n         * @return {@link AlignmentPattern} if found\n         * @throws NotFoundException if not found\n         */\n        find() {\n            const startX = this.startX;\n            const height = this.height;\n            const width = this.width;\n            const maxJ = startX + width;\n            const middleI = this.startY + (height / 2);\n            // We are looking for black/white/black modules in 1:1:1 ratio\n            // this tracks the number of black/white/black modules seen so far\n            const stateCount = new Int32Array(3);\n            const image = this.image;\n            for (let iGen = 0; iGen < height; iGen++) {\n                // Search from middle outwards\n                const i = middleI + ((iGen & 0x01) === 0 ? Math.floor((iGen + 1) / 2) : -Math.floor((iGen + 1) / 2));\n                stateCount[0] = 0;\n                stateCount[1] = 0;\n                stateCount[2] = 0;\n                let j = startX;\n                // Burn off leading white pixels before anything else; if we start in the middle of\n                // a white run, it doesn't make sense to count its length, since we don't know if the\n                // white run continued to the left of the start point\n                while (j < maxJ && !image.get(j, i)) {\n                    j++;\n                }\n                let currentState = 0;\n                while (j < maxJ) {\n                    if (image.get(j, i)) {\n                        // Black pixel\n                        if (currentState === 1) { // Counting black pixels\n                            stateCount[1]++;\n                        }\n                        else { // Counting white pixels\n                            if (currentState === 2) { // A winner?\n                                if (this.foundPatternCross(stateCount)) { // Yes\n                                    const confirmed = this.handlePossibleCenter(stateCount, i, j);\n                                    if (confirmed !== null) {\n                                        return confirmed;\n                                    }\n                                }\n                                stateCount[0] = stateCount[2];\n                                stateCount[1] = 1;\n                                stateCount[2] = 0;\n                                currentState = 1;\n                            }\n                            else {\n                                stateCount[++currentState]++;\n                            }\n                        }\n                    }\n                    else { // White pixel\n                        if (currentState === 1) { // Counting black pixels\n                            currentState++;\n                        }\n                        stateCount[currentState]++;\n                    }\n                    j++;\n                }\n                if (this.foundPatternCross(stateCount)) {\n                    const confirmed = this.handlePossibleCenter(stateCount, i, maxJ);\n                    if (confirmed !== null) {\n                        return confirmed;\n                    }\n                }\n            }\n            // Hmm, nothing we saw was observed and confirmed twice. If we had\n            // any guess at all, return it.\n            if (this.possibleCenters.length !== 0) {\n                return this.possibleCenters[0];\n            }\n            throw new NotFoundException();\n        }\n        /**\n         * Given a count of black/white/black pixels just seen and an end position,\n         * figures the location of the center of this black/white/black run.\n         */\n        static centerFromEnd(stateCount, end /*int*/) {\n            return (end - stateCount[2]) - stateCount[1] / 2.0;\n        }\n        /**\n         * @param stateCount count of black/white/black pixels just read\n         * @return true iff the proportions of the counts is close enough to the 1/1/1 ratios\n         *         used by alignment patterns to be considered a match\n         */\n        foundPatternCross(stateCount) {\n            const moduleSize = this.moduleSize;\n            const maxVariance = moduleSize / 2.0;\n            for (let i = 0; i < 3; i++) {\n                if (Math.abs(moduleSize - stateCount[i]) >= maxVariance) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        /**\n         * <p>After a horizontal scan finds a potential alignment pattern, this method\n         * \"cross-checks\" by scanning down vertically through the center of the possible\n         * alignment pattern to see if the same proportion is detected.</p>\n         *\n         * @param startI row where an alignment pattern was detected\n         * @param centerJ center of the section that appears to cross an alignment pattern\n         * @param maxCount maximum reasonable number of modules that should be\n         * observed in any reading state, based on the results of the horizontal scan\n         * @return vertical center of alignment pattern, or {@link Float#NaN} if not found\n         */\n        crossCheckVertical(startI /*int*/, centerJ /*int*/, maxCount /*int*/, originalStateCountTotal /*int*/) {\n            const image = this.image;\n            const maxI = image.getHeight();\n            const stateCount = this.crossCheckStateCount;\n            stateCount[0] = 0;\n            stateCount[1] = 0;\n            stateCount[2] = 0;\n            // Start counting up from center\n            let i = startI;\n            while (i >= 0 && image.get(centerJ, i) && stateCount[1] <= maxCount) {\n                stateCount[1]++;\n                i--;\n            }\n            // If already too many modules in this state or ran off the edge:\n            if (i < 0 || stateCount[1] > maxCount) {\n                return NaN;\n            }\n            while (i >= 0 && !image.get(centerJ, i) && stateCount[0] <= maxCount) {\n                stateCount[0]++;\n                i--;\n            }\n            if (stateCount[0] > maxCount) {\n                return NaN;\n            }\n            // Now also count down from center\n            i = startI + 1;\n            while (i < maxI && image.get(centerJ, i) && stateCount[1] <= maxCount) {\n                stateCount[1]++;\n                i++;\n            }\n            if (i === maxI || stateCount[1] > maxCount) {\n                return NaN;\n            }\n            while (i < maxI && !image.get(centerJ, i) && stateCount[2] <= maxCount) {\n                stateCount[2]++;\n                i++;\n            }\n            if (stateCount[2] > maxCount) {\n                return NaN;\n            }\n            const stateCountTotal = stateCount[0] + stateCount[1] + stateCount[2];\n            if (5 * Math.abs(stateCountTotal - originalStateCountTotal) >= 2 * originalStateCountTotal) {\n                return NaN;\n            }\n            return this.foundPatternCross(stateCount) ? AlignmentPatternFinder.centerFromEnd(stateCount, i) : NaN;\n        }\n        /**\n         * <p>This is called when a horizontal scan finds a possible alignment pattern. It will\n         * cross check with a vertical scan, and if successful, will see if this pattern had been\n         * found on a previous horizontal scan. If so, we consider it confirmed and conclude we have\n         * found the alignment pattern.</p>\n         *\n         * @param stateCount reading state module counts from horizontal scan\n         * @param i row where alignment pattern may be found\n         * @param j end of possible alignment pattern in row\n         * @return {@link AlignmentPattern} if we have found the same pattern twice, or null if not\n         */\n        handlePossibleCenter(stateCount, i /*int*/, j /*int*/) {\n            const stateCountTotal = stateCount[0] + stateCount[1] + stateCount[2];\n            const centerJ = AlignmentPatternFinder.centerFromEnd(stateCount, j);\n            const centerI = this.crossCheckVertical(i, /*(int) */ centerJ, 2 * stateCount[1], stateCountTotal);\n            if (!isNaN(centerI)) {\n                const estimatedModuleSize = (stateCount[0] + stateCount[1] + stateCount[2]) / 3.0;\n                for (const center of this.possibleCenters) {\n                    // Look for about the same center and module size:\n                    if (center.aboutEquals(estimatedModuleSize, centerI, centerJ)) {\n                        return center.combineEstimate(centerI, centerJ, estimatedModuleSize);\n                    }\n                }\n                // Hadn't found this before; save it\n                const point = new AlignmentPattern(centerJ, centerI, estimatedModuleSize);\n                this.possibleCenters.push(point);\n                if (this.resultPointCallback !== null && this.resultPointCallback !== undefined) {\n                    this.resultPointCallback.foundPossibleResultPoint(point);\n                }\n            }\n            return null;\n        }\n    }\n\n    /*\n     * Copyright 2007 ZXing authors\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n    /**\n     * <p>Encapsulates a finder pattern, which are the three square patterns found in\n     * the corners of QR Codes. It also encapsulates a count of similar finder patterns,\n     * as a convenience to the finder's bookkeeping.</p>\n     *\n     * @author Sean Owen\n     */\n    class FinderPattern$1 extends ResultPoint {\n        // FinderPattern(posX: number/*float*/, posY: number/*float*/, estimatedModuleSize: number/*float*/) {\n        //   this(posX, posY, estimatedModuleSize, 1)\n        // }\n        constructor(posX /*float*/, posY /*float*/, estimatedModuleSize /*float*/, count /*int*/) {\n            super(posX, posY);\n            this.estimatedModuleSize = estimatedModuleSize;\n            this.count = count;\n            if (undefined === count) {\n                this.count = 1;\n            }\n        }\n        getEstimatedModuleSize() {\n            return this.estimatedModuleSize;\n        }\n        getCount() {\n            return this.count;\n        }\n        /*\n        void incrementCount() {\n          this.count++\n        }\n         */\n        /**\n         * <p>Determines if this finder pattern \"about equals\" a finder pattern at the stated\n         * position and size -- meaning, it is at nearly the same center with nearly the same size.</p>\n         */\n        aboutEquals(moduleSize /*float*/, i /*float*/, j /*float*/) {\n            if (Math.abs(i - this.getY()) <= moduleSize && Math.abs(j - this.getX()) <= moduleSize) {\n                const moduleSizeDiff = Math.abs(moduleSize - this.estimatedModuleSize);\n                return moduleSizeDiff <= 1.0 || moduleSizeDiff <= this.estimatedModuleSize;\n            }\n            return false;\n        }\n        /**\n         * Combines this object's current estimate of a finder pattern position and module size\n         * with a new estimate. It returns a new {@code FinderPattern} containing a weighted average\n         * based on count.\n         */\n        combineEstimate(i /*float*/, j /*float*/, newModuleSize /*float*/) {\n            const combinedCount = this.count + 1;\n            const combinedX = (this.count * this.getX() + j) / combinedCount;\n            const combinedY = (this.count * this.getY() + i) / combinedCount;\n            const combinedModuleSize = (this.count * this.estimatedModuleSize + newModuleSize) / combinedCount;\n            return new FinderPattern$1(combinedX, combinedY, combinedModuleSize, combinedCount);\n        }\n    }\n\n    /*\n     * Copyright 2007 ZXing authors\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n    /**\n     * <p>Encapsulates information about finder patterns in an image, including the location of\n     * the three finder patterns, and their estimated module size.</p>\n     *\n     * @author Sean Owen\n     */\n    class FinderPatternInfo {\n        constructor(patternCenters) {\n            this.bottomLeft = patternCenters[0];\n            this.topLeft = patternCenters[1];\n            this.topRight = patternCenters[2];\n        }\n        getBottomLeft() {\n            return this.bottomLeft;\n        }\n        getTopLeft() {\n            return this.topLeft;\n        }\n        getTopRight() {\n            return this.topRight;\n        }\n    }\n\n    /*\n     * Copyright 2007 ZXing authors\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n    /*import java.io.Serializable;*/\n    /*import java.util.ArrayList;*/\n    /*import java.util.Collections;*/\n    /*import java.util.Comparator;*/\n    /*import java.util.List;*/\n    /*import java.util.Map;*/\n    /**\n     * <p>This class attempts to find finder patterns in a QR Code. Finder patterns are the square\n     * markers at three corners of a QR Code.</p>\n     *\n     * <p>This class is thread-safe but not reentrant. Each thread must allocate its own object.\n     *\n     * @author Sean Owen\n     */\n    class FinderPatternFinder {\n        /**\n         * <p>Creates a finder that will search the image for three finder patterns.</p>\n         *\n         * @param image image to search\n         */\n        // public constructor(image: BitMatrix) {\n        //   this(image, null)\n        // }\n        constructor(image, resultPointCallback) {\n            this.image = image;\n            this.resultPointCallback = resultPointCallback;\n            this.possibleCenters = [];\n            this.crossCheckStateCount = new Int32Array(5);\n            this.resultPointCallback = resultPointCallback;\n        }\n        getImage() {\n            return this.image;\n        }\n        getPossibleCenters() {\n            return this.possibleCenters;\n        }\n        find(hints) {\n            const tryHarder = (hints !== null && hints !== undefined) && undefined !== hints.get(DecodeHintType$1.TRY_HARDER);\n            const pureBarcode = (hints !== null && hints !== undefined) && undefined !== hints.get(DecodeHintType$1.PURE_BARCODE);\n            const image = this.image;\n            const maxI = image.getHeight();\n            const maxJ = image.getWidth();\n            // We are looking for black/white/black/white/black modules in\n            // 1:1:3:1:1 ratio; this tracks the number of such modules seen so far\n            // Let's assume that the maximum version QR Code we support takes up 1/4 the height of the\n            // image, and then account for the center being 3 modules in size. This gives the smallest\n            // number of pixels the center could be, so skip this often. When trying harder, look for all\n            // QR versions regardless of how dense they are.\n            let iSkip = Math.floor((3 * maxI) / (4 * FinderPatternFinder.MAX_MODULES));\n            if (iSkip < FinderPatternFinder.MIN_SKIP || tryHarder) {\n                iSkip = FinderPatternFinder.MIN_SKIP;\n            }\n            let done = false;\n            const stateCount = new Int32Array(5);\n            for (let i = iSkip - 1; i < maxI && !done; i += iSkip) {\n                // Get a row of black/white values\n                stateCount[0] = 0;\n                stateCount[1] = 0;\n                stateCount[2] = 0;\n                stateCount[3] = 0;\n                stateCount[4] = 0;\n                let currentState = 0;\n                for (let j = 0; j < maxJ; j++) {\n                    if (image.get(j, i)) {\n                        // Black pixel\n                        if ((currentState & 1) === 1) { // Counting white pixels\n                            currentState++;\n                        }\n                        stateCount[currentState]++;\n                    }\n                    else { // White pixel\n                        if ((currentState & 1) === 0) { // Counting black pixels\n                            if (currentState === 4) { // A winner?\n                                if (FinderPatternFinder.foundPatternCross(stateCount)) { // Yes\n                                    const confirmed = this.handlePossibleCenter(stateCount, i, j, pureBarcode);\n                                    if (confirmed === true) {\n                                        // Start examining every other line. Checking each line turned out to be too\n                                        // expensive and didn't improve performance.\n                                        iSkip = 2;\n                                        if (this.hasSkipped === true) {\n                                            done = this.haveMultiplyConfirmedCenters();\n                                        }\n                                        else {\n                                            const rowSkip = this.findRowSkip();\n                                            if (rowSkip > stateCount[2]) {\n                                                // Skip rows between row of lower confirmed center\n                                                // and top of presumed third confirmed center\n                                                // but back up a bit to get a full chance of detecting\n                                                // it, entire width of center of finder pattern\n                                                // Skip by rowSkip, but back off by stateCount[2] (size of last center\n                                                // of pattern we saw) to be conservative, and also back off by iSkip which\n                                                // is about to be re-added\n                                                i += rowSkip - stateCount[2] - iSkip;\n                                                j = maxJ - 1;\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        stateCount[0] = stateCount[2];\n                                        stateCount[1] = stateCount[3];\n                                        stateCount[2] = stateCount[4];\n                                        stateCount[3] = 1;\n                                        stateCount[4] = 0;\n                                        currentState = 3;\n                                        continue;\n                                    }\n                                    // Clear state to start looking again\n                                    currentState = 0;\n                                    stateCount[0] = 0;\n                                    stateCount[1] = 0;\n                                    stateCount[2] = 0;\n                                    stateCount[3] = 0;\n                                    stateCount[4] = 0;\n                                }\n                                else { // No, shift counts back by two\n                                    stateCount[0] = stateCount[2];\n                                    stateCount[1] = stateCount[3];\n                                    stateCount[2] = stateCount[4];\n                                    stateCount[3] = 1;\n                                    stateCount[4] = 0;\n                                    currentState = 3;\n                                }\n                            }\n                            else {\n                                stateCount[++currentState]++;\n                            }\n                        }\n                        else { // Counting white pixels\n                            stateCount[currentState]++;\n                        }\n                    }\n                }\n                if (FinderPatternFinder.foundPatternCross(stateCount)) {\n                    const confirmed = this.handlePossibleCenter(stateCount, i, maxJ, pureBarcode);\n                    if (confirmed === true) {\n                        iSkip = stateCount[0];\n                        if (this.hasSkipped) {\n                            // Found a third one\n                            done = this.haveMultiplyConfirmedCenters();\n                        }\n                    }\n                }\n            }\n            const patternInfo = this.selectBestPatterns();\n            ResultPoint.orderBestPatterns(patternInfo);\n            return new FinderPatternInfo(patternInfo);\n        }\n        /**\n         * Given a count of black/white/black/white/black pixels just seen and an end position,\n         * figures the location of the center of this run.\n         */\n        static centerFromEnd(stateCount, end /*int*/) {\n            return (end - stateCount[4] - stateCount[3]) - stateCount[2] / 2.0;\n        }\n        /**\n         * @param stateCount count of black/white/black/white/black pixels just read\n         * @return true iff the proportions of the counts is close enough to the 1/1/3/1/1 ratios\n         *         used by finder patterns to be considered a match\n         */\n        static foundPatternCross(stateCount) {\n            let totalModuleSize = 0;\n            for (let i = 0; i < 5; i++) {\n                const count = stateCount[i];\n                if (count === 0) {\n                    return false;\n                }\n                totalModuleSize += count;\n            }\n            if (totalModuleSize < 7) {\n                return false;\n            }\n            const moduleSize = totalModuleSize / 7.0;\n            const maxVariance = moduleSize / 2.0;\n            // Allow less than 50% variance from 1-1-3-1-1 proportions\n            return Math.abs(moduleSize - stateCount[0]) < maxVariance &&\n                Math.abs(moduleSize - stateCount[1]) < maxVariance &&\n                Math.abs(3.0 * moduleSize - stateCount[2]) < 3 * maxVariance &&\n                Math.abs(moduleSize - stateCount[3]) < maxVariance &&\n                Math.abs(moduleSize - stateCount[4]) < maxVariance;\n        }\n        getCrossCheckStateCount() {\n            const crossCheckStateCount = this.crossCheckStateCount;\n            crossCheckStateCount[0] = 0;\n            crossCheckStateCount[1] = 0;\n            crossCheckStateCount[2] = 0;\n            crossCheckStateCount[3] = 0;\n            crossCheckStateCount[4] = 0;\n            return crossCheckStateCount;\n        }\n        /**\n         * After a vertical and horizontal scan finds a potential finder pattern, this method\n         * \"cross-cross-cross-checks\" by scanning down diagonally through the center of the possible\n         * finder pattern to see if the same proportion is detected.\n         *\n         * @param startI row where a finder pattern was detected\n         * @param centerJ center of the section that appears to cross a finder pattern\n         * @param maxCount maximum reasonable number of modules that should be\n         *  observed in any reading state, based on the results of the horizontal scan\n         * @param originalStateCountTotal The original state count total.\n         * @return true if proportions are withing expected limits\n         */\n        crossCheckDiagonal(startI /*int*/, centerJ /*int*/, maxCount /*int*/, originalStateCountTotal /*int*/) {\n            const stateCount = this.getCrossCheckStateCount();\n            // Start counting up, left from center finding black center mass\n            let i = 0;\n            const image = this.image;\n            while (startI >= i && centerJ >= i && image.get(centerJ - i, startI - i)) {\n                stateCount[2]++;\n                i++;\n            }\n            if (startI < i || centerJ < i) {\n                return false;\n            }\n            // Continue up, left finding white space\n            while (startI >= i && centerJ >= i && !image.get(centerJ - i, startI - i) &&\n                stateCount[1] <= maxCount) {\n                stateCount[1]++;\n                i++;\n            }\n            // If already too many modules in this state or ran off the edge:\n            if (startI < i || centerJ < i || stateCount[1] > maxCount) {\n                return false;\n            }\n            // Continue up, left finding black border\n            while (startI >= i && centerJ >= i && image.get(centerJ - i, startI - i) &&\n                stateCount[0] <= maxCount) {\n                stateCount[0]++;\n                i++;\n            }\n            if (stateCount[0] > maxCount) {\n                return false;\n            }\n            const maxI = image.getHeight();\n            const maxJ = image.getWidth();\n            // Now also count down, right from center\n            i = 1;\n            while (startI + i < maxI && centerJ + i < maxJ && image.get(centerJ + i, startI + i)) {\n                stateCount[2]++;\n                i++;\n            }\n            // Ran off the edge?\n            if (startI + i >= maxI || centerJ + i >= maxJ) {\n                return false;\n            }\n            while (startI + i < maxI && centerJ + i < maxJ && !image.get(centerJ + i, startI + i) &&\n                stateCount[3] < maxCount) {\n                stateCount[3]++;\n                i++;\n            }\n            if (startI + i >= maxI || centerJ + i >= maxJ || stateCount[3] >= maxCount) {\n                return false;\n            }\n            while (startI + i < maxI && centerJ + i < maxJ && image.get(centerJ + i, startI + i) &&\n                stateCount[4] < maxCount) {\n                stateCount[4]++;\n                i++;\n            }\n            if (stateCount[4] >= maxCount) {\n                return false;\n            }\n            // If we found a finder-pattern-like section, but its size is more than 100% different than\n            // the original, assume it's a false positive\n            const stateCountTotal = stateCount[0] + stateCount[1] + stateCount[2] + stateCount[3] + stateCount[4];\n            return Math.abs(stateCountTotal - originalStateCountTotal) < 2 * originalStateCountTotal &&\n                FinderPatternFinder.foundPatternCross(stateCount);\n        }\n        /**\n         * <p>After a horizontal scan finds a potential finder pattern, this method\n         * \"cross-checks\" by scanning down vertically through the center of the possible\n         * finder pattern to see if the same proportion is detected.</p>\n         *\n         * @param startI row where a finder pattern was detected\n         * @param centerJ center of the section that appears to cross a finder pattern\n         * @param maxCount maximum reasonable number of modules that should be\n         * observed in any reading state, based on the results of the horizontal scan\n         * @return vertical center of finder pattern, or {@link Float#NaN} if not found\n         */\n        crossCheckVertical(startI /*int*/, centerJ /*int*/, maxCount /*int*/, originalStateCountTotal /*int*/) {\n            const image = this.image;\n            const maxI = image.getHeight();\n            const stateCount = this.getCrossCheckStateCount();\n            // Start counting up from center\n            let i = startI;\n            while (i >= 0 && image.get(centerJ, i)) {\n                stateCount[2]++;\n                i--;\n            }\n            if (i < 0) {\n                return NaN;\n            }\n            while (i >= 0 && !image.get(centerJ, i) && stateCount[1] <= maxCount) {\n                stateCount[1]++;\n                i--;\n            }\n            // If already too many modules in this state or ran off the edge:\n            if (i < 0 || stateCount[1] > maxCount) {\n                return NaN;\n            }\n            while (i >= 0 && image.get(centerJ, i) && stateCount[0] <= maxCount) {\n                stateCount[0]++;\n                i--;\n            }\n            if (stateCount[0] > maxCount) {\n                return NaN;\n            }\n            // Now also count down from center\n            i = startI + 1;\n            while (i < maxI && image.get(centerJ, i)) {\n                stateCount[2]++;\n                i++;\n            }\n            if (i === maxI) {\n                return NaN;\n            }\n            while (i < maxI && !image.get(centerJ, i) && stateCount[3] < maxCount) {\n                stateCount[3]++;\n                i++;\n            }\n            if (i === maxI || stateCount[3] >= maxCount) {\n                return NaN;\n            }\n            while (i < maxI && image.get(centerJ, i) && stateCount[4] < maxCount) {\n                stateCount[4]++;\n                i++;\n            }\n            if (stateCount[4] >= maxCount) {\n                return NaN;\n            }\n            // If we found a finder-pattern-like section, but its size is more than 40% different than\n            // the original, assume it's a false positive\n            const stateCountTotal = stateCount[0] + stateCount[1] + stateCount[2] + stateCount[3] +\n                stateCount[4];\n            if (5 * Math.abs(stateCountTotal - originalStateCountTotal) >= 2 * originalStateCountTotal) {\n                return NaN;\n            }\n            return FinderPatternFinder.foundPatternCross(stateCount) ? FinderPatternFinder.centerFromEnd(stateCount, i) : NaN;\n        }\n        /**\n         * <p>Like {@link #crossCheckVertical(int, int, int, int)}, and in fact is basically identical,\n         * except it reads horizontally instead of vertically. This is used to cross-cross\n         * check a vertical cross check and locate the real center of the alignment pattern.</p>\n         */\n        crossCheckHorizontal(startJ /*int*/, centerI /*int*/, maxCount /*int*/, originalStateCountTotal /*int*/) {\n            const image = this.image;\n            const maxJ = image.getWidth();\n            const stateCount = this.getCrossCheckStateCount();\n            let j = startJ;\n            while (j >= 0 && image.get(j, centerI)) {\n                stateCount[2]++;\n                j--;\n            }\n            if (j < 0) {\n                return NaN;\n            }\n            while (j >= 0 && !image.get(j, centerI) && stateCount[1] <= maxCount) {\n                stateCount[1]++;\n                j--;\n            }\n            if (j < 0 || stateCount[1] > maxCount) {\n                return NaN;\n            }\n            while (j >= 0 && image.get(j, centerI) && stateCount[0] <= maxCount) {\n                stateCount[0]++;\n                j--;\n            }\n            if (stateCount[0] > maxCount) {\n                return NaN;\n            }\n            j = startJ + 1;\n            while (j < maxJ && image.get(j, centerI)) {\n                stateCount[2]++;\n                j++;\n            }\n            if (j === maxJ) {\n                return NaN;\n            }\n            while (j < maxJ && !image.get(j, centerI) && stateCount[3] < maxCount) {\n                stateCount[3]++;\n                j++;\n            }\n            if (j === maxJ || stateCount[3] >= maxCount) {\n                return NaN;\n            }\n            while (j < maxJ && image.get(j, centerI) && stateCount[4] < maxCount) {\n                stateCount[4]++;\n                j++;\n            }\n            if (stateCount[4] >= maxCount) {\n                return NaN;\n            }\n            // If we found a finder-pattern-like section, but its size is significantly different than\n            // the original, assume it's a false positive\n            const stateCountTotal = stateCount[0] + stateCount[1] + stateCount[2] + stateCount[3] +\n                stateCount[4];\n            if (5 * Math.abs(stateCountTotal - originalStateCountTotal) >= originalStateCountTotal) {\n                return NaN;\n            }\n            return FinderPatternFinder.foundPatternCross(stateCount) ? FinderPatternFinder.centerFromEnd(stateCount, j) : NaN;\n        }\n        /**\n         * <p>This is called when a horizontal scan finds a possible alignment pattern. It will\n         * cross check with a vertical scan, and if successful, will, ah, cross-cross-check\n         * with another horizontal scan. This is needed primarily to locate the real horizontal\n         * center of the pattern in cases of extreme skew.\n         * And then we cross-cross-cross check with another diagonal scan.</p>\n         *\n         * <p>If that succeeds the finder pattern location is added to a list that tracks\n         * the number of times each location has been nearly-matched as a finder pattern.\n         * Each additional find is more evidence that the location is in fact a finder\n         * pattern center\n         *\n         * @param stateCount reading state module counts from horizontal scan\n         * @param i row where finder pattern may be found\n         * @param j end of possible finder pattern in row\n         * @param pureBarcode true if in \"pure barcode\" mode\n         * @return true if a finder pattern candidate was found this time\n         */\n        handlePossibleCenter(stateCount, i /*int*/, j /*int*/, pureBarcode) {\n            const stateCountTotal = stateCount[0] + stateCount[1] + stateCount[2] + stateCount[3] +\n                stateCount[4];\n            let centerJ = FinderPatternFinder.centerFromEnd(stateCount, j);\n            let centerI = this.crossCheckVertical(i, /*(int) */ Math.floor(centerJ), stateCount[2], stateCountTotal);\n            if (!isNaN(centerI)) {\n                // Re-cross check\n                centerJ = this.crossCheckHorizontal(/*(int) */ Math.floor(centerJ), /*(int) */ Math.floor(centerI), stateCount[2], stateCountTotal);\n                if (!isNaN(centerJ) &&\n                    (!pureBarcode || this.crossCheckDiagonal(/*(int) */ Math.floor(centerI), /*(int) */ Math.floor(centerJ), stateCount[2], stateCountTotal))) {\n                    const estimatedModuleSize = stateCountTotal / 7.0;\n                    let found = false;\n                    const possibleCenters = this.possibleCenters;\n                    for (let index = 0, length = possibleCenters.length; index < length; index++) {\n                        const center = possibleCenters[index];\n                        // Look for about the same center and module size:\n                        if (center.aboutEquals(estimatedModuleSize, centerI, centerJ)) {\n                            possibleCenters[index] = center.combineEstimate(centerI, centerJ, estimatedModuleSize);\n                            found = true;\n                            break;\n                        }\n                    }\n                    if (!found) {\n                        const point = new FinderPattern$1(centerJ, centerI, estimatedModuleSize);\n                        possibleCenters.push(point);\n                        if (this.resultPointCallback !== null && this.resultPointCallback !== undefined) {\n                            this.resultPointCallback.foundPossibleResultPoint(point);\n                        }\n                    }\n                    return true;\n                }\n            }\n            return false;\n        }\n        /**\n         * @return number of rows we could safely skip during scanning, based on the first\n         *         two finder patterns that have been located. In some cases their position will\n         *         allow us to infer that the third pattern must lie below a certain point farther\n         *         down in the image.\n         */\n        findRowSkip() {\n            const max = this.possibleCenters.length;\n            if (max <= 1) {\n                return 0;\n            }\n            let firstConfirmedCenter = null;\n            for (const center of this.possibleCenters) {\n                if (center.getCount() >= FinderPatternFinder.CENTER_QUORUM) {\n                    if (firstConfirmedCenter == null) {\n                        firstConfirmedCenter = center;\n                    }\n                    else {\n                        // We have two confirmed centers\n                        // How far down can we skip before resuming looking for the next\n                        // pattern? In the worst case, only the difference between the\n                        // difference in the x / y coordinates of the two centers.\n                        // This is the case where you find top left last.\n                        this.hasSkipped = true;\n                        return /*(int) */ Math.floor((Math.abs(firstConfirmedCenter.getX() - center.getX()) -\n                            Math.abs(firstConfirmedCenter.getY() - center.getY())) / 2);\n                    }\n                }\n            }\n            return 0;\n        }\n        /**\n         * @return true iff we have found at least 3 finder patterns that have been detected\n         *         at least {@link #CENTER_QUORUM} times each, and, the estimated module size of the\n         *         candidates is \"pretty similar\"\n         */\n        haveMultiplyConfirmedCenters() {\n            let confirmedCount = 0;\n            let totalModuleSize = 0.0;\n            const max = this.possibleCenters.length;\n            for (const pattern of this.possibleCenters) {\n                if (pattern.getCount() >= FinderPatternFinder.CENTER_QUORUM) {\n                    confirmedCount++;\n                    totalModuleSize += pattern.getEstimatedModuleSize();\n                }\n            }\n            if (confirmedCount < 3) {\n                return false;\n            }\n            // OK, we have at least 3 confirmed centers, but, it's possible that one is a \"false positive\"\n            // and that we need to keep looking. We detect this by asking if the estimated module sizes\n            // vary too much. We arbitrarily say that when the total deviation from average exceeds\n            // 5% of the total module size estimates, it's too much.\n            const average = totalModuleSize / max;\n            let totalDeviation = 0.0;\n            for (const pattern of this.possibleCenters) {\n                totalDeviation += Math.abs(pattern.getEstimatedModuleSize() - average);\n            }\n            return totalDeviation <= 0.05 * totalModuleSize;\n        }\n        /**\n         * @return the 3 best {@link FinderPattern}s from our list of candidates. The \"best\" are\n         *         those that have been detected at least {@link #CENTER_QUORUM} times, and whose module\n         *         size differs from the average among those patterns the least\n         * @throws NotFoundException if 3 such finder patterns do not exist\n         */\n        selectBestPatterns() {\n            const startSize = this.possibleCenters.length;\n            if (startSize < 3) {\n                // Couldn't find enough finder patterns\n                throw new NotFoundException();\n            }\n            const possibleCenters = this.possibleCenters;\n            let average;\n            // Filter outlier possibilities whose module size is too different\n            if (startSize > 3) {\n                // But we can only afford to do so if we have at least 4 possibilities to choose from\n                let totalModuleSize = 0.0;\n                let square = 0.0;\n                for (const center of this.possibleCenters) {\n                    const size = center.getEstimatedModuleSize();\n                    totalModuleSize += size;\n                    square += size * size;\n                }\n                average = totalModuleSize / startSize;\n                let stdDev = Math.sqrt(square / startSize - average * average);\n                possibleCenters.sort(\n                /**\n                 * <p>Orders by furthest from average</p>\n                 */\n                // FurthestFromAverageComparator implements Comparator<FinderPattern>\n                (center1, center2) => {\n                    const dA = Math.abs(center2.getEstimatedModuleSize() - average);\n                    const dB = Math.abs(center1.getEstimatedModuleSize() - average);\n                    return dA < dB ? -1 : dA > dB ? 1 : 0;\n                });\n                const limit = Math.max(0.2 * average, stdDev);\n                for (let i = 0; i < possibleCenters.length && possibleCenters.length > 3; i++) {\n                    const pattern = possibleCenters[i];\n                    if (Math.abs(pattern.getEstimatedModuleSize() - average) > limit) {\n                        possibleCenters.splice(i, 1);\n                        i--;\n                    }\n                }\n            }\n            if (possibleCenters.length > 3) {\n                // Throw away all but those first size candidate points we found.\n                let totalModuleSize = 0.0;\n                for (const possibleCenter of possibleCenters) {\n                    totalModuleSize += possibleCenter.getEstimatedModuleSize();\n                }\n                average = totalModuleSize / possibleCenters.length;\n                possibleCenters.sort(\n                /**\n                 * <p>Orders by {@link FinderPattern#getCount()}, descending.</p>\n                 */\n                // CenterComparator implements Comparator<FinderPattern>\n                (center1, center2) => {\n                    if (center2.getCount() === center1.getCount()) {\n                        const dA = Math.abs(center2.getEstimatedModuleSize() - average);\n                        const dB = Math.abs(center1.getEstimatedModuleSize() - average);\n                        return dA < dB ? 1 : dA > dB ? -1 : 0;\n                    }\n                    else {\n                        return center2.getCount() - center1.getCount();\n                    }\n                });\n                possibleCenters.splice(3); // this is not realy necessary as we only return first 3 anyway\n            }\n            return [\n                possibleCenters[0],\n                possibleCenters[1],\n                possibleCenters[2]\n            ];\n        }\n    }\n    FinderPatternFinder.CENTER_QUORUM = 2;\n    FinderPatternFinder.MIN_SKIP = 3; // 1 pixel/module times 3 modules/center\n    FinderPatternFinder.MAX_MODULES = 57; // support up to version 10 for mobile clients\n\n    /*\n     * Copyright 2007 ZXing authors\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n    /*import java.util.Map;*/\n    /**\n     * <p>Encapsulates logic that can detect a QR Code in an image, even if the QR Code\n     * is rotated or skewed, or partially obscured.</p>\n     *\n     * @author Sean Owen\n     */\n    class Detector$2 {\n        constructor(image) {\n            this.image = image;\n        }\n        getImage() {\n            return this.image;\n        }\n        getResultPointCallback() {\n            return this.resultPointCallback;\n        }\n        /**\n         * <p>Detects a QR Code in an image.</p>\n         *\n         * @return {@link DetectorResult} encapsulating results of detecting a QR Code\n         * @throws NotFoundException if QR Code cannot be found\n         * @throws FormatException if a QR Code cannot be decoded\n         */\n        // public detect(): DetectorResult /*throws NotFoundException, FormatException*/ {\n        //   return detect(null)\n        // }\n        /**\n         * <p>Detects a QR Code in an image.</p>\n         *\n         * @param hints optional hints to detector\n         * @return {@link DetectorResult} encapsulating results of detecting a QR Code\n         * @throws NotFoundException if QR Code cannot be found\n         * @throws FormatException if a QR Code cannot be decoded\n         */\n        detect(hints) {\n            this.resultPointCallback = (hints === null || hints === undefined) ? null :\n                /*(ResultPointCallback) */ hints.get(DecodeHintType$1.NEED_RESULT_POINT_CALLBACK);\n            const finder = new FinderPatternFinder(this.image, this.resultPointCallback);\n            const info = finder.find(hints);\n            return this.processFinderPatternInfo(info);\n        }\n        processFinderPatternInfo(info) {\n            const topLeft = info.getTopLeft();\n            const topRight = info.getTopRight();\n            const bottomLeft = info.getBottomLeft();\n            const moduleSize = this.calculateModuleSize(topLeft, topRight, bottomLeft);\n            if (moduleSize < 1.0) {\n                throw new NotFoundException('No pattern found in proccess finder.');\n            }\n            const dimension = Detector$2.computeDimension(topLeft, topRight, bottomLeft, moduleSize);\n            const provisionalVersion = Version$1.getProvisionalVersionForDimension(dimension);\n            const modulesBetweenFPCenters = provisionalVersion.getDimensionForVersion() - 7;\n            let alignmentPattern = null;\n            // Anything above version 1 has an alignment pattern\n            if (provisionalVersion.getAlignmentPatternCenters().length > 0) {\n                // Guess where a \"bottom right\" finder pattern would have been\n                const bottomRightX = topRight.getX() - topLeft.getX() + bottomLeft.getX();\n                const bottomRightY = topRight.getY() - topLeft.getY() + bottomLeft.getY();\n                // Estimate that alignment pattern is closer by 3 modules\n                // from \"bottom right\" to known top left location\n                const correctionToTopLeft = 1.0 - 3.0 / modulesBetweenFPCenters;\n                const estAlignmentX = /*(int) */ Math.floor(topLeft.getX() + correctionToTopLeft * (bottomRightX - topLeft.getX()));\n                const estAlignmentY = /*(int) */ Math.floor(topLeft.getY() + correctionToTopLeft * (bottomRightY - topLeft.getY()));\n                // Kind of arbitrary -- expand search radius before giving up\n                for (let i = 4; i <= 16; i <<= 1) {\n                    try {\n                        alignmentPattern = this.findAlignmentInRegion(moduleSize, estAlignmentX, estAlignmentY, i);\n                        break;\n                    }\n                    catch (re /*NotFoundException*/) {\n                        if (!(re instanceof NotFoundException)) {\n                            throw re;\n                        }\n                        // try next round\n                    }\n                }\n                // If we didn't find alignment pattern... well try anyway without it\n            }\n            const transform = Detector$2.createTransform(topLeft, topRight, bottomLeft, alignmentPattern, dimension);\n            const bits = Detector$2.sampleGrid(this.image, transform, dimension);\n            let points;\n            if (alignmentPattern === null) {\n                points = [bottomLeft, topLeft, topRight];\n            }\n            else {\n                points = [bottomLeft, topLeft, topRight, alignmentPattern];\n            }\n            return new DetectorResult(bits, points);\n        }\n        static createTransform(topLeft, topRight, bottomLeft, alignmentPattern, dimension /*int*/) {\n            const dimMinusThree = dimension - 3.5;\n            let bottomRightX; /*float*/\n            let bottomRightY; /*float*/\n            let sourceBottomRightX; /*float*/\n            let sourceBottomRightY; /*float*/\n            if (alignmentPattern !== null) {\n                bottomRightX = alignmentPattern.getX();\n                bottomRightY = alignmentPattern.getY();\n                sourceBottomRightX = dimMinusThree - 3.0;\n                sourceBottomRightY = sourceBottomRightX;\n            }\n            else {\n                // Don't have an alignment pattern, just make up the bottom-right point\n                bottomRightX = (topRight.getX() - topLeft.getX()) + bottomLeft.getX();\n                bottomRightY = (topRight.getY() - topLeft.getY()) + bottomLeft.getY();\n                sourceBottomRightX = dimMinusThree;\n                sourceBottomRightY = dimMinusThree;\n            }\n            return PerspectiveTransform.quadrilateralToQuadrilateral(3.5, 3.5, dimMinusThree, 3.5, sourceBottomRightX, sourceBottomRightY, 3.5, dimMinusThree, topLeft.getX(), topLeft.getY(), topRight.getX(), topRight.getY(), bottomRightX, bottomRightY, bottomLeft.getX(), bottomLeft.getY());\n        }\n        static sampleGrid(image, transform, dimension /*int*/) {\n            const sampler = GridSamplerInstance.getInstance();\n            return sampler.sampleGridWithTransform(image, dimension, dimension, transform);\n        }\n        /**\n         * <p>Computes the dimension (number of modules on a size) of the QR Code based on the position\n         * of the finder patterns and estimated module size.</p>\n         */\n        static computeDimension(topLeft, topRight, bottomLeft, moduleSize /*float*/) {\n            const tltrCentersDimension = MathUtils.round(ResultPoint.distance(topLeft, topRight) / moduleSize);\n            const tlblCentersDimension = MathUtils.round(ResultPoint.distance(topLeft, bottomLeft) / moduleSize);\n            let dimension = Math.floor((tltrCentersDimension + tlblCentersDimension) / 2) + 7;\n            switch (dimension & 0x03) { // mod 4\n                case 0:\n                    dimension++;\n                    break;\n                // 1? do nothing\n                case 2:\n                    dimension--;\n                    break;\n                case 3:\n                    throw new NotFoundException('Dimensions could be not found.');\n            }\n            return dimension;\n        }\n        /**\n         * <p>Computes an average estimated module size based on estimated derived from the positions\n         * of the three finder patterns.</p>\n         *\n         * @param topLeft detected top-left finder pattern center\n         * @param topRight detected top-right finder pattern center\n         * @param bottomLeft detected bottom-left finder pattern center\n         * @return estimated module size\n         */\n        calculateModuleSize(topLeft, topRight, bottomLeft) {\n            // Take the average\n            return (this.calculateModuleSizeOneWay(topLeft, topRight) +\n                this.calculateModuleSizeOneWay(topLeft, bottomLeft)) / 2.0;\n        }\n        /**\n         * <p>Estimates module size based on two finder patterns -- it uses\n         * {@link #sizeOfBlackWhiteBlackRunBothWays(int, int, int, int)} to figure the\n         * width of each, measuring along the axis between their centers.</p>\n         */\n        calculateModuleSizeOneWay(pattern, otherPattern) {\n            const moduleSizeEst1 = this.sizeOfBlackWhiteBlackRunBothWays(/*(int) */ Math.floor(pattern.getX()), \n            /*(int) */ Math.floor(pattern.getY()), \n            /*(int) */ Math.floor(otherPattern.getX()), \n            /*(int) */ Math.floor(otherPattern.getY()));\n            const moduleSizeEst2 = this.sizeOfBlackWhiteBlackRunBothWays(/*(int) */ Math.floor(otherPattern.getX()), \n            /*(int) */ Math.floor(otherPattern.getY()), \n            /*(int) */ Math.floor(pattern.getX()), \n            /*(int) */ Math.floor(pattern.getY()));\n            if (isNaN(moduleSizeEst1)) {\n                return moduleSizeEst2 / 7.0;\n            }\n            if (isNaN(moduleSizeEst2)) {\n                return moduleSizeEst1 / 7.0;\n            }\n            // Average them, and divide by 7 since we've counted the width of 3 black modules,\n            // and 1 white and 1 black module on either side. Ergo, divide sum by 14.\n            return (moduleSizeEst1 + moduleSizeEst2) / 14.0;\n        }\n        /**\n         * See {@link #sizeOfBlackWhiteBlackRun(int, int, int, int)}; computes the total width of\n         * a finder pattern by looking for a black-white-black run from the center in the direction\n         * of another point (another finder pattern center), and in the opposite direction too.\n         */\n        sizeOfBlackWhiteBlackRunBothWays(fromX /*int*/, fromY /*int*/, toX /*int*/, toY /*int*/) {\n            let result = this.sizeOfBlackWhiteBlackRun(fromX, fromY, toX, toY);\n            // Now count other way -- don't run off image though of course\n            let scale = 1.0;\n            let otherToX = fromX - (toX - fromX);\n            if (otherToX < 0) {\n                scale = fromX / /*(float) */ (fromX - otherToX);\n                otherToX = 0;\n            }\n            else if (otherToX >= this.image.getWidth()) {\n                scale = (this.image.getWidth() - 1 - fromX) / /*(float) */ (otherToX - fromX);\n                otherToX = this.image.getWidth() - 1;\n            }\n            let otherToY = /*(int) */ Math.floor(fromY - (toY - fromY) * scale);\n            scale = 1.0;\n            if (otherToY < 0) {\n                scale = fromY / /*(float) */ (fromY - otherToY);\n                otherToY = 0;\n            }\n            else if (otherToY >= this.image.getHeight()) {\n                scale = (this.image.getHeight() - 1 - fromY) / /*(float) */ (otherToY - fromY);\n                otherToY = this.image.getHeight() - 1;\n            }\n            otherToX = /*(int) */ Math.floor(fromX + (otherToX - fromX) * scale);\n            result += this.sizeOfBlackWhiteBlackRun(fromX, fromY, otherToX, otherToY);\n            // Middle pixel is double-counted this way; subtract 1\n            return result - 1.0;\n        }\n        /**\n         * <p>This method traces a line from a point in the image, in the direction towards another point.\n         * It begins in a black region, and keeps going until it finds white, then black, then white again.\n         * It reports the distance from the start to this point.</p>\n         *\n         * <p>This is used when figuring out how wide a finder pattern is, when the finder pattern\n         * may be skewed or rotated.</p>\n         */\n        sizeOfBlackWhiteBlackRun(fromX /*int*/, fromY /*int*/, toX /*int*/, toY /*int*/) {\n            // Mild variant of Bresenham's algorithm\n            // see http://en.wikipedia.org/wiki/Bresenham's_line_algorithm\n            const steep = Math.abs(toY - fromY) > Math.abs(toX - fromX);\n            if (steep) {\n                let temp = fromX;\n                fromX = fromY;\n                fromY = temp;\n                temp = toX;\n                toX = toY;\n                toY = temp;\n            }\n            const dx = Math.abs(toX - fromX);\n            const dy = Math.abs(toY - fromY);\n            let error = -dx / 2;\n            const xstep = fromX < toX ? 1 : -1;\n            const ystep = fromY < toY ? 1 : -1;\n            // In black pixels, looking for white, first or second time.\n            let state = 0;\n            // Loop up until x == toX, but not beyond\n            const xLimit = toX + xstep;\n            for (let x = fromX, y = fromY; x !== xLimit; x += xstep) {\n                const realX = steep ? y : x;\n                const realY = steep ? x : y;\n                // Does current pixel mean we have moved white to black or vice versa?\n                // Scanning black in state 0,2 and white in state 1, so if we find the wrong\n                // color, advance to next state or end if we are in state 2 already\n                if ((state === 1) === this.image.get(realX, realY)) {\n                    if (state === 2) {\n                        return MathUtils.distance(x, y, fromX, fromY);\n                    }\n                    state++;\n                }\n                error += dy;\n                if (error > 0) {\n                    if (y === toY) {\n                        break;\n                    }\n                    y += ystep;\n                    error -= dx;\n                }\n            }\n            // Found black-white-black; give the benefit of the doubt that the next pixel outside the image\n            // is \"white\" so this last point at (toX+xStep,toY) is the right ending. This is really a\n            // small approximation; (toX+xStep,toY+yStep) might be really correct. Ignore this.\n            if (state === 2) {\n                return MathUtils.distance(toX + xstep, toY, fromX, fromY);\n            }\n            // else we didn't find even black-white-black; no estimate is really possible\n            return NaN;\n        }\n        /**\n         * <p>Attempts to locate an alignment pattern in a limited region of the image, which is\n         * guessed to contain it. This method uses {@link AlignmentPattern}.</p>\n         *\n         * @param overallEstModuleSize estimated module size so far\n         * @param estAlignmentX x coordinate of center of area probably containing alignment pattern\n         * @param estAlignmentY y coordinate of above\n         * @param allowanceFactor number of pixels in all directions to search from the center\n         * @return {@link AlignmentPattern} if found, or null otherwise\n         * @throws NotFoundException if an unexpected error occurs during detection\n         */\n        findAlignmentInRegion(overallEstModuleSize /*float*/, estAlignmentX /*int*/, estAlignmentY /*int*/, allowanceFactor /*float*/) {\n            // Look for an alignment pattern (3 modules in size) around where it\n            // should be\n            const allowance = /*(int) */ Math.floor(allowanceFactor * overallEstModuleSize);\n            const alignmentAreaLeftX = Math.max(0, estAlignmentX - allowance);\n            const alignmentAreaRightX = Math.min(this.image.getWidth() - 1, estAlignmentX + allowance);\n            if (alignmentAreaRightX - alignmentAreaLeftX < overallEstModuleSize * 3) {\n                throw new NotFoundException('Alignment top exceeds estimated module size.');\n            }\n            const alignmentAreaTopY = Math.max(0, estAlignmentY - allowance);\n            const alignmentAreaBottomY = Math.min(this.image.getHeight() - 1, estAlignmentY + allowance);\n            if (alignmentAreaBottomY - alignmentAreaTopY < overallEstModuleSize * 3) {\n                throw new NotFoundException('Alignment bottom exceeds estimated module size.');\n            }\n            const alignmentFinder = new AlignmentPatternFinder(this.image, alignmentAreaLeftX, alignmentAreaTopY, alignmentAreaRightX - alignmentAreaLeftX, alignmentAreaBottomY - alignmentAreaTopY, overallEstModuleSize, this.resultPointCallback);\n            return alignmentFinder.find();\n        }\n    }\n\n    /*\n     * Copyright 2007 ZXing authors\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n    /*import java.util.List;*/\n    /*import java.util.Map;*/\n    /**\n     * This implementation can detect and decode QR Codes in an image.\n     *\n     * @author Sean Owen\n     */\n    class QRCodeReader {\n        constructor() {\n            this.decoder = new Decoder$2();\n        }\n        getDecoder() {\n            return this.decoder;\n        }\n        /**\n         * Locates and decodes a QR code in an image.\n         *\n         * @return a representing: string the content encoded by the QR code\n         * @throws NotFoundException if a QR code cannot be found\n         * @throws FormatException if a QR code cannot be decoded\n         * @throws ChecksumException if error correction fails\n         */\n        /*@Override*/\n        // public decode(image: BinaryBitmap): Result /*throws NotFoundException, ChecksumException, FormatException */ {\n        //   return this.decode(image, null)\n        // }\n        /*@Override*/\n        decode(image, hints) {\n            let decoderResult;\n            let points;\n            if (hints !== undefined && hints !== null && undefined !== hints.get(DecodeHintType$1.PURE_BARCODE)) {\n                const bits = QRCodeReader.extractPureBits(image.getBlackMatrix());\n                decoderResult = this.decoder.decodeBitMatrix(bits, hints);\n                points = QRCodeReader.NO_POINTS;\n            }\n            else {\n                const detectorResult = new Detector$2(image.getBlackMatrix()).detect(hints);\n                decoderResult = this.decoder.decodeBitMatrix(detectorResult.getBits(), hints);\n                points = detectorResult.getPoints();\n            }\n            // If the code was mirrored: swap the bottom-left and the top-right points.\n            if (decoderResult.getOther() instanceof QRCodeDecoderMetaData) {\n                decoderResult.getOther().applyMirroredCorrection(points);\n            }\n            const result = new Result(decoderResult.getText(), decoderResult.getRawBytes(), undefined, points, BarcodeFormat$1.QR_CODE, undefined);\n            const byteSegments = decoderResult.getByteSegments();\n            if (byteSegments !== null) {\n                result.putMetadata(ResultMetadataType$1.BYTE_SEGMENTS, byteSegments);\n            }\n            const ecLevel = decoderResult.getECLevel();\n            if (ecLevel !== null) {\n                result.putMetadata(ResultMetadataType$1.ERROR_CORRECTION_LEVEL, ecLevel);\n            }\n            if (decoderResult.hasStructuredAppend()) {\n                result.putMetadata(ResultMetadataType$1.STRUCTURED_APPEND_SEQUENCE, decoderResult.getStructuredAppendSequenceNumber());\n                result.putMetadata(ResultMetadataType$1.STRUCTURED_APPEND_PARITY, decoderResult.getStructuredAppendParity());\n            }\n            return result;\n        }\n        /*@Override*/\n        reset() {\n            // do nothing\n        }\n        /**\n         * This method detects a code in a \"pure\" image -- that is, pure monochrome image\n         * which contains only an unrotated, unskewed, image of a code, with some white border\n         * around it. This is a specialized method that works exceptionally fast in this special\n         * case.\n         *\n         * @see com.google.zxing.datamatrix.DataMatrixReader#extractPureBits(BitMatrix)\n         */\n        static extractPureBits(image) {\n            const leftTopBlack = image.getTopLeftOnBit();\n            const rightBottomBlack = image.getBottomRightOnBit();\n            if (leftTopBlack === null || rightBottomBlack === null) {\n                throw new NotFoundException();\n            }\n            const moduleSize = this.moduleSize(leftTopBlack, image);\n            let top = leftTopBlack[1];\n            let bottom = rightBottomBlack[1];\n            let left = leftTopBlack[0];\n            let right = rightBottomBlack[0];\n            // Sanity check!\n            if (left >= right || top >= bottom) {\n                throw new NotFoundException();\n            }\n            if (bottom - top !== right - left) {\n                // Special case, where bottom-right module wasn't black so we found something else in the last row\n                // Assume it's a square, so use height as the width\n                right = left + (bottom - top);\n                if (right >= image.getWidth()) {\n                    // Abort if that would not make sense -- off image\n                    throw new NotFoundException();\n                }\n            }\n            const matrixWidth = Math.round((right - left + 1) / moduleSize);\n            const matrixHeight = Math.round((bottom - top + 1) / moduleSize);\n            if (matrixWidth <= 0 || matrixHeight <= 0) {\n                throw new NotFoundException();\n            }\n            if (matrixHeight !== matrixWidth) {\n                // Only possibly decode square regions\n                throw new NotFoundException();\n            }\n            // Push in the \"border\" by half the module width so that we start\n            // sampling in the middle of the module. Just in case the image is a\n            // little off, this will help recover.\n            const nudge = /*(int) */ Math.floor(moduleSize / 2.0);\n            top += nudge;\n            left += nudge;\n            // But careful that this does not sample off the edge\n            // \"right\" is the farthest-right valid pixel location -- right+1 is not necessarily\n            // This is positive by how much the inner x loop below would be too large\n            const nudgedTooFarRight = left + /*(int) */ Math.floor((matrixWidth - 1) * moduleSize) - right;\n            if (nudgedTooFarRight > 0) {\n                if (nudgedTooFarRight > nudge) {\n                    // Neither way fits; abort\n                    throw new NotFoundException();\n                }\n                left -= nudgedTooFarRight;\n            }\n            // See logic above\n            const nudgedTooFarDown = top + /*(int) */ Math.floor((matrixHeight - 1) * moduleSize) - bottom;\n            if (nudgedTooFarDown > 0) {\n                if (nudgedTooFarDown > nudge) {\n                    // Neither way fits; abort\n                    throw new NotFoundException();\n                }\n                top -= nudgedTooFarDown;\n            }\n            // Now just read off the bits\n            const bits = new BitMatrix(matrixWidth, matrixHeight);\n            for (let y = 0; y < matrixHeight; y++) {\n                const iOffset = top + /*(int) */ Math.floor(y * moduleSize);\n                for (let x = 0; x < matrixWidth; x++) {\n                    if (image.get(left + /*(int) */ Math.floor(x * moduleSize), iOffset)) {\n                        bits.set(x, y);\n                    }\n                }\n            }\n            return bits;\n        }\n        static moduleSize(leftTopBlack, image) {\n            const height = image.getHeight();\n            const width = image.getWidth();\n            let x = leftTopBlack[0];\n            let y = leftTopBlack[1];\n            let inBlack = true;\n            let transitions = 0;\n            while (x < width && y < height) {\n                if (inBlack !== image.get(x, y)) {\n                    if (++transitions === 5) {\n                        break;\n                    }\n                    inBlack = !inBlack;\n                }\n                x++;\n                y++;\n            }\n            if (x === width || y === height) {\n                throw new NotFoundException();\n            }\n            return (x - leftTopBlack[0]) / 7.0;\n        }\n    }\n    QRCodeReader.NO_POINTS = new Array();\n\n    /*\n    * Copyright 2009 ZXing authors\n    *\n    * Licensed under the Apache License, Version 2.0 (the \"License\");\n    * you may not use this file except in compliance with the License.\n    * You may obtain a copy of the License at\n    *\n    *      http://www.apache.org/licenses/LICENSE-2.0\n    *\n    * Unless required by applicable law or agreed to in writing, software\n    * distributed under the License is distributed on an \"AS IS\" BASIS,\n    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    * See the License for the specific language governing permissions and\n    * limitations under the License.\n    */\n    /**\n     * @author SITA Lab (kevin.osullivan@sita.aero)\n     * @author Guenther Grau\n     */\n    /*public final*/ class PDF417Common {\n        PDF417Common() {\n        }\n        /**\n         * @param moduleBitCount values to sum\n         * @return sum of values\n         * @deprecated call {@link MathUtils#sum(int[])}\n         */\n        // @Deprecated\n        static getBitCountSum(moduleBitCount) {\n            return MathUtils.sum(moduleBitCount);\n        }\n        static toIntArray(list) {\n            if (list == null || !list.length) {\n                return PDF417Common.EMPTY_INT_ARRAY;\n            }\n            const result = new Int32Array(list.length);\n            let i = 0;\n            for (const integer of list) {\n                result[i++] = integer;\n            }\n            return result;\n        }\n        /**\n         * @param symbol encoded symbol to translate to a codeword\n         * @return the codeword corresponding to the symbol.\n         */\n        static getCodeword(symbol /*int*/) {\n            const i = Arrays.binarySearch(PDF417Common.SYMBOL_TABLE, symbol & 0x3FFFF);\n            if (i < 0) {\n                return -1;\n            }\n            return (PDF417Common.CODEWORD_TABLE[i] - 1) % PDF417Common.NUMBER_OF_CODEWORDS;\n        }\n    }\n    PDF417Common.NUMBER_OF_CODEWORDS = 929;\n    // Maximum Codewords (Data + Error).\n    PDF417Common.MAX_CODEWORDS_IN_BARCODE = PDF417Common.NUMBER_OF_CODEWORDS - 1;\n    PDF417Common.MIN_ROWS_IN_BARCODE = 3;\n    PDF417Common.MAX_ROWS_IN_BARCODE = 90;\n    // One left row indication column + max 30 data columns + one right row indicator column\n    // public static /*final*/ MAX_CODEWORDS_IN_ROW: /*int*/ number = 32;\n    PDF417Common.MODULES_IN_CODEWORD = 17;\n    PDF417Common.MODULES_IN_STOP_PATTERN = 18;\n    PDF417Common.BARS_IN_MODULE = 8;\n    PDF417Common.EMPTY_INT_ARRAY = new Int32Array([]);\n    /**\n     * The sorted table of all possible symbols. Extracted from the PDF417\n     * specification. The index of a symbol in this table corresponds to the\n     * index into the codeword table.\n     */\n    PDF417Common.SYMBOL_TABLE = Int32Array.from([\n        0x1025e, 0x1027a, 0x1029e, 0x102bc, 0x102f2, 0x102f4, 0x1032e, 0x1034e, 0x1035c, 0x10396, 0x103a6, 0x103ac,\n        0x10422, 0x10428, 0x10436, 0x10442, 0x10444, 0x10448, 0x10450, 0x1045e, 0x10466, 0x1046c, 0x1047a, 0x10482,\n        0x1049e, 0x104a0, 0x104bc, 0x104c6, 0x104d8, 0x104ee, 0x104f2, 0x104f4, 0x10504, 0x10508, 0x10510, 0x1051e,\n        0x10520, 0x1053c, 0x10540, 0x10578, 0x10586, 0x1058c, 0x10598, 0x105b0, 0x105be, 0x105ce, 0x105dc, 0x105e2,\n        0x105e4, 0x105e8, 0x105f6, 0x1062e, 0x1064e, 0x1065c, 0x1068e, 0x1069c, 0x106b8, 0x106de, 0x106fa, 0x10716,\n        0x10726, 0x1072c, 0x10746, 0x1074c, 0x10758, 0x1076e, 0x10792, 0x10794, 0x107a2, 0x107a4, 0x107a8, 0x107b6,\n        0x10822, 0x10828, 0x10842, 0x10848, 0x10850, 0x1085e, 0x10866, 0x1086c, 0x1087a, 0x10882, 0x10884, 0x10890,\n        0x1089e, 0x108a0, 0x108bc, 0x108c6, 0x108cc, 0x108d8, 0x108ee, 0x108f2, 0x108f4, 0x10902, 0x10908, 0x1091e,\n        0x10920, 0x1093c, 0x10940, 0x10978, 0x10986, 0x10998, 0x109b0, 0x109be, 0x109ce, 0x109dc, 0x109e2, 0x109e4,\n        0x109e8, 0x109f6, 0x10a08, 0x10a10, 0x10a1e, 0x10a20, 0x10a3c, 0x10a40, 0x10a78, 0x10af0, 0x10b06, 0x10b0c,\n        0x10b18, 0x10b30, 0x10b3e, 0x10b60, 0x10b7c, 0x10b8e, 0x10b9c, 0x10bb8, 0x10bc2, 0x10bc4, 0x10bc8, 0x10bd0,\n        0x10bde, 0x10be6, 0x10bec, 0x10c2e, 0x10c4e, 0x10c5c, 0x10c62, 0x10c64, 0x10c68, 0x10c76, 0x10c8e, 0x10c9c,\n        0x10cb8, 0x10cc2, 0x10cc4, 0x10cc8, 0x10cd0, 0x10cde, 0x10ce6, 0x10cec, 0x10cfa, 0x10d0e, 0x10d1c, 0x10d38,\n        0x10d70, 0x10d7e, 0x10d82, 0x10d84, 0x10d88, 0x10d90, 0x10d9e, 0x10da0, 0x10dbc, 0x10dc6, 0x10dcc, 0x10dd8,\n        0x10dee, 0x10df2, 0x10df4, 0x10e16, 0x10e26, 0x10e2c, 0x10e46, 0x10e58, 0x10e6e, 0x10e86, 0x10e8c, 0x10e98,\n        0x10eb0, 0x10ebe, 0x10ece, 0x10edc, 0x10f0a, 0x10f12, 0x10f14, 0x10f22, 0x10f28, 0x10f36, 0x10f42, 0x10f44,\n        0x10f48, 0x10f50, 0x10f5e, 0x10f66, 0x10f6c, 0x10fb2, 0x10fb4, 0x11022, 0x11028, 0x11042, 0x11048, 0x11050,\n        0x1105e, 0x1107a, 0x11082, 0x11084, 0x11090, 0x1109e, 0x110a0, 0x110bc, 0x110c6, 0x110cc, 0x110d8, 0x110ee,\n        0x110f2, 0x110f4, 0x11102, 0x1111e, 0x11120, 0x1113c, 0x11140, 0x11178, 0x11186, 0x11198, 0x111b0, 0x111be,\n        0x111ce, 0x111dc, 0x111e2, 0x111e4, 0x111e8, 0x111f6, 0x11208, 0x1121e, 0x11220, 0x11278, 0x112f0, 0x1130c,\n        0x11330, 0x1133e, 0x11360, 0x1137c, 0x1138e, 0x1139c, 0x113b8, 0x113c2, 0x113c8, 0x113d0, 0x113de, 0x113e6,\n        0x113ec, 0x11408, 0x11410, 0x1141e, 0x11420, 0x1143c, 0x11440, 0x11478, 0x114f0, 0x115e0, 0x1160c, 0x11618,\n        0x11630, 0x1163e, 0x11660, 0x1167c, 0x116c0, 0x116f8, 0x1171c, 0x11738, 0x11770, 0x1177e, 0x11782, 0x11784,\n        0x11788, 0x11790, 0x1179e, 0x117a0, 0x117bc, 0x117c6, 0x117cc, 0x117d8, 0x117ee, 0x1182e, 0x11834, 0x1184e,\n        0x1185c, 0x11862, 0x11864, 0x11868, 0x11876, 0x1188e, 0x1189c, 0x118b8, 0x118c2, 0x118c8, 0x118d0, 0x118de,\n        0x118e6, 0x118ec, 0x118fa, 0x1190e, 0x1191c, 0x11938, 0x11970, 0x1197e, 0x11982, 0x11984, 0x11990, 0x1199e,\n        0x119a0, 0x119bc, 0x119c6, 0x119cc, 0x119d8, 0x119ee, 0x119f2, 0x119f4, 0x11a0e, 0x11a1c, 0x11a38, 0x11a70,\n        0x11a7e, 0x11ae0, 0x11afc, 0x11b08, 0x11b10, 0x11b1e, 0x11b20, 0x11b3c, 0x11b40, 0x11b78, 0x11b8c, 0x11b98,\n        0x11bb0, 0x11bbe, 0x11bce, 0x11bdc, 0x11be2, 0x11be4, 0x11be8, 0x11bf6, 0x11c16, 0x11c26, 0x11c2c, 0x11c46,\n        0x11c4c, 0x11c58, 0x11c6e, 0x11c86, 0x11c98, 0x11cb0, 0x11cbe, 0x11cce, 0x11cdc, 0x11ce2, 0x11ce4, 0x11ce8,\n        0x11cf6, 0x11d06, 0x11d0c, 0x11d18, 0x11d30, 0x11d3e, 0x11d60, 0x11d7c, 0x11d8e, 0x11d9c, 0x11db8, 0x11dc4,\n        0x11dc8, 0x11dd0, 0x11dde, 0x11de6, 0x11dec, 0x11dfa, 0x11e0a, 0x11e12, 0x11e14, 0x11e22, 0x11e24, 0x11e28,\n        0x11e36, 0x11e42, 0x11e44, 0x11e50, 0x11e5e, 0x11e66, 0x11e6c, 0x11e82, 0x11e84, 0x11e88, 0x11e90, 0x11e9e,\n        0x11ea0, 0x11ebc, 0x11ec6, 0x11ecc, 0x11ed8, 0x11eee, 0x11f1a, 0x11f2e, 0x11f32, 0x11f34, 0x11f4e, 0x11f5c,\n        0x11f62, 0x11f64, 0x11f68, 0x11f76, 0x12048, 0x1205e, 0x12082, 0x12084, 0x12090, 0x1209e, 0x120a0, 0x120bc,\n        0x120d8, 0x120f2, 0x120f4, 0x12108, 0x1211e, 0x12120, 0x1213c, 0x12140, 0x12178, 0x12186, 0x12198, 0x121b0,\n        0x121be, 0x121e2, 0x121e4, 0x121e8, 0x121f6, 0x12204, 0x12210, 0x1221e, 0x12220, 0x12278, 0x122f0, 0x12306,\n        0x1230c, 0x12330, 0x1233e, 0x12360, 0x1237c, 0x1238e, 0x1239c, 0x123b8, 0x123c2, 0x123c8, 0x123d0, 0x123e6,\n        0x123ec, 0x1241e, 0x12420, 0x1243c, 0x124f0, 0x125e0, 0x12618, 0x1263e, 0x12660, 0x1267c, 0x126c0, 0x126f8,\n        0x12738, 0x12770, 0x1277e, 0x12782, 0x12784, 0x12790, 0x1279e, 0x127a0, 0x127bc, 0x127c6, 0x127cc, 0x127d8,\n        0x127ee, 0x12820, 0x1283c, 0x12840, 0x12878, 0x128f0, 0x129e0, 0x12bc0, 0x12c18, 0x12c30, 0x12c3e, 0x12c60,\n        0x12c7c, 0x12cc0, 0x12cf8, 0x12df0, 0x12e1c, 0x12e38, 0x12e70, 0x12e7e, 0x12ee0, 0x12efc, 0x12f04, 0x12f08,\n        0x12f10, 0x12f20, 0x12f3c, 0x12f40, 0x12f78, 0x12f86, 0x12f8c, 0x12f98, 0x12fb0, 0x12fbe, 0x12fce, 0x12fdc,\n        0x1302e, 0x1304e, 0x1305c, 0x13062, 0x13068, 0x1308e, 0x1309c, 0x130b8, 0x130c2, 0x130c8, 0x130d0, 0x130de,\n        0x130ec, 0x130fa, 0x1310e, 0x13138, 0x13170, 0x1317e, 0x13182, 0x13184, 0x13190, 0x1319e, 0x131a0, 0x131bc,\n        0x131c6, 0x131cc, 0x131d8, 0x131f2, 0x131f4, 0x1320e, 0x1321c, 0x13270, 0x1327e, 0x132e0, 0x132fc, 0x13308,\n        0x1331e, 0x13320, 0x1333c, 0x13340, 0x13378, 0x13386, 0x13398, 0x133b0, 0x133be, 0x133ce, 0x133dc, 0x133e2,\n        0x133e4, 0x133e8, 0x133f6, 0x1340e, 0x1341c, 0x13438, 0x13470, 0x1347e, 0x134e0, 0x134fc, 0x135c0, 0x135f8,\n        0x13608, 0x13610, 0x1361e, 0x13620, 0x1363c, 0x13640, 0x13678, 0x136f0, 0x1370c, 0x13718, 0x13730, 0x1373e,\n        0x13760, 0x1377c, 0x1379c, 0x137b8, 0x137c2, 0x137c4, 0x137c8, 0x137d0, 0x137de, 0x137e6, 0x137ec, 0x13816,\n        0x13826, 0x1382c, 0x13846, 0x1384c, 0x13858, 0x1386e, 0x13874, 0x13886, 0x13898, 0x138b0, 0x138be, 0x138ce,\n        0x138dc, 0x138e2, 0x138e4, 0x138e8, 0x13906, 0x1390c, 0x13930, 0x1393e, 0x13960, 0x1397c, 0x1398e, 0x1399c,\n        0x139b8, 0x139c8, 0x139d0, 0x139de, 0x139e6, 0x139ec, 0x139fa, 0x13a06, 0x13a0c, 0x13a18, 0x13a30, 0x13a3e,\n        0x13a60, 0x13a7c, 0x13ac0, 0x13af8, 0x13b0e, 0x13b1c, 0x13b38, 0x13b70, 0x13b7e, 0x13b88, 0x13b90, 0x13b9e,\n        0x13ba0, 0x13bbc, 0x13bcc, 0x13bd8, 0x13bee, 0x13bf2, 0x13bf4, 0x13c12, 0x13c14, 0x13c22, 0x13c24, 0x13c28,\n        0x13c36, 0x13c42, 0x13c48, 0x13c50, 0x13c5e, 0x13c66, 0x13c6c, 0x13c82, 0x13c84, 0x13c90, 0x13c9e, 0x13ca0,\n        0x13cbc, 0x13cc6, 0x13ccc, 0x13cd8, 0x13cee, 0x13d02, 0x13d04, 0x13d08, 0x13d10, 0x13d1e, 0x13d20, 0x13d3c,\n        0x13d40, 0x13d78, 0x13d86, 0x13d8c, 0x13d98, 0x13db0, 0x13dbe, 0x13dce, 0x13ddc, 0x13de4, 0x13de8, 0x13df6,\n        0x13e1a, 0x13e2e, 0x13e32, 0x13e34, 0x13e4e, 0x13e5c, 0x13e62, 0x13e64, 0x13e68, 0x13e76, 0x13e8e, 0x13e9c,\n        0x13eb8, 0x13ec2, 0x13ec4, 0x13ec8, 0x13ed0, 0x13ede, 0x13ee6, 0x13eec, 0x13f26, 0x13f2c, 0x13f3a, 0x13f46,\n        0x13f4c, 0x13f58, 0x13f6e, 0x13f72, 0x13f74, 0x14082, 0x1409e, 0x140a0, 0x140bc, 0x14104, 0x14108, 0x14110,\n        0x1411e, 0x14120, 0x1413c, 0x14140, 0x14178, 0x1418c, 0x14198, 0x141b0, 0x141be, 0x141e2, 0x141e4, 0x141e8,\n        0x14208, 0x14210, 0x1421e, 0x14220, 0x1423c, 0x14240, 0x14278, 0x142f0, 0x14306, 0x1430c, 0x14318, 0x14330,\n        0x1433e, 0x14360, 0x1437c, 0x1438e, 0x143c2, 0x143c4, 0x143c8, 0x143d0, 0x143e6, 0x143ec, 0x14408, 0x14410,\n        0x1441e, 0x14420, 0x1443c, 0x14440, 0x14478, 0x144f0, 0x145e0, 0x1460c, 0x14618, 0x14630, 0x1463e, 0x14660,\n        0x1467c, 0x146c0, 0x146f8, 0x1471c, 0x14738, 0x14770, 0x1477e, 0x14782, 0x14784, 0x14788, 0x14790, 0x147a0,\n        0x147bc, 0x147c6, 0x147cc, 0x147d8, 0x147ee, 0x14810, 0x14820, 0x1483c, 0x14840, 0x14878, 0x148f0, 0x149e0,\n        0x14bc0, 0x14c30, 0x14c3e, 0x14c60, 0x14c7c, 0x14cc0, 0x14cf8, 0x14df0, 0x14e38, 0x14e70, 0x14e7e, 0x14ee0,\n        0x14efc, 0x14f04, 0x14f08, 0x14f10, 0x14f1e, 0x14f20, 0x14f3c, 0x14f40, 0x14f78, 0x14f86, 0x14f8c, 0x14f98,\n        0x14fb0, 0x14fce, 0x14fdc, 0x15020, 0x15040, 0x15078, 0x150f0, 0x151e0, 0x153c0, 0x15860, 0x1587c, 0x158c0,\n        0x158f8, 0x159f0, 0x15be0, 0x15c70, 0x15c7e, 0x15ce0, 0x15cfc, 0x15dc0, 0x15df8, 0x15e08, 0x15e10, 0x15e20,\n        0x15e40, 0x15e78, 0x15ef0, 0x15f0c, 0x15f18, 0x15f30, 0x15f60, 0x15f7c, 0x15f8e, 0x15f9c, 0x15fb8, 0x1604e,\n        0x1605c, 0x1608e, 0x1609c, 0x160b8, 0x160c2, 0x160c4, 0x160c8, 0x160de, 0x1610e, 0x1611c, 0x16138, 0x16170,\n        0x1617e, 0x16184, 0x16188, 0x16190, 0x1619e, 0x161a0, 0x161bc, 0x161c6, 0x161cc, 0x161d8, 0x161f2, 0x161f4,\n        0x1620e, 0x1621c, 0x16238, 0x16270, 0x1627e, 0x162e0, 0x162fc, 0x16304, 0x16308, 0x16310, 0x1631e, 0x16320,\n        0x1633c, 0x16340, 0x16378, 0x16386, 0x1638c, 0x16398, 0x163b0, 0x163be, 0x163ce, 0x163dc, 0x163e2, 0x163e4,\n        0x163e8, 0x163f6, 0x1640e, 0x1641c, 0x16438, 0x16470, 0x1647e, 0x164e0, 0x164fc, 0x165c0, 0x165f8, 0x16610,\n        0x1661e, 0x16620, 0x1663c, 0x16640, 0x16678, 0x166f0, 0x16718, 0x16730, 0x1673e, 0x16760, 0x1677c, 0x1678e,\n        0x1679c, 0x167b8, 0x167c2, 0x167c4, 0x167c8, 0x167d0, 0x167de, 0x167e6, 0x167ec, 0x1681c, 0x16838, 0x16870,\n        0x168e0, 0x168fc, 0x169c0, 0x169f8, 0x16bf0, 0x16c10, 0x16c1e, 0x16c20, 0x16c3c, 0x16c40, 0x16c78, 0x16cf0,\n        0x16de0, 0x16e18, 0x16e30, 0x16e3e, 0x16e60, 0x16e7c, 0x16ec0, 0x16ef8, 0x16f1c, 0x16f38, 0x16f70, 0x16f7e,\n        0x16f84, 0x16f88, 0x16f90, 0x16f9e, 0x16fa0, 0x16fbc, 0x16fc6, 0x16fcc, 0x16fd8, 0x17026, 0x1702c, 0x17046,\n        0x1704c, 0x17058, 0x1706e, 0x17086, 0x1708c, 0x17098, 0x170b0, 0x170be, 0x170ce, 0x170dc, 0x170e8, 0x17106,\n        0x1710c, 0x17118, 0x17130, 0x1713e, 0x17160, 0x1717c, 0x1718e, 0x1719c, 0x171b8, 0x171c2, 0x171c4, 0x171c8,\n        0x171d0, 0x171de, 0x171e6, 0x171ec, 0x171fa, 0x17206, 0x1720c, 0x17218, 0x17230, 0x1723e, 0x17260, 0x1727c,\n        0x172c0, 0x172f8, 0x1730e, 0x1731c, 0x17338, 0x17370, 0x1737e, 0x17388, 0x17390, 0x1739e, 0x173a0, 0x173bc,\n        0x173cc, 0x173d8, 0x173ee, 0x173f2, 0x173f4, 0x1740c, 0x17418, 0x17430, 0x1743e, 0x17460, 0x1747c, 0x174c0,\n        0x174f8, 0x175f0, 0x1760e, 0x1761c, 0x17638, 0x17670, 0x1767e, 0x176e0, 0x176fc, 0x17708, 0x17710, 0x1771e,\n        0x17720, 0x1773c, 0x17740, 0x17778, 0x17798, 0x177b0, 0x177be, 0x177dc, 0x177e2, 0x177e4, 0x177e8, 0x17822,\n        0x17824, 0x17828, 0x17836, 0x17842, 0x17844, 0x17848, 0x17850, 0x1785e, 0x17866, 0x1786c, 0x17882, 0x17884,\n        0x17888, 0x17890, 0x1789e, 0x178a0, 0x178bc, 0x178c6, 0x178cc, 0x178d8, 0x178ee, 0x178f2, 0x178f4, 0x17902,\n        0x17904, 0x17908, 0x17910, 0x1791e, 0x17920, 0x1793c, 0x17940, 0x17978, 0x17986, 0x1798c, 0x17998, 0x179b0,\n        0x179be, 0x179ce, 0x179dc, 0x179e2, 0x179e4, 0x179e8, 0x179f6, 0x17a04, 0x17a08, 0x17a10, 0x17a1e, 0x17a20,\n        0x17a3c, 0x17a40, 0x17a78, 0x17af0, 0x17b06, 0x17b0c, 0x17b18, 0x17b30, 0x17b3e, 0x17b60, 0x17b7c, 0x17b8e,\n        0x17b9c, 0x17bb8, 0x17bc4, 0x17bc8, 0x17bd0, 0x17bde, 0x17be6, 0x17bec, 0x17c2e, 0x17c32, 0x17c34, 0x17c4e,\n        0x17c5c, 0x17c62, 0x17c64, 0x17c68, 0x17c76, 0x17c8e, 0x17c9c, 0x17cb8, 0x17cc2, 0x17cc4, 0x17cc8, 0x17cd0,\n        0x17cde, 0x17ce6, 0x17cec, 0x17d0e, 0x17d1c, 0x17d38, 0x17d70, 0x17d82, 0x17d84, 0x17d88, 0x17d90, 0x17d9e,\n        0x17da0, 0x17dbc, 0x17dc6, 0x17dcc, 0x17dd8, 0x17dee, 0x17e26, 0x17e2c, 0x17e3a, 0x17e46, 0x17e4c, 0x17e58,\n        0x17e6e, 0x17e72, 0x17e74, 0x17e86, 0x17e8c, 0x17e98, 0x17eb0, 0x17ece, 0x17edc, 0x17ee2, 0x17ee4, 0x17ee8,\n        0x17ef6, 0x1813a, 0x18172, 0x18174, 0x18216, 0x18226, 0x1823a, 0x1824c, 0x18258, 0x1826e, 0x18272, 0x18274,\n        0x18298, 0x182be, 0x182e2, 0x182e4, 0x182e8, 0x182f6, 0x1835e, 0x1837a, 0x183ae, 0x183d6, 0x18416, 0x18426,\n        0x1842c, 0x1843a, 0x18446, 0x18458, 0x1846e, 0x18472, 0x18474, 0x18486, 0x184b0, 0x184be, 0x184ce, 0x184dc,\n        0x184e2, 0x184e4, 0x184e8, 0x184f6, 0x18506, 0x1850c, 0x18518, 0x18530, 0x1853e, 0x18560, 0x1857c, 0x1858e,\n        0x1859c, 0x185b8, 0x185c2, 0x185c4, 0x185c8, 0x185d0, 0x185de, 0x185e6, 0x185ec, 0x185fa, 0x18612, 0x18614,\n        0x18622, 0x18628, 0x18636, 0x18642, 0x18650, 0x1865e, 0x1867a, 0x18682, 0x18684, 0x18688, 0x18690, 0x1869e,\n        0x186a0, 0x186bc, 0x186c6, 0x186cc, 0x186d8, 0x186ee, 0x186f2, 0x186f4, 0x1872e, 0x1874e, 0x1875c, 0x18796,\n        0x187a6, 0x187ac, 0x187d2, 0x187d4, 0x18826, 0x1882c, 0x1883a, 0x18846, 0x1884c, 0x18858, 0x1886e, 0x18872,\n        0x18874, 0x18886, 0x18898, 0x188b0, 0x188be, 0x188ce, 0x188dc, 0x188e2, 0x188e4, 0x188e8, 0x188f6, 0x1890c,\n        0x18930, 0x1893e, 0x18960, 0x1897c, 0x1898e, 0x189b8, 0x189c2, 0x189c8, 0x189d0, 0x189de, 0x189e6, 0x189ec,\n        0x189fa, 0x18a18, 0x18a30, 0x18a3e, 0x18a60, 0x18a7c, 0x18ac0, 0x18af8, 0x18b1c, 0x18b38, 0x18b70, 0x18b7e,\n        0x18b82, 0x18b84, 0x18b88, 0x18b90, 0x18b9e, 0x18ba0, 0x18bbc, 0x18bc6, 0x18bcc, 0x18bd8, 0x18bee, 0x18bf2,\n        0x18bf4, 0x18c22, 0x18c24, 0x18c28, 0x18c36, 0x18c42, 0x18c48, 0x18c50, 0x18c5e, 0x18c66, 0x18c7a, 0x18c82,\n        0x18c84, 0x18c90, 0x18c9e, 0x18ca0, 0x18cbc, 0x18ccc, 0x18cf2, 0x18cf4, 0x18d04, 0x18d08, 0x18d10, 0x18d1e,\n        0x18d20, 0x18d3c, 0x18d40, 0x18d78, 0x18d86, 0x18d98, 0x18dce, 0x18de2, 0x18de4, 0x18de8, 0x18e2e, 0x18e32,\n        0x18e34, 0x18e4e, 0x18e5c, 0x18e62, 0x18e64, 0x18e68, 0x18e8e, 0x18e9c, 0x18eb8, 0x18ec2, 0x18ec4, 0x18ec8,\n        0x18ed0, 0x18efa, 0x18f16, 0x18f26, 0x18f2c, 0x18f46, 0x18f4c, 0x18f58, 0x18f6e, 0x18f8a, 0x18f92, 0x18f94,\n        0x18fa2, 0x18fa4, 0x18fa8, 0x18fb6, 0x1902c, 0x1903a, 0x19046, 0x1904c, 0x19058, 0x19072, 0x19074, 0x19086,\n        0x19098, 0x190b0, 0x190be, 0x190ce, 0x190dc, 0x190e2, 0x190e8, 0x190f6, 0x19106, 0x1910c, 0x19130, 0x1913e,\n        0x19160, 0x1917c, 0x1918e, 0x1919c, 0x191b8, 0x191c2, 0x191c8, 0x191d0, 0x191de, 0x191e6, 0x191ec, 0x191fa,\n        0x19218, 0x1923e, 0x19260, 0x1927c, 0x192c0, 0x192f8, 0x19338, 0x19370, 0x1937e, 0x19382, 0x19384, 0x19390,\n        0x1939e, 0x193a0, 0x193bc, 0x193c6, 0x193cc, 0x193d8, 0x193ee, 0x193f2, 0x193f4, 0x19430, 0x1943e, 0x19460,\n        0x1947c, 0x194c0, 0x194f8, 0x195f0, 0x19638, 0x19670, 0x1967e, 0x196e0, 0x196fc, 0x19702, 0x19704, 0x19708,\n        0x19710, 0x19720, 0x1973c, 0x19740, 0x19778, 0x19786, 0x1978c, 0x19798, 0x197b0, 0x197be, 0x197ce, 0x197dc,\n        0x197e2, 0x197e4, 0x197e8, 0x19822, 0x19824, 0x19842, 0x19848, 0x19850, 0x1985e, 0x19866, 0x1987a, 0x19882,\n        0x19884, 0x19890, 0x1989e, 0x198a0, 0x198bc, 0x198cc, 0x198f2, 0x198f4, 0x19902, 0x19908, 0x1991e, 0x19920,\n        0x1993c, 0x19940, 0x19978, 0x19986, 0x19998, 0x199ce, 0x199e2, 0x199e4, 0x199e8, 0x19a08, 0x19a10, 0x19a1e,\n        0x19a20, 0x19a3c, 0x19a40, 0x19a78, 0x19af0, 0x19b18, 0x19b3e, 0x19b60, 0x19b9c, 0x19bc2, 0x19bc4, 0x19bc8,\n        0x19bd0, 0x19be6, 0x19c2e, 0x19c34, 0x19c4e, 0x19c5c, 0x19c62, 0x19c64, 0x19c68, 0x19c8e, 0x19c9c, 0x19cb8,\n        0x19cc2, 0x19cc8, 0x19cd0, 0x19ce6, 0x19cfa, 0x19d0e, 0x19d1c, 0x19d38, 0x19d70, 0x19d7e, 0x19d82, 0x19d84,\n        0x19d88, 0x19d90, 0x19da0, 0x19dcc, 0x19df2, 0x19df4, 0x19e16, 0x19e26, 0x19e2c, 0x19e46, 0x19e4c, 0x19e58,\n        0x19e74, 0x19e86, 0x19e8c, 0x19e98, 0x19eb0, 0x19ebe, 0x19ece, 0x19ee2, 0x19ee4, 0x19ee8, 0x19f0a, 0x19f12,\n        0x19f14, 0x19f22, 0x19f24, 0x19f28, 0x19f42, 0x19f44, 0x19f48, 0x19f50, 0x19f5e, 0x19f6c, 0x19f9a, 0x19fae,\n        0x19fb2, 0x19fb4, 0x1a046, 0x1a04c, 0x1a072, 0x1a074, 0x1a086, 0x1a08c, 0x1a098, 0x1a0b0, 0x1a0be, 0x1a0e2,\n        0x1a0e4, 0x1a0e8, 0x1a0f6, 0x1a106, 0x1a10c, 0x1a118, 0x1a130, 0x1a13e, 0x1a160, 0x1a17c, 0x1a18e, 0x1a19c,\n        0x1a1b8, 0x1a1c2, 0x1a1c4, 0x1a1c8, 0x1a1d0, 0x1a1de, 0x1a1e6, 0x1a1ec, 0x1a218, 0x1a230, 0x1a23e, 0x1a260,\n        0x1a27c, 0x1a2c0, 0x1a2f8, 0x1a31c, 0x1a338, 0x1a370, 0x1a37e, 0x1a382, 0x1a384, 0x1a388, 0x1a390, 0x1a39e,\n        0x1a3a0, 0x1a3bc, 0x1a3c6, 0x1a3cc, 0x1a3d8, 0x1a3ee, 0x1a3f2, 0x1a3f4, 0x1a418, 0x1a430, 0x1a43e, 0x1a460,\n        0x1a47c, 0x1a4c0, 0x1a4f8, 0x1a5f0, 0x1a61c, 0x1a638, 0x1a670, 0x1a67e, 0x1a6e0, 0x1a6fc, 0x1a702, 0x1a704,\n        0x1a708, 0x1a710, 0x1a71e, 0x1a720, 0x1a73c, 0x1a740, 0x1a778, 0x1a786, 0x1a78c, 0x1a798, 0x1a7b0, 0x1a7be,\n        0x1a7ce, 0x1a7dc, 0x1a7e2, 0x1a7e4, 0x1a7e8, 0x1a830, 0x1a860, 0x1a87c, 0x1a8c0, 0x1a8f8, 0x1a9f0, 0x1abe0,\n        0x1ac70, 0x1ac7e, 0x1ace0, 0x1acfc, 0x1adc0, 0x1adf8, 0x1ae04, 0x1ae08, 0x1ae10, 0x1ae20, 0x1ae3c, 0x1ae40,\n        0x1ae78, 0x1aef0, 0x1af06, 0x1af0c, 0x1af18, 0x1af30, 0x1af3e, 0x1af60, 0x1af7c, 0x1af8e, 0x1af9c, 0x1afb8,\n        0x1afc4, 0x1afc8, 0x1afd0, 0x1afde, 0x1b042, 0x1b05e, 0x1b07a, 0x1b082, 0x1b084, 0x1b088, 0x1b090, 0x1b09e,\n        0x1b0a0, 0x1b0bc, 0x1b0cc, 0x1b0f2, 0x1b0f4, 0x1b102, 0x1b104, 0x1b108, 0x1b110, 0x1b11e, 0x1b120, 0x1b13c,\n        0x1b140, 0x1b178, 0x1b186, 0x1b198, 0x1b1ce, 0x1b1e2, 0x1b1e4, 0x1b1e8, 0x1b204, 0x1b208, 0x1b210, 0x1b21e,\n        0x1b220, 0x1b23c, 0x1b240, 0x1b278, 0x1b2f0, 0x1b30c, 0x1b33e, 0x1b360, 0x1b39c, 0x1b3c2, 0x1b3c4, 0x1b3c8,\n        0x1b3d0, 0x1b3e6, 0x1b410, 0x1b41e, 0x1b420, 0x1b43c, 0x1b440, 0x1b478, 0x1b4f0, 0x1b5e0, 0x1b618, 0x1b660,\n        0x1b67c, 0x1b6c0, 0x1b738, 0x1b782, 0x1b784, 0x1b788, 0x1b790, 0x1b79e, 0x1b7a0, 0x1b7cc, 0x1b82e, 0x1b84e,\n        0x1b85c, 0x1b88e, 0x1b89c, 0x1b8b8, 0x1b8c2, 0x1b8c4, 0x1b8c8, 0x1b8d0, 0x1b8e6, 0x1b8fa, 0x1b90e, 0x1b91c,\n        0x1b938, 0x1b970, 0x1b97e, 0x1b982, 0x1b984, 0x1b988, 0x1b990, 0x1b99e, 0x1b9a0, 0x1b9cc, 0x1b9f2, 0x1b9f4,\n        0x1ba0e, 0x1ba1c, 0x1ba38, 0x1ba70, 0x1ba7e, 0x1bae0, 0x1bafc, 0x1bb08, 0x1bb10, 0x1bb20, 0x1bb3c, 0x1bb40,\n        0x1bb98, 0x1bbce, 0x1bbe2, 0x1bbe4, 0x1bbe8, 0x1bc16, 0x1bc26, 0x1bc2c, 0x1bc46, 0x1bc4c, 0x1bc58, 0x1bc72,\n        0x1bc74, 0x1bc86, 0x1bc8c, 0x1bc98, 0x1bcb0, 0x1bcbe, 0x1bcce, 0x1bce2, 0x1bce4, 0x1bce8, 0x1bd06, 0x1bd0c,\n        0x1bd18, 0x1bd30, 0x1bd3e, 0x1bd60, 0x1bd7c, 0x1bd9c, 0x1bdc2, 0x1bdc4, 0x1bdc8, 0x1bdd0, 0x1bde6, 0x1bdfa,\n        0x1be12, 0x1be14, 0x1be22, 0x1be24, 0x1be28, 0x1be42, 0x1be44, 0x1be48, 0x1be50, 0x1be5e, 0x1be66, 0x1be82,\n        0x1be84, 0x1be88, 0x1be90, 0x1be9e, 0x1bea0, 0x1bebc, 0x1becc, 0x1bef4, 0x1bf1a, 0x1bf2e, 0x1bf32, 0x1bf34,\n        0x1bf4e, 0x1bf5c, 0x1bf62, 0x1bf64, 0x1bf68, 0x1c09a, 0x1c0b2, 0x1c0b4, 0x1c11a, 0x1c132, 0x1c134, 0x1c162,\n        0x1c164, 0x1c168, 0x1c176, 0x1c1ba, 0x1c21a, 0x1c232, 0x1c234, 0x1c24e, 0x1c25c, 0x1c262, 0x1c264, 0x1c268,\n        0x1c276, 0x1c28e, 0x1c2c2, 0x1c2c4, 0x1c2c8, 0x1c2d0, 0x1c2de, 0x1c2e6, 0x1c2ec, 0x1c2fa, 0x1c316, 0x1c326,\n        0x1c33a, 0x1c346, 0x1c34c, 0x1c372, 0x1c374, 0x1c41a, 0x1c42e, 0x1c432, 0x1c434, 0x1c44e, 0x1c45c, 0x1c462,\n        0x1c464, 0x1c468, 0x1c476, 0x1c48e, 0x1c49c, 0x1c4b8, 0x1c4c2, 0x1c4c8, 0x1c4d0, 0x1c4de, 0x1c4e6, 0x1c4ec,\n        0x1c4fa, 0x1c51c, 0x1c538, 0x1c570, 0x1c57e, 0x1c582, 0x1c584, 0x1c588, 0x1c590, 0x1c59e, 0x1c5a0, 0x1c5bc,\n        0x1c5c6, 0x1c5cc, 0x1c5d8, 0x1c5ee, 0x1c5f2, 0x1c5f4, 0x1c616, 0x1c626, 0x1c62c, 0x1c63a, 0x1c646, 0x1c64c,\n        0x1c658, 0x1c66e, 0x1c672, 0x1c674, 0x1c686, 0x1c68c, 0x1c698, 0x1c6b0, 0x1c6be, 0x1c6ce, 0x1c6dc, 0x1c6e2,\n        0x1c6e4, 0x1c6e8, 0x1c712, 0x1c714, 0x1c722, 0x1c728, 0x1c736, 0x1c742, 0x1c744, 0x1c748, 0x1c750, 0x1c75e,\n        0x1c766, 0x1c76c, 0x1c77a, 0x1c7ae, 0x1c7d6, 0x1c7ea, 0x1c81a, 0x1c82e, 0x1c832, 0x1c834, 0x1c84e, 0x1c85c,\n        0x1c862, 0x1c864, 0x1c868, 0x1c876, 0x1c88e, 0x1c89c, 0x1c8b8, 0x1c8c2, 0x1c8c8, 0x1c8d0, 0x1c8de, 0x1c8e6,\n        0x1c8ec, 0x1c8fa, 0x1c90e, 0x1c938, 0x1c970, 0x1c97e, 0x1c982, 0x1c984, 0x1c990, 0x1c99e, 0x1c9a0, 0x1c9bc,\n        0x1c9c6, 0x1c9cc, 0x1c9d8, 0x1c9ee, 0x1c9f2, 0x1c9f4, 0x1ca38, 0x1ca70, 0x1ca7e, 0x1cae0, 0x1cafc, 0x1cb02,\n        0x1cb04, 0x1cb08, 0x1cb10, 0x1cb20, 0x1cb3c, 0x1cb40, 0x1cb78, 0x1cb86, 0x1cb8c, 0x1cb98, 0x1cbb0, 0x1cbbe,\n        0x1cbce, 0x1cbdc, 0x1cbe2, 0x1cbe4, 0x1cbe8, 0x1cbf6, 0x1cc16, 0x1cc26, 0x1cc2c, 0x1cc3a, 0x1cc46, 0x1cc58,\n        0x1cc72, 0x1cc74, 0x1cc86, 0x1ccb0, 0x1ccbe, 0x1ccce, 0x1cce2, 0x1cce4, 0x1cce8, 0x1cd06, 0x1cd0c, 0x1cd18,\n        0x1cd30, 0x1cd3e, 0x1cd60, 0x1cd7c, 0x1cd9c, 0x1cdc2, 0x1cdc4, 0x1cdc8, 0x1cdd0, 0x1cdde, 0x1cde6, 0x1cdfa,\n        0x1ce22, 0x1ce28, 0x1ce42, 0x1ce50, 0x1ce5e, 0x1ce66, 0x1ce7a, 0x1ce82, 0x1ce84, 0x1ce88, 0x1ce90, 0x1ce9e,\n        0x1cea0, 0x1cebc, 0x1cecc, 0x1cef2, 0x1cef4, 0x1cf2e, 0x1cf32, 0x1cf34, 0x1cf4e, 0x1cf5c, 0x1cf62, 0x1cf64,\n        0x1cf68, 0x1cf96, 0x1cfa6, 0x1cfac, 0x1cfca, 0x1cfd2, 0x1cfd4, 0x1d02e, 0x1d032, 0x1d034, 0x1d04e, 0x1d05c,\n        0x1d062, 0x1d064, 0x1d068, 0x1d076, 0x1d08e, 0x1d09c, 0x1d0b8, 0x1d0c2, 0x1d0c4, 0x1d0c8, 0x1d0d0, 0x1d0de,\n        0x1d0e6, 0x1d0ec, 0x1d0fa, 0x1d11c, 0x1d138, 0x1d170, 0x1d17e, 0x1d182, 0x1d184, 0x1d188, 0x1d190, 0x1d19e,\n        0x1d1a0, 0x1d1bc, 0x1d1c6, 0x1d1cc, 0x1d1d8, 0x1d1ee, 0x1d1f2, 0x1d1f4, 0x1d21c, 0x1d238, 0x1d270, 0x1d27e,\n        0x1d2e0, 0x1d2fc, 0x1d302, 0x1d304, 0x1d308, 0x1d310, 0x1d31e, 0x1d320, 0x1d33c, 0x1d340, 0x1d378, 0x1d386,\n        0x1d38c, 0x1d398, 0x1d3b0, 0x1d3be, 0x1d3ce, 0x1d3dc, 0x1d3e2, 0x1d3e4, 0x1d3e8, 0x1d3f6, 0x1d470, 0x1d47e,\n        0x1d4e0, 0x1d4fc, 0x1d5c0, 0x1d5f8, 0x1d604, 0x1d608, 0x1d610, 0x1d620, 0x1d640, 0x1d678, 0x1d6f0, 0x1d706,\n        0x1d70c, 0x1d718, 0x1d730, 0x1d73e, 0x1d760, 0x1d77c, 0x1d78e, 0x1d79c, 0x1d7b8, 0x1d7c2, 0x1d7c4, 0x1d7c8,\n        0x1d7d0, 0x1d7de, 0x1d7e6, 0x1d7ec, 0x1d826, 0x1d82c, 0x1d83a, 0x1d846, 0x1d84c, 0x1d858, 0x1d872, 0x1d874,\n        0x1d886, 0x1d88c, 0x1d898, 0x1d8b0, 0x1d8be, 0x1d8ce, 0x1d8e2, 0x1d8e4, 0x1d8e8, 0x1d8f6, 0x1d90c, 0x1d918,\n        0x1d930, 0x1d93e, 0x1d960, 0x1d97c, 0x1d99c, 0x1d9c2, 0x1d9c4, 0x1d9c8, 0x1d9d0, 0x1d9e6, 0x1d9fa, 0x1da0c,\n        0x1da18, 0x1da30, 0x1da3e, 0x1da60, 0x1da7c, 0x1dac0, 0x1daf8, 0x1db38, 0x1db82, 0x1db84, 0x1db88, 0x1db90,\n        0x1db9e, 0x1dba0, 0x1dbcc, 0x1dbf2, 0x1dbf4, 0x1dc22, 0x1dc42, 0x1dc44, 0x1dc48, 0x1dc50, 0x1dc5e, 0x1dc66,\n        0x1dc7a, 0x1dc82, 0x1dc84, 0x1dc88, 0x1dc90, 0x1dc9e, 0x1dca0, 0x1dcbc, 0x1dccc, 0x1dcf2, 0x1dcf4, 0x1dd04,\n        0x1dd08, 0x1dd10, 0x1dd1e, 0x1dd20, 0x1dd3c, 0x1dd40, 0x1dd78, 0x1dd86, 0x1dd98, 0x1ddce, 0x1dde2, 0x1dde4,\n        0x1dde8, 0x1de2e, 0x1de32, 0x1de34, 0x1de4e, 0x1de5c, 0x1de62, 0x1de64, 0x1de68, 0x1de8e, 0x1de9c, 0x1deb8,\n        0x1dec2, 0x1dec4, 0x1dec8, 0x1ded0, 0x1dee6, 0x1defa, 0x1df16, 0x1df26, 0x1df2c, 0x1df46, 0x1df4c, 0x1df58,\n        0x1df72, 0x1df74, 0x1df8a, 0x1df92, 0x1df94, 0x1dfa2, 0x1dfa4, 0x1dfa8, 0x1e08a, 0x1e092, 0x1e094, 0x1e0a2,\n        0x1e0a4, 0x1e0a8, 0x1e0b6, 0x1e0da, 0x1e10a, 0x1e112, 0x1e114, 0x1e122, 0x1e124, 0x1e128, 0x1e136, 0x1e142,\n        0x1e144, 0x1e148, 0x1e150, 0x1e166, 0x1e16c, 0x1e17a, 0x1e19a, 0x1e1b2, 0x1e1b4, 0x1e20a, 0x1e212, 0x1e214,\n        0x1e222, 0x1e224, 0x1e228, 0x1e236, 0x1e242, 0x1e248, 0x1e250, 0x1e25e, 0x1e266, 0x1e26c, 0x1e27a, 0x1e282,\n        0x1e284, 0x1e288, 0x1e290, 0x1e2a0, 0x1e2bc, 0x1e2c6, 0x1e2cc, 0x1e2d8, 0x1e2ee, 0x1e2f2, 0x1e2f4, 0x1e31a,\n        0x1e332, 0x1e334, 0x1e35c, 0x1e362, 0x1e364, 0x1e368, 0x1e3ba, 0x1e40a, 0x1e412, 0x1e414, 0x1e422, 0x1e428,\n        0x1e436, 0x1e442, 0x1e448, 0x1e450, 0x1e45e, 0x1e466, 0x1e46c, 0x1e47a, 0x1e482, 0x1e484, 0x1e490, 0x1e49e,\n        0x1e4a0, 0x1e4bc, 0x1e4c6, 0x1e4cc, 0x1e4d8, 0x1e4ee, 0x1e4f2, 0x1e4f4, 0x1e502, 0x1e504, 0x1e508, 0x1e510,\n        0x1e51e, 0x1e520, 0x1e53c, 0x1e540, 0x1e578, 0x1e586, 0x1e58c, 0x1e598, 0x1e5b0, 0x1e5be, 0x1e5ce, 0x1e5dc,\n        0x1e5e2, 0x1e5e4, 0x1e5e8, 0x1e5f6, 0x1e61a, 0x1e62e, 0x1e632, 0x1e634, 0x1e64e, 0x1e65c, 0x1e662, 0x1e668,\n        0x1e68e, 0x1e69c, 0x1e6b8, 0x1e6c2, 0x1e6c4, 0x1e6c8, 0x1e6d0, 0x1e6e6, 0x1e6fa, 0x1e716, 0x1e726, 0x1e72c,\n        0x1e73a, 0x1e746, 0x1e74c, 0x1e758, 0x1e772, 0x1e774, 0x1e792, 0x1e794, 0x1e7a2, 0x1e7a4, 0x1e7a8, 0x1e7b6,\n        0x1e812, 0x1e814, 0x1e822, 0x1e824, 0x1e828, 0x1e836, 0x1e842, 0x1e844, 0x1e848, 0x1e850, 0x1e85e, 0x1e866,\n        0x1e86c, 0x1e87a, 0x1e882, 0x1e884, 0x1e888, 0x1e890, 0x1e89e, 0x1e8a0, 0x1e8bc, 0x1e8c6, 0x1e8cc, 0x1e8d8,\n        0x1e8ee, 0x1e8f2, 0x1e8f4, 0x1e902, 0x1e904, 0x1e908, 0x1e910, 0x1e920, 0x1e93c, 0x1e940, 0x1e978, 0x1e986,\n        0x1e98c, 0x1e998, 0x1e9b0, 0x1e9be, 0x1e9ce, 0x1e9dc, 0x1e9e2, 0x1e9e4, 0x1e9e8, 0x1e9f6, 0x1ea04, 0x1ea08,\n        0x1ea10, 0x1ea20, 0x1ea40, 0x1ea78, 0x1eaf0, 0x1eb06, 0x1eb0c, 0x1eb18, 0x1eb30, 0x1eb3e, 0x1eb60, 0x1eb7c,\n        0x1eb8e, 0x1eb9c, 0x1ebb8, 0x1ebc2, 0x1ebc4, 0x1ebc8, 0x1ebd0, 0x1ebde, 0x1ebe6, 0x1ebec, 0x1ec1a, 0x1ec2e,\n        0x1ec32, 0x1ec34, 0x1ec4e, 0x1ec5c, 0x1ec62, 0x1ec64, 0x1ec68, 0x1ec8e, 0x1ec9c, 0x1ecb8, 0x1ecc2, 0x1ecc4,\n        0x1ecc8, 0x1ecd0, 0x1ece6, 0x1ecfa, 0x1ed0e, 0x1ed1c, 0x1ed38, 0x1ed70, 0x1ed7e, 0x1ed82, 0x1ed84, 0x1ed88,\n        0x1ed90, 0x1ed9e, 0x1eda0, 0x1edcc, 0x1edf2, 0x1edf4, 0x1ee16, 0x1ee26, 0x1ee2c, 0x1ee3a, 0x1ee46, 0x1ee4c,\n        0x1ee58, 0x1ee6e, 0x1ee72, 0x1ee74, 0x1ee86, 0x1ee8c, 0x1ee98, 0x1eeb0, 0x1eebe, 0x1eece, 0x1eedc, 0x1eee2,\n        0x1eee4, 0x1eee8, 0x1ef12, 0x1ef22, 0x1ef24, 0x1ef28, 0x1ef36, 0x1ef42, 0x1ef44, 0x1ef48, 0x1ef50, 0x1ef5e,\n        0x1ef66, 0x1ef6c, 0x1ef7a, 0x1efae, 0x1efb2, 0x1efb4, 0x1efd6, 0x1f096, 0x1f0a6, 0x1f0ac, 0x1f0ba, 0x1f0ca,\n        0x1f0d2, 0x1f0d4, 0x1f116, 0x1f126, 0x1f12c, 0x1f13a, 0x1f146, 0x1f14c, 0x1f158, 0x1f16e, 0x1f172, 0x1f174,\n        0x1f18a, 0x1f192, 0x1f194, 0x1f1a2, 0x1f1a4, 0x1f1a8, 0x1f1da, 0x1f216, 0x1f226, 0x1f22c, 0x1f23a, 0x1f246,\n        0x1f258, 0x1f26e, 0x1f272, 0x1f274, 0x1f286, 0x1f28c, 0x1f298, 0x1f2b0, 0x1f2be, 0x1f2ce, 0x1f2dc, 0x1f2e2,\n        0x1f2e4, 0x1f2e8, 0x1f2f6, 0x1f30a, 0x1f312, 0x1f314, 0x1f322, 0x1f328, 0x1f342, 0x1f344, 0x1f348, 0x1f350,\n        0x1f35e, 0x1f366, 0x1f37a, 0x1f39a, 0x1f3ae, 0x1f3b2, 0x1f3b4, 0x1f416, 0x1f426, 0x1f42c, 0x1f43a, 0x1f446,\n        0x1f44c, 0x1f458, 0x1f46e, 0x1f472, 0x1f474, 0x1f486, 0x1f48c, 0x1f498, 0x1f4b0, 0x1f4be, 0x1f4ce, 0x1f4dc,\n        0x1f4e2, 0x1f4e4, 0x1f4e8, 0x1f4f6, 0x1f506, 0x1f50c, 0x1f518, 0x1f530, 0x1f53e, 0x1f560, 0x1f57c, 0x1f58e,\n        0x1f59c, 0x1f5b8, 0x1f5c2, 0x1f5c4, 0x1f5c8, 0x1f5d0, 0x1f5de, 0x1f5e6, 0x1f5ec, 0x1f5fa, 0x1f60a, 0x1f612,\n        0x1f614, 0x1f622, 0x1f624, 0x1f628, 0x1f636, 0x1f642, 0x1f644, 0x1f648, 0x1f650, 0x1f65e, 0x1f666, 0x1f67a,\n        0x1f682, 0x1f684, 0x1f688, 0x1f690, 0x1f69e, 0x1f6a0, 0x1f6bc, 0x1f6cc, 0x1f6f2, 0x1f6f4, 0x1f71a, 0x1f72e,\n        0x1f732, 0x1f734, 0x1f74e, 0x1f75c, 0x1f762, 0x1f764, 0x1f768, 0x1f776, 0x1f796, 0x1f7a6, 0x1f7ac, 0x1f7ba,\n        0x1f7d2, 0x1f7d4, 0x1f89a, 0x1f8ae, 0x1f8b2, 0x1f8b4, 0x1f8d6, 0x1f8ea, 0x1f91a, 0x1f92e, 0x1f932, 0x1f934,\n        0x1f94e, 0x1f95c, 0x1f962, 0x1f964, 0x1f968, 0x1f976, 0x1f996, 0x1f9a6, 0x1f9ac, 0x1f9ba, 0x1f9ca, 0x1f9d2,\n        0x1f9d4, 0x1fa1a, 0x1fa2e, 0x1fa32, 0x1fa34, 0x1fa4e, 0x1fa5c, 0x1fa62, 0x1fa64, 0x1fa68, 0x1fa76, 0x1fa8e,\n        0x1fa9c, 0x1fab8, 0x1fac2, 0x1fac4, 0x1fac8, 0x1fad0, 0x1fade, 0x1fae6, 0x1faec, 0x1fb16, 0x1fb26, 0x1fb2c,\n        0x1fb3a, 0x1fb46, 0x1fb4c, 0x1fb58, 0x1fb6e, 0x1fb72, 0x1fb74, 0x1fb8a, 0x1fb92, 0x1fb94, 0x1fba2, 0x1fba4,\n        0x1fba8, 0x1fbb6, 0x1fbda\n    ]);\n    /**\n     * This table contains to codewords for all symbols.\n     */\n    PDF417Common.CODEWORD_TABLE = Int32Array.from([\n        2627, 1819, 2622, 2621, 1813, 1812, 2729, 2724, 2723, 2779, 2774, 2773, 902, 896, 908, 868, 865, 861, 859, 2511,\n        873, 871, 1780, 835, 2493, 825, 2491, 842, 837, 844, 1764, 1762, 811, 810, 809, 2483, 807, 2482, 806, 2480, 815,\n        814, 813, 812, 2484, 817, 816, 1745, 1744, 1742, 1746, 2655, 2637, 2635, 2626, 2625, 2623, 2628, 1820, 2752,\n        2739, 2737, 2728, 2727, 2725, 2730, 2785, 2783, 2778, 2777, 2775, 2780, 787, 781, 747, 739, 736, 2413, 754, 752,\n        1719, 692, 689, 681, 2371, 678, 2369, 700, 697, 694, 703, 1688, 1686, 642, 638, 2343, 631, 2341, 627, 2338, 651,\n        646, 643, 2345, 654, 652, 1652, 1650, 1647, 1654, 601, 599, 2322, 596, 2321, 594, 2319, 2317, 611, 610, 608, 606,\n        2324, 603, 2323, 615, 614, 612, 1617, 1616, 1614, 1612, 616, 1619, 1618, 2575, 2538, 2536, 905, 901, 898, 909,\n        2509, 2507, 2504, 870, 867, 864, 860, 2512, 875, 872, 1781, 2490, 2489, 2487, 2485, 1748, 836, 834, 832, 830,\n        2494, 827, 2492, 843, 841, 839, 845, 1765, 1763, 2701, 2676, 2674, 2653, 2648, 2656, 2634, 2633, 2631, 2629,\n        1821, 2638, 2636, 2770, 2763, 2761, 2750, 2745, 2753, 2736, 2735, 2733, 2731, 1848, 2740, 2738, 2786, 2784, 591,\n        588, 576, 569, 566, 2296, 1590, 537, 534, 526, 2276, 522, 2274, 545, 542, 539, 548, 1572, 1570, 481, 2245, 466,\n        2242, 462, 2239, 492, 485, 482, 2249, 496, 494, 1534, 1531, 1528, 1538, 413, 2196, 406, 2191, 2188, 425, 419,\n        2202, 415, 2199, 432, 430, 427, 1472, 1467, 1464, 433, 1476, 1474, 368, 367, 2160, 365, 2159, 362, 2157, 2155,\n        2152, 378, 377, 375, 2166, 372, 2165, 369, 2162, 383, 381, 379, 2168, 1419, 1418, 1416, 1414, 385, 1411, 384,\n        1423, 1422, 1420, 1424, 2461, 802, 2441, 2439, 790, 786, 783, 794, 2409, 2406, 2403, 750, 742, 738, 2414, 756,\n        753, 1720, 2367, 2365, 2362, 2359, 1663, 693, 691, 684, 2373, 680, 2370, 702, 699, 696, 704, 1690, 1687, 2337,\n        2336, 2334, 2332, 1624, 2329, 1622, 640, 637, 2344, 634, 2342, 630, 2340, 650, 648, 645, 2346, 655, 653, 1653,\n        1651, 1649, 1655, 2612, 2597, 2595, 2571, 2568, 2565, 2576, 2534, 2529, 2526, 1787, 2540, 2537, 907, 904, 900,\n        910, 2503, 2502, 2500, 2498, 1768, 2495, 1767, 2510, 2508, 2506, 869, 866, 863, 2513, 876, 874, 1782, 2720, 2713,\n        2711, 2697, 2694, 2691, 2702, 2672, 2670, 2664, 1828, 2678, 2675, 2647, 2646, 2644, 2642, 1823, 2639, 1822, 2654,\n        2652, 2650, 2657, 2771, 1855, 2765, 2762, 1850, 1849, 2751, 2749, 2747, 2754, 353, 2148, 344, 342, 336, 2142,\n        332, 2140, 345, 1375, 1373, 306, 2130, 299, 2128, 295, 2125, 319, 314, 311, 2132, 1354, 1352, 1349, 1356, 262,\n        257, 2101, 253, 2096, 2093, 274, 273, 267, 2107, 263, 2104, 280, 278, 275, 1316, 1311, 1308, 1320, 1318, 2052,\n        202, 2050, 2044, 2040, 219, 2063, 212, 2060, 208, 2055, 224, 221, 2066, 1260, 1258, 1252, 231, 1248, 229, 1266,\n        1264, 1261, 1268, 155, 1998, 153, 1996, 1994, 1991, 1988, 165, 164, 2007, 162, 2006, 159, 2003, 2000, 172, 171,\n        169, 2012, 166, 2010, 1186, 1184, 1182, 1179, 175, 1176, 173, 1192, 1191, 1189, 1187, 176, 1194, 1193, 2313,\n        2307, 2305, 592, 589, 2294, 2292, 2289, 578, 572, 568, 2297, 580, 1591, 2272, 2267, 2264, 1547, 538, 536, 529,\n        2278, 525, 2275, 547, 544, 541, 1574, 1571, 2237, 2235, 2229, 1493, 2225, 1489, 478, 2247, 470, 2244, 465, 2241,\n        493, 488, 484, 2250, 498, 495, 1536, 1533, 1530, 1539, 2187, 2186, 2184, 2182, 1432, 2179, 1430, 2176, 1427, 414,\n        412, 2197, 409, 2195, 405, 2193, 2190, 426, 424, 421, 2203, 418, 2201, 431, 429, 1473, 1471, 1469, 1466, 434,\n        1477, 1475, 2478, 2472, 2470, 2459, 2457, 2454, 2462, 803, 2437, 2432, 2429, 1726, 2443, 2440, 792, 789, 785,\n        2401, 2399, 2393, 1702, 2389, 1699, 2411, 2408, 2405, 745, 741, 2415, 758, 755, 1721, 2358, 2357, 2355, 2353,\n        1661, 2350, 1660, 2347, 1657, 2368, 2366, 2364, 2361, 1666, 690, 687, 2374, 683, 2372, 701, 698, 705, 1691, 1689,\n        2619, 2617, 2610, 2608, 2605, 2613, 2593, 2588, 2585, 1803, 2599, 2596, 2563, 2561, 2555, 1797, 2551, 1795, 2573,\n        2570, 2567, 2577, 2525, 2524, 2522, 2520, 1786, 2517, 1785, 2514, 1783, 2535, 2533, 2531, 2528, 1788, 2541, 2539,\n        906, 903, 911, 2721, 1844, 2715, 2712, 1838, 1836, 2699, 2696, 2693, 2703, 1827, 1826, 1824, 2673, 2671, 2669,\n        2666, 1829, 2679, 2677, 1858, 1857, 2772, 1854, 1853, 1851, 1856, 2766, 2764, 143, 1987, 139, 1986, 135, 133,\n        131, 1984, 128, 1983, 125, 1981, 138, 137, 136, 1985, 1133, 1132, 1130, 112, 110, 1974, 107, 1973, 104, 1971,\n        1969, 122, 121, 119, 117, 1977, 114, 1976, 124, 1115, 1114, 1112, 1110, 1117, 1116, 84, 83, 1953, 81, 1952, 78,\n        1950, 1948, 1945, 94, 93, 91, 1959, 88, 1958, 85, 1955, 99, 97, 95, 1961, 1086, 1085, 1083, 1081, 1078, 100,\n        1090, 1089, 1087, 1091, 49, 47, 1917, 44, 1915, 1913, 1910, 1907, 59, 1926, 56, 1925, 53, 1922, 1919, 66, 64,\n        1931, 61, 1929, 1042, 1040, 1038, 71, 1035, 70, 1032, 68, 1048, 1047, 1045, 1043, 1050, 1049, 12, 10, 1869, 1867,\n        1864, 1861, 21, 1880, 19, 1877, 1874, 1871, 28, 1888, 25, 1886, 22, 1883, 982, 980, 977, 974, 32, 30, 991, 989,\n        987, 984, 34, 995, 994, 992, 2151, 2150, 2147, 2146, 2144, 356, 355, 354, 2149, 2139, 2138, 2136, 2134, 1359,\n        343, 341, 338, 2143, 335, 2141, 348, 347, 346, 1376, 1374, 2124, 2123, 2121, 2119, 1326, 2116, 1324, 310, 308,\n        305, 2131, 302, 2129, 298, 2127, 320, 318, 316, 313, 2133, 322, 321, 1355, 1353, 1351, 1357, 2092, 2091, 2089,\n        2087, 1276, 2084, 1274, 2081, 1271, 259, 2102, 256, 2100, 252, 2098, 2095, 272, 269, 2108, 266, 2106, 281, 279,\n        277, 1317, 1315, 1313, 1310, 282, 1321, 1319, 2039, 2037, 2035, 2032, 1203, 2029, 1200, 1197, 207, 2053, 205,\n        2051, 201, 2049, 2046, 2043, 220, 218, 2064, 215, 2062, 211, 2059, 228, 226, 223, 2069, 1259, 1257, 1254, 232,\n        1251, 230, 1267, 1265, 1263, 2316, 2315, 2312, 2311, 2309, 2314, 2304, 2303, 2301, 2299, 1593, 2308, 2306, 590,\n        2288, 2287, 2285, 2283, 1578, 2280, 1577, 2295, 2293, 2291, 579, 577, 574, 571, 2298, 582, 581, 1592, 2263, 2262,\n        2260, 2258, 1545, 2255, 1544, 2252, 1541, 2273, 2271, 2269, 2266, 1550, 535, 532, 2279, 528, 2277, 546, 543, 549,\n        1575, 1573, 2224, 2222, 2220, 1486, 2217, 1485, 2214, 1482, 1479, 2238, 2236, 2234, 2231, 1496, 2228, 1492, 480,\n        477, 2248, 473, 2246, 469, 2243, 490, 487, 2251, 497, 1537, 1535, 1532, 2477, 2476, 2474, 2479, 2469, 2468, 2466,\n        2464, 1730, 2473, 2471, 2453, 2452, 2450, 2448, 1729, 2445, 1728, 2460, 2458, 2456, 2463, 805, 804, 2428, 2427,\n        2425, 2423, 1725, 2420, 1724, 2417, 1722, 2438, 2436, 2434, 2431, 1727, 2444, 2442, 793, 791, 788, 795, 2388,\n        2386, 2384, 1697, 2381, 1696, 2378, 1694, 1692, 2402, 2400, 2398, 2395, 1703, 2392, 1701, 2412, 2410, 2407, 751,\n        748, 744, 2416, 759, 757, 1807, 2620, 2618, 1806, 1805, 2611, 2609, 2607, 2614, 1802, 1801, 1799, 2594, 2592,\n        2590, 2587, 1804, 2600, 2598, 1794, 1793, 1791, 1789, 2564, 2562, 2560, 2557, 1798, 2554, 1796, 2574, 2572, 2569,\n        2578, 1847, 1846, 2722, 1843, 1842, 1840, 1845, 2716, 2714, 1835, 1834, 1832, 1830, 1839, 1837, 2700, 2698, 2695,\n        2704, 1817, 1811, 1810, 897, 862, 1777, 829, 826, 838, 1760, 1758, 808, 2481, 1741, 1740, 1738, 1743, 2624, 1818,\n        2726, 2776, 782, 740, 737, 1715, 686, 679, 695, 1682, 1680, 639, 628, 2339, 647, 644, 1645, 1643, 1640, 1648,\n        602, 600, 597, 595, 2320, 593, 2318, 609, 607, 604, 1611, 1610, 1608, 1606, 613, 1615, 1613, 2328, 926, 924, 892,\n        886, 899, 857, 850, 2505, 1778, 824, 823, 821, 819, 2488, 818, 2486, 833, 831, 828, 840, 1761, 1759, 2649, 2632,\n        2630, 2746, 2734, 2732, 2782, 2781, 570, 567, 1587, 531, 527, 523, 540, 1566, 1564, 476, 467, 463, 2240, 486,\n        483, 1524, 1521, 1518, 1529, 411, 403, 2192, 399, 2189, 423, 416, 1462, 1457, 1454, 428, 1468, 1465, 2210, 366,\n        363, 2158, 360, 2156, 357, 2153, 376, 373, 370, 2163, 1410, 1409, 1407, 1405, 382, 1402, 380, 1417, 1415, 1412,\n        1421, 2175, 2174, 777, 774, 771, 784, 732, 725, 722, 2404, 743, 1716, 676, 674, 668, 2363, 665, 2360, 685, 1684,\n        1681, 626, 624, 622, 2335, 620, 2333, 617, 2330, 641, 635, 649, 1646, 1644, 1642, 2566, 928, 925, 2530, 2527,\n        894, 891, 888, 2501, 2499, 2496, 858, 856, 854, 851, 1779, 2692, 2668, 2665, 2645, 2643, 2640, 2651, 2768, 2759,\n        2757, 2744, 2743, 2741, 2748, 352, 1382, 340, 337, 333, 1371, 1369, 307, 300, 296, 2126, 315, 312, 1347, 1342,\n        1350, 261, 258, 250, 2097, 246, 2094, 271, 268, 264, 1306, 1301, 1298, 276, 1312, 1309, 2115, 203, 2048, 195,\n        2045, 191, 2041, 213, 209, 2056, 1246, 1244, 1238, 225, 1234, 222, 1256, 1253, 1249, 1262, 2080, 2079, 154, 1997,\n        150, 1995, 147, 1992, 1989, 163, 160, 2004, 156, 2001, 1175, 1174, 1172, 1170, 1167, 170, 1164, 167, 1185, 1183,\n        1180, 1177, 174, 1190, 1188, 2025, 2024, 2022, 587, 586, 564, 559, 556, 2290, 573, 1588, 520, 518, 512, 2268,\n        508, 2265, 530, 1568, 1565, 461, 457, 2233, 450, 2230, 446, 2226, 479, 471, 489, 1526, 1523, 1520, 397, 395,\n        2185, 392, 2183, 389, 2180, 2177, 410, 2194, 402, 422, 1463, 1461, 1459, 1456, 1470, 2455, 799, 2433, 2430, 779,\n        776, 773, 2397, 2394, 2390, 734, 728, 724, 746, 1717, 2356, 2354, 2351, 2348, 1658, 677, 675, 673, 670, 667, 688,\n        1685, 1683, 2606, 2589, 2586, 2559, 2556, 2552, 927, 2523, 2521, 2518, 2515, 1784, 2532, 895, 893, 890, 2718,\n        2709, 2707, 2689, 2687, 2684, 2663, 2662, 2660, 2658, 1825, 2667, 2769, 1852, 2760, 2758, 142, 141, 1139, 1138,\n        134, 132, 129, 126, 1982, 1129, 1128, 1126, 1131, 113, 111, 108, 105, 1972, 101, 1970, 120, 118, 115, 1109, 1108,\n        1106, 1104, 123, 1113, 1111, 82, 79, 1951, 75, 1949, 72, 1946, 92, 89, 86, 1956, 1077, 1076, 1074, 1072, 98,\n        1069, 96, 1084, 1082, 1079, 1088, 1968, 1967, 48, 45, 1916, 42, 1914, 39, 1911, 1908, 60, 57, 54, 1923, 50, 1920,\n        1031, 1030, 1028, 1026, 67, 1023, 65, 1020, 62, 1041, 1039, 1036, 1033, 69, 1046, 1044, 1944, 1943, 1941, 11, 9,\n        1868, 7, 1865, 1862, 1859, 20, 1878, 16, 1875, 13, 1872, 970, 968, 966, 963, 29, 960, 26, 23, 983, 981, 978, 975,\n        33, 971, 31, 990, 988, 985, 1906, 1904, 1902, 993, 351, 2145, 1383, 331, 330, 328, 326, 2137, 323, 2135, 339,\n        1372, 1370, 294, 293, 291, 289, 2122, 286, 2120, 283, 2117, 309, 303, 317, 1348, 1346, 1344, 245, 244, 242, 2090,\n        239, 2088, 236, 2085, 2082, 260, 2099, 249, 270, 1307, 1305, 1303, 1300, 1314, 189, 2038, 186, 2036, 183, 2033,\n        2030, 2026, 206, 198, 2047, 194, 216, 1247, 1245, 1243, 1240, 227, 1237, 1255, 2310, 2302, 2300, 2286, 2284,\n        2281, 565, 563, 561, 558, 575, 1589, 2261, 2259, 2256, 2253, 1542, 521, 519, 517, 514, 2270, 511, 533, 1569,\n        1567, 2223, 2221, 2218, 2215, 1483, 2211, 1480, 459, 456, 453, 2232, 449, 474, 491, 1527, 1525, 1522, 2475, 2467,\n        2465, 2451, 2449, 2446, 801, 800, 2426, 2424, 2421, 2418, 1723, 2435, 780, 778, 775, 2387, 2385, 2382, 2379,\n        1695, 2375, 1693, 2396, 735, 733, 730, 727, 749, 1718, 2616, 2615, 2604, 2603, 2601, 2584, 2583, 2581, 2579,\n        1800, 2591, 2550, 2549, 2547, 2545, 1792, 2542, 1790, 2558, 929, 2719, 1841, 2710, 2708, 1833, 1831, 2690, 2688,\n        2686, 1815, 1809, 1808, 1774, 1756, 1754, 1737, 1736, 1734, 1739, 1816, 1711, 1676, 1674, 633, 629, 1638, 1636,\n        1633, 1641, 598, 1605, 1604, 1602, 1600, 605, 1609, 1607, 2327, 887, 853, 1775, 822, 820, 1757, 1755, 1584, 524,\n        1560, 1558, 468, 464, 1514, 1511, 1508, 1519, 408, 404, 400, 1452, 1447, 1444, 417, 1458, 1455, 2208, 364, 361,\n        358, 2154, 1401, 1400, 1398, 1396, 374, 1393, 371, 1408, 1406, 1403, 1413, 2173, 2172, 772, 726, 723, 1712, 672,\n        669, 666, 682, 1678, 1675, 625, 623, 621, 618, 2331, 636, 632, 1639, 1637, 1635, 920, 918, 884, 880, 889, 849,\n        848, 847, 846, 2497, 855, 852, 1776, 2641, 2742, 2787, 1380, 334, 1367, 1365, 301, 297, 1340, 1338, 1335, 1343,\n        255, 251, 247, 1296, 1291, 1288, 265, 1302, 1299, 2113, 204, 196, 192, 2042, 1232, 1230, 1224, 214, 1220, 210,\n        1242, 1239, 1235, 1250, 2077, 2075, 151, 148, 1993, 144, 1990, 1163, 1162, 1160, 1158, 1155, 161, 1152, 157,\n        1173, 1171, 1168, 1165, 168, 1181, 1178, 2021, 2020, 2018, 2023, 585, 560, 557, 1585, 516, 509, 1562, 1559, 458,\n        447, 2227, 472, 1516, 1513, 1510, 398, 396, 393, 390, 2181, 386, 2178, 407, 1453, 1451, 1449, 1446, 420, 1460,\n        2209, 769, 764, 720, 712, 2391, 729, 1713, 664, 663, 661, 659, 2352, 656, 2349, 671, 1679, 1677, 2553, 922, 919,\n        2519, 2516, 885, 883, 881, 2685, 2661, 2659, 2767, 2756, 2755, 140, 1137, 1136, 130, 127, 1125, 1124, 1122, 1127,\n        109, 106, 102, 1103, 1102, 1100, 1098, 116, 1107, 1105, 1980, 80, 76, 73, 1947, 1068, 1067, 1065, 1063, 90, 1060,\n        87, 1075, 1073, 1070, 1080, 1966, 1965, 46, 43, 40, 1912, 36, 1909, 1019, 1018, 1016, 1014, 58, 1011, 55, 1008,\n        51, 1029, 1027, 1024, 1021, 63, 1037, 1034, 1940, 1939, 1937, 1942, 8, 1866, 4, 1863, 1, 1860, 956, 954, 952,\n        949, 946, 17, 14, 969, 967, 964, 961, 27, 957, 24, 979, 976, 972, 1901, 1900, 1898, 1896, 986, 1905, 1903, 350,\n        349, 1381, 329, 327, 324, 1368, 1366, 292, 290, 287, 284, 2118, 304, 1341, 1339, 1337, 1345, 243, 240, 237, 2086,\n        233, 2083, 254, 1297, 1295, 1293, 1290, 1304, 2114, 190, 187, 184, 2034, 180, 2031, 177, 2027, 199, 1233, 1231,\n        1229, 1226, 217, 1223, 1241, 2078, 2076, 584, 555, 554, 552, 550, 2282, 562, 1586, 507, 506, 504, 502, 2257, 499,\n        2254, 515, 1563, 1561, 445, 443, 441, 2219, 438, 2216, 435, 2212, 460, 454, 475, 1517, 1515, 1512, 2447, 798,\n        797, 2422, 2419, 770, 768, 766, 2383, 2380, 2376, 721, 719, 717, 714, 731, 1714, 2602, 2582, 2580, 2548, 2546,\n        2543, 923, 921, 2717, 2706, 2705, 2683, 2682, 2680, 1771, 1752, 1750, 1733, 1732, 1731, 1735, 1814, 1707, 1670,\n        1668, 1631, 1629, 1626, 1634, 1599, 1598, 1596, 1594, 1603, 1601, 2326, 1772, 1753, 1751, 1581, 1554, 1552, 1504,\n        1501, 1498, 1509, 1442, 1437, 1434, 401, 1448, 1445, 2206, 1392, 1391, 1389, 1387, 1384, 359, 1399, 1397, 1394,\n        1404, 2171, 2170, 1708, 1672, 1669, 619, 1632, 1630, 1628, 1773, 1378, 1363, 1361, 1333, 1328, 1336, 1286, 1281,\n        1278, 248, 1292, 1289, 2111, 1218, 1216, 1210, 197, 1206, 193, 1228, 1225, 1221, 1236, 2073, 2071, 1151, 1150,\n        1148, 1146, 152, 1143, 149, 1140, 145, 1161, 1159, 1156, 1153, 158, 1169, 1166, 2017, 2016, 2014, 2019, 1582,\n        510, 1556, 1553, 452, 448, 1506, 1500, 394, 391, 387, 1443, 1441, 1439, 1436, 1450, 2207, 765, 716, 713, 1709,\n        662, 660, 657, 1673, 1671, 916, 914, 879, 878, 877, 882, 1135, 1134, 1121, 1120, 1118, 1123, 1097, 1096, 1094,\n        1092, 103, 1101, 1099, 1979, 1059, 1058, 1056, 1054, 77, 1051, 74, 1066, 1064, 1061, 1071, 1964, 1963, 1007,\n        1006, 1004, 1002, 999, 41, 996, 37, 1017, 1015, 1012, 1009, 52, 1025, 1022, 1936, 1935, 1933, 1938, 942, 940,\n        938, 935, 932, 5, 2, 955, 953, 950, 947, 18, 943, 15, 965, 962, 958, 1895, 1894, 1892, 1890, 973, 1899, 1897,\n        1379, 325, 1364, 1362, 288, 285, 1334, 1332, 1330, 241, 238, 234, 1287, 1285, 1283, 1280, 1294, 2112, 188, 185,\n        181, 178, 2028, 1219, 1217, 1215, 1212, 200, 1209, 1227, 2074, 2072, 583, 553, 551, 1583, 505, 503, 500, 513,\n        1557, 1555, 444, 442, 439, 436, 2213, 455, 451, 1507, 1505, 1502, 796, 763, 762, 760, 767, 711, 710, 708, 706,\n        2377, 718, 715, 1710, 2544, 917, 915, 2681, 1627, 1597, 1595, 2325, 1769, 1749, 1747, 1499, 1438, 1435, 2204,\n        1390, 1388, 1385, 1395, 2169, 2167, 1704, 1665, 1662, 1625, 1623, 1620, 1770, 1329, 1282, 1279, 2109, 1214, 1207,\n        1222, 2068, 2065, 1149, 1147, 1144, 1141, 146, 1157, 1154, 2013, 2011, 2008, 2015, 1579, 1549, 1546, 1495, 1487,\n        1433, 1431, 1428, 1425, 388, 1440, 2205, 1705, 658, 1667, 1664, 1119, 1095, 1093, 1978, 1057, 1055, 1052, 1062,\n        1962, 1960, 1005, 1003, 1000, 997, 38, 1013, 1010, 1932, 1930, 1927, 1934, 941, 939, 936, 933, 6, 930, 3, 951,\n        948, 944, 1889, 1887, 1884, 1881, 959, 1893, 1891, 35, 1377, 1360, 1358, 1327, 1325, 1322, 1331, 1277, 1275,\n        1272, 1269, 235, 1284, 2110, 1205, 1204, 1201, 1198, 182, 1195, 179, 1213, 2070, 2067, 1580, 501, 1551, 1548,\n        440, 437, 1497, 1494, 1490, 1503, 761, 709, 707, 1706, 913, 912, 2198, 1386, 2164, 2161, 1621, 1766, 2103, 1208,\n        2058, 2054, 1145, 1142, 2005, 2002, 1999, 2009, 1488, 1429, 1426, 2200, 1698, 1659, 1656, 1975, 1053, 1957, 1954,\n        1001, 998, 1924, 1921, 1918, 1928, 937, 934, 931, 1879, 1876, 1873, 1870, 945, 1885, 1882, 1323, 1273, 1270,\n        2105, 1202, 1199, 1196, 1211, 2061, 2057, 1576, 1543, 1540, 1484, 1481, 1478, 1491, 1700\n    ]);\n\n    /*\n    * Copyright 2007 ZXing authors\n    *\n    * Licensed under the Apache License, Version 2.0 (the \"License\");\n    * you may not use this file except in compliance with the License.\n    * You may obtain a copy of the License at\n    *\n    *      http://www.apache.org/licenses/LICENSE-2.0\n    *\n    * Unless required by applicable law or agreed to in writing, software\n    * distributed under the License is distributed on an \"AS IS\" BASIS,\n    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    * See the License for the specific language governing permissions and\n    * limitations under the License.\n    */\n    // import java.util.List;\n    /**\n     * @author Guenther Grau\n     */\n    /*public final*/ class PDF417DetectorResult {\n        constructor(bits, points) {\n            this.bits = bits;\n            this.points = points;\n        }\n        getBits() {\n            return this.bits;\n        }\n        getPoints() {\n            return this.points;\n        }\n    }\n\n    /*\n    * Copyright 2009 ZXing authors\n    *\n    * Licensed under the Apache License, Version 2.0 (the \"License\");\n    * you may not use this file except in compliance with the License.\n    * You may obtain a copy of the License at\n    *\n    *      http://www.apache.org/licenses/LICENSE-2.0\n    *\n    * Unless required by applicable law or agreed to in writing, software\n    * distributed under the License is distributed on an \"AS IS\" BASIS,\n    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    * See the License for the specific language governing permissions and\n    * limitations under the License.\n    */\n    // import java.util.ArrayList;\n    // import java.util.Arrays;\n    // import java.util.List;\n    // import java.util.Map;\n    /**\n     * <p>Encapsulates logic that can detect a PDF417 Code in an image, even if the\n     * PDF417 Code is rotated or skewed, or partially obscured.</p>\n     *\n     * @author SITA Lab (kevin.osullivan@sita.aero)\n     * @author dswitkin@google.com (Daniel Switkin)\n     * @author Guenther Grau\n     */\n    /*public*/ /*final*/ class Detector$3 {\n        /**\n         * <p>Detects a PDF417 Code in an image. Only checks 0 and 180 degree rotations.</p>\n         *\n         * @param image barcode image to decode\n         * @param hints optional hints to detector\n         * @param multiple if true, then the image is searched for multiple codes. If false, then at most one code will\n         * be found and returned\n         * @return {@link PDF417DetectorResult} encapsulating results of detecting a PDF417 code\n         * @throws NotFoundException if no PDF417 Code can be found\n         */\n        static detectMultiple(image, hints, multiple) {\n            // TODO detection improvement, tryHarder could try several different luminance thresholds/blackpoints or even\n            // different binarizers\n            // boolean tryHarder = hints != null && hints.containsKey(DecodeHintType.TRY_HARDER);\n            let bitMatrix = image.getBlackMatrix();\n            let barcodeCoordinates = Detector$3.detect(multiple, bitMatrix);\n            if (!barcodeCoordinates.length) {\n                bitMatrix = bitMatrix.clone();\n                bitMatrix.rotate180();\n                barcodeCoordinates = Detector$3.detect(multiple, bitMatrix);\n            }\n            return new PDF417DetectorResult(bitMatrix, barcodeCoordinates);\n        }\n        /**\n         * Detects PDF417 codes in an image. Only checks 0 degree rotation\n         * @param multiple if true, then the image is searched for multiple codes. If false, then at most one code will\n         * be found and returned\n         * @param bitMatrix bit matrix to detect barcodes in\n         * @return List of ResultPoint arrays containing the coordinates of found barcodes\n         */\n        static detect(multiple, bitMatrix) {\n            const barcodeCoordinates = new Array();\n            let row = 0;\n            let column = 0;\n            let foundBarcodeInRow = false;\n            while (row < bitMatrix.getHeight()) {\n                const vertices = Detector$3.findVertices(bitMatrix, row, column);\n                if (vertices[0] == null && vertices[3] == null) {\n                    if (!foundBarcodeInRow) {\n                        // we didn't find any barcode so that's the end of searching\n                        break;\n                    }\n                    // we didn't find a barcode starting at the given column and row. Try again from the first column and slightly\n                    // below the lowest barcode we found so far.\n                    foundBarcodeInRow = false;\n                    column = 0;\n                    for (const barcodeCoordinate of barcodeCoordinates) {\n                        if (barcodeCoordinate[1] != null) {\n                            row = Math.trunc(Math.max(row, barcodeCoordinate[1].getY()));\n                        }\n                        if (barcodeCoordinate[3] != null) {\n                            row = Math.max(row, Math.trunc(barcodeCoordinate[3].getY()));\n                        }\n                    }\n                    row += Detector$3.ROW_STEP;\n                    continue;\n                }\n                foundBarcodeInRow = true;\n                barcodeCoordinates.push(vertices);\n                if (!multiple) {\n                    break;\n                }\n                // if we didn't find a right row indicator column, then continue the search for the next barcode after the\n                // start pattern of the barcode just found.\n                if (vertices[2] != null) {\n                    column = Math.trunc(vertices[2].getX());\n                    row = Math.trunc(vertices[2].getY());\n                }\n                else {\n                    column = Math.trunc(vertices[4].getX());\n                    row = Math.trunc(vertices[4].getY());\n                }\n            }\n            return barcodeCoordinates;\n        }\n        /**\n         * Locate the vertices and the codewords area of a black blob using the Start\n         * and Stop patterns as locators.\n         *\n         * @param matrix the scanned barcode image.\n         * @return an array containing the vertices:\n         *           vertices[0] x, y top left barcode\n         *           vertices[1] x, y bottom left barcode\n         *           vertices[2] x, y top right barcode\n         *           vertices[3] x, y bottom right barcode\n         *           vertices[4] x, y top left codeword area\n         *           vertices[5] x, y bottom left codeword area\n         *           vertices[6] x, y top right codeword area\n         *           vertices[7] x, y bottom right codeword area\n         */\n        static findVertices(matrix, startRow, startColumn) {\n            const height = matrix.getHeight();\n            const width = matrix.getWidth();\n            // const result = new ResultPoint[8];\n            const result = new Array(8);\n            Detector$3.copyToResult(result, Detector$3.findRowsWithPattern(matrix, height, width, startRow, startColumn, Detector$3.START_PATTERN), Detector$3.INDEXES_START_PATTERN);\n            if (result[4] != null) {\n                startColumn = Math.trunc(result[4].getX());\n                startRow = Math.trunc(result[4].getY());\n            }\n            Detector$3.copyToResult(result, Detector$3.findRowsWithPattern(matrix, height, width, startRow, startColumn, Detector$3.STOP_PATTERN), Detector$3.INDEXES_STOP_PATTERN);\n            return result;\n        }\n        static copyToResult(result, tmpResult, destinationIndexes) {\n            for (let i = 0; i < destinationIndexes.length; i++) {\n                result[destinationIndexes[i]] = tmpResult[i];\n            }\n        }\n        static findRowsWithPattern(matrix, height, width, startRow, startColumn, pattern) {\n            // const result = new ResultPoint[4];\n            const result = new Array(4);\n            let found = false;\n            const counters = new Int32Array(pattern.length);\n            for (; startRow < height; startRow += Detector$3.ROW_STEP) {\n                let loc = Detector$3.findGuardPattern(matrix, startColumn, startRow, width, false, pattern, counters);\n                if (loc != null) {\n                    while (startRow > 0) {\n                        const previousRowLoc = Detector$3.findGuardPattern(matrix, startColumn, --startRow, width, false, pattern, counters);\n                        if (previousRowLoc != null) {\n                            loc = previousRowLoc;\n                        }\n                        else {\n                            startRow++;\n                            break;\n                        }\n                    }\n                    result[0] = new ResultPoint(loc[0], startRow);\n                    result[1] = new ResultPoint(loc[1], startRow);\n                    found = true;\n                    break;\n                }\n            }\n            let stopRow = startRow + 1;\n            // Last row of the current symbol that contains pattern\n            if (found) {\n                let skippedRowCount = 0;\n                let previousRowLoc = Int32Array.from([Math.trunc(result[0].getX()), Math.trunc(result[1].getX())]);\n                for (; stopRow < height; stopRow++) {\n                    const loc = Detector$3.findGuardPattern(matrix, previousRowLoc[0], stopRow, width, false, pattern, counters);\n                    // a found pattern is only considered to belong to the same barcode if the start and end positions\n                    // don't differ too much. Pattern drift should be not bigger than two for consecutive rows. With\n                    // a higher number of skipped rows drift could be larger. To keep it simple for now, we allow a slightly\n                    // larger drift and don't check for skipped rows.\n                    if (loc != null &&\n                        Math.abs(previousRowLoc[0] - loc[0]) < Detector$3.MAX_PATTERN_DRIFT &&\n                        Math.abs(previousRowLoc[1] - loc[1]) < Detector$3.MAX_PATTERN_DRIFT) {\n                        previousRowLoc = loc;\n                        skippedRowCount = 0;\n                    }\n                    else {\n                        if (skippedRowCount > Detector$3.SKIPPED_ROW_COUNT_MAX) {\n                            break;\n                        }\n                        else {\n                            skippedRowCount++;\n                        }\n                    }\n                }\n                stopRow -= skippedRowCount + 1;\n                result[2] = new ResultPoint(previousRowLoc[0], stopRow);\n                result[3] = new ResultPoint(previousRowLoc[1], stopRow);\n            }\n            if (stopRow - startRow < Detector$3.BARCODE_MIN_HEIGHT) {\n                Arrays.fill(result, null);\n            }\n            return result;\n        }\n        /**\n         * @param matrix row of black/white values to search\n         * @param column x position to start search\n         * @param row y position to start search\n         * @param width the number of pixels to search on this row\n         * @param pattern pattern of counts of number of black and white pixels that are\n         *                 being searched for as a pattern\n         * @param counters array of counters, as long as pattern, to re-use\n         * @return start/end horizontal offset of guard pattern, as an array of two ints.\n         */\n        static findGuardPattern(matrix, column, row, width, whiteFirst, pattern, counters) {\n            Arrays.fillWithin(counters, 0, counters.length, 0);\n            let patternStart = column;\n            let pixelDrift = 0;\n            // if there are black pixels left of the current pixel shift to the left, but only for MAX_PIXEL_DRIFT pixels\n            while (matrix.get(patternStart, row) && patternStart > 0 && pixelDrift++ < Detector$3.MAX_PIXEL_DRIFT) {\n                patternStart--;\n            }\n            let x = patternStart;\n            let counterPosition = 0;\n            let patternLength = pattern.length;\n            for (let isWhite = whiteFirst; x < width; x++) {\n                let pixel = matrix.get(x, row);\n                if (pixel !== isWhite) {\n                    counters[counterPosition]++;\n                }\n                else {\n                    if (counterPosition === patternLength - 1) {\n                        if (Detector$3.patternMatchVariance(counters, pattern, Detector$3.MAX_INDIVIDUAL_VARIANCE) < Detector$3.MAX_AVG_VARIANCE) {\n                            return new Int32Array([patternStart, x]);\n                        }\n                        patternStart += counters[0] + counters[1];\n                        System.arraycopy(counters, 2, counters, 0, counterPosition - 1);\n                        counters[counterPosition - 1] = 0;\n                        counters[counterPosition] = 0;\n                        counterPosition--;\n                    }\n                    else {\n                        counterPosition++;\n                    }\n                    counters[counterPosition] = 1;\n                    isWhite = !isWhite;\n                }\n            }\n            if (counterPosition === patternLength - 1 &&\n                Detector$3.patternMatchVariance(counters, pattern, Detector$3.MAX_INDIVIDUAL_VARIANCE) < Detector$3.MAX_AVG_VARIANCE) {\n                return new Int32Array([patternStart, x - 1]);\n            }\n            return null;\n        }\n        /**\n         * Determines how closely a set of observed counts of runs of black/white\n         * values matches a given target pattern. This is reported as the ratio of\n         * the total variance from the expected pattern proportions across all\n         * pattern elements, to the length of the pattern.\n         *\n         * @param counters observed counters\n         * @param pattern expected pattern\n         * @param maxIndividualVariance The most any counter can differ before we give up\n         * @return ratio of total variance between counters and pattern compared to total pattern size\n         */\n        static patternMatchVariance(counters, pattern, maxIndividualVariance) {\n            let numCounters = counters.length;\n            let total = 0;\n            let patternLength = 0;\n            for (let i = 0; i < numCounters; i++) {\n                total += counters[i];\n                patternLength += pattern[i];\n            }\n            if (total < patternLength) {\n                // If we don't even have one pixel per unit of bar width, assume this\n                // is too small to reliably match, so fail:\n                return /*Float.POSITIVE_INFINITY*/ Infinity;\n            }\n            // We're going to fake floating-point math in integers. We just need to use more bits.\n            // Scale up patternLength so that intermediate values below like scaledCounter will have\n            // more \"significant digits\".\n            let unitBarWidth = total / patternLength;\n            maxIndividualVariance *= unitBarWidth;\n            let totalVariance = 0.0;\n            for (let x = 0; x < numCounters; x++) {\n                let counter = counters[x];\n                let scaledPattern = pattern[x] * unitBarWidth;\n                let variance = counter > scaledPattern ? counter - scaledPattern : scaledPattern - counter;\n                if (variance > maxIndividualVariance) {\n                    return /*Float.POSITIVE_INFINITY*/ Infinity;\n                }\n                totalVariance += variance;\n            }\n            return totalVariance / total;\n        }\n    }\n    Detector$3.INDEXES_START_PATTERN = Int32Array.from([0, 4, 1, 5]);\n    Detector$3.INDEXES_STOP_PATTERN = Int32Array.from([6, 2, 7, 3]);\n    Detector$3.MAX_AVG_VARIANCE = 0.42;\n    Detector$3.MAX_INDIVIDUAL_VARIANCE = 0.8;\n    // B S B S B S B S Bar/Space pattern\n    // 11111111 0 1 0 1 0 1 000\n    Detector$3.START_PATTERN = Int32Array.from([8, 1, 1, 1, 1, 1, 1, 3]);\n    // 1111111 0 1 000 1 0 1 00 1\n    Detector$3.STOP_PATTERN = Int32Array.from([7, 1, 1, 3, 1, 1, 1, 2, 1]);\n    Detector$3.MAX_PIXEL_DRIFT = 3;\n    Detector$3.MAX_PATTERN_DRIFT = 5;\n    // if we set the value too low, then we don't detect the correct height of the bar if the start patterns are damaged.\n    // if we set the value too high, then we might detect the start pattern from a neighbor barcode.\n    Detector$3.SKIPPED_ROW_COUNT_MAX = 25;\n    // A PDF471 barcode should have at least 3 rows, with each row being >= 3 times the module width. Therefore it should be at least\n    // 9 pixels tall. To be conservative, we use about half the size to ensure we don't miss it.\n    Detector$3.ROW_STEP = 5;\n    Detector$3.BARCODE_MIN_HEIGHT = 10;\n\n    /*\n    * Copyright 2012 ZXing authors\n    *\n    * Licensed under the Apache License, Version 2.0 (the \"License\");\n    * you may not use this file except in compliance with the License.\n    * You may obtain a copy of the License at\n    *\n    *      http://www.apache.org/licenses/LICENSE-2.0\n    *\n    * Unless required by applicable law or agreed to in writing, software\n    * distributed under the License is distributed on an \"AS IS\" BASIS,\n    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    * See the License for the specific language governing permissions and\n    * limitations under the License.\n    */\n    /**\n     * @author Sean Owen\n     * @see com.google.zxing.common.reedsolomon.GenericGFPoly\n     */\n    /*final*/ class ModulusPoly {\n        constructor(field, coefficients) {\n            if (coefficients.length === 0) {\n                throw new IllegalArgumentException();\n            }\n            this.field = field;\n            let coefficientsLength = /*int*/ coefficients.length;\n            if (coefficientsLength > 1 && coefficients[0] === 0) {\n                // Leading term must be non-zero for anything except the constant polynomial \"0\"\n                let firstNonZero = /*int*/ 1;\n                while (firstNonZero < coefficientsLength && coefficients[firstNonZero] === 0) {\n                    firstNonZero++;\n                }\n                if (firstNonZero === coefficientsLength) {\n                    this.coefficients = new Int32Array([0]);\n                }\n                else {\n                    this.coefficients = new Int32Array(coefficientsLength - firstNonZero);\n                    System.arraycopy(coefficients, firstNonZero, this.coefficients, 0, this.coefficients.length);\n                }\n            }\n            else {\n                this.coefficients = coefficients;\n            }\n        }\n        getCoefficients() {\n            return this.coefficients;\n        }\n        /**\n         * @return degree of this polynomial\n         */\n        getDegree() {\n            return this.coefficients.length - 1;\n        }\n        /**\n         * @return true iff this polynomial is the monomial \"0\"\n         */\n        isZero() {\n            return this.coefficients[0] === 0;\n        }\n        /**\n         * @return coefficient of x^degree term in this polynomial\n         */\n        getCoefficient(degree) {\n            return this.coefficients[this.coefficients.length - 1 - degree];\n        }\n        /**\n         * @return evaluation of this polynomial at a given point\n         */\n        evaluateAt(a) {\n            if (a === 0) {\n                // Just return the x^0 coefficient\n                return this.getCoefficient(0);\n            }\n            if (a === 1) {\n                // Just the sum of the coefficients\n                let sum = /*int*/ 0;\n                for (let coefficient /*int*/ of this.coefficients) {\n                    sum = this.field.add(sum, coefficient);\n                }\n                return sum;\n            }\n            let result = /*int*/ this.coefficients[0];\n            let size = /*int*/ this.coefficients.length;\n            for (let i /*int*/ = 1; i < size; i++) {\n                result = this.field.add(this.field.multiply(a, result), this.coefficients[i]);\n            }\n            return result;\n        }\n        add(other) {\n            if (!this.field.equals(other.field)) {\n                throw new IllegalArgumentException('ModulusPolys do not have same ModulusGF field');\n            }\n            if (this.isZero()) {\n                return other;\n            }\n            if (other.isZero()) {\n                return this;\n            }\n            let smallerCoefficients = this.coefficients;\n            let largerCoefficients = other.coefficients;\n            if (smallerCoefficients.length > largerCoefficients.length) {\n                let temp = smallerCoefficients;\n                smallerCoefficients = largerCoefficients;\n                largerCoefficients = temp;\n            }\n            let sumDiff = new Int32Array(largerCoefficients.length);\n            let lengthDiff = /*int*/ largerCoefficients.length - smallerCoefficients.length;\n            // Copy high-order terms only found in higher-degree polynomial's coefficients\n            System.arraycopy(largerCoefficients, 0, sumDiff, 0, lengthDiff);\n            for (let i /*int*/ = lengthDiff; i < largerCoefficients.length; i++) {\n                sumDiff[i] = this.field.add(smallerCoefficients[i - lengthDiff], largerCoefficients[i]);\n            }\n            return new ModulusPoly(this.field, sumDiff);\n        }\n        subtract(other) {\n            if (!this.field.equals(other.field)) {\n                throw new IllegalArgumentException('ModulusPolys do not have same ModulusGF field');\n            }\n            if (other.isZero()) {\n                return this;\n            }\n            return this.add(other.negative());\n        }\n        multiply(other) {\n            if (other instanceof ModulusPoly) {\n                return this.multiplyOther(other);\n            }\n            return this.multiplyScalar(other);\n        }\n        multiplyOther(other) {\n            if (!this.field.equals(other.field)) {\n                throw new IllegalArgumentException('ModulusPolys do not have same ModulusGF field');\n            }\n            if (this.isZero() || other.isZero()) {\n                // return this.field.getZero();\n                return new ModulusPoly(this.field, new Int32Array([0]));\n            }\n            let aCoefficients = this.coefficients;\n            let aLength = /*int*/ aCoefficients.length;\n            let bCoefficients = other.coefficients;\n            let bLength = /*int*/ bCoefficients.length;\n            let product = new Int32Array(aLength + bLength - 1);\n            for (let i /*int*/ = 0; i < aLength; i++) {\n                let aCoeff = /*int*/ aCoefficients[i];\n                for (let j /*int*/ = 0; j < bLength; j++) {\n                    product[i + j] = this.field.add(product[i + j], this.field.multiply(aCoeff, bCoefficients[j]));\n                }\n            }\n            return new ModulusPoly(this.field, product);\n        }\n        negative() {\n            let size = /*int*/ this.coefficients.length;\n            let negativeCoefficients = new Int32Array(size);\n            for (let i /*int*/ = 0; i < size; i++) {\n                negativeCoefficients[i] = this.field.subtract(0, this.coefficients[i]);\n            }\n            return new ModulusPoly(this.field, negativeCoefficients);\n        }\n        multiplyScalar(scalar) {\n            if (scalar === 0) {\n                return new ModulusPoly(this.field, new Int32Array([0]));\n            }\n            if (scalar === 1) {\n                return this;\n            }\n            let size = /*int*/ this.coefficients.length;\n            let product = new Int32Array(size);\n            for (let i /*int*/ = 0; i < size; i++) {\n                product[i] = this.field.multiply(this.coefficients[i], scalar);\n            }\n            return new ModulusPoly(this.field, product);\n        }\n        multiplyByMonomial(degree, coefficient) {\n            if (degree < 0) {\n                throw new IllegalArgumentException();\n            }\n            if (coefficient === 0) {\n                return new ModulusPoly(this.field, new Int32Array([0]));\n            }\n            let size = /*int*/ this.coefficients.length;\n            let product = new Int32Array(size + degree);\n            for (let i /*int*/ = 0; i < size; i++) {\n                product[i] = this.field.multiply(this.coefficients[i], coefficient);\n            }\n            return new ModulusPoly(this.field, product);\n        }\n        /*\n        ModulusPoly[] divide(other: ModulusPoly) {\n          if (!field.equals(other.field)) {\n            throw new IllegalArgumentException(\"ModulusPolys do not have same ModulusGF field\");\n          }\n          if (other.isZero()) {\n            throw new IllegalArgumentException(\"Divide by 0\");\n          }\n      \n          let quotient: ModulusPoly = field.getZero();\n          let remainder: ModulusPoly = this;\n      \n          let denominatorLeadingTerm: /*int/ number = other.getCoefficient(other.getDegree());\n          let inverseDenominatorLeadingTerm: /*int/ number = field.inverse(denominatorLeadingTerm);\n      \n          while (remainder.getDegree() >= other.getDegree() && !remainder.isZero()) {\n            let degreeDifference: /*int/ number = remainder.getDegree() - other.getDegree();\n            let scale: /*int/ number = field.multiply(remainder.getCoefficient(remainder.getDegree()), inverseDenominatorLeadingTerm);\n            let term: ModulusPoly = other.multiplyByMonomial(degreeDifference, scale);\n            let iterationQuotient: ModulusPoly = field.buildMonomial(degreeDifference, scale);\n            quotient = quotient.add(iterationQuotient);\n            remainder = remainder.subtract(term);\n          }\n      \n          return new ModulusPoly[] { quotient, remainder };\n        }\n        */\n        // @Override\n        toString() {\n            let result = new StringBuilder( /*8 * this.getDegree()*/); // dynamic string size in JS\n            for (let degree /*int*/ = this.getDegree(); degree >= 0; degree--) {\n                let coefficient = /*int*/ this.getCoefficient(degree);\n                if (coefficient !== 0) {\n                    if (coefficient < 0) {\n                        result.append(' - ');\n                        coefficient = -coefficient;\n                    }\n                    else {\n                        if (result.length() > 0) {\n                            result.append(' + ');\n                        }\n                    }\n                    if (degree === 0 || coefficient !== 1) {\n                        result.append(coefficient);\n                    }\n                    if (degree !== 0) {\n                        if (degree === 1) {\n                            result.append('x');\n                        }\n                        else {\n                            result.append('x^');\n                            result.append(degree);\n                        }\n                    }\n                }\n            }\n            return result.toString();\n        }\n    }\n\n    class ModulusBase {\n        add(a, b) {\n            return (a + b) % this.modulus;\n        }\n        subtract(a, b) {\n            return (this.modulus + a - b) % this.modulus;\n        }\n        exp(a) {\n            return this.expTable[a];\n        }\n        log(a) {\n            if (a === 0) {\n                throw new IllegalArgumentException();\n            }\n            return this.logTable[a];\n        }\n        inverse(a) {\n            if (a === 0) {\n                throw new ArithmeticException();\n            }\n            return this.expTable[this.modulus - this.logTable[a] - 1];\n        }\n        multiply(a, b) {\n            if (a === 0 || b === 0) {\n                return 0;\n            }\n            return this.expTable[(this.logTable[a] + this.logTable[b]) % (this.modulus - 1)];\n        }\n        getSize() {\n            return this.modulus;\n        }\n        equals(o) {\n            return o === this;\n        }\n    }\n\n    /*\n     * Copyright 2012 ZXing authors\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n    /**\n     * <p>A field based on powers of a generator integer, modulo some modulus.</p>\n     *\n     * @author Sean Owen\n     * @see com.google.zxing.common.reedsolomon.GenericGF\n     */\n    /*public final*/ class ModulusGF extends ModulusBase {\n        // private /*final*/ modulus: /*int*/ number;\n        constructor(modulus, generator) {\n            super();\n            this.modulus = modulus;\n            this.expTable = new Int32Array(modulus);\n            this.logTable = new Int32Array(modulus);\n            let x = /*int*/ 1;\n            for (let i /*int*/ = 0; i < modulus; i++) {\n                this.expTable[i] = x;\n                x = (x * generator) % modulus;\n            }\n            for (let i /*int*/ = 0; i < modulus - 1; i++) {\n                this.logTable[this.expTable[i]] = i;\n            }\n            // logTable[0] == 0 but this should never be used\n            this.zero = new ModulusPoly(this, new Int32Array([0]));\n            this.one = new ModulusPoly(this, new Int32Array([1]));\n        }\n        getZero() {\n            return this.zero;\n        }\n        getOne() {\n            return this.one;\n        }\n        buildMonomial(degree, coefficient) {\n            if (degree < 0) {\n                throw new IllegalArgumentException();\n            }\n            if (coefficient === 0) {\n                return this.zero;\n            }\n            let coefficients = new Int32Array(degree + 1);\n            coefficients[0] = coefficient;\n            return new ModulusPoly(this, coefficients);\n        }\n    }\n    ModulusGF.PDF417_GF = new ModulusGF(PDF417Common.NUMBER_OF_CODEWORDS, 3);\n\n    /*\n    * Copyright 2012 ZXing authors\n    *\n    * Licensed under the Apache License, Version 2.0 (the \"License\");\n    * you may not use this file except in compliance with the License.\n    * You may obtain a copy of the License at\n    *\n    *      http://www.apache.org/licenses/LICENSE-2.0\n    *\n    * Unless required by applicable law or agreed to in writing, software\n    * distributed under the License is distributed on an \"AS IS\" BASIS,\n    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    * See the License for the specific language governing permissions and\n    * limitations under the License.\n    */\n    /**\n     * <p>PDF417 error correction implementation.</p>\n     *\n     * <p>This <a href=\"http://en.wikipedia.org/wiki/Reed%E2%80%93Solomon_error_correction#Example\">example</a>\n     * is quite useful in understanding the algorithm.</p>\n     *\n     * @author Sean Owen\n     * @see com.google.zxing.common.reedsolomon.ReedSolomonDecoder\n     */\n    /*public final*/ class ErrorCorrection {\n        constructor() {\n            this.field = ModulusGF.PDF417_GF;\n        }\n        /**\n         * @param received received codewords\n         * @param numECCodewords number of those codewords used for EC\n         * @param erasures location of erasures\n         * @return number of errors\n         * @throws ChecksumException if errors cannot be corrected, maybe because of too many errors\n         */\n        decode(received, numECCodewords, erasures) {\n            let poly = new ModulusPoly(this.field, received);\n            let S = new Int32Array(numECCodewords);\n            let error = false;\n            for (let i /*int*/ = numECCodewords; i > 0; i--) {\n                let evaluation = poly.evaluateAt(this.field.exp(i));\n                S[numECCodewords - i] = evaluation;\n                if (evaluation !== 0) {\n                    error = true;\n                }\n            }\n            if (!error) {\n                return 0;\n            }\n            let knownErrors = this.field.getOne();\n            if (erasures != null) {\n                for (const erasure of erasures) {\n                    let b = this.field.exp(received.length - 1 - erasure);\n                    // Add (1 - bx) term:\n                    let term = new ModulusPoly(this.field, new Int32Array([this.field.subtract(0, b), 1]));\n                    knownErrors = knownErrors.multiply(term);\n                }\n            }\n            let syndrome = new ModulusPoly(this.field, S);\n            // syndrome = syndrome.multiply(knownErrors);\n            let sigmaOmega = this.runEuclideanAlgorithm(this.field.buildMonomial(numECCodewords, 1), syndrome, numECCodewords);\n            let sigma = sigmaOmega[0];\n            let omega = sigmaOmega[1];\n            // sigma = sigma.multiply(knownErrors);\n            let errorLocations = this.findErrorLocations(sigma);\n            let errorMagnitudes = this.findErrorMagnitudes(omega, sigma, errorLocations);\n            for (let i /*int*/ = 0; i < errorLocations.length; i++) {\n                let position = received.length - 1 - this.field.log(errorLocations[i]);\n                if (position < 0) {\n                    throw ChecksumException.getChecksumInstance();\n                }\n                received[position] = this.field.subtract(received[position], errorMagnitudes[i]);\n            }\n            return errorLocations.length;\n        }\n        /**\n         *\n         * @param ModulusPoly\n         * @param a\n         * @param ModulusPoly\n         * @param b\n         * @param int\n         * @param R\n         * @throws ChecksumException\n         */\n        runEuclideanAlgorithm(a, b, R) {\n            // Assume a's degree is >= b's\n            if (a.getDegree() < b.getDegree()) {\n                let temp = a;\n                a = b;\n                b = temp;\n            }\n            let rLast = a;\n            let r = b;\n            let tLast = this.field.getZero();\n            let t = this.field.getOne();\n            // Run Euclidean algorithm until r's degree is less than R/2\n            while (r.getDegree() >= Math.round(R / 2)) {\n                let rLastLast = rLast;\n                let tLastLast = tLast;\n                rLast = r;\n                tLast = t;\n                // Divide rLastLast by rLast, with quotient in q and remainder in r\n                if (rLast.isZero()) {\n                    // Oops, Euclidean algorithm already terminated?\n                    throw ChecksumException.getChecksumInstance();\n                }\n                r = rLastLast;\n                let q = this.field.getZero();\n                let denominatorLeadingTerm = rLast.getCoefficient(rLast.getDegree());\n                let dltInverse = this.field.inverse(denominatorLeadingTerm);\n                while (r.getDegree() >= rLast.getDegree() && !r.isZero()) {\n                    let degreeDiff = r.getDegree() - rLast.getDegree();\n                    let scale = this.field.multiply(r.getCoefficient(r.getDegree()), dltInverse);\n                    q = q.add(this.field.buildMonomial(degreeDiff, scale));\n                    r = r.subtract(rLast.multiplyByMonomial(degreeDiff, scale));\n                }\n                t = q.multiply(tLast).subtract(tLastLast).negative();\n            }\n            let sigmaTildeAtZero = t.getCoefficient(0);\n            if (sigmaTildeAtZero === 0) {\n                throw ChecksumException.getChecksumInstance();\n            }\n            let inverse = this.field.inverse(sigmaTildeAtZero);\n            let sigma = t.multiply(inverse);\n            let omega = r.multiply(inverse);\n            return [sigma, omega];\n        }\n        /**\n         *\n         * @param errorLocator\n         * @throws ChecksumException\n         */\n        findErrorLocations(errorLocator) {\n            // This is a direct application of Chien's search\n            let numErrors = errorLocator.getDegree();\n            let result = new Int32Array(numErrors);\n            let e = 0;\n            for (let i /*int*/ = 1; i < this.field.getSize() && e < numErrors; i++) {\n                if (errorLocator.evaluateAt(i) === 0) {\n                    result[e] = this.field.inverse(i);\n                    e++;\n                }\n            }\n            if (e !== numErrors) {\n                throw ChecksumException.getChecksumInstance();\n            }\n            return result;\n        }\n        findErrorMagnitudes(errorEvaluator, errorLocator, errorLocations) {\n            let errorLocatorDegree = errorLocator.getDegree();\n            let formalDerivativeCoefficients = new Int32Array(errorLocatorDegree);\n            for (let i /*int*/ = 1; i <= errorLocatorDegree; i++) {\n                formalDerivativeCoefficients[errorLocatorDegree - i] =\n                    this.field.multiply(i, errorLocator.getCoefficient(i));\n            }\n            let formalDerivative = new ModulusPoly(this.field, formalDerivativeCoefficients);\n            // This is directly applying Forney's Formula\n            let s = errorLocations.length;\n            let result = new Int32Array(s);\n            for (let i /*int*/ = 0; i < s; i++) {\n                let xiInverse = this.field.inverse(errorLocations[i]);\n                let numerator = this.field.subtract(0, errorEvaluator.evaluateAt(xiInverse));\n                let denominator = this.field.inverse(formalDerivative.evaluateAt(xiInverse));\n                result[i] = this.field.multiply(numerator, denominator);\n            }\n            return result;\n        }\n    }\n\n    /*\n    * Copyright 2013 ZXing authors\n    *\n    * Licensed under the Apache License, Version 2.0 (the \"License\");\n    * you may not use this file except in compliance with the License.\n    * You may obtain a copy of the License at\n    *\n    *      http://www.apache.org/licenses/LICENSE-2.0\n    *\n    * Unless required by applicable law or agreed to in writing, software\n    * distributed under the License is distributed on an \"AS IS\" BASIS,\n    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    * See the License for the specific language governing permissions and\n    * limitations under the License.\n    */\n    /**\n     * @author Guenther Grau\n     */\n    /*final*/ class BoundingBox {\n        constructor(image, topLeft, bottomLeft, topRight, bottomRight) {\n            if (image instanceof BoundingBox) {\n                this.constructor_2(image);\n            }\n            else {\n                this.constructor_1(image, topLeft, bottomLeft, topRight, bottomRight);\n            }\n        }\n        /**\n         *\n         * @param image\n         * @param topLeft\n         * @param bottomLeft\n         * @param topRight\n         * @param bottomRight\n         *\n         * @throws NotFoundException\n         */\n        constructor_1(image, topLeft, bottomLeft, topRight, bottomRight) {\n            const leftUnspecified = topLeft == null || bottomLeft == null;\n            const rightUnspecified = topRight == null || bottomRight == null;\n            if (leftUnspecified && rightUnspecified) {\n                throw new NotFoundException();\n            }\n            if (leftUnspecified) {\n                topLeft = new ResultPoint(0, topRight.getY());\n                bottomLeft = new ResultPoint(0, bottomRight.getY());\n            }\n            else if (rightUnspecified) {\n                topRight = new ResultPoint(image.getWidth() - 1, topLeft.getY());\n                bottomRight = new ResultPoint(image.getWidth() - 1, bottomLeft.getY());\n            }\n            this.image = image;\n            this.topLeft = topLeft;\n            this.bottomLeft = bottomLeft;\n            this.topRight = topRight;\n            this.bottomRight = bottomRight;\n            this.minX = Math.trunc(Math.min(topLeft.getX(), bottomLeft.getX()));\n            this.maxX = Math.trunc(Math.max(topRight.getX(), bottomRight.getX()));\n            this.minY = Math.trunc(Math.min(topLeft.getY(), topRight.getY()));\n            this.maxY = Math.trunc(Math.max(bottomLeft.getY(), bottomRight.getY()));\n        }\n        constructor_2(boundingBox) {\n            this.image = boundingBox.image;\n            this.topLeft = boundingBox.getTopLeft();\n            this.bottomLeft = boundingBox.getBottomLeft();\n            this.topRight = boundingBox.getTopRight();\n            this.bottomRight = boundingBox.getBottomRight();\n            this.minX = boundingBox.getMinX();\n            this.maxX = boundingBox.getMaxX();\n            this.minY = boundingBox.getMinY();\n            this.maxY = boundingBox.getMaxY();\n        }\n        /**\n         * @throws NotFoundException\n         */\n        static merge(leftBox, rightBox) {\n            if (leftBox == null) {\n                return rightBox;\n            }\n            if (rightBox == null) {\n                return leftBox;\n            }\n            return new BoundingBox(leftBox.image, leftBox.topLeft, leftBox.bottomLeft, rightBox.topRight, rightBox.bottomRight);\n        }\n        /**\n         * @throws NotFoundException\n         */\n        addMissingRows(missingStartRows, missingEndRows, isLeft) {\n            let newTopLeft = this.topLeft;\n            let newBottomLeft = this.bottomLeft;\n            let newTopRight = this.topRight;\n            let newBottomRight = this.bottomRight;\n            if (missingStartRows > 0) {\n                let top = isLeft ? this.topLeft : this.topRight;\n                let newMinY = Math.trunc(top.getY() - missingStartRows);\n                if (newMinY < 0) {\n                    newMinY = 0;\n                }\n                let newTop = new ResultPoint(top.getX(), newMinY);\n                if (isLeft) {\n                    newTopLeft = newTop;\n                }\n                else {\n                    newTopRight = newTop;\n                }\n            }\n            if (missingEndRows > 0) {\n                let bottom = isLeft ? this.bottomLeft : this.bottomRight;\n                let newMaxY = Math.trunc(bottom.getY() + missingEndRows);\n                if (newMaxY >= this.image.getHeight()) {\n                    newMaxY = this.image.getHeight() - 1;\n                }\n                let newBottom = new ResultPoint(bottom.getX(), newMaxY);\n                if (isLeft) {\n                    newBottomLeft = newBottom;\n                }\n                else {\n                    newBottomRight = newBottom;\n                }\n            }\n            return new BoundingBox(this.image, newTopLeft, newBottomLeft, newTopRight, newBottomRight);\n        }\n        getMinX() {\n            return this.minX;\n        }\n        getMaxX() {\n            return this.maxX;\n        }\n        getMinY() {\n            return this.minY;\n        }\n        getMaxY() {\n            return this.maxY;\n        }\n        getTopLeft() {\n            return this.topLeft;\n        }\n        getTopRight() {\n            return this.topRight;\n        }\n        getBottomLeft() {\n            return this.bottomLeft;\n        }\n        getBottomRight() {\n            return this.bottomRight;\n        }\n    }\n\n    /*\n     * Copyright 2013 ZXing authors\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n    // package com.google.zxing.pdf417.decoder;\n    /**\n     * @author Guenther Grau\n     */\n    /*final*/ class BarcodeMetadata {\n        constructor(columnCount, rowCountUpperPart, rowCountLowerPart, errorCorrectionLevel) {\n            this.columnCount = columnCount;\n            this.errorCorrectionLevel = errorCorrectionLevel;\n            this.rowCountUpperPart = rowCountUpperPart;\n            this.rowCountLowerPart = rowCountLowerPart;\n            this.rowCount = rowCountUpperPart + rowCountLowerPart;\n        }\n        getColumnCount() {\n            return this.columnCount;\n        }\n        getErrorCorrectionLevel() {\n            return this.errorCorrectionLevel;\n        }\n        getRowCount() {\n            return this.rowCount;\n        }\n        getRowCountUpperPart() {\n            return this.rowCountUpperPart;\n        }\n        getRowCountLowerPart() {\n            return this.rowCountLowerPart;\n        }\n    }\n\n    /**\n     * Java Formatter class polyfill that works in the JS way.\n     */\n    class Formatter {\n        constructor() {\n            this.buffer = '';\n        }\n        /**\n         *\n         * @see https://stackoverflow.com/a/13439711/4367683\n         *\n         * @param str\n         * @param arr\n         */\n        static form(str, arr) {\n            let i = -1;\n            function callback(exp, p0, p1, p2, p3, p4) {\n                if (exp === '%%')\n                    return '%';\n                if (arr[++i] === undefined)\n                    return undefined;\n                exp = p2 ? parseInt(p2.substr(1)) : undefined;\n                let base = p3 ? parseInt(p3.substr(1)) : undefined;\n                let val;\n                switch (p4) {\n                    case 's':\n                        val = arr[i];\n                        break;\n                    case 'c':\n                        val = arr[i][0];\n                        break;\n                    case 'f':\n                        val = parseFloat(arr[i]).toFixed(exp);\n                        break;\n                    case 'p':\n                        val = parseFloat(arr[i]).toPrecision(exp);\n                        break;\n                    case 'e':\n                        val = parseFloat(arr[i]).toExponential(exp);\n                        break;\n                    case 'x':\n                        val = parseInt(arr[i]).toString(base ? base : 16);\n                        break;\n                    case 'd':\n                        val = parseFloat(parseInt(arr[i], base ? base : 10).toPrecision(exp)).toFixed(0);\n                        break;\n                }\n                val = typeof val === 'object' ? JSON.stringify(val) : (+val).toString(base);\n                let size = parseInt(p1); /* padding size */\n                let ch = p1 && (p1[0] + '') === '0' ? '0' : ' '; /* isnull? */\n                while (val.length < size)\n                    val = p0 !== undefined ? val + ch : ch + val; /* isminus? */\n                return val;\n            }\n            let regex = /%(-)?(0?[0-9]+)?([.][0-9]+)?([#][0-9]+)?([scfpexd%])/g;\n            return str.replace(regex, callback);\n        }\n        /**\n         *\n         * @param append The new string to append.\n         * @param args Argumets values to be formated.\n         */\n        format(append, ...args) {\n            this.buffer += Formatter.form(append, args);\n        }\n        /**\n         * Returns the Formatter string value.\n         */\n        toString() {\n            return this.buffer;\n        }\n    }\n\n    /*\n     * Copyright 2013 ZXing authors\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n    /**\n     * @author Guenther Grau\n     */\n    class DetectionResultColumn {\n        constructor(boundingBox) {\n            this.boundingBox = new BoundingBox(boundingBox);\n            // this.codewords = new Codeword[boundingBox.getMaxY() - boundingBox.getMinY() + 1];\n            this.codewords = new Array(boundingBox.getMaxY() - boundingBox.getMinY() + 1);\n        }\n        /*final*/ getCodewordNearby(imageRow) {\n            let codeword = this.getCodeword(imageRow);\n            if (codeword != null) {\n                return codeword;\n            }\n            for (let i = 1; i < DetectionResultColumn.MAX_NEARBY_DISTANCE; i++) {\n                let nearImageRow = this.imageRowToCodewordIndex(imageRow) - i;\n                if (nearImageRow >= 0) {\n                    codeword = this.codewords[nearImageRow];\n                    if (codeword != null) {\n                        return codeword;\n                    }\n                }\n                nearImageRow = this.imageRowToCodewordIndex(imageRow) + i;\n                if (nearImageRow < this.codewords.length) {\n                    codeword = this.codewords[nearImageRow];\n                    if (codeword != null) {\n                        return codeword;\n                    }\n                }\n            }\n            return null;\n        }\n        /*final int*/ imageRowToCodewordIndex(imageRow) {\n            return imageRow - this.boundingBox.getMinY();\n        }\n        /*final void*/ setCodeword(imageRow, codeword) {\n            this.codewords[this.imageRowToCodewordIndex(imageRow)] = codeword;\n        }\n        /*final*/ getCodeword(imageRow) {\n            return this.codewords[this.imageRowToCodewordIndex(imageRow)];\n        }\n        /*final*/ getBoundingBox() {\n            return this.boundingBox;\n        }\n        /*final*/ getCodewords() {\n            return this.codewords;\n        }\n        // @Override\n        toString() {\n            const formatter = new Formatter();\n            let row = 0;\n            for (const codeword of this.codewords) {\n                if (codeword == null) {\n                    formatter.format('%3d:    |   %n', row++);\n                    continue;\n                }\n                formatter.format('%3d: %3d|%3d%n', row++, codeword.getRowNumber(), codeword.getValue());\n            }\n            return formatter.toString();\n        }\n    }\n    DetectionResultColumn.MAX_NEARBY_DISTANCE = 5;\n\n    /*\n     * Copyright 2013 ZXing authors\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n    // import java.util.ArrayList;\n    // import java.util.Collection;\n    // import java.util.HashMap;\n    // import java.util.Map;\n    // import java.util.Map.Entry;\n    /**\n     * @author Guenther Grau\n     */\n    /*final*/ class BarcodeValue {\n        constructor() {\n            this.values = new Map();\n        }\n        /**\n         * Add an occurrence of a value\n         */\n        setValue(value) {\n            value = Math.trunc(value);\n            let confidence = this.values.get(value);\n            if (confidence == null) {\n                confidence = 0;\n            }\n            confidence++;\n            this.values.set(value, confidence);\n        }\n        /**\n         * Determines the maximum occurrence of a set value and returns all values which were set with this occurrence.\n         * @return an array of int, containing the values with the highest occurrence, or null, if no value was set\n         */\n        getValue() {\n            let maxConfidence = -1;\n            let result = new Array();\n            for (const [key, value] of this.values.entries()) {\n                const entry = {\n                    getKey: () => key,\n                    getValue: () => value,\n                };\n                if (entry.getValue() > maxConfidence) {\n                    maxConfidence = entry.getValue();\n                    result = [];\n                    result.push(entry.getKey());\n                }\n                else if (entry.getValue() === maxConfidence) {\n                    result.push(entry.getKey());\n                }\n            }\n            return PDF417Common.toIntArray(result);\n        }\n        getConfidence(value) {\n            return this.values.get(value);\n        }\n    }\n\n    /*\n     * Copyright 2013 ZXing authors\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n    /**\n     * @author Guenther Grau\n     */\n    /*final*/ class DetectionResultRowIndicatorColumn extends DetectionResultColumn {\n        constructor(boundingBox, isLeft) {\n            super(boundingBox);\n            this._isLeft = isLeft;\n        }\n        setRowNumbers() {\n            for (let codeword /*Codeword*/ of this.getCodewords()) {\n                if (codeword != null) {\n                    codeword.setRowNumberAsRowIndicatorColumn();\n                }\n            }\n        }\n        // TODO implement properly\n        // TODO maybe we should add missing codewords to store the correct row number to make\n        // finding row numbers for other columns easier\n        // use row height count to make detection of invalid row numbers more reliable\n        adjustCompleteIndicatorColumnRowNumbers(barcodeMetadata) {\n            let codewords = this.getCodewords();\n            this.setRowNumbers();\n            this.removeIncorrectCodewords(codewords, barcodeMetadata);\n            let boundingBox = this.getBoundingBox();\n            let top = this._isLeft ? boundingBox.getTopLeft() : boundingBox.getTopRight();\n            let bottom = this._isLeft ? boundingBox.getBottomLeft() : boundingBox.getBottomRight();\n            let firstRow = this.imageRowToCodewordIndex(Math.trunc(top.getY()));\n            let lastRow = this.imageRowToCodewordIndex(Math.trunc(bottom.getY()));\n            // We need to be careful using the average row height. Barcode could be skewed so that we have smaller and\n            // taller rows\n            // float averageRowHeight = (lastRow - firstRow) / /*(float)*/ barcodeMetadata.getRowCount();\n            let barcodeRow = -1;\n            let maxRowHeight = 1;\n            let currentRowHeight = 0;\n            for (let codewordsRow /*int*/ = firstRow; codewordsRow < lastRow; codewordsRow++) {\n                if (codewords[codewordsRow] == null) {\n                    continue;\n                }\n                let codeword = codewords[codewordsRow];\n                //      float expectedRowNumber = (codewordsRow - firstRow) / averageRowHeight;\n                //      if (Math.abs(codeword.getRowNumber() - expectedRowNumber) > 2) {\n                //        SimpleLog.log(LEVEL.WARNING,\n                //            \"Removing codeword, rowNumberSkew too high, codeword[\" + codewordsRow + \"]: Expected Row: \" +\n                //                expectedRowNumber + \", RealRow: \" + codeword.getRowNumber() + \", value: \" + codeword.getValue());\n                //        codewords[codewordsRow] = null;\n                //      }\n                let rowDifference = codeword.getRowNumber() - barcodeRow;\n                // TODO improve handling with case where first row indicator doesn't start with 0\n                if (rowDifference === 0) {\n                    currentRowHeight++;\n                }\n                else if (rowDifference === 1) {\n                    maxRowHeight = Math.max(maxRowHeight, currentRowHeight);\n                    currentRowHeight = 1;\n                    barcodeRow = codeword.getRowNumber();\n                }\n                else if (rowDifference < 0 ||\n                    codeword.getRowNumber() >= barcodeMetadata.getRowCount() ||\n                    rowDifference > codewordsRow) {\n                    codewords[codewordsRow] = null;\n                }\n                else {\n                    let checkedRows;\n                    if (maxRowHeight > 2) {\n                        checkedRows = (maxRowHeight - 2) * rowDifference;\n                    }\n                    else {\n                        checkedRows = rowDifference;\n                    }\n                    let closePreviousCodewordFound = checkedRows >= codewordsRow;\n                    for (let i /*int*/ = 1; i <= checkedRows && !closePreviousCodewordFound; i++) {\n                        // there must be (height * rowDifference) number of codewords missing. For now we assume height = 1.\n                        // This should hopefully get rid of most problems already.\n                        closePreviousCodewordFound = codewords[codewordsRow - i] != null;\n                    }\n                    if (closePreviousCodewordFound) {\n                        codewords[codewordsRow] = null;\n                    }\n                    else {\n                        barcodeRow = codeword.getRowNumber();\n                        currentRowHeight = 1;\n                    }\n                }\n            }\n            // return (int) (averageRowHeight + 0.5);\n        }\n        getRowHeights() {\n            let barcodeMetadata = this.getBarcodeMetadata();\n            if (barcodeMetadata == null) {\n                return null;\n            }\n            this.adjustIncompleteIndicatorColumnRowNumbers(barcodeMetadata);\n            let result = new Int32Array(barcodeMetadata.getRowCount());\n            for (let codeword /*Codeword*/ of this.getCodewords()) {\n                if (codeword != null) {\n                    let rowNumber = codeword.getRowNumber();\n                    if (rowNumber >= result.length) {\n                        // We have more rows than the barcode metadata allows for, ignore them.\n                        continue;\n                    }\n                    result[rowNumber]++;\n                } // else throw exception?\n            }\n            return result;\n        }\n        // TODO maybe we should add missing codewords to store the correct row number to make\n        // finding row numbers for other columns easier\n        // use row height count to make detection of invalid row numbers more reliable\n        adjustIncompleteIndicatorColumnRowNumbers(barcodeMetadata) {\n            let boundingBox = this.getBoundingBox();\n            let top = this._isLeft ? boundingBox.getTopLeft() : boundingBox.getTopRight();\n            let bottom = this._isLeft ? boundingBox.getBottomLeft() : boundingBox.getBottomRight();\n            let firstRow = this.imageRowToCodewordIndex(Math.trunc(top.getY()));\n            let lastRow = this.imageRowToCodewordIndex(Math.trunc(bottom.getY()));\n            // float averageRowHeight = (lastRow - firstRow) / /*(float)*/ barcodeMetadata.getRowCount();\n            let codewords = this.getCodewords();\n            let barcodeRow = -1;\n            for (let codewordsRow /*int*/ = firstRow; codewordsRow < lastRow; codewordsRow++) {\n                if (codewords[codewordsRow] == null) {\n                    continue;\n                }\n                let codeword = codewords[codewordsRow];\n                codeword.setRowNumberAsRowIndicatorColumn();\n                let rowDifference = codeword.getRowNumber() - barcodeRow;\n                // TODO improve handling with case where first row indicator doesn't start with 0\n                if (rowDifference === 0) ;\n                else if (rowDifference === 1) {\n                    barcodeRow = codeword.getRowNumber();\n                }\n                else if (codeword.getRowNumber() >= barcodeMetadata.getRowCount()) {\n                    codewords[codewordsRow] = null;\n                }\n                else {\n                    barcodeRow = codeword.getRowNumber();\n                }\n            }\n            // return (int) (averageRowHeight + 0.5);\n        }\n        getBarcodeMetadata() {\n            let codewords = this.getCodewords();\n            let barcodeColumnCount = new BarcodeValue();\n            let barcodeRowCountUpperPart = new BarcodeValue();\n            let barcodeRowCountLowerPart = new BarcodeValue();\n            let barcodeECLevel = new BarcodeValue();\n            for (let codeword /*Codeword*/ of codewords) {\n                if (codeword == null) {\n                    continue;\n                }\n                codeword.setRowNumberAsRowIndicatorColumn();\n                let rowIndicatorValue = codeword.getValue() % 30;\n                let codewordRowNumber = codeword.getRowNumber();\n                if (!this._isLeft) {\n                    codewordRowNumber += 2;\n                }\n                switch (codewordRowNumber % 3) {\n                    case 0:\n                        barcodeRowCountUpperPart.setValue(rowIndicatorValue * 3 + 1);\n                        break;\n                    case 1:\n                        barcodeECLevel.setValue(rowIndicatorValue / 3);\n                        barcodeRowCountLowerPart.setValue(rowIndicatorValue % 3);\n                        break;\n                    case 2:\n                        barcodeColumnCount.setValue(rowIndicatorValue + 1);\n                        break;\n                }\n            }\n            // Maybe we should check if we have ambiguous values?\n            if ((barcodeColumnCount.getValue().length === 0) ||\n                (barcodeRowCountUpperPart.getValue().length === 0) ||\n                (barcodeRowCountLowerPart.getValue().length === 0) ||\n                (barcodeECLevel.getValue().length === 0) ||\n                barcodeColumnCount.getValue()[0] < 1 ||\n                barcodeRowCountUpperPart.getValue()[0] + barcodeRowCountLowerPart.getValue()[0] < PDF417Common.MIN_ROWS_IN_BARCODE ||\n                barcodeRowCountUpperPart.getValue()[0] + barcodeRowCountLowerPart.getValue()[0] > PDF417Common.MAX_ROWS_IN_BARCODE) {\n                return null;\n            }\n            let barcodeMetadata = new BarcodeMetadata(barcodeColumnCount.getValue()[0], barcodeRowCountUpperPart.getValue()[0], barcodeRowCountLowerPart.getValue()[0], barcodeECLevel.getValue()[0]);\n            this.removeIncorrectCodewords(codewords, barcodeMetadata);\n            return barcodeMetadata;\n        }\n        removeIncorrectCodewords(codewords, barcodeMetadata) {\n            // Remove codewords which do not match the metadata\n            // TODO Maybe we should keep the incorrect codewords for the start and end positions?\n            for (let codewordRow /*int*/ = 0; codewordRow < codewords.length; codewordRow++) {\n                let codeword = codewords[codewordRow];\n                if (codewords[codewordRow] == null) {\n                    continue;\n                }\n                let rowIndicatorValue = codeword.getValue() % 30;\n                let codewordRowNumber = codeword.getRowNumber();\n                if (codewordRowNumber > barcodeMetadata.getRowCount()) {\n                    codewords[codewordRow] = null;\n                    continue;\n                }\n                if (!this._isLeft) {\n                    codewordRowNumber += 2;\n                }\n                switch (codewordRowNumber % 3) {\n                    case 0:\n                        if (rowIndicatorValue * 3 + 1 !== barcodeMetadata.getRowCountUpperPart()) {\n                            codewords[codewordRow] = null;\n                        }\n                        break;\n                    case 1:\n                        if (Math.trunc(rowIndicatorValue / 3) !== barcodeMetadata.getErrorCorrectionLevel() ||\n                            rowIndicatorValue % 3 !== barcodeMetadata.getRowCountLowerPart()) {\n                            codewords[codewordRow] = null;\n                        }\n                        break;\n                    case 2:\n                        if (rowIndicatorValue + 1 !== barcodeMetadata.getColumnCount()) {\n                            codewords[codewordRow] = null;\n                        }\n                        break;\n                }\n            }\n        }\n        isLeft() {\n            return this._isLeft;\n        }\n        // @Override\n        toString() {\n            return 'IsLeft: ' + this._isLeft + '\\n' + super.toString();\n        }\n    }\n\n    /*\n     * Copyright 2013 ZXing authors\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n    /**\n     * @author Guenther Grau\n     */\n    /*final*/ class DetectionResult {\n        constructor(barcodeMetadata, boundingBox) {\n            /*final*/ this.ADJUST_ROW_NUMBER_SKIP = 2;\n            this.barcodeMetadata = barcodeMetadata;\n            this.barcodeColumnCount = barcodeMetadata.getColumnCount();\n            this.boundingBox = boundingBox;\n            // this.detectionResultColumns = new DetectionResultColumn[this.barcodeColumnCount + 2];\n            this.detectionResultColumns = new Array(this.barcodeColumnCount + 2);\n        }\n        getDetectionResultColumns() {\n            this.adjustIndicatorColumnRowNumbers(this.detectionResultColumns[0]);\n            this.adjustIndicatorColumnRowNumbers(this.detectionResultColumns[this.barcodeColumnCount + 1]);\n            let unadjustedCodewordCount = PDF417Common.MAX_CODEWORDS_IN_BARCODE;\n            let previousUnadjustedCount;\n            do {\n                previousUnadjustedCount = unadjustedCodewordCount;\n                unadjustedCodewordCount = this.adjustRowNumbersAndGetCount();\n            } while (unadjustedCodewordCount > 0 && unadjustedCodewordCount < previousUnadjustedCount);\n            return this.detectionResultColumns;\n        }\n        adjustIndicatorColumnRowNumbers(detectionResultColumn) {\n            if (detectionResultColumn != null) {\n                detectionResultColumn\n                    .adjustCompleteIndicatorColumnRowNumbers(this.barcodeMetadata);\n            }\n        }\n        // TODO ensure that no detected codewords with unknown row number are left\n        // we should be able to estimate the row height and use it as a hint for the row number\n        // we should also fill the rows top to bottom and bottom to top\n        /**\n         * @return number of codewords which don't have a valid row number. Note that the count is not accurate as codewords\n         * will be counted several times. It just serves as an indicator to see when we can stop adjusting row numbers\n         */\n        adjustRowNumbersAndGetCount() {\n            let unadjustedCount = this.adjustRowNumbersByRow();\n            if (unadjustedCount === 0) {\n                return 0;\n            }\n            for (let barcodeColumn /*int*/ = 1; barcodeColumn < this.barcodeColumnCount + 1; barcodeColumn++) {\n                let codewords = this.detectionResultColumns[barcodeColumn].getCodewords();\n                for (let codewordsRow /*int*/ = 0; codewordsRow < codewords.length; codewordsRow++) {\n                    if (codewords[codewordsRow] == null) {\n                        continue;\n                    }\n                    if (!codewords[codewordsRow].hasValidRowNumber()) {\n                        this.adjustRowNumbers(barcodeColumn, codewordsRow, codewords);\n                    }\n                }\n            }\n            return unadjustedCount;\n        }\n        adjustRowNumbersByRow() {\n            this.adjustRowNumbersFromBothRI();\n            // TODO we should only do full row adjustments if row numbers of left and right row indicator column match.\n            // Maybe it's even better to calculated the height (rows: d) and divide it by the number of barcode\n            // rows. This, together with the LRI and RRI row numbers should allow us to get a good estimate where a row\n            // number starts and ends.\n            let unadjustedCount = this.adjustRowNumbersFromLRI();\n            return unadjustedCount + this.adjustRowNumbersFromRRI();\n        }\n        adjustRowNumbersFromBothRI() {\n            if (this.detectionResultColumns[0] == null || this.detectionResultColumns[this.barcodeColumnCount + 1] == null) {\n                return;\n            }\n            let LRIcodewords = this.detectionResultColumns[0].getCodewords();\n            let RRIcodewords = this.detectionResultColumns[this.barcodeColumnCount + 1].getCodewords();\n            for (let codewordsRow /*int*/ = 0; codewordsRow < LRIcodewords.length; codewordsRow++) {\n                if (LRIcodewords[codewordsRow] != null &&\n                    RRIcodewords[codewordsRow] != null &&\n                    LRIcodewords[codewordsRow].getRowNumber() === RRIcodewords[codewordsRow].getRowNumber()) {\n                    for (let barcodeColumn /*int*/ = 1; barcodeColumn <= this.barcodeColumnCount; barcodeColumn++) {\n                        let codeword = this.detectionResultColumns[barcodeColumn].getCodewords()[codewordsRow];\n                        if (codeword == null) {\n                            continue;\n                        }\n                        codeword.setRowNumber(LRIcodewords[codewordsRow].getRowNumber());\n                        if (!codeword.hasValidRowNumber()) {\n                            this.detectionResultColumns[barcodeColumn].getCodewords()[codewordsRow] = null;\n                        }\n                    }\n                }\n            }\n        }\n        adjustRowNumbersFromRRI() {\n            if (this.detectionResultColumns[this.barcodeColumnCount + 1] == null) {\n                return 0;\n            }\n            let unadjustedCount = 0;\n            let codewords = this.detectionResultColumns[this.barcodeColumnCount + 1].getCodewords();\n            for (let codewordsRow /*int*/ = 0; codewordsRow < codewords.length; codewordsRow++) {\n                if (codewords[codewordsRow] == null) {\n                    continue;\n                }\n                let rowIndicatorRowNumber = codewords[codewordsRow].getRowNumber();\n                let invalidRowCounts = 0;\n                for (let barcodeColumn /*int*/ = this.barcodeColumnCount + 1; barcodeColumn > 0 && invalidRowCounts < this.ADJUST_ROW_NUMBER_SKIP; barcodeColumn--) {\n                    let codeword = this.detectionResultColumns[barcodeColumn].getCodewords()[codewordsRow];\n                    if (codeword != null) {\n                        invalidRowCounts = DetectionResult.adjustRowNumberIfValid(rowIndicatorRowNumber, invalidRowCounts, codeword);\n                        if (!codeword.hasValidRowNumber()) {\n                            unadjustedCount++;\n                        }\n                    }\n                }\n            }\n            return unadjustedCount;\n        }\n        adjustRowNumbersFromLRI() {\n            if (this.detectionResultColumns[0] == null) {\n                return 0;\n            }\n            let unadjustedCount = 0;\n            let codewords = this.detectionResultColumns[0].getCodewords();\n            for (let codewordsRow /*int*/ = 0; codewordsRow < codewords.length; codewordsRow++) {\n                if (codewords[codewordsRow] == null) {\n                    continue;\n                }\n                let rowIndicatorRowNumber = codewords[codewordsRow].getRowNumber();\n                let invalidRowCounts = 0;\n                for (let barcodeColumn /*int*/ = 1; barcodeColumn < this.barcodeColumnCount + 1 && invalidRowCounts < this.ADJUST_ROW_NUMBER_SKIP; barcodeColumn++) {\n                    let codeword = this.detectionResultColumns[barcodeColumn].getCodewords()[codewordsRow];\n                    if (codeword != null) {\n                        invalidRowCounts = DetectionResult.adjustRowNumberIfValid(rowIndicatorRowNumber, invalidRowCounts, codeword);\n                        if (!codeword.hasValidRowNumber()) {\n                            unadjustedCount++;\n                        }\n                    }\n                }\n            }\n            return unadjustedCount;\n        }\n        static adjustRowNumberIfValid(rowIndicatorRowNumber, invalidRowCounts, codeword) {\n            if (codeword == null) {\n                return invalidRowCounts;\n            }\n            if (!codeword.hasValidRowNumber()) {\n                if (codeword.isValidRowNumber(rowIndicatorRowNumber)) {\n                    codeword.setRowNumber(rowIndicatorRowNumber);\n                    invalidRowCounts = 0;\n                }\n                else {\n                    ++invalidRowCounts;\n                }\n            }\n            return invalidRowCounts;\n        }\n        adjustRowNumbers(barcodeColumn, codewordsRow, codewords) {\n            if (!this.detectionResultColumns[barcodeColumn - 1]) {\n                return;\n            }\n            let codeword = codewords[codewordsRow];\n            let previousColumnCodewords = this.detectionResultColumns[barcodeColumn - 1].getCodewords();\n            let nextColumnCodewords = previousColumnCodewords;\n            if (this.detectionResultColumns[barcodeColumn + 1] != null) {\n                nextColumnCodewords = this.detectionResultColumns[barcodeColumn + 1].getCodewords();\n            }\n            // let otherCodewords: Codeword[] = new Codeword[14];\n            let otherCodewords = new Array(14);\n            otherCodewords[2] = previousColumnCodewords[codewordsRow];\n            otherCodewords[3] = nextColumnCodewords[codewordsRow];\n            if (codewordsRow > 0) {\n                otherCodewords[0] = codewords[codewordsRow - 1];\n                otherCodewords[4] = previousColumnCodewords[codewordsRow - 1];\n                otherCodewords[5] = nextColumnCodewords[codewordsRow - 1];\n            }\n            if (codewordsRow > 1) {\n                otherCodewords[8] = codewords[codewordsRow - 2];\n                otherCodewords[10] = previousColumnCodewords[codewordsRow - 2];\n                otherCodewords[11] = nextColumnCodewords[codewordsRow - 2];\n            }\n            if (codewordsRow < codewords.length - 1) {\n                otherCodewords[1] = codewords[codewordsRow + 1];\n                otherCodewords[6] = previousColumnCodewords[codewordsRow + 1];\n                otherCodewords[7] = nextColumnCodewords[codewordsRow + 1];\n            }\n            if (codewordsRow < codewords.length - 2) {\n                otherCodewords[9] = codewords[codewordsRow + 2];\n                otherCodewords[12] = previousColumnCodewords[codewordsRow + 2];\n                otherCodewords[13] = nextColumnCodewords[codewordsRow + 2];\n            }\n            for (let otherCodeword of otherCodewords) {\n                if (DetectionResult.adjustRowNumber(codeword, otherCodeword)) {\n                    return;\n                }\n            }\n        }\n        /**\n         * @return true, if row number was adjusted, false otherwise\n         */\n        static adjustRowNumber(codeword, otherCodeword) {\n            if (otherCodeword == null) {\n                return false;\n            }\n            if (otherCodeword.hasValidRowNumber() && otherCodeword.getBucket() === codeword.getBucket()) {\n                codeword.setRowNumber(otherCodeword.getRowNumber());\n                return true;\n            }\n            return false;\n        }\n        getBarcodeColumnCount() {\n            return this.barcodeColumnCount;\n        }\n        getBarcodeRowCount() {\n            return this.barcodeMetadata.getRowCount();\n        }\n        getBarcodeECLevel() {\n            return this.barcodeMetadata.getErrorCorrectionLevel();\n        }\n        setBoundingBox(boundingBox) {\n            this.boundingBox = boundingBox;\n        }\n        getBoundingBox() {\n            return this.boundingBox;\n        }\n        setDetectionResultColumn(barcodeColumn, detectionResultColumn) {\n            this.detectionResultColumns[barcodeColumn] = detectionResultColumn;\n        }\n        getDetectionResultColumn(barcodeColumn) {\n            return this.detectionResultColumns[barcodeColumn];\n        }\n        // @Override\n        toString() {\n            let rowIndicatorColumn = this.detectionResultColumns[0];\n            if (rowIndicatorColumn == null) {\n                rowIndicatorColumn = this.detectionResultColumns[this.barcodeColumnCount + 1];\n            }\n            // try (\n            let formatter = new Formatter();\n            // ) {\n            for (let codewordsRow /*int*/ = 0; codewordsRow < rowIndicatorColumn.getCodewords().length; codewordsRow++) {\n                formatter.format('CW %3d:', codewordsRow);\n                for (let barcodeColumn /*int*/ = 0; barcodeColumn < this.barcodeColumnCount + 2; barcodeColumn++) {\n                    if (this.detectionResultColumns[barcodeColumn] == null) {\n                        formatter.format('    |   ');\n                        continue;\n                    }\n                    let codeword = this.detectionResultColumns[barcodeColumn].getCodewords()[codewordsRow];\n                    if (codeword == null) {\n                        formatter.format('    |   ');\n                        continue;\n                    }\n                    formatter.format(' %3d|%3d', codeword.getRowNumber(), codeword.getValue());\n                }\n                formatter.format('%n');\n            }\n            return formatter.toString();\n            // }\n        }\n    }\n\n    /*\n     * Copyright 2013 ZXing authors\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n    // package com.google.zxing.pdf417.decoder;\n    /**\n     * @author Guenther Grau\n     */\n    /*final*/ class Codeword {\n        constructor(startX, endX, bucket, value) {\n            this.rowNumber = Codeword.BARCODE_ROW_UNKNOWN;\n            this.startX = Math.trunc(startX);\n            this.endX = Math.trunc(endX);\n            this.bucket = Math.trunc(bucket);\n            this.value = Math.trunc(value);\n        }\n        hasValidRowNumber() {\n            return this.isValidRowNumber(this.rowNumber);\n        }\n        isValidRowNumber(rowNumber) {\n            return rowNumber !== Codeword.BARCODE_ROW_UNKNOWN && this.bucket === (rowNumber % 3) * 3;\n        }\n        setRowNumberAsRowIndicatorColumn() {\n            this.rowNumber = Math.trunc((Math.trunc(this.value / 30)) * 3 + Math.trunc(this.bucket / 3));\n        }\n        getWidth() {\n            return this.endX - this.startX;\n        }\n        getStartX() {\n            return this.startX;\n        }\n        getEndX() {\n            return this.endX;\n        }\n        getBucket() {\n            return this.bucket;\n        }\n        getValue() {\n            return this.value;\n        }\n        getRowNumber() {\n            return this.rowNumber;\n        }\n        setRowNumber(rowNumber) {\n            this.rowNumber = rowNumber;\n        }\n        //   @Override\n        toString() {\n            return this.rowNumber + '|' + this.value;\n        }\n    }\n    Codeword.BARCODE_ROW_UNKNOWN = -1;\n\n    /*\n    * Copyright 2013 ZXing authors\n    *\n    * Licensed under the Apache License, Version 2.0 (the \"License\");\n    * you may not use this file except in compliance with the License.\n    * You may obtain a copy of the License at\n    *\n    *      http://www.apache.org/licenses/LICENSE-2.0\n    *\n    * Unless required by applicable law or agreed to in writing, software\n    * distributed under the License is distributed on an \"AS IS\" BASIS,\n    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    * See the License for the specific language governing permissions and\n    * limitations under the License.\n    */\n    /**\n     * @author Guenther Grau\n     * @author creatale GmbH (christoph.schulz@creatale.de)\n     */\n    /*final*/ class PDF417CodewordDecoder {\n        /* @note\n         * this action have to be performed before first use of class\n         * - static constructor\n         * working with 32bit float (based from Java logic)\n        */\n        static initialize() {\n            // Pre-computes the symbol ratio table.\n            for ( /*int*/let i = 0; i < PDF417Common.SYMBOL_TABLE.length; i++) {\n                let currentSymbol = PDF417Common.SYMBOL_TABLE[i];\n                let currentBit = currentSymbol & 0x1;\n                for ( /*int*/let j = 0; j < PDF417Common.BARS_IN_MODULE; j++) {\n                    let size = 0.0;\n                    while ((currentSymbol & 0x1) === currentBit) {\n                        size += 1.0;\n                        currentSymbol >>= 1;\n                    }\n                    currentBit = currentSymbol & 0x1;\n                    if (!PDF417CodewordDecoder.RATIOS_TABLE[i]) {\n                        PDF417CodewordDecoder.RATIOS_TABLE[i] = new Array(PDF417Common.BARS_IN_MODULE);\n                    }\n                    PDF417CodewordDecoder.RATIOS_TABLE[i][PDF417Common.BARS_IN_MODULE - j - 1] = Math.fround(size / PDF417Common.MODULES_IN_CODEWORD);\n                }\n            }\n            this.bSymbolTableReady = true;\n        }\n        static getDecodedValue(moduleBitCount) {\n            let decodedValue = PDF417CodewordDecoder.getDecodedCodewordValue(PDF417CodewordDecoder.sampleBitCounts(moduleBitCount));\n            if (decodedValue !== -1) {\n                return decodedValue;\n            }\n            return PDF417CodewordDecoder.getClosestDecodedValue(moduleBitCount);\n        }\n        static sampleBitCounts(moduleBitCount) {\n            let bitCountSum = MathUtils.sum(moduleBitCount);\n            let result = new Int32Array(PDF417Common.BARS_IN_MODULE);\n            let bitCountIndex = 0;\n            let sumPreviousBits = 0;\n            for ( /*int*/let i = 0; i < PDF417Common.MODULES_IN_CODEWORD; i++) {\n                let sampleIndex = bitCountSum / (2 * PDF417Common.MODULES_IN_CODEWORD) +\n                    (i * bitCountSum) / PDF417Common.MODULES_IN_CODEWORD;\n                if (sumPreviousBits + moduleBitCount[bitCountIndex] <= sampleIndex) {\n                    sumPreviousBits += moduleBitCount[bitCountIndex];\n                    bitCountIndex++;\n                }\n                result[bitCountIndex]++;\n            }\n            return result;\n        }\n        static getDecodedCodewordValue(moduleBitCount) {\n            let decodedValue = PDF417CodewordDecoder.getBitValue(moduleBitCount);\n            return PDF417Common.getCodeword(decodedValue) === -1 ? -1 : decodedValue;\n        }\n        static getBitValue(moduleBitCount) {\n            let result = /*long*/ 0;\n            for (let /*int*/ i = 0; i < moduleBitCount.length; i++) {\n                for ( /*int*/let bit = 0; bit < moduleBitCount[i]; bit++) {\n                    result = (result << 1) | (i % 2 === 0 ? 1 : 0);\n                }\n            }\n            return Math.trunc(result);\n        }\n        // working with 32bit float (as in Java)\n        static getClosestDecodedValue(moduleBitCount) {\n            let bitCountSum = MathUtils.sum(moduleBitCount);\n            let bitCountRatios = new Array(PDF417Common.BARS_IN_MODULE);\n            if (bitCountSum > 1) {\n                for (let /*int*/ i = 0; i < bitCountRatios.length; i++) {\n                    bitCountRatios[i] = Math.fround(moduleBitCount[i] / bitCountSum);\n                }\n            }\n            let bestMatchError = Float.MAX_VALUE;\n            let bestMatch = -1;\n            if (!this.bSymbolTableReady) {\n                PDF417CodewordDecoder.initialize();\n            }\n            for ( /*int*/let j = 0; j < PDF417CodewordDecoder.RATIOS_TABLE.length; j++) {\n                let error = 0.0;\n                let ratioTableRow = PDF417CodewordDecoder.RATIOS_TABLE[j];\n                for ( /*int*/let k = 0; k < PDF417Common.BARS_IN_MODULE; k++) {\n                    let diff = Math.fround(ratioTableRow[k] - bitCountRatios[k]);\n                    error += Math.fround(diff * diff);\n                    if (error >= bestMatchError) {\n                        break;\n                    }\n                }\n                if (error < bestMatchError) {\n                    bestMatchError = error;\n                    bestMatch = PDF417Common.SYMBOL_TABLE[j];\n                }\n            }\n            return bestMatch;\n        }\n    }\n    // flag that the table is ready for use\n    PDF417CodewordDecoder.bSymbolTableReady = false;\n    PDF417CodewordDecoder.RATIOS_TABLE = new Array(PDF417Common.SYMBOL_TABLE.length).map(x => x = new Array(PDF417Common.BARS_IN_MODULE));\n\n    /*\n     * Copyright 2013 ZXing authors\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n    // package com.google.zxing.pdf417;\n    /**\n     * @author Guenther Grau\n     */\n    /*public final*/ class PDF417ResultMetadata {\n        constructor() {\n            this.segmentCount = -1;\n            this.fileSize = -1;\n            this.timestamp = -1;\n            this.checksum = -1;\n        }\n        /**\n         * The Segment ID represents the segment of the whole file distributed over different symbols.\n         *\n         * @return File segment index\n         */\n        getSegmentIndex() {\n            return this.segmentIndex;\n        }\n        setSegmentIndex(segmentIndex) {\n            this.segmentIndex = segmentIndex;\n        }\n        /**\n         * Is the same for each related PDF417 symbol\n         *\n         * @return File ID\n         */\n        getFileId() {\n            return this.fileId;\n        }\n        setFileId(fileId) {\n            this.fileId = fileId;\n        }\n        /**\n         * @return always null\n         * @deprecated use dedicated already parsed fields\n         */\n        //   @Deprecated\n        getOptionalData() {\n            return this.optionalData;\n        }\n        /**\n         * @param optionalData old optional data format as int array\n         * @deprecated parse and use new fields\n         */\n        //   @Deprecated\n        setOptionalData(optionalData) {\n            this.optionalData = optionalData;\n        }\n        /**\n         * @return true if it is the last segment\n         */\n        isLastSegment() {\n            return this.lastSegment;\n        }\n        setLastSegment(lastSegment) {\n            this.lastSegment = lastSegment;\n        }\n        /**\n         * @return count of segments, -1 if not set\n         */\n        getSegmentCount() {\n            return this.segmentCount;\n        }\n        setSegmentCount(segmentCount /*int*/) {\n            this.segmentCount = segmentCount;\n        }\n        getSender() {\n            return this.sender || null;\n        }\n        setSender(sender) {\n            this.sender = sender;\n        }\n        getAddressee() {\n            return this.addressee || null;\n        }\n        setAddressee(addressee) {\n            this.addressee = addressee;\n        }\n        /**\n         * Filename of the encoded file\n         *\n         * @return filename\n         */\n        getFileName() {\n            return this.fileName;\n        }\n        setFileName(fileName) {\n            this.fileName = fileName;\n        }\n        /**\n         * filesize in bytes of the encoded file\n         *\n         * @return filesize in bytes, -1 if not set\n         */\n        getFileSize() {\n            return this.fileSize;\n        }\n        setFileSize(fileSize /*long*/) {\n            this.fileSize = fileSize;\n        }\n        /**\n         * 16-bit CRC checksum using CCITT-16\n         *\n         * @return crc checksum, -1 if not set\n         */\n        getChecksum() {\n            return this.checksum;\n        }\n        setChecksum(checksum /*int*/) {\n            this.checksum = checksum;\n        }\n        /**\n         * unix epock timestamp, elapsed seconds since 1970-01-01\n         *\n         * @return elapsed seconds, -1 if not set\n         */\n        getTimestamp() {\n            return this.timestamp;\n        }\n        setTimestamp(timestamp /*long*/) {\n            this.timestamp = timestamp;\n        }\n    }\n\n    /**\n     * Ponyfill for Java's Long class.\n     */\n    class Long {\n        /**\n         * Parses a string to a number, since JS has no really Int64.\n         *\n         * @param num Numeric string.\n         * @param radix Destination radix.\n         */\n        static parseLong(num, radix = undefined) {\n            return parseInt(num, radix);\n        }\n    }\n\n    /**\n     * Custom Error class of type Exception.\n     */\n    class NullPointerException extends Exception {\n    }\n    NullPointerException.kind = 'NullPointerException';\n\n    /*\n     * Copyright (c) 1994, 2004, Oracle and/or its affiliates. All rights reserved.\n     * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n     *\n     * This code is free software; you can redistribute it and/or modify it\n     * under the terms of the GNU General Public License version 2 only, as\n     * published by the Free Software Foundation.  Oracle designates this\n     * particular file as subject to the \"Classpath\" exception as provided\n     * by Oracle in the LICENSE file that accompanied this code.\n     *\n     * This code is distributed in the hope that it will be useful, but WITHOUT\n     * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n     * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n     * version 2 for more details (a copy is included in the LICENSE file that\n     * accompanied this code).\n     *\n     * You should have received a copy of the GNU General Public License version\n     * 2 along with this work; if not, write to the Free Software Foundation,\n     * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n     *\n     * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n     * or visit www.oracle.com if you need additional information or have any\n     * questions.\n     */\n    // package java.io;\n    /**\n     * This abstract class is the superclass of all classes representing\n     * an output stream of bytes. An output stream accepts output bytes\n     * and sends them to some sink.\n     * <p>\n     * Applications that need to define a subclass of\n     * <code>OutputStream</code> must always provide at least a method\n     * that writes one byte of output.\n     *\n     * @author  Arthur van Hoff\n     * @see     java.io.BufferedOutputStream\n     * @see     java.io.ByteArrayOutputStream\n     * @see     java.io.DataOutputStream\n     * @see     java.io.FilterOutputStream\n     * @see     java.io.InputStream\n     * @see     java.io.OutputStream#write(int)\n     * @since   JDK1.0\n     */\n    /*public*/ class OutputStream /*implements Closeable, Flushable*/ {\n        /**\n         * Writes <code>b.length</code> bytes from the specified byte array\n         * to this output stream. The general contract for <code>write(b)</code>\n         * is that it should have exactly the same effect as the call\n         * <code>write(b, 0, b.length)</code>.\n         *\n         * @param      b   the data.\n         * @exception  IOException  if an I/O error occurs.\n         * @see        java.io.OutputStream#write(byte[], int, int)\n         */\n        writeBytes(b) {\n            this.writeBytesOffset(b, 0, b.length);\n        }\n        /**\n         * Writes <code>len</code> bytes from the specified byte array\n         * starting at offset <code>off</code> to this output stream.\n         * The general contract for <code>write(b, off, len)</code> is that\n         * some of the bytes in the array <code>b</code> are written to the\n         * output stream in order; element <code>b[off]</code> is the first\n         * byte written and <code>b[off+len-1]</code> is the last byte written\n         * by this operation.\n         * <p>\n         * The <code>write</code> method of <code>OutputStream</code> calls\n         * the write method of one argument on each of the bytes to be\n         * written out. Subclasses are encouraged to override this method and\n         * provide a more efficient implementation.\n         * <p>\n         * If <code>b</code> is <code>null</code>, a\n         * <code>NullPointerException</code> is thrown.\n         * <p>\n         * If <code>off</code> is negative, or <code>len</code> is negative, or\n         * <code>off+len</code> is greater than the length of the array\n         * <code>b</code>, then an <tt>IndexOutOfBoundsException</tt> is thrown.\n         *\n         * @param      b     the data.\n         * @param      off   the start offset in the data.\n         * @param      len   the number of bytes to write.\n         * @exception  IOException  if an I/O error occurs. In particular,\n         *             an <code>IOException</code> is thrown if the output\n         *             stream is closed.\n         */\n        writeBytesOffset(b, off, len) {\n            if (b == null) {\n                throw new NullPointerException();\n            }\n            else if ((off < 0) || (off > b.length) || (len < 0) ||\n                ((off + len) > b.length) || ((off + len) < 0)) {\n                throw new IndexOutOfBoundsException();\n            }\n            else if (len === 0) {\n                return;\n            }\n            for (let i = 0; i < len; i++) {\n                this.write(b[off + i]);\n            }\n        }\n        /**\n         * Flushes this output stream and forces any buffered output bytes\n         * to be written out. The general contract of <code>flush</code> is\n         * that calling it is an indication that, if any bytes previously\n         * written have been buffered by the implementation of the output\n         * stream, such bytes should immediately be written to their\n         * intended destination.\n         * <p>\n         * If the intended destination of this stream is an abstraction provided by\n         * the underlying operating system, for example a file, then flushing the\n         * stream guarantees only that bytes previously written to the stream are\n         * passed to the operating system for writing; it does not guarantee that\n         * they are actually written to a physical device such as a disk drive.\n         * <p>\n         * The <code>flush</code> method of <code>OutputStream</code> does nothing.\n         *\n         * @exception  IOException  if an I/O error occurs.\n         */\n        flush() {\n        }\n        /**\n         * Closes this output stream and releases any system resources\n         * associated with this stream. The general contract of <code>close</code>\n         * is that it closes the output stream. A closed stream cannot perform\n         * output operations and cannot be reopened.\n         * <p>\n         * The <code>close</code> method of <code>OutputStream</code> does nothing.\n         *\n         * @exception  IOException  if an I/O error occurs.\n         */\n        close() {\n        }\n    }\n\n    /**\n     * Custom Error class of type Exception.\n     */\n    class OutOfMemoryError extends Exception {\n    }\n\n    /*\n     * Copyright (c) 1994, 2010, Oracle and/or its affiliates. All rights reserved.\n     * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n     *\n     * This code is free software; you can redistribute it and/or modify it\n     * under the terms of the GNU General Public License version 2 only, as\n     * published by the Free Software Foundation.  Oracle designates this\n     * particular file as subject to the \"Classpath\" exception as provided\n     * by Oracle in the LICENSE file that accompanied this code.\n     *\n     * This code is distributed in the hope that it will be useful, but WITHOUT\n     * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n     * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n     * version 2 for more details (a copy is included in the LICENSE file that\n     * accompanied this code).\n     *\n     * You should have received a copy of the GNU General Public License version\n     * 2 along with this work; if not, write to the Free Software Foundation,\n     * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n     *\n     * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n     * or visit www.oracle.com if you need additional information or have any\n     * questions.\n     */\n    /**\n     * This class implements an output stream in which the data is\n     * written into a byte array. The buffer automatically grows as data\n     * is written to it.\n     * The data can be retrieved using <code>toByteArray()</code> and\n     * <code>toString()</code>.\n     * <p>\n     * Closing a <tt>ByteArrayOutputStream</tt> has no effect. The methods in\n     * this class can be called after the stream has been closed without\n     * generating an <tt>IOException</tt>.\n     *\n     * @author  Arthur van Hoff\n     * @since   JDK1.0\n     */\n    /*public*/ class ByteArrayOutputStream extends OutputStream {\n        /**\n         * Creates a new byte array output stream. The buffer capacity is\n         * initially 32 bytes, though its size increases if necessary.\n         */\n        // public constructor() {\n        //     this(32);\n        // }\n        /**\n         * Creates a new byte array output stream, with a buffer capacity of\n         * the specified size, in bytes.\n         *\n         * @param   size   the initial size.\n         * @exception  IllegalArgumentException if size is negative.\n         */\n        constructor(size = 32) {\n            super();\n            /**\n             * The number of valid bytes in the buffer.\n             */\n            this.count = 0;\n            if (size < 0) {\n                throw new IllegalArgumentException('Negative initial size: '\n                    + size);\n            }\n            this.buf = new Uint8Array(size);\n        }\n        /**\n         * Increases the capacity if necessary to ensure that it can hold\n         * at least the number of elements specified by the minimum\n         * capacity argument.\n         *\n         * @param minCapacity the desired minimum capacity\n         * @throws OutOfMemoryError if {@code minCapacity < 0}.  This is\n         * interpreted as a request for the unsatisfiably large capacity\n         * {@code (long) Integer.MAX_VALUE + (minCapacity - Integer.MAX_VALUE)}.\n         */\n        ensureCapacity(minCapacity) {\n            // overflow-conscious code\n            if (minCapacity - this.buf.length > 0)\n                this.grow(minCapacity);\n        }\n        /**\n         * Increases the capacity to ensure that it can hold at least the\n         * number of elements specified by the minimum capacity argument.\n         *\n         * @param minCapacity the desired minimum capacity\n         */\n        grow(minCapacity) {\n            // overflow-conscious code\n            let oldCapacity = this.buf.length;\n            let newCapacity = oldCapacity << 1;\n            if (newCapacity - minCapacity < 0)\n                newCapacity = minCapacity;\n            if (newCapacity < 0) {\n                if (minCapacity < 0) // overflow\n                    throw new OutOfMemoryError();\n                newCapacity = Integer.MAX_VALUE;\n            }\n            this.buf = Arrays.copyOfUint8Array(this.buf, newCapacity);\n        }\n        /**\n         * Writes the specified byte to this byte array output stream.\n         *\n         * @param   b   the byte to be written.\n         */\n        write(b) {\n            this.ensureCapacity(this.count + 1);\n            this.buf[this.count] = /*(byte)*/ b;\n            this.count += 1;\n        }\n        /**\n         * Writes <code>len</code> bytes from the specified byte array\n         * starting at offset <code>off</code> to this byte array output stream.\n         *\n         * @param   b     the data.\n         * @param   off   the start offset in the data.\n         * @param   len   the number of bytes to write.\n         */\n        writeBytesOffset(b, off, len) {\n            if ((off < 0) || (off > b.length) || (len < 0) ||\n                ((off + len) - b.length > 0)) {\n                throw new IndexOutOfBoundsException();\n            }\n            this.ensureCapacity(this.count + len);\n            System.arraycopy(b, off, this.buf, this.count, len);\n            this.count += len;\n        }\n        /**\n         * Writes the complete contents of this byte array output stream to\n         * the specified output stream argument, as if by calling the output\n         * stream's write method using <code>out.write(buf, 0, count)</code>.\n         *\n         * @param      out   the output stream to which to write the data.\n         * @exception  IOException  if an I/O error occurs.\n         */\n        writeTo(out) {\n            out.writeBytesOffset(this.buf, 0, this.count);\n        }\n        /**\n         * Resets the <code>count</code> field of this byte array output\n         * stream to zero, so that all currently accumulated output in the\n         * output stream is discarded. The output stream can be used again,\n         * reusing the already allocated buffer space.\n         *\n         * @see     java.io.ByteArrayInputStream#count\n         */\n        reset() {\n            this.count = 0;\n        }\n        /**\n         * Creates a newly allocated byte array. Its size is the current\n         * size of this output stream and the valid contents of the buffer\n         * have been copied into it.\n         *\n         * @return  the current contents of this output stream, as a byte array.\n         * @see     java.io.ByteArrayOutputStream#size()\n         */\n        toByteArray() {\n            return Arrays.copyOfUint8Array(this.buf, this.count);\n        }\n        /**\n         * Returns the current size of the buffer.\n         *\n         * @return  the value of the <code>count</code> field, which is the number\n         *          of valid bytes in this output stream.\n         * @see     java.io.ByteArrayOutputStream#count\n         */\n        size() {\n            return this.count;\n        }\n        toString(param) {\n            if (!param) {\n                return this.toString_void();\n            }\n            if (typeof param === 'string') {\n                return this.toString_string(param);\n            }\n            return this.toString_number(param);\n        }\n        /**\n         * Converts the buffer's contents into a string decoding bytes using the\n         * platform's default character set. The length of the new <tt>String</tt>\n         * is a function of the character set, and hence may not be equal to the\n         * size of the buffer.\n         *\n         * <p> This method always replaces malformed-input and unmappable-character\n         * sequences with the default replacement string for the platform's\n         * default character set. The {@linkplain java.nio.charset.CharsetDecoder}\n         * class should be used when more control over the decoding process is\n         * required.\n         *\n         * @return String decoded from the buffer's contents.\n         * @since  JDK1.1\n         */\n        toString_void() {\n            return new String(this.buf /*, 0, this.count*/).toString();\n        }\n        /**\n         * Converts the buffer's contents into a string by decoding the bytes using\n         * the specified {@link java.nio.charset.Charset charsetName}. The length of\n         * the new <tt>String</tt> is a function of the charset, and hence may not be\n         * equal to the length of the byte array.\n         *\n         * <p> This method always replaces malformed-input and unmappable-character\n         * sequences with this charset's default replacement string. The {@link\n         * java.nio.charset.CharsetDecoder} class should be used when more control\n         * over the decoding process is required.\n         *\n         * @param  charsetName  the name of a supported\n         *              {@linkplain java.nio.charset.Charset </code>charset<code>}\n         * @return String decoded from the buffer's contents.\n         * @exception  UnsupportedEncodingException\n         *             If the named charset is not supported\n         * @since   JDK1.1\n         */\n        toString_string(charsetName) {\n            return new String(this.buf /*, 0, this.count, charsetName*/).toString();\n        }\n        /**\n         * Creates a newly allocated string. Its size is the current size of\n         * the output stream and the valid contents of the buffer have been\n         * copied into it. Each character <i>c</i> in the resulting string is\n         * constructed from the corresponding element <i>b</i> in the byte\n         * array such that:\n         * <blockquote><pre>\n         *     c == (char)(((hibyte &amp; 0xff) &lt;&lt; 8) | (b &amp; 0xff))\n         * </pre></blockquote>\n         *\n         * @deprecated This method does not properly convert bytes into characters.\n         * As of JDK&nbsp;1.1, the preferred way to do this is via the\n         * <code>toString(String enc)</code> method, which takes an encoding-name\n         * argument, or the <code>toString()</code> method, which uses the\n         * platform's default character encoding.\n         *\n         * @param      hibyte    the high byte of each resulting Unicode character.\n         * @return     the current contents of the output stream, as a string.\n         * @see        java.io.ByteArrayOutputStream#size()\n         * @see        java.io.ByteArrayOutputStream#toString(String)\n         * @see        java.io.ByteArrayOutputStream#toString()\n         */\n        // @Deprecated\n        toString_number(hibyte) {\n            return new String(this.buf /*, hibyte, 0, this.count*/).toString();\n        }\n        /**\n         * Closing a <tt>ByteArrayOutputStream</tt> has no effect. The methods in\n         * this class can be called after the stream has been closed without\n         * generating an <tt>IOException</tt>.\n         * <p>\n         *\n         * @throws IOException\n         */\n        close() {\n        }\n    }\n\n    /*\n     * Copyright 2009 ZXing authors\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n    /*private*/ var Mode$2;\n    (function (Mode) {\n        Mode[Mode[\"ALPHA\"] = 0] = \"ALPHA\";\n        Mode[Mode[\"LOWER\"] = 1] = \"LOWER\";\n        Mode[Mode[\"MIXED\"] = 2] = \"MIXED\";\n        Mode[Mode[\"PUNCT\"] = 3] = \"PUNCT\";\n        Mode[Mode[\"ALPHA_SHIFT\"] = 4] = \"ALPHA_SHIFT\";\n        Mode[Mode[\"PUNCT_SHIFT\"] = 5] = \"PUNCT_SHIFT\";\n    })(Mode$2 || (Mode$2 = {}));\n    /**\n     * Indirectly access the global BigInt constructor, it\n     * allows browsers that doesn't support BigInt to run\n     * the library without breaking due to \"undefined BigInt\"\n     * errors.\n     */\n    function getBigIntConstructor() {\n        if (typeof window !== 'undefined') {\n            return window['BigInt'] || null;\n        }\n        if (typeof global !== 'undefined') {\n            return global['BigInt'] || null;\n        }\n        if (typeof self !== 'undefined') {\n            return self['BigInt'] || null;\n        }\n        throw new Error('Can\\'t search globals for BigInt!');\n    }\n    /**\n     * Used to store the BigInt constructor.\n     */\n    let BigInteger;\n    /**\n     * This function creates a bigint value. It allows browsers\n     * that doesn't support BigInt to run the rest of the library\n     * by not directly accessing the BigInt constructor.\n     */\n    function createBigInt(num) {\n        if (typeof BigInteger === 'undefined') {\n            BigInteger = getBigIntConstructor();\n        }\n        if (BigInteger === null) {\n            throw new Error('BigInt is not supported!');\n        }\n        return BigInteger(num);\n    }\n    function getEXP900() {\n        // in Java - array with length = 16\n        let EXP900 = [];\n        EXP900[0] = createBigInt(1);\n        let nineHundred = createBigInt(900);\n        EXP900[1] = nineHundred;\n        // in Java - array with length = 16\n        for (let i /*int*/ = 2; i < 16; i++) {\n            EXP900[i] = EXP900[i - 1] * nineHundred;\n        }\n        return EXP900;\n    }\n    /**\n     * <p>This class contains the methods for decoding the PDF417 codewords.</p>\n     *\n     * @author SITA Lab (kevin.osullivan@sita.aero)\n     * @author Guenther Grau\n     */\n    /*final*/ class DecodedBitStreamParser$2 {\n        //   private DecodedBitStreamParser() {\n        // }\n        /**\n         *\n         * @param codewords\n         * @param ecLevel\n         *\n         * @throws FormatException\n         */\n        static decode(codewords, ecLevel) {\n            // pass encoding to result (will be used for decode symbols in byte mode)\n            let result = new StringBuilder('');\n            // let encoding: Charset = StandardCharsets.ISO_8859_1;\n            let encoding = CharacterSetECI.ISO8859_1;\n            /**\n             * @note the next command is specific from this TypeScript library\n             * because TS can't properly cast some values to char and\n             * convert it to string later correctly due to encoding\n             * differences from Java version. As reported here:\n             * https://github.com/zxing-js/library/pull/264/files#r382831593\n             */\n            result.enableDecoding(encoding);\n            // Get compaction mode\n            let codeIndex = 1;\n            let code = codewords[codeIndex++];\n            let resultMetadata = new PDF417ResultMetadata();\n            while (codeIndex < codewords[0]) {\n                switch (code) {\n                    case DecodedBitStreamParser$2.TEXT_COMPACTION_MODE_LATCH:\n                        codeIndex = DecodedBitStreamParser$2.textCompaction(codewords, codeIndex, result);\n                        break;\n                    case DecodedBitStreamParser$2.BYTE_COMPACTION_MODE_LATCH:\n                    case DecodedBitStreamParser$2.BYTE_COMPACTION_MODE_LATCH_6:\n                        codeIndex = DecodedBitStreamParser$2.byteCompaction(code, codewords, encoding, codeIndex, result);\n                        break;\n                    case DecodedBitStreamParser$2.MODE_SHIFT_TO_BYTE_COMPACTION_MODE:\n                        result.append(/*(char)*/ codewords[codeIndex++]);\n                        break;\n                    case DecodedBitStreamParser$2.NUMERIC_COMPACTION_MODE_LATCH:\n                        codeIndex = DecodedBitStreamParser$2.numericCompaction(codewords, codeIndex, result);\n                        break;\n                    case DecodedBitStreamParser$2.ECI_CHARSET:\n                        let charsetECI = CharacterSetECI.getCharacterSetECIByValue(codewords[codeIndex++]);\n                        // encoding = Charset.forName(charsetECI.getName());\n                        break;\n                    case DecodedBitStreamParser$2.ECI_GENERAL_PURPOSE:\n                        // Can't do anything with generic ECI; skip its 2 characters\n                        codeIndex += 2;\n                        break;\n                    case DecodedBitStreamParser$2.ECI_USER_DEFINED:\n                        // Can't do anything with user ECI; skip its 1 character\n                        codeIndex++;\n                        break;\n                    case DecodedBitStreamParser$2.BEGIN_MACRO_PDF417_CONTROL_BLOCK:\n                        codeIndex = DecodedBitStreamParser$2.decodeMacroBlock(codewords, codeIndex, resultMetadata);\n                        break;\n                    case DecodedBitStreamParser$2.BEGIN_MACRO_PDF417_OPTIONAL_FIELD:\n                    case DecodedBitStreamParser$2.MACRO_PDF417_TERMINATOR:\n                        // Should not see these outside a macro block\n                        throw new FormatException();\n                    default:\n                        // Default to text compaction. During testing numerous barcodes\n                        // appeared to be missing the starting mode. In these cases defaulting\n                        // to text compaction seems to work.\n                        codeIndex--;\n                        codeIndex = DecodedBitStreamParser$2.textCompaction(codewords, codeIndex, result);\n                        break;\n                }\n                if (codeIndex < codewords.length) {\n                    code = codewords[codeIndex++];\n                }\n                else {\n                    throw FormatException.getFormatInstance();\n                }\n            }\n            if (result.length() === 0) {\n                throw FormatException.getFormatInstance();\n            }\n            let decoderResult = new DecoderResult(null, result.toString(), null, ecLevel);\n            decoderResult.setOther(resultMetadata);\n            return decoderResult;\n        }\n        /**\n         *\n         * @param int\n         * @param param1\n         * @param codewords\n         * @param int\n         * @param codeIndex\n         * @param PDF417ResultMetadata\n         * @param resultMetadata\n         *\n         * @throws FormatException\n         */\n        // @SuppressWarnings(\"deprecation\")\n        static decodeMacroBlock(codewords, codeIndex, resultMetadata) {\n            if (codeIndex + DecodedBitStreamParser$2.NUMBER_OF_SEQUENCE_CODEWORDS > codewords[0]) {\n                // we must have at least two bytes left for the segment index\n                throw FormatException.getFormatInstance();\n            }\n            let segmentIndexArray = new Int32Array(DecodedBitStreamParser$2.NUMBER_OF_SEQUENCE_CODEWORDS);\n            for (let i /*int*/ = 0; i < DecodedBitStreamParser$2.NUMBER_OF_SEQUENCE_CODEWORDS; i++, codeIndex++) {\n                segmentIndexArray[i] = codewords[codeIndex];\n            }\n            resultMetadata.setSegmentIndex(Integer.parseInt(DecodedBitStreamParser$2.decodeBase900toBase10(segmentIndexArray, DecodedBitStreamParser$2.NUMBER_OF_SEQUENCE_CODEWORDS)));\n            let fileId = new StringBuilder();\n            codeIndex = DecodedBitStreamParser$2.textCompaction(codewords, codeIndex, fileId);\n            resultMetadata.setFileId(fileId.toString());\n            let optionalFieldsStart = -1;\n            if (codewords[codeIndex] === DecodedBitStreamParser$2.BEGIN_MACRO_PDF417_OPTIONAL_FIELD) {\n                optionalFieldsStart = codeIndex + 1;\n            }\n            while (codeIndex < codewords[0]) {\n                switch (codewords[codeIndex]) {\n                    case DecodedBitStreamParser$2.BEGIN_MACRO_PDF417_OPTIONAL_FIELD:\n                        codeIndex++;\n                        switch (codewords[codeIndex]) {\n                            case DecodedBitStreamParser$2.MACRO_PDF417_OPTIONAL_FIELD_FILE_NAME:\n                                let fileName = new StringBuilder();\n                                codeIndex = DecodedBitStreamParser$2.textCompaction(codewords, codeIndex + 1, fileName);\n                                resultMetadata.setFileName(fileName.toString());\n                                break;\n                            case DecodedBitStreamParser$2.MACRO_PDF417_OPTIONAL_FIELD_SENDER:\n                                let sender = new StringBuilder();\n                                codeIndex = DecodedBitStreamParser$2.textCompaction(codewords, codeIndex + 1, sender);\n                                resultMetadata.setSender(sender.toString());\n                                break;\n                            case DecodedBitStreamParser$2.MACRO_PDF417_OPTIONAL_FIELD_ADDRESSEE:\n                                let addressee = new StringBuilder();\n                                codeIndex = DecodedBitStreamParser$2.textCompaction(codewords, codeIndex + 1, addressee);\n                                resultMetadata.setAddressee(addressee.toString());\n                                break;\n                            case DecodedBitStreamParser$2.MACRO_PDF417_OPTIONAL_FIELD_SEGMENT_COUNT:\n                                let segmentCount = new StringBuilder();\n                                codeIndex = DecodedBitStreamParser$2.numericCompaction(codewords, codeIndex + 1, segmentCount);\n                                resultMetadata.setSegmentCount(Integer.parseInt(segmentCount.toString()));\n                                break;\n                            case DecodedBitStreamParser$2.MACRO_PDF417_OPTIONAL_FIELD_TIME_STAMP:\n                                let timestamp = new StringBuilder();\n                                codeIndex = DecodedBitStreamParser$2.numericCompaction(codewords, codeIndex + 1, timestamp);\n                                resultMetadata.setTimestamp(Long.parseLong(timestamp.toString()));\n                                break;\n                            case DecodedBitStreamParser$2.MACRO_PDF417_OPTIONAL_FIELD_CHECKSUM:\n                                let checksum = new StringBuilder();\n                                codeIndex = DecodedBitStreamParser$2.numericCompaction(codewords, codeIndex + 1, checksum);\n                                resultMetadata.setChecksum(Integer.parseInt(checksum.toString()));\n                                break;\n                            case DecodedBitStreamParser$2.MACRO_PDF417_OPTIONAL_FIELD_FILE_SIZE:\n                                let fileSize = new StringBuilder();\n                                codeIndex = DecodedBitStreamParser$2.numericCompaction(codewords, codeIndex + 1, fileSize);\n                                resultMetadata.setFileSize(Long.parseLong(fileSize.toString()));\n                                break;\n                            default:\n                                throw FormatException.getFormatInstance();\n                        }\n                        break;\n                    case DecodedBitStreamParser$2.MACRO_PDF417_TERMINATOR:\n                        codeIndex++;\n                        resultMetadata.setLastSegment(true);\n                        break;\n                    default:\n                        throw FormatException.getFormatInstance();\n                }\n            }\n            // copy optional fields to additional options\n            if (optionalFieldsStart !== -1) {\n                let optionalFieldsLength = codeIndex - optionalFieldsStart;\n                if (resultMetadata.isLastSegment()) {\n                    // do not include terminator\n                    optionalFieldsLength--;\n                }\n                resultMetadata.setOptionalData(Arrays.copyOfRange(codewords, optionalFieldsStart, optionalFieldsStart + optionalFieldsLength));\n            }\n            return codeIndex;\n        }\n        /**\n         * Text Compaction mode (see 5.4.1.5) permits all printable ASCII characters to be\n         * encoded, i.e. values 32 - 126 inclusive in accordance with ISO/IEC 646 (IRV), as\n         * well as selected control characters.\n         *\n         * @param codewords The array of codewords (data + error)\n         * @param codeIndex The current index into the codeword array.\n         * @param result    The decoded data is appended to the result.\n         * @return The next index into the codeword array.\n         */\n        static textCompaction(codewords, codeIndex, result) {\n            // 2 character per codeword\n            let textCompactionData = new Int32Array((codewords[0] - codeIndex) * 2);\n            // Used to hold the byte compaction value if there is a mode shift\n            let byteCompactionData = new Int32Array((codewords[0] - codeIndex) * 2);\n            let index = 0;\n            let end = false;\n            while ((codeIndex < codewords[0]) && !end) {\n                let code = codewords[codeIndex++];\n                if (code < DecodedBitStreamParser$2.TEXT_COMPACTION_MODE_LATCH) {\n                    textCompactionData[index] = code / 30;\n                    textCompactionData[index + 1] = code % 30;\n                    index += 2;\n                }\n                else {\n                    switch (code) {\n                        case DecodedBitStreamParser$2.TEXT_COMPACTION_MODE_LATCH:\n                            // reinitialize text compaction mode to alpha sub mode\n                            textCompactionData[index++] = DecodedBitStreamParser$2.TEXT_COMPACTION_MODE_LATCH;\n                            break;\n                        case DecodedBitStreamParser$2.BYTE_COMPACTION_MODE_LATCH:\n                        case DecodedBitStreamParser$2.BYTE_COMPACTION_MODE_LATCH_6:\n                        case DecodedBitStreamParser$2.NUMERIC_COMPACTION_MODE_LATCH:\n                        case DecodedBitStreamParser$2.BEGIN_MACRO_PDF417_CONTROL_BLOCK:\n                        case DecodedBitStreamParser$2.BEGIN_MACRO_PDF417_OPTIONAL_FIELD:\n                        case DecodedBitStreamParser$2.MACRO_PDF417_TERMINATOR:\n                            codeIndex--;\n                            end = true;\n                            break;\n                        case DecodedBitStreamParser$2.MODE_SHIFT_TO_BYTE_COMPACTION_MODE:\n                            // The Mode Shift codeword 913 shall cause a temporary\n                            // switch from Text Compaction mode to Byte Compaction mode.\n                            // This switch shall be in effect for only the next codeword,\n                            // after which the mode shall revert to the prevailing sub-mode\n                            // of the Text Compaction mode. Codeword 913 is only available\n                            // in Text Compaction mode; its use is described in 5.4.2.4.\n                            textCompactionData[index] = DecodedBitStreamParser$2.MODE_SHIFT_TO_BYTE_COMPACTION_MODE;\n                            code = codewords[codeIndex++];\n                            byteCompactionData[index] = code;\n                            index++;\n                            break;\n                    }\n                }\n            }\n            DecodedBitStreamParser$2.decodeTextCompaction(textCompactionData, byteCompactionData, index, result);\n            return codeIndex;\n        }\n        /**\n         * The Text Compaction mode includes all the printable ASCII characters\n         * (i.e. values from 32 to 126) and three ASCII control characters: HT or tab\n         * (9: e), LF or line feed (10: e), and CR or carriage\n         * return (13: e). The Text Compaction mode also includes various latch\n         * and shift characters which are used exclusively within the mode. The Text\n         * Compaction mode encodes up to 2 characters per codeword. The compaction rules\n         * for converting data into PDF417 codewords are defined in 5.4.2.2. The sub-mode\n         * switches are defined in 5.4.2.3.\n         *\n         * @param textCompactionData The text compaction data.\n         * @param byteCompactionData The byte compaction data if there\n         *                           was a mode shift.\n         * @param length             The size of the text compaction and byte compaction data.\n         * @param result             The decoded data is appended to the result.\n         */\n        static decodeTextCompaction(textCompactionData, byteCompactionData, length, result) {\n            // Beginning from an initial state of the Alpha sub-mode\n            // The default compaction mode for PDF417 in effect at the start of each symbol shall always be Text\n            // Compaction mode Alpha sub-mode (alphabetic: uppercase). A latch codeword from another mode to the Text\n            // Compaction mode shall always switch to the Text Compaction Alpha sub-mode.\n            let subMode = Mode$2.ALPHA;\n            let priorToShiftMode = Mode$2.ALPHA;\n            let i = 0;\n            while (i < length) {\n                let subModeCh = textCompactionData[i];\n                let ch = /*char*/ '';\n                switch (subMode) {\n                    case Mode$2.ALPHA:\n                        // Alpha (alphabetic: uppercase)\n                        if (subModeCh < 26) {\n                            // Upper case Alpha Character\n                            // Note: 65 = 'A' ASCII -> there is byte code of symbol\n                            ch = /*(char)('A' + subModeCh) */ String.fromCharCode(65 + subModeCh);\n                        }\n                        else {\n                            switch (subModeCh) {\n                                case 26:\n                                    ch = ' ';\n                                    break;\n                                case DecodedBitStreamParser$2.LL:\n                                    subMode = Mode$2.LOWER;\n                                    break;\n                                case DecodedBitStreamParser$2.ML:\n                                    subMode = Mode$2.MIXED;\n                                    break;\n                                case DecodedBitStreamParser$2.PS:\n                                    // Shift to punctuation\n                                    priorToShiftMode = subMode;\n                                    subMode = Mode$2.PUNCT_SHIFT;\n                                    break;\n                                case DecodedBitStreamParser$2.MODE_SHIFT_TO_BYTE_COMPACTION_MODE:\n                                    result.append(/*(char)*/ byteCompactionData[i]);\n                                    break;\n                                case DecodedBitStreamParser$2.TEXT_COMPACTION_MODE_LATCH:\n                                    subMode = Mode$2.ALPHA;\n                                    break;\n                            }\n                        }\n                        break;\n                    case Mode$2.LOWER:\n                        // Lower (alphabetic: lowercase)\n                        if (subModeCh < 26) {\n                            ch = /*(char)('a' + subModeCh)*/ String.fromCharCode(97 + subModeCh);\n                        }\n                        else {\n                            switch (subModeCh) {\n                                case 26:\n                                    ch = ' ';\n                                    break;\n                                case DecodedBitStreamParser$2.AS:\n                                    // Shift to alpha\n                                    priorToShiftMode = subMode;\n                                    subMode = Mode$2.ALPHA_SHIFT;\n                                    break;\n                                case DecodedBitStreamParser$2.ML:\n                                    subMode = Mode$2.MIXED;\n                                    break;\n                                case DecodedBitStreamParser$2.PS:\n                                    // Shift to punctuation\n                                    priorToShiftMode = subMode;\n                                    subMode = Mode$2.PUNCT_SHIFT;\n                                    break;\n                                case DecodedBitStreamParser$2.MODE_SHIFT_TO_BYTE_COMPACTION_MODE:\n                                    // TODO Does this need to use the current character encoding? See other occurrences below\n                                    result.append(/*(char)*/ byteCompactionData[i]);\n                                    break;\n                                case DecodedBitStreamParser$2.TEXT_COMPACTION_MODE_LATCH:\n                                    subMode = Mode$2.ALPHA;\n                                    break;\n                            }\n                        }\n                        break;\n                    case Mode$2.MIXED:\n                        // Mixed (punctuation: e)\n                        if (subModeCh < DecodedBitStreamParser$2.PL) {\n                            ch = DecodedBitStreamParser$2.MIXED_CHARS[subModeCh];\n                        }\n                        else {\n                            switch (subModeCh) {\n                                case DecodedBitStreamParser$2.PL:\n                                    subMode = Mode$2.PUNCT;\n                                    break;\n                                case 26:\n                                    ch = ' ';\n                                    break;\n                                case DecodedBitStreamParser$2.LL:\n                                    subMode = Mode$2.LOWER;\n                                    break;\n                                case DecodedBitStreamParser$2.AL:\n                                    subMode = Mode$2.ALPHA;\n                                    break;\n                                case DecodedBitStreamParser$2.PS:\n                                    // Shift to punctuation\n                                    priorToShiftMode = subMode;\n                                    subMode = Mode$2.PUNCT_SHIFT;\n                                    break;\n                                case DecodedBitStreamParser$2.MODE_SHIFT_TO_BYTE_COMPACTION_MODE:\n                                    result.append(/*(char)*/ byteCompactionData[i]);\n                                    break;\n                                case DecodedBitStreamParser$2.TEXT_COMPACTION_MODE_LATCH:\n                                    subMode = Mode$2.ALPHA;\n                                    break;\n                            }\n                        }\n                        break;\n                    case Mode$2.PUNCT:\n                        // Punctuation\n                        if (subModeCh < DecodedBitStreamParser$2.PAL) {\n                            ch = DecodedBitStreamParser$2.PUNCT_CHARS[subModeCh];\n                        }\n                        else {\n                            switch (subModeCh) {\n                                case DecodedBitStreamParser$2.PAL:\n                                    subMode = Mode$2.ALPHA;\n                                    break;\n                                case DecodedBitStreamParser$2.MODE_SHIFT_TO_BYTE_COMPACTION_MODE:\n                                    result.append(/*(char)*/ byteCompactionData[i]);\n                                    break;\n                                case DecodedBitStreamParser$2.TEXT_COMPACTION_MODE_LATCH:\n                                    subMode = Mode$2.ALPHA;\n                                    break;\n                            }\n                        }\n                        break;\n                    case Mode$2.ALPHA_SHIFT:\n                        // Restore sub-mode\n                        subMode = priorToShiftMode;\n                        if (subModeCh < 26) {\n                            ch = /*(char)('A' + subModeCh)*/ String.fromCharCode(65 + subModeCh);\n                        }\n                        else {\n                            switch (subModeCh) {\n                                case 26:\n                                    ch = ' ';\n                                    break;\n                                case DecodedBitStreamParser$2.TEXT_COMPACTION_MODE_LATCH:\n                                    subMode = Mode$2.ALPHA;\n                                    break;\n                            }\n                        }\n                        break;\n                    case Mode$2.PUNCT_SHIFT:\n                        // Restore sub-mode\n                        subMode = priorToShiftMode;\n                        if (subModeCh < DecodedBitStreamParser$2.PAL) {\n                            ch = DecodedBitStreamParser$2.PUNCT_CHARS[subModeCh];\n                        }\n                        else {\n                            switch (subModeCh) {\n                                case DecodedBitStreamParser$2.PAL:\n                                    subMode = Mode$2.ALPHA;\n                                    break;\n                                case DecodedBitStreamParser$2.MODE_SHIFT_TO_BYTE_COMPACTION_MODE:\n                                    // PS before Shift-to-Byte is used as a padding character,\n                                    // see 5.4.2.4 of the specification\n                                    result.append(/*(char)*/ byteCompactionData[i]);\n                                    break;\n                                case DecodedBitStreamParser$2.TEXT_COMPACTION_MODE_LATCH:\n                                    subMode = Mode$2.ALPHA;\n                                    break;\n                            }\n                        }\n                        break;\n                }\n                // if (ch !== 0) {\n                if (ch !== '') {\n                    // Append decoded character to result\n                    result.append(ch);\n                }\n                i++;\n            }\n        }\n        /**\n         * Byte Compaction mode (see 5.4.3) permits all 256 possible 8-bit byte values to be encoded.\n         * This includes all ASCII characters value 0 to 127 inclusive and provides for international\n         * character set support.\n         *\n         * @param mode      The byte compaction mode i.e. 901 or 924\n         * @param codewords The array of codewords (data + error)\n         * @param encoding  Currently active character encoding\n         * @param codeIndex The current index into the codeword array.\n         * @param result    The decoded data is appended to the result.\n         * @return The next index into the codeword array.\n         */\n        static /*int*/ byteCompaction(mode, codewords, encoding, codeIndex, result) {\n            let decodedBytes = new ByteArrayOutputStream();\n            let count = 0;\n            let value = /*long*/ 0;\n            let end = false;\n            switch (mode) {\n                case DecodedBitStreamParser$2.BYTE_COMPACTION_MODE_LATCH:\n                    // Total number of Byte Compaction characters to be encoded\n                    // is not a multiple of 6\n                    let byteCompactedCodewords = new Int32Array(6);\n                    let nextCode = codewords[codeIndex++];\n                    while ((codeIndex < codewords[0]) && !end) {\n                        byteCompactedCodewords[count++] = nextCode;\n                        // Base 900\n                        value = 900 * value + nextCode;\n                        nextCode = codewords[codeIndex++];\n                        // perhaps it should be ok to check only nextCode >= TEXT_COMPACTION_MODE_LATCH\n                        switch (nextCode) {\n                            case DecodedBitStreamParser$2.TEXT_COMPACTION_MODE_LATCH:\n                            case DecodedBitStreamParser$2.BYTE_COMPACTION_MODE_LATCH:\n                            case DecodedBitStreamParser$2.NUMERIC_COMPACTION_MODE_LATCH:\n                            case DecodedBitStreamParser$2.BYTE_COMPACTION_MODE_LATCH_6:\n                            case DecodedBitStreamParser$2.BEGIN_MACRO_PDF417_CONTROL_BLOCK:\n                            case DecodedBitStreamParser$2.BEGIN_MACRO_PDF417_OPTIONAL_FIELD:\n                            case DecodedBitStreamParser$2.MACRO_PDF417_TERMINATOR:\n                                codeIndex--;\n                                end = true;\n                                break;\n                            default:\n                                if ((count % 5 === 0) && (count > 0)) {\n                                    // Decode every 5 codewords\n                                    // Convert to Base 256\n                                    for (let j /*int*/ = 0; j < 6; ++j) {\n                                        /* @note\n                                         * JavaScript stores numbers as 64 bits floating point numbers, but all bitwise operations are performed on 32 bits binary numbers.\n                                         * So the next bitwise operation could not be done with simple numbers\n                                         */\n                                        decodedBytes.write(/*(byte)*/ Number(createBigInt(value) >> createBigInt(8 * (5 - j))));\n                                    }\n                                    value = 0;\n                                    count = 0;\n                                }\n                                break;\n                        }\n                    }\n                    // if the end of all codewords is reached the last codeword needs to be added\n                    if (codeIndex === codewords[0] && nextCode < DecodedBitStreamParser$2.TEXT_COMPACTION_MODE_LATCH) {\n                        byteCompactedCodewords[count++] = nextCode;\n                    }\n                    // If Byte Compaction mode is invoked with codeword 901,\n                    // the last group of codewords is interpreted directly\n                    // as one byte per codeword, without compaction.\n                    for (let i /*int*/ = 0; i < count; i++) {\n                        decodedBytes.write(/*(byte)*/ byteCompactedCodewords[i]);\n                    }\n                    break;\n                case DecodedBitStreamParser$2.BYTE_COMPACTION_MODE_LATCH_6:\n                    // Total number of Byte Compaction characters to be encoded\n                    // is an integer multiple of 6\n                    while (codeIndex < codewords[0] && !end) {\n                        let code = codewords[codeIndex++];\n                        if (code < DecodedBitStreamParser$2.TEXT_COMPACTION_MODE_LATCH) {\n                            count++;\n                            // Base 900\n                            value = 900 * value + code;\n                        }\n                        else {\n                            switch (code) {\n                                case DecodedBitStreamParser$2.TEXT_COMPACTION_MODE_LATCH:\n                                case DecodedBitStreamParser$2.BYTE_COMPACTION_MODE_LATCH:\n                                case DecodedBitStreamParser$2.NUMERIC_COMPACTION_MODE_LATCH:\n                                case DecodedBitStreamParser$2.BYTE_COMPACTION_MODE_LATCH_6:\n                                case DecodedBitStreamParser$2.BEGIN_MACRO_PDF417_CONTROL_BLOCK:\n                                case DecodedBitStreamParser$2.BEGIN_MACRO_PDF417_OPTIONAL_FIELD:\n                                case DecodedBitStreamParser$2.MACRO_PDF417_TERMINATOR:\n                                    codeIndex--;\n                                    end = true;\n                                    break;\n                            }\n                        }\n                        if ((count % 5 === 0) && (count > 0)) {\n                            // Decode every 5 codewords\n                            // Convert to Base 256\n                            /* @note\n                             * JavaScript stores numbers as 64 bits floating point numbers, but all bitwise operations are performed on 32 bits binary numbers.\n                             * So the next bitwise operation could not be done with simple numbers\n                            */\n                            for (let j /*int*/ = 0; j < 6; ++j) {\n                                decodedBytes.write(/*(byte)*/ Number(createBigInt(value) >> createBigInt(8 * (5 - j))));\n                            }\n                            value = 0;\n                            count = 0;\n                        }\n                    }\n                    break;\n            }\n            result.append(StringEncoding.decode(decodedBytes.toByteArray(), encoding));\n            return codeIndex;\n        }\n        /**\n         * Numeric Compaction mode (see 5.4.4) permits efficient encoding of numeric data strings.\n         *\n         * @param codewords The array of codewords (data + error)\n         * @param codeIndex The current index into the codeword array.\n         * @param result    The decoded data is appended to the result.\n         * @return The next index into the codeword array.\n         *\n         * @throws FormatException\n         */\n        static numericCompaction(codewords, codeIndex /*int*/, result) {\n            let count = 0;\n            let end = false;\n            let numericCodewords = new Int32Array(DecodedBitStreamParser$2.MAX_NUMERIC_CODEWORDS);\n            while (codeIndex < codewords[0] && !end) {\n                let code = codewords[codeIndex++];\n                if (codeIndex === codewords[0]) {\n                    end = true;\n                }\n                if (code < DecodedBitStreamParser$2.TEXT_COMPACTION_MODE_LATCH) {\n                    numericCodewords[count] = code;\n                    count++;\n                }\n                else {\n                    switch (code) {\n                        case DecodedBitStreamParser$2.TEXT_COMPACTION_MODE_LATCH:\n                        case DecodedBitStreamParser$2.BYTE_COMPACTION_MODE_LATCH:\n                        case DecodedBitStreamParser$2.BYTE_COMPACTION_MODE_LATCH_6:\n                        case DecodedBitStreamParser$2.BEGIN_MACRO_PDF417_CONTROL_BLOCK:\n                        case DecodedBitStreamParser$2.BEGIN_MACRO_PDF417_OPTIONAL_FIELD:\n                        case DecodedBitStreamParser$2.MACRO_PDF417_TERMINATOR:\n                            codeIndex--;\n                            end = true;\n                            break;\n                    }\n                }\n                if ((count % DecodedBitStreamParser$2.MAX_NUMERIC_CODEWORDS === 0 || code === DecodedBitStreamParser$2.NUMERIC_COMPACTION_MODE_LATCH || end) && count > 0) {\n                    // Re-invoking Numeric Compaction mode (by using codeword 902\n                    // while in Numeric Compaction mode) serves  to terminate the\n                    // current Numeric Compaction mode grouping as described in 5.4.4.2,\n                    // and then to start a new one grouping.\n                    result.append(DecodedBitStreamParser$2.decodeBase900toBase10(numericCodewords, count));\n                    count = 0;\n                }\n            }\n            return codeIndex;\n        }\n        /**\n         * Convert a list of Numeric Compacted codewords from Base 900 to Base 10.\n         *\n         * @param codewords The array of codewords\n         * @param count     The number of codewords\n         * @return The decoded string representing the Numeric data.\n         *\n         * EXAMPLE\n         * Encode the fifteen digit numeric string 000213298174000\n         * Prefix the numeric string with a 1 and set the initial value of\n         * t = 1 000 213 298 174 000\n         * Calculate codeword 0\n         * d0 = 1 000 213 298 174 000 mod 900 = 200\n         *\n         * t = 1 000 213 298 174 000 div 900 = 1 111 348 109 082\n         * Calculate codeword 1\n         * d1 = 1 111 348 109 082 mod 900 = 282\n         *\n         * t = 1 111 348 109 082 div 900 = 1 234 831 232\n         * Calculate codeword 2\n         * d2 = 1 234 831 232 mod 900 = 632\n         *\n         * t = 1 234 831 232 div 900 = 1 372 034\n         * Calculate codeword 3\n         * d3 = 1 372 034 mod 900 = 434\n         *\n         * t = 1 372 034 div 900 = 1 524\n         * Calculate codeword 4\n         * d4 = 1 524 mod 900 = 624\n         *\n         * t = 1 524 div 900 = 1\n         * Calculate codeword 5\n         * d5 = 1 mod 900 = 1\n         * t = 1 div 900 = 0\n         * Codeword sequence is: 1, 624, 434, 632, 282, 200\n         *\n         * Decode the above codewords involves\n         *   1 x 900 power of 5 + 624 x 900 power of 4 + 434 x 900 power of 3 +\n         * 632 x 900 power of 2 + 282 x 900 power of 1 + 200 x 900 power of 0 = 1000213298174000\n         *\n         * Remove leading 1 =>  Result is 000213298174000\n         *\n         * @throws FormatException\n         */\n        static decodeBase900toBase10(codewords, count) {\n            let result = createBigInt(0);\n            for (let i /*int*/ = 0; i < count; i++) {\n                result += DecodedBitStreamParser$2.EXP900[count - i - 1] * createBigInt(codewords[i]);\n            }\n            let resultString = result.toString();\n            if (resultString.charAt(0) !== '1') {\n                throw new FormatException();\n            }\n            return resultString.substring(1);\n        }\n    }\n    DecodedBitStreamParser$2.TEXT_COMPACTION_MODE_LATCH = 900;\n    DecodedBitStreamParser$2.BYTE_COMPACTION_MODE_LATCH = 901;\n    DecodedBitStreamParser$2.NUMERIC_COMPACTION_MODE_LATCH = 902;\n    DecodedBitStreamParser$2.BYTE_COMPACTION_MODE_LATCH_6 = 924;\n    DecodedBitStreamParser$2.ECI_USER_DEFINED = 925;\n    DecodedBitStreamParser$2.ECI_GENERAL_PURPOSE = 926;\n    DecodedBitStreamParser$2.ECI_CHARSET = 927;\n    DecodedBitStreamParser$2.BEGIN_MACRO_PDF417_CONTROL_BLOCK = 928;\n    DecodedBitStreamParser$2.BEGIN_MACRO_PDF417_OPTIONAL_FIELD = 923;\n    DecodedBitStreamParser$2.MACRO_PDF417_TERMINATOR = 922;\n    DecodedBitStreamParser$2.MODE_SHIFT_TO_BYTE_COMPACTION_MODE = 913;\n    DecodedBitStreamParser$2.MAX_NUMERIC_CODEWORDS = 15;\n    DecodedBitStreamParser$2.MACRO_PDF417_OPTIONAL_FIELD_FILE_NAME = 0;\n    DecodedBitStreamParser$2.MACRO_PDF417_OPTIONAL_FIELD_SEGMENT_COUNT = 1;\n    DecodedBitStreamParser$2.MACRO_PDF417_OPTIONAL_FIELD_TIME_STAMP = 2;\n    DecodedBitStreamParser$2.MACRO_PDF417_OPTIONAL_FIELD_SENDER = 3;\n    DecodedBitStreamParser$2.MACRO_PDF417_OPTIONAL_FIELD_ADDRESSEE = 4;\n    DecodedBitStreamParser$2.MACRO_PDF417_OPTIONAL_FIELD_FILE_SIZE = 5;\n    DecodedBitStreamParser$2.MACRO_PDF417_OPTIONAL_FIELD_CHECKSUM = 6;\n    DecodedBitStreamParser$2.PL = 25;\n    DecodedBitStreamParser$2.LL = 27;\n    DecodedBitStreamParser$2.AS = 27;\n    DecodedBitStreamParser$2.ML = 28;\n    DecodedBitStreamParser$2.AL = 28;\n    DecodedBitStreamParser$2.PS = 29;\n    DecodedBitStreamParser$2.PAL = 29;\n    DecodedBitStreamParser$2.PUNCT_CHARS = ';<>@[\\\\]_`~!\\r\\t,:\\n-.$/\"|*()?{}\\'';\n    DecodedBitStreamParser$2.MIXED_CHARS = '0123456789&\\r\\t,:#-.$/+%*=^';\n    /**\n     * Table containing values for the exponent of 900.\n     * This is used in the numeric compaction decode algorithm.\n     */\n    DecodedBitStreamParser$2.EXP900 = getBigIntConstructor() ? getEXP900() : [];\n    DecodedBitStreamParser$2.NUMBER_OF_SEQUENCE_CODEWORDS = 2;\n\n    /*\n    * Copyright 2013 ZXing authors\n    *\n    * Licensed under the Apache License, Version 2.0 (the \"License\");\n    * you may not use this file except in compliance with the License.\n    * You may obtain a copy of the License at\n    *\n    *      http://www.apache.org/licenses/LICENSE-2.0\n    *\n    * Unless required by applicable law or agreed to in writing, software\n    * distributed under the License is distributed on an \"AS IS\" BASIS,\n    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    * See the License for the specific language governing permissions and\n    * limitations under the License.\n    */\n    // import java.util.ArrayList;\n    // import java.util.Collection;\n    // import java.util.Formatter;\n    // import java.util.List;\n    /**\n     * @author Guenther Grau\n     */\n    /*public final*/ class PDF417ScanningDecoder {\n        constructor() { }\n        /**\n         * @TODO don't pass in minCodewordWidth and maxCodewordWidth, pass in barcode columns for start and stop pattern\n         *\n         * columns. That way width can be deducted from the pattern column.\n         * This approach also allows to detect more details about the barcode, e.g. if a bar type (white or black) is wider\n         * than it should be. This can happen if the scanner used a bad blackpoint.\n         *\n         * @param BitMatrix\n         * @param image\n         * @param ResultPoint\n         * @param imageTopLeft\n         * @param ResultPoint\n         * @param imageBottomLeft\n         * @param ResultPoint\n         * @param imageTopRight\n         * @param ResultPoint\n         * @param imageBottomRight\n         * @param int\n         * @param minCodewordWidth\n         * @param int\n         * @param maxCodewordWidth\n         *\n         * @throws NotFoundException\n         * @throws FormatException\n         * @throws ChecksumException\n         */\n        static decode(image, imageTopLeft, imageBottomLeft, imageTopRight, imageBottomRight, minCodewordWidth, maxCodewordWidth) {\n            let boundingBox = new BoundingBox(image, imageTopLeft, imageBottomLeft, imageTopRight, imageBottomRight);\n            let leftRowIndicatorColumn = null;\n            let rightRowIndicatorColumn = null;\n            let detectionResult;\n            for (let firstPass /*boolean*/ = true;; firstPass = false) {\n                if (imageTopLeft != null) {\n                    leftRowIndicatorColumn = PDF417ScanningDecoder.getRowIndicatorColumn(image, boundingBox, imageTopLeft, true, minCodewordWidth, maxCodewordWidth);\n                }\n                if (imageTopRight != null) {\n                    rightRowIndicatorColumn = PDF417ScanningDecoder.getRowIndicatorColumn(image, boundingBox, imageTopRight, false, minCodewordWidth, maxCodewordWidth);\n                }\n                detectionResult = PDF417ScanningDecoder.merge(leftRowIndicatorColumn, rightRowIndicatorColumn);\n                if (detectionResult == null) {\n                    throw NotFoundException.getNotFoundInstance();\n                }\n                let resultBox = detectionResult.getBoundingBox();\n                if (firstPass && resultBox != null &&\n                    (resultBox.getMinY() < boundingBox.getMinY() || resultBox.getMaxY() > boundingBox.getMaxY())) {\n                    boundingBox = resultBox;\n                }\n                else {\n                    break;\n                }\n            }\n            detectionResult.setBoundingBox(boundingBox);\n            let maxBarcodeColumn = detectionResult.getBarcodeColumnCount() + 1;\n            detectionResult.setDetectionResultColumn(0, leftRowIndicatorColumn);\n            detectionResult.setDetectionResultColumn(maxBarcodeColumn, rightRowIndicatorColumn);\n            let leftToRight = leftRowIndicatorColumn != null;\n            for (let barcodeColumnCount /*int*/ = 1; barcodeColumnCount <= maxBarcodeColumn; barcodeColumnCount++) {\n                let barcodeColumn = leftToRight ? barcodeColumnCount : maxBarcodeColumn - barcodeColumnCount;\n                if (detectionResult.getDetectionResultColumn(barcodeColumn) !== /* null */ undefined) {\n                    // This will be the case for the opposite row indicator column, which doesn't need to be decoded again.\n                    continue;\n                }\n                let detectionResultColumn;\n                if (barcodeColumn === 0 || barcodeColumn === maxBarcodeColumn) {\n                    detectionResultColumn = new DetectionResultRowIndicatorColumn(boundingBox, barcodeColumn === 0);\n                }\n                else {\n                    detectionResultColumn = new DetectionResultColumn(boundingBox);\n                }\n                detectionResult.setDetectionResultColumn(barcodeColumn, detectionResultColumn);\n                let startColumn = -1;\n                let previousStartColumn = startColumn;\n                // TODO start at a row for which we know the start position, then detect upwards and downwards from there.\n                for (let imageRow /*int*/ = boundingBox.getMinY(); imageRow <= boundingBox.getMaxY(); imageRow++) {\n                    startColumn = PDF417ScanningDecoder.getStartColumn(detectionResult, barcodeColumn, imageRow, leftToRight);\n                    if (startColumn < 0 || startColumn > boundingBox.getMaxX()) {\n                        if (previousStartColumn === -1) {\n                            continue;\n                        }\n                        startColumn = previousStartColumn;\n                    }\n                    let codeword = PDF417ScanningDecoder.detectCodeword(image, boundingBox.getMinX(), boundingBox.getMaxX(), leftToRight, startColumn, imageRow, minCodewordWidth, maxCodewordWidth);\n                    if (codeword != null) {\n                        detectionResultColumn.setCodeword(imageRow, codeword);\n                        previousStartColumn = startColumn;\n                        minCodewordWidth = Math.min(minCodewordWidth, codeword.getWidth());\n                        maxCodewordWidth = Math.max(maxCodewordWidth, codeword.getWidth());\n                    }\n                }\n            }\n            return PDF417ScanningDecoder.createDecoderResult(detectionResult);\n        }\n        /**\n         *\n         * @param leftRowIndicatorColumn\n         * @param rightRowIndicatorColumn\n         *\n         * @throws NotFoundException\n         */\n        static merge(leftRowIndicatorColumn, rightRowIndicatorColumn) {\n            if (leftRowIndicatorColumn == null && rightRowIndicatorColumn == null) {\n                return null;\n            }\n            let barcodeMetadata = PDF417ScanningDecoder.getBarcodeMetadata(leftRowIndicatorColumn, rightRowIndicatorColumn);\n            if (barcodeMetadata == null) {\n                return null;\n            }\n            let boundingBox = BoundingBox.merge(PDF417ScanningDecoder.adjustBoundingBox(leftRowIndicatorColumn), PDF417ScanningDecoder.adjustBoundingBox(rightRowIndicatorColumn));\n            return new DetectionResult(barcodeMetadata, boundingBox);\n        }\n        /**\n         *\n         * @param rowIndicatorColumn\n         *\n         * @throws NotFoundException\n         */\n        static adjustBoundingBox(rowIndicatorColumn) {\n            if (rowIndicatorColumn == null) {\n                return null;\n            }\n            let rowHeights = rowIndicatorColumn.getRowHeights();\n            if (rowHeights == null) {\n                return null;\n            }\n            let maxRowHeight = PDF417ScanningDecoder.getMax(rowHeights);\n            let missingStartRows = 0;\n            for (let rowHeight /*int*/ of rowHeights) {\n                missingStartRows += maxRowHeight - rowHeight;\n                if (rowHeight > 0) {\n                    break;\n                }\n            }\n            let codewords = rowIndicatorColumn.getCodewords();\n            for (let row /*int*/ = 0; missingStartRows > 0 && codewords[row] == null; row++) {\n                missingStartRows--;\n            }\n            let missingEndRows = 0;\n            for (let row /*int*/ = rowHeights.length - 1; row >= 0; row--) {\n                missingEndRows += maxRowHeight - rowHeights[row];\n                if (rowHeights[row] > 0) {\n                    break;\n                }\n            }\n            for (let row /*int*/ = codewords.length - 1; missingEndRows > 0 && codewords[row] == null; row--) {\n                missingEndRows--;\n            }\n            return rowIndicatorColumn.getBoundingBox().addMissingRows(missingStartRows, missingEndRows, rowIndicatorColumn.isLeft());\n        }\n        static getMax(values) {\n            let maxValue = -1;\n            for (let value /*int*/ of values) {\n                maxValue = Math.max(maxValue, value);\n            }\n            return maxValue;\n        }\n        static getBarcodeMetadata(leftRowIndicatorColumn, rightRowIndicatorColumn) {\n            let leftBarcodeMetadata;\n            if (leftRowIndicatorColumn == null ||\n                (leftBarcodeMetadata = leftRowIndicatorColumn.getBarcodeMetadata()) == null) {\n                return rightRowIndicatorColumn == null ? null : rightRowIndicatorColumn.getBarcodeMetadata();\n            }\n            let rightBarcodeMetadata;\n            if (rightRowIndicatorColumn == null ||\n                (rightBarcodeMetadata = rightRowIndicatorColumn.getBarcodeMetadata()) == null) {\n                return leftBarcodeMetadata;\n            }\n            if (leftBarcodeMetadata.getColumnCount() !== rightBarcodeMetadata.getColumnCount() &&\n                leftBarcodeMetadata.getErrorCorrectionLevel() !== rightBarcodeMetadata.getErrorCorrectionLevel() &&\n                leftBarcodeMetadata.getRowCount() !== rightBarcodeMetadata.getRowCount()) {\n                return null;\n            }\n            return leftBarcodeMetadata;\n        }\n        static getRowIndicatorColumn(image, boundingBox, startPoint, leftToRight, minCodewordWidth, maxCodewordWidth) {\n            let rowIndicatorColumn = new DetectionResultRowIndicatorColumn(boundingBox, leftToRight);\n            for (let i /*int*/ = 0; i < 2; i++) {\n                let increment = i === 0 ? 1 : -1;\n                let startColumn = Math.trunc(Math.trunc(startPoint.getX()));\n                for (let imageRow /*int*/ = Math.trunc(Math.trunc(startPoint.getY())); imageRow <= boundingBox.getMaxY() &&\n                    imageRow >= boundingBox.getMinY(); imageRow += increment) {\n                    let codeword = PDF417ScanningDecoder.detectCodeword(image, 0, image.getWidth(), leftToRight, startColumn, imageRow, minCodewordWidth, maxCodewordWidth);\n                    if (codeword != null) {\n                        rowIndicatorColumn.setCodeword(imageRow, codeword);\n                        if (leftToRight) {\n                            startColumn = codeword.getStartX();\n                        }\n                        else {\n                            startColumn = codeword.getEndX();\n                        }\n                    }\n                }\n            }\n            return rowIndicatorColumn;\n        }\n        /**\n         *\n         * @param detectionResult\n         * @param BarcodeValue\n         * @param param2\n         * @param param3\n         * @param barcodeMatrix\n         *\n         * @throws NotFoundException\n         */\n        static adjustCodewordCount(detectionResult, barcodeMatrix) {\n            let barcodeMatrix01 = barcodeMatrix[0][1];\n            let numberOfCodewords = barcodeMatrix01.getValue();\n            let calculatedNumberOfCodewords = detectionResult.getBarcodeColumnCount() *\n                detectionResult.getBarcodeRowCount() -\n                PDF417ScanningDecoder.getNumberOfECCodeWords(detectionResult.getBarcodeECLevel());\n            if (numberOfCodewords.length === 0) {\n                if (calculatedNumberOfCodewords < 1 || calculatedNumberOfCodewords > PDF417Common.MAX_CODEWORDS_IN_BARCODE) {\n                    throw NotFoundException.getNotFoundInstance();\n                }\n                barcodeMatrix01.setValue(calculatedNumberOfCodewords);\n            }\n            else if (numberOfCodewords[0] !== calculatedNumberOfCodewords) {\n                // The calculated one is more reliable as it is derived from the row indicator columns\n                barcodeMatrix01.setValue(calculatedNumberOfCodewords);\n            }\n        }\n        /**\n         *\n         * @param detectionResult\n         *\n         * @throws FormatException\n         * @throws ChecksumException\n         * @throws NotFoundException\n         */\n        static createDecoderResult(detectionResult) {\n            let barcodeMatrix = PDF417ScanningDecoder.createBarcodeMatrix(detectionResult);\n            PDF417ScanningDecoder.adjustCodewordCount(detectionResult, barcodeMatrix);\n            let erasures /*Collection<Integer>*/ = new Array();\n            let codewords = new Int32Array(detectionResult.getBarcodeRowCount() * detectionResult.getBarcodeColumnCount());\n            let ambiguousIndexValuesList = /*List<int[]>*/ [];\n            let ambiguousIndexesList = /*Collection<Integer>*/ new Array();\n            for (let row /*int*/ = 0; row < detectionResult.getBarcodeRowCount(); row++) {\n                for (let column /*int*/ = 0; column < detectionResult.getBarcodeColumnCount(); column++) {\n                    let values = barcodeMatrix[row][column + 1].getValue();\n                    let codewordIndex = row * detectionResult.getBarcodeColumnCount() + column;\n                    if (values.length === 0) {\n                        erasures.push(codewordIndex);\n                    }\n                    else if (values.length === 1) {\n                        codewords[codewordIndex] = values[0];\n                    }\n                    else {\n                        ambiguousIndexesList.push(codewordIndex);\n                        ambiguousIndexValuesList.push(values);\n                    }\n                }\n            }\n            let ambiguousIndexValues = new Array(ambiguousIndexValuesList.length);\n            for (let i /*int*/ = 0; i < ambiguousIndexValues.length; i++) {\n                ambiguousIndexValues[i] = ambiguousIndexValuesList[i];\n            }\n            return PDF417ScanningDecoder.createDecoderResultFromAmbiguousValues(detectionResult.getBarcodeECLevel(), codewords, PDF417Common.toIntArray(erasures), PDF417Common.toIntArray(ambiguousIndexesList), ambiguousIndexValues);\n        }\n        /**\n         * This method deals with the fact, that the decoding process doesn't always yield a single most likely value. The\n         * current error correction implementation doesn't deal with erasures very well, so it's better to provide a value\n         * for these ambiguous codewords instead of treating it as an erasure. The problem is that we don't know which of\n         * the ambiguous values to choose. We try decode using the first value, and if that fails, we use another of the\n         * ambiguous values and try to decode again. This usually only happens on very hard to read and decode barcodes,\n         * so decoding the normal barcodes is not affected by this.\n         *\n         * @param erasureArray contains the indexes of erasures\n         * @param ambiguousIndexes array with the indexes that have more than one most likely value\n         * @param ambiguousIndexValues two dimensional array that contains the ambiguous values. The first dimension must\n         * be the same length as the ambiguousIndexes array\n         *\n         * @throws FormatException\n         * @throws ChecksumException\n         */\n        static createDecoderResultFromAmbiguousValues(ecLevel, codewords, erasureArray, ambiguousIndexes, ambiguousIndexValues) {\n            let ambiguousIndexCount = new Int32Array(ambiguousIndexes.length);\n            let tries = 100;\n            while (tries-- > 0) {\n                for (let i /*int*/ = 0; i < ambiguousIndexCount.length; i++) {\n                    codewords[ambiguousIndexes[i]] = ambiguousIndexValues[i][ambiguousIndexCount[i]];\n                }\n                try {\n                    return PDF417ScanningDecoder.decodeCodewords(codewords, ecLevel, erasureArray);\n                }\n                catch (err) {\n                    let ignored = err instanceof ChecksumException;\n                    if (!ignored) {\n                        throw err;\n                    }\n                }\n                if (ambiguousIndexCount.length === 0) {\n                    throw ChecksumException.getChecksumInstance();\n                }\n                for (let i /*int*/ = 0; i < ambiguousIndexCount.length; i++) {\n                    if (ambiguousIndexCount[i] < ambiguousIndexValues[i].length - 1) {\n                        ambiguousIndexCount[i]++;\n                        break;\n                    }\n                    else {\n                        ambiguousIndexCount[i] = 0;\n                        if (i === ambiguousIndexCount.length - 1) {\n                            throw ChecksumException.getChecksumInstance();\n                        }\n                    }\n                }\n            }\n            throw ChecksumException.getChecksumInstance();\n        }\n        static createBarcodeMatrix(detectionResult) {\n            // let barcodeMatrix: BarcodeValue[][] =\n            // new BarcodeValue[detectionResult.getBarcodeRowCount()][detectionResult.getBarcodeColumnCount() + 2];\n            let barcodeMatrix = Array.from({ length: detectionResult.getBarcodeRowCount() }, () => new Array(detectionResult.getBarcodeColumnCount() + 2));\n            for (let row /*int*/ = 0; row < barcodeMatrix.length; row++) {\n                for (let column /*int*/ = 0; column < barcodeMatrix[row].length; column++) {\n                    barcodeMatrix[row][column] = new BarcodeValue();\n                }\n            }\n            let column = 0;\n            for (let detectionResultColumn /*DetectionResultColumn*/ of detectionResult.getDetectionResultColumns()) {\n                if (detectionResultColumn != null) {\n                    for (let codeword /*Codeword*/ of detectionResultColumn.getCodewords()) {\n                        if (codeword != null) {\n                            let rowNumber = codeword.getRowNumber();\n                            if (rowNumber >= 0) {\n                                if (rowNumber >= barcodeMatrix.length) {\n                                    // We have more rows than the barcode metadata allows for, ignore them.\n                                    continue;\n                                }\n                                barcodeMatrix[rowNumber][column].setValue(codeword.getValue());\n                            }\n                        }\n                    }\n                }\n                column++;\n            }\n            return barcodeMatrix;\n        }\n        static isValidBarcodeColumn(detectionResult, barcodeColumn) {\n            return barcodeColumn >= 0 && barcodeColumn <= detectionResult.getBarcodeColumnCount() + 1;\n        }\n        static getStartColumn(detectionResult, barcodeColumn, imageRow, leftToRight) {\n            let offset = leftToRight ? 1 : -1;\n            let codeword = null;\n            if (PDF417ScanningDecoder.isValidBarcodeColumn(detectionResult, barcodeColumn - offset)) {\n                codeword = detectionResult.getDetectionResultColumn(barcodeColumn - offset).getCodeword(imageRow);\n            }\n            if (codeword != null) {\n                return leftToRight ? codeword.getEndX() : codeword.getStartX();\n            }\n            codeword = detectionResult.getDetectionResultColumn(barcodeColumn).getCodewordNearby(imageRow);\n            if (codeword != null) {\n                return leftToRight ? codeword.getStartX() : codeword.getEndX();\n            }\n            if (PDF417ScanningDecoder.isValidBarcodeColumn(detectionResult, barcodeColumn - offset)) {\n                codeword = detectionResult.getDetectionResultColumn(barcodeColumn - offset).getCodewordNearby(imageRow);\n            }\n            if (codeword != null) {\n                return leftToRight ? codeword.getEndX() : codeword.getStartX();\n            }\n            let skippedColumns = 0;\n            while (PDF417ScanningDecoder.isValidBarcodeColumn(detectionResult, barcodeColumn - offset)) {\n                barcodeColumn -= offset;\n                for (let previousRowCodeword /*Codeword*/ of detectionResult.getDetectionResultColumn(barcodeColumn).getCodewords()) {\n                    if (previousRowCodeword != null) {\n                        return (leftToRight ? previousRowCodeword.getEndX() : previousRowCodeword.getStartX()) +\n                            offset *\n                                skippedColumns *\n                                (previousRowCodeword.getEndX() - previousRowCodeword.getStartX());\n                    }\n                }\n                skippedColumns++;\n            }\n            return leftToRight ? detectionResult.getBoundingBox().getMinX() : detectionResult.getBoundingBox().getMaxX();\n        }\n        static detectCodeword(image, minColumn, maxColumn, leftToRight, startColumn, imageRow, minCodewordWidth, maxCodewordWidth) {\n            startColumn = PDF417ScanningDecoder.adjustCodewordStartColumn(image, minColumn, maxColumn, leftToRight, startColumn, imageRow);\n            // we usually know fairly exact now how long a codeword is. We should provide minimum and maximum expected length\n            // and try to adjust the read pixels, e.g. remove single pixel errors or try to cut off exceeding pixels.\n            // min and maxCodewordWidth should not be used as they are calculated for the whole barcode an can be inaccurate\n            // for the current position\n            let moduleBitCount = PDF417ScanningDecoder.getModuleBitCount(image, minColumn, maxColumn, leftToRight, startColumn, imageRow);\n            if (moduleBitCount == null) {\n                return null;\n            }\n            let endColumn;\n            let codewordBitCount = MathUtils.sum(moduleBitCount);\n            if (leftToRight) {\n                endColumn = startColumn + codewordBitCount;\n            }\n            else {\n                for (let i /*int*/ = 0; i < moduleBitCount.length / 2; i++) {\n                    let tmpCount = moduleBitCount[i];\n                    moduleBitCount[i] = moduleBitCount[moduleBitCount.length - 1 - i];\n                    moduleBitCount[moduleBitCount.length - 1 - i] = tmpCount;\n                }\n                endColumn = startColumn;\n                startColumn = endColumn - codewordBitCount;\n            }\n            // TODO implement check for width and correction of black and white bars\n            // use start (and maybe stop pattern) to determine if black bars are wider than white bars. If so, adjust.\n            // should probably done only for codewords with a lot more than 17 bits.\n            // The following fixes 10-1.png, which has wide black bars and small white bars\n            //    for (let i /*int*/ = 0; i < moduleBitCount.length; i++) {\n            //      if (i % 2 === 0) {\n            //        moduleBitCount[i]--;\n            //      } else {\n            //        moduleBitCount[i]++;\n            //      }\n            //    }\n            // We could also use the width of surrounding codewords for more accurate results, but this seems\n            // sufficient for now\n            if (!PDF417ScanningDecoder.checkCodewordSkew(codewordBitCount, minCodewordWidth, maxCodewordWidth)) {\n                // We could try to use the startX and endX position of the codeword in the same column in the previous row,\n                // create the bit count from it and normalize it to 8. This would help with single pixel errors.\n                return null;\n            }\n            let decodedValue = PDF417CodewordDecoder.getDecodedValue(moduleBitCount);\n            let codeword = PDF417Common.getCodeword(decodedValue);\n            if (codeword === -1) {\n                return null;\n            }\n            return new Codeword(startColumn, endColumn, PDF417ScanningDecoder.getCodewordBucketNumber(decodedValue), codeword);\n        }\n        static getModuleBitCount(image, minColumn, maxColumn, leftToRight, startColumn, imageRow) {\n            let imageColumn = startColumn;\n            let moduleBitCount = new Int32Array(8);\n            let moduleNumber = 0;\n            let increment = leftToRight ? 1 : -1;\n            let previousPixelValue = leftToRight;\n            while ((leftToRight ? imageColumn < maxColumn : imageColumn >= minColumn) &&\n                moduleNumber < moduleBitCount.length) {\n                if (image.get(imageColumn, imageRow) === previousPixelValue) {\n                    moduleBitCount[moduleNumber]++;\n                    imageColumn += increment;\n                }\n                else {\n                    moduleNumber++;\n                    previousPixelValue = !previousPixelValue;\n                }\n            }\n            if (moduleNumber === moduleBitCount.length ||\n                ((imageColumn === (leftToRight ? maxColumn : minColumn)) &&\n                    moduleNumber === moduleBitCount.length - 1)) {\n                return moduleBitCount;\n            }\n            return null;\n        }\n        static getNumberOfECCodeWords(barcodeECLevel) {\n            return 2 << barcodeECLevel;\n        }\n        static adjustCodewordStartColumn(image, minColumn, maxColumn, leftToRight, codewordStartColumn, imageRow) {\n            let correctedStartColumn = codewordStartColumn;\n            let increment = leftToRight ? -1 : 1;\n            // there should be no black pixels before the start column. If there are, then we need to start earlier.\n            for (let i /*int*/ = 0; i < 2; i++) {\n                while ((leftToRight ? correctedStartColumn >= minColumn : correctedStartColumn < maxColumn) &&\n                    leftToRight === image.get(correctedStartColumn, imageRow)) {\n                    if (Math.abs(codewordStartColumn - correctedStartColumn) > PDF417ScanningDecoder.CODEWORD_SKEW_SIZE) {\n                        return codewordStartColumn;\n                    }\n                    correctedStartColumn += increment;\n                }\n                increment = -increment;\n                leftToRight = !leftToRight;\n            }\n            return correctedStartColumn;\n        }\n        static checkCodewordSkew(codewordSize, minCodewordWidth, maxCodewordWidth) {\n            return minCodewordWidth - PDF417ScanningDecoder.CODEWORD_SKEW_SIZE <= codewordSize &&\n                codewordSize <= maxCodewordWidth + PDF417ScanningDecoder.CODEWORD_SKEW_SIZE;\n        }\n        /**\n         * @throws FormatException,\n         * @throws ChecksumException\n         */\n        static decodeCodewords(codewords, ecLevel, erasures) {\n            if (codewords.length === 0) {\n                throw FormatException.getFormatInstance();\n            }\n            let numECCodewords = 1 << (ecLevel + 1);\n            let correctedErrorsCount = PDF417ScanningDecoder.correctErrors(codewords, erasures, numECCodewords);\n            PDF417ScanningDecoder.verifyCodewordCount(codewords, numECCodewords);\n            // Decode the codewords\n            let decoderResult = DecodedBitStreamParser$2.decode(codewords, '' + ecLevel);\n            decoderResult.setErrorsCorrected(correctedErrorsCount);\n            decoderResult.setErasures(erasures.length);\n            return decoderResult;\n        }\n        /**\n         * <p>Given data and error-correction codewords received, possibly corrupted by errors, attempts to\n         * correct the errors in-place.</p>\n         *\n         * @param codewords   data and error correction codewords\n         * @param erasures positions of any known erasures\n         * @param numECCodewords number of error correction codewords that are available in codewords\n         * @throws ChecksumException if error correction fails\n         */\n        static correctErrors(codewords, erasures, numECCodewords) {\n            if (erasures != null &&\n                erasures.length > numECCodewords / 2 + PDF417ScanningDecoder.MAX_ERRORS ||\n                numECCodewords < 0 ||\n                numECCodewords > PDF417ScanningDecoder.MAX_EC_CODEWORDS) {\n                // Too many errors or EC Codewords is corrupted\n                throw ChecksumException.getChecksumInstance();\n            }\n            return PDF417ScanningDecoder.errorCorrection.decode(codewords, numECCodewords, erasures);\n        }\n        /**\n         * Verify that all is OK with the codeword array.\n         * @throws FormatException\n         */\n        static verifyCodewordCount(codewords, numECCodewords) {\n            if (codewords.length < 4) {\n                // Codeword array size should be at least 4 allowing for\n                // Count CW, At least one Data CW, Error Correction CW, Error Correction CW\n                throw FormatException.getFormatInstance();\n            }\n            // The first codeword, the Symbol Length Descriptor, shall always encode the total number of data\n            // codewords in the symbol, including the Symbol Length Descriptor itself, data codewords and pad\n            // codewords, but excluding the number of error correction codewords.\n            let numberOfCodewords = codewords[0];\n            if (numberOfCodewords > codewords.length) {\n                throw FormatException.getFormatInstance();\n            }\n            if (numberOfCodewords === 0) {\n                // Reset to the length of the array - 8 (Allow for at least level 3 Error Correction (8 Error Codewords)\n                if (numECCodewords < codewords.length) {\n                    codewords[0] = codewords.length - numECCodewords;\n                }\n                else {\n                    throw FormatException.getFormatInstance();\n                }\n            }\n        }\n        static getBitCountForCodeword(codeword) {\n            let result = new Int32Array(8);\n            let previousValue = 0;\n            let i = result.length - 1;\n            while (true) {\n                if ((codeword & 0x1) !== previousValue) {\n                    previousValue = codeword & 0x1;\n                    i--;\n                    if (i < 0) {\n                        break;\n                    }\n                }\n                result[i]++;\n                codeword >>= 1;\n            }\n            return result;\n        }\n        static getCodewordBucketNumber(codeword) {\n            if (codeword instanceof Int32Array) {\n                return this.getCodewordBucketNumber_Int32Array(codeword);\n            }\n            return this.getCodewordBucketNumber_number(codeword);\n        }\n        static getCodewordBucketNumber_number(codeword) {\n            return PDF417ScanningDecoder.getCodewordBucketNumber(PDF417ScanningDecoder.getBitCountForCodeword(codeword));\n        }\n        static getCodewordBucketNumber_Int32Array(moduleBitCount) {\n            return (moduleBitCount[0] - moduleBitCount[2] + moduleBitCount[4] - moduleBitCount[6] + 9) % 9;\n        }\n        static toString(barcodeMatrix) {\n            let formatter = new Formatter();\n            // try (let formatter = new Formatter()) {\n            for (let row /*int*/ = 0; row < barcodeMatrix.length; row++) {\n                formatter.format('Row %2d: ', row);\n                for (let column /*int*/ = 0; column < barcodeMatrix[row].length; column++) {\n                    let barcodeValue = barcodeMatrix[row][column];\n                    if (barcodeValue.getValue().length === 0) {\n                        formatter.format('        ', null);\n                    }\n                    else {\n                        formatter.format('%4d(%2d)', barcodeValue.getValue()[0], barcodeValue.getConfidence(barcodeValue.getValue()[0]));\n                    }\n                }\n                formatter.format('%n');\n            }\n            return formatter.toString();\n            // }\n        }\n    }\n    /*final*/ PDF417ScanningDecoder.CODEWORD_SKEW_SIZE = 2;\n    /*final*/ PDF417ScanningDecoder.MAX_ERRORS = 3;\n    /*final*/ PDF417ScanningDecoder.MAX_EC_CODEWORDS = 512;\n    /*final*/ PDF417ScanningDecoder.errorCorrection = new ErrorCorrection();\n\n    /*\n     * Copyright 2009 ZXing authors\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n    // import java.util.ArrayList;\n    // import java.util.List;\n    // import java.util.Map;\n    /**\n     * This implementation can detect and decode PDF417 codes in an image.\n     *\n     * @author Guenther Grau\n     */\n    /*public final*/ class PDF417Reader {\n        // private static /*final Result[]*/ EMPTY_RESULT_ARRAY: Result[] = new Result([0]);\n        /**\n         * Locates and decodes a PDF417 code in an image.\n         *\n         * @return a String representing the content encoded by the PDF417 code\n         * @throws NotFoundException if a PDF417 code cannot be found,\n         * @throws FormatException if a PDF417 cannot be decoded\n         * @throws ChecksumException\n         */\n        // @Override\n        decode(image, hints = null) {\n            let result = PDF417Reader.decode(image, hints, false);\n            if (result == null || result.length === 0 || result[0] == null) {\n                throw NotFoundException.getNotFoundInstance();\n            }\n            return result[0];\n        }\n        /**\n         *\n         * @param BinaryBitmap\n         * @param image\n         * @throws NotFoundException\n         */\n        //   @Override\n        decodeMultiple(image, hints = null) {\n            try {\n                return PDF417Reader.decode(image, hints, true);\n            }\n            catch (ignored) {\n                if (ignored instanceof FormatException || ignored instanceof ChecksumException) {\n                    throw NotFoundException.getNotFoundInstance();\n                }\n                throw ignored;\n            }\n        }\n        /**\n         *\n         * @param image\n         * @param hints\n         * @param multiple\n         *\n         * @throws NotFoundException\n         * @throws FormatException\u00DF\n         * @throws ChecksumException\n         */\n        static decode(image, hints, multiple) {\n            const results = new Array();\n            const detectorResult = Detector$3.detectMultiple(image, hints, multiple);\n            for (const points of detectorResult.getPoints()) {\n                const decoderResult = PDF417ScanningDecoder.decode(detectorResult.getBits(), points[4], points[5], points[6], points[7], PDF417Reader.getMinCodewordWidth(points), PDF417Reader.getMaxCodewordWidth(points));\n                const result = new Result(decoderResult.getText(), decoderResult.getRawBytes(), undefined, points, BarcodeFormat$1.PDF_417);\n                result.putMetadata(ResultMetadataType$1.ERROR_CORRECTION_LEVEL, decoderResult.getECLevel());\n                const pdf417ResultMetadata = decoderResult.getOther();\n                if (pdf417ResultMetadata != null) {\n                    result.putMetadata(ResultMetadataType$1.PDF417_EXTRA_METADATA, pdf417ResultMetadata);\n                }\n                results.push(result);\n            }\n            return results.map(x => x);\n        }\n        static getMaxWidth(p1, p2) {\n            if (p1 == null || p2 == null) {\n                return 0;\n            }\n            return Math.trunc(Math.abs(p1.getX() - p2.getX()));\n        }\n        static getMinWidth(p1, p2) {\n            if (p1 == null || p2 == null) {\n                return Integer.MAX_VALUE;\n            }\n            return Math.trunc(Math.abs(p1.getX() - p2.getX()));\n        }\n        static getMaxCodewordWidth(p) {\n            return Math.floor(Math.max(Math.max(PDF417Reader.getMaxWidth(p[0], p[4]), PDF417Reader.getMaxWidth(p[6], p[2]) * PDF417Common.MODULES_IN_CODEWORD /\n                PDF417Common.MODULES_IN_STOP_PATTERN), Math.max(PDF417Reader.getMaxWidth(p[1], p[5]), PDF417Reader.getMaxWidth(p[7], p[3]) * PDF417Common.MODULES_IN_CODEWORD /\n                PDF417Common.MODULES_IN_STOP_PATTERN)));\n        }\n        static getMinCodewordWidth(p) {\n            return Math.floor(Math.min(Math.min(PDF417Reader.getMinWidth(p[0], p[4]), PDF417Reader.getMinWidth(p[6], p[2]) * PDF417Common.MODULES_IN_CODEWORD /\n                PDF417Common.MODULES_IN_STOP_PATTERN), Math.min(PDF417Reader.getMinWidth(p[1], p[5]), PDF417Reader.getMinWidth(p[7], p[3]) * PDF417Common.MODULES_IN_CODEWORD /\n                PDF417Common.MODULES_IN_STOP_PATTERN)));\n        }\n        // @Override\n        reset() {\n            // nothing needs to be reset\n        }\n    }\n\n    /**\n     * Custom Error class of type Exception.\n     */\n    class ReaderException extends Exception {\n    }\n    ReaderException.kind = 'ReaderException';\n\n    /*\n     * Copyright 2009 ZXing authors\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n    /*namespace com.google.zxing {*/\n    /**\n     * MultiFormatReader is a convenience class and the main entry point into the library for most uses.\n     * By default it attempts to decode all barcode formats that the library supports. Optionally, you\n     * can provide a hints object to request different behavior, for example only decoding QR codes.\n     *\n     * @author Sean Owen\n     * @author dswitkin@google.com (Daniel Switkin)\n     */\n    class MultiFormatReader {\n        /**\n         * Creates an instance of this class\n         * \n         * @param {Boolean} verbose if 'true' logs will be dumped to console, otherwise hidden.\n         * @param hints The hints to use, clearing the previous state.\n         */\n        constructor(verbose, hints) {\n            this.verbose = (verbose === true);\n            if (hints) {\n                this.setHints(hints);\n            }\n        }\n        /**\n         * This version of decode honors the intent of Reader.decode(BinaryBitmap) in that it\n         * passes null as a hint to the decoders. However, that makes it inefficient to call repeatedly.\n         * Use setHints() followed by decodeWithState() for continuous scan applications.\n         *\n         * @param image The pixel data to decode\n         * @return The contents of the image\n         *\n         * @throws NotFoundException Any errors which occurred\n         */\n        /*@Override*/\n        // public decode(image: BinaryBitmap): Result {\n        //   setHints(null)\n        //   return decodeInternal(image)\n        // }\n        /**\n         * Decode an image using the hints provided. Does not honor existing state.\n         *\n         * @param image The pixel data to decode\n         * @param hints The hints to use, clearing the previous state.\n         * @return The contents of the image\n         *\n         * @throws NotFoundException Any errors which occurred\n         */\n        /*@Override*/\n        decode(image, hints) {\n            if (hints) {\n                this.setHints(hints);\n            }\n            return this.decodeInternal(image);\n        }\n        /**\n         * Decode an image using the state set up by calling setHints() previously. Continuous scan\n         * clients will get a <b>large</b> speed increase by using this instead of decode().\n         *\n         * @param image The pixel data to decode\n         * @return The contents of the image\n         *\n         * @throws NotFoundException Any errors which occurred\n         */\n        decodeWithState(image) {\n            // Make sure to set up the default state so we don't crash\n            if (this.readers === null || this.readers === undefined) {\n                this.setHints(null);\n            }\n            return this.decodeInternal(image);\n        }\n        /**\n         * This method adds state to the MultiFormatReader. By setting the hints once, subsequent calls\n         * to decodeWithState(image) can reuse the same set of readers without reallocating memory. This\n         * is important for performance in continuous scan clients.\n         *\n         * @param hints The set of hints to use for subsequent calls to decode(image)\n         */\n        setHints(hints) {\n            this.hints = hints;\n            const tryHarder = !isNullOrUndefined(hints)\n                && hints.get(DecodeHintType$1.TRY_HARDER) === true;\n            const formats = isNullOrUndefined(hints) ? null : hints.get(DecodeHintType$1.POSSIBLE_FORMATS);\n            const readers = new Array();\n            if (!isNullOrUndefined(formats)) {\n                const addOneDReader = formats.some(f => {\n                    return (\n                        f === BarcodeFormat$1.UPC_A ||\n                        f === BarcodeFormat$1.UPC_E ||\n                        f === BarcodeFormat$1.EAN_13 ||\n                        f === BarcodeFormat$1.EAN_8 ||\n                        f === BarcodeFormat$1.CODABAR ||\n                        f === BarcodeFormat$1.CODE_39 ||\n                        f === BarcodeFormat$1.CODE_93 ||\n                        f === BarcodeFormat$1.CODE_128 ||\n                        f === BarcodeFormat$1.ITF ||\n                        f === BarcodeFormat$1.RSS_14 ||\n                        f === BarcodeFormat$1.RSS_EXPANDED);\n                });\n                // Put 1D readers upfront in \"normal\" mode\n                if (addOneDReader && !tryHarder) {\n                    readers.push(new MultiFormatOneDReader(hints, this.verbose));\n                }\n                if (formats.includes(BarcodeFormat$1.QR_CODE)) {\n                    readers.push(new QRCodeReader());\n                }\n                if (formats.includes(BarcodeFormat$1.DATA_MATRIX)) {\n                    readers.push(new DataMatrixReader());\n                }\n                if (formats.includes(BarcodeFormat$1.AZTEC)) {\n                    readers.push(new AztecReader());\n                }\n                if (formats.includes(BarcodeFormat$1.PDF_417)) {\n                    readers.push(new PDF417Reader());\n                }\n                // if (formats.includes(BarcodeFormat.MAXICODE)) {\n                //    readers.push(new MaxiCodeReader())\n                // }\n                // At end in \"try harder\" mode\n                if (addOneDReader && tryHarder) {\n                    readers.push(new MultiFormatOneDReader(hints, this.verbose));\n                }\n            }\n            if (readers.length === 0) {\n                if (!tryHarder) {\n                    readers.push(new MultiFormatOneDReader(hints, this.verbose));\n                }\n                readers.push(new QRCodeReader());\n                readers.push(new DataMatrixReader());\n                readers.push(new AztecReader());\n                readers.push(new PDF417Reader());\n                // readers.push(new MaxiCodeReader())\n                if (tryHarder) {\n                    readers.push(new MultiFormatOneDReader(hints, this.verbose));\n                }\n            }\n            this.readers = readers; // .toArray(new Reader[readers.size()])\n        }\n        /*@Override*/\n        reset() {\n            if (this.readers !== null) {\n                for (const reader of this.readers) {\n                    reader.reset();\n                }\n            }\n        }\n        /**\n         * @throws NotFoundException\n         */\n        decodeInternal(image) {\n            if (this.readers === null) {\n                throw new ReaderException('No readers where selected, nothing can be read.');\n            }\n            for (const reader of this.readers) {\n                // Trying to decode with ${reader} reader.\n                try {\n                    return reader.decode(image, this.hints);\n                }\n                catch (ex) {\n                    if (ex instanceof ReaderException) {\n                        continue;\n                    }\n                    // Bad Exception.\n                }\n            }\n            throw new NotFoundException('No MultiFormat Readers were able to detect the code.');\n        }\n    }\n\n    class BrowserMultiFormatReader extends BrowserCodeReader {\n        constructor(hints = null, timeBetweenScansMillis = 500) {\n            const reader = new MultiFormatReader();\n            reader.setHints(hints);\n            super(reader, timeBetweenScansMillis);\n        }\n        /**\n         * Overwrite decodeBitmap to call decodeWithState, which will pay\n         * attention to the hints set in the constructor function\n         */\n        decodeBitmap(binaryBitmap) {\n            return this.reader.decodeWithState(binaryBitmap);\n        }\n    }\n\n    /**\n     * @deprecated Moving to @zxing/browser\n     *\n     * QR Code reader to use from browser.\n     */\n    class BrowserPDF417Reader extends BrowserCodeReader {\n        /**\n         * Creates an instance of BrowserPDF417Reader.\n         * @param {number} [timeBetweenScansMillis=500] the time delay between subsequent decode tries\n         */\n        constructor(timeBetweenScansMillis = 500) {\n            super(new PDF417Reader(), timeBetweenScansMillis);\n        }\n    }\n\n    /**\n     * @deprecated Moving to @zxing/browser\n     *\n     * QR Code reader to use from browser.\n     */\n    class BrowserQRCodeReader extends BrowserCodeReader {\n        /**\n         * Creates an instance of BrowserQRCodeReader.\n         * @param {number} [timeBetweenScansMillis=500] the time delay between subsequent decode tries\n         */\n        constructor(timeBetweenScansMillis = 500) {\n            super(new QRCodeReader(), timeBetweenScansMillis);\n        }\n    }\n\n    /*\n     * Copyright 2009 ZXing authors\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n    /*namespace com.google.zxing {*/\n    /**\n     * These are a set of hints that you may pass to Writers to specify their behavior.\n     *\n     * @author dswitkin@google.com (Daniel Switkin)\n     */\n    var EncodeHintType;\n    (function (EncodeHintType) {\n        /**\n         * Specifies what degree of error correction to use, for example in QR Codes.\n         * Type depends on the encoder. For example for QR codes it's type\n         * {@link com.google.zxing.qrcode.decoder.ErrorCorrectionLevel ErrorCorrectionLevel}.\n         * For Aztec it is of type {@link Integer}, representing the minimal percentage of error correction words.\n         * For PDF417 it is of type {@link Integer}, valid values being 0 to 8.\n         * In all cases, it can also be a {@link String} representation of the desired value as well.\n         * Note: an Aztec symbol should have a minimum of 25% EC words.\n         */\n        EncodeHintType[EncodeHintType[\"ERROR_CORRECTION\"] = 0] = \"ERROR_CORRECTION\";\n        /**\n         * Specifies what character encoding to use where applicable (type {@link String})\n         */\n        EncodeHintType[EncodeHintType[\"CHARACTER_SET\"] = 1] = \"CHARACTER_SET\";\n        /**\n         * Specifies the matrix shape for Data Matrix (type {@link com.google.zxing.datamatrix.encoder.SymbolShapeHint})\n         */\n        EncodeHintType[EncodeHintType[\"DATA_MATRIX_SHAPE\"] = 2] = \"DATA_MATRIX_SHAPE\";\n        /**\n         * Specifies a minimum barcode size (type {@link Dimension}). Only applicable to Data Matrix now.\n         *\n         * @deprecated use width/height params in\n         * {@link com.google.zxing.datamatrix.DataMatrixWriter#encode(String, BarcodeFormat, int, int)}\n         */\n        /*@Deprecated*/\n        EncodeHintType[EncodeHintType[\"MIN_SIZE\"] = 3] = \"MIN_SIZE\";\n        /**\n         * Specifies a maximum barcode size (type {@link Dimension}). Only applicable to Data Matrix now.\n         *\n         * @deprecated without replacement\n         */\n        /*@Deprecated*/\n        EncodeHintType[EncodeHintType[\"MAX_SIZE\"] = 4] = \"MAX_SIZE\";\n        /**\n         * Specifies margin, in pixels, to use when generating the barcode. The meaning can vary\n         * by format; for example it controls margin before and after the barcode horizontally for\n         * most 1D formats. (Type {@link Integer}, or {@link String} representation of the integer value).\n         */\n        EncodeHintType[EncodeHintType[\"MARGIN\"] = 5] = \"MARGIN\";\n        /**\n         * Specifies whether to use compact mode for PDF417 (type {@link Boolean}, or \"true\" or \"false\"\n         * {@link String} value).\n         */\n        EncodeHintType[EncodeHintType[\"PDF417_COMPACT\"] = 6] = \"PDF417_COMPACT\";\n        /**\n         * Specifies what compaction mode to use for PDF417 (type\n         * {@link com.google.zxing.pdf417.encoder.Compaction Compaction} or {@link String} value of one of its\n         * enum values).\n         */\n        EncodeHintType[EncodeHintType[\"PDF417_COMPACTION\"] = 7] = \"PDF417_COMPACTION\";\n        /**\n         * Specifies the minimum and maximum number of rows and columns for PDF417 (type\n         * {@link com.google.zxing.pdf417.encoder.Dimensions Dimensions}).\n         */\n        EncodeHintType[EncodeHintType[\"PDF417_DIMENSIONS\"] = 8] = \"PDF417_DIMENSIONS\";\n        /**\n         * Specifies the required number of layers for an Aztec code.\n         * A negative number (-1, -2, -3, -4) specifies a compact Aztec code.\n         * 0 indicates to use the minimum number of layers (the default).\n         * A positive number (1, 2, .. 32) specifies a normal (non-compact) Aztec code.\n         * (Type {@link Integer}, or {@link String} representation of the integer value).\n         */\n        EncodeHintType[EncodeHintType[\"AZTEC_LAYERS\"] = 9] = \"AZTEC_LAYERS\";\n        /**\n         * Specifies the exact version of QR code to be encoded.\n         * (Type {@link Integer}, or {@link String} representation of the integer value).\n         */\n        EncodeHintType[EncodeHintType[\"QR_VERSION\"] = 10] = \"QR_VERSION\";\n    })(EncodeHintType || (EncodeHintType = {}));\n    var EncodeHintType$1 = EncodeHintType;\n\n    /**\n     * <p>Implements Reed-Solomon encoding, as the name implies.</p>\n     *\n     * @author Sean Owen\n     * @author William Rucklidge\n     */\n    class ReedSolomonEncoder {\n        /**\n         * A reed solomon error-correcting encoding constructor is created by\n         * passing as Galois Field with of size equal to the number of code\n         * words (symbols) in the alphabet (the number of values in each\n         * element of arrays that are encoded/decoded).\n         * @param field A galois field with a number of elements equal to the size\n         * of the alphabet of symbols to encode.\n         */\n        constructor(field) {\n            this.field = field;\n            this.cachedGenerators = [];\n            this.cachedGenerators.push(new GenericGFPoly(field, Int32Array.from([1])));\n        }\n        buildGenerator(degree /*int*/) {\n            const cachedGenerators = this.cachedGenerators;\n            if (degree >= cachedGenerators.length) {\n                let lastGenerator = cachedGenerators[cachedGenerators.length - 1];\n                const field = this.field;\n                for (let d = cachedGenerators.length; d <= degree; d++) {\n                    const nextGenerator = lastGenerator.multiply(new GenericGFPoly(field, Int32Array.from([1, field.exp(d - 1 + field.getGeneratorBase())])));\n                    cachedGenerators.push(nextGenerator);\n                    lastGenerator = nextGenerator;\n                }\n            }\n            return cachedGenerators[degree];\n        }\n        /**\n         * <p>Encode a sequence of code words (symbols) using Reed-Solomon to allow decoders\n         * to detect and correct errors that may have been introduced when the resulting\n         * data is stored or transmitted.</p>\n         *\n         * @param toEncode array used for both and output. Caller initializes the array with\n         * the code words (symbols) to be encoded followed by empty elements allocated to make\n         * space for error-correction code words in the encoded output. The array contains\n         * the encdoded output when encode returns. Code words are encoded as numbers from\n         * 0 to n-1, where n is the number of possible code words (symbols), as determined\n         * by the size of the Galois Field passed in the constructor of this object.\n         * @param ecBytes the number of elements reserved in the array (first parameter)\n         * to store error-correction code words. Thus, the number of code words (symbols)\n         * to encode in the first parameter is thus toEncode.length - ecBytes.\n         * Note, the use of \"bytes\" in the name of this parameter is misleading, as there may\n         * be more or fewer than 256 symbols being encoded, as determined by the number of\n         * elements in the Galois Field passed as a constructor to this object.\n         * @throws IllegalArgumentException thrown in response to validation errros.\n         */\n        encode(toEncode, ecBytes /*int*/) {\n            if (ecBytes === 0) {\n                throw new IllegalArgumentException('No error correction bytes');\n            }\n            const dataBytes = toEncode.length - ecBytes;\n            if (dataBytes <= 0) {\n                throw new IllegalArgumentException('No data bytes provided');\n            }\n            const generator = this.buildGenerator(ecBytes);\n            const infoCoefficients = new Int32Array(dataBytes);\n            System.arraycopy(toEncode, 0, infoCoefficients, 0, dataBytes);\n            let info = new GenericGFPoly(this.field, infoCoefficients);\n            info = info.multiplyByMonomial(ecBytes, 1);\n            const remainder = info.divide(generator)[1];\n            const coefficients = remainder.getCoefficients();\n            const numZeroCoefficients = ecBytes - coefficients.length;\n            for (let i = 0; i < numZeroCoefficients; i++) {\n                toEncode[dataBytes + i] = 0;\n            }\n            System.arraycopy(coefficients, 0, toEncode, dataBytes + numZeroCoefficients, coefficients.length);\n        }\n    }\n\n    /**\n     * @author Satoru Takabayashi\n     * @author Daniel Switkin\n     * @author Sean Owen\n     */\n    class MaskUtil {\n        constructor() {\n            // do nothing\n        }\n        /**\n         * Apply mask penalty rule 1 and return the penalty. Find repetitive cells with the same color and\n         * give penalty to them. Example: 00000 or 11111.\n         */\n        static applyMaskPenaltyRule1(matrix) {\n            return MaskUtil.applyMaskPenaltyRule1Internal(matrix, true) + MaskUtil.applyMaskPenaltyRule1Internal(matrix, false);\n        }\n        /**\n         * Apply mask penalty rule 2 and return the penalty. Find 2x2 blocks with the same color and give\n         * penalty to them. This is actually equivalent to the spec's rule, which is to find MxN blocks and give a\n         * penalty proportional to (M-1)x(N-1), because this is the number of 2x2 blocks inside such a block.\n         */\n        static applyMaskPenaltyRule2(matrix) {\n            let penalty = 0;\n            const array = matrix.getArray();\n            const width = matrix.getWidth();\n            const height = matrix.getHeight();\n            for (let y = 0; y < height - 1; y++) {\n                const arrayY = array[y];\n                for (let x = 0; x < width - 1; x++) {\n                    const value = arrayY[x];\n                    if (value === arrayY[x + 1] && value === array[y + 1][x] && value === array[y + 1][x + 1]) {\n                        penalty++;\n                    }\n                }\n            }\n            return MaskUtil.N2 * penalty;\n        }\n        /**\n         * Apply mask penalty rule 3 and return the penalty. Find consecutive runs of 1:1:3:1:1:4\n         * starting with black, or 4:1:1:3:1:1 starting with white, and give penalty to them.  If we\n         * find patterns like 000010111010000, we give penalty once.\n         */\n        static applyMaskPenaltyRule3(matrix) {\n            let numPenalties = 0;\n            const array = matrix.getArray();\n            const width = matrix.getWidth();\n            const height = matrix.getHeight();\n            for (let y = 0; y < height; y++) {\n                for (let x = 0; x < width; x++) {\n                    const arrayY = array[y]; // We can at least optimize this access\n                    if (x + 6 < width &&\n                        arrayY[x] === 1 &&\n                        arrayY[x + 1] === 0 &&\n                        arrayY[x + 2] === 1 &&\n                        arrayY[x + 3] === 1 &&\n                        arrayY[x + 4] === 1 &&\n                        arrayY[x + 5] === 0 &&\n                        arrayY[x + 6] === 1 &&\n                        (MaskUtil.isWhiteHorizontal(arrayY, x - 4, x) || MaskUtil.isWhiteHorizontal(arrayY, x + 7, x + 11))) {\n                        numPenalties++;\n                    }\n                    if (y + 6 < height &&\n                        array[y][x] === 1 &&\n                        array[y + 1][x] === 0 &&\n                        array[y + 2][x] === 1 &&\n                        array[y + 3][x] === 1 &&\n                        array[y + 4][x] === 1 &&\n                        array[y + 5][x] === 0 &&\n                        array[y + 6][x] === 1 &&\n                        (MaskUtil.isWhiteVertical(array, x, y - 4, y) || MaskUtil.isWhiteVertical(array, x, y + 7, y + 11))) {\n                        numPenalties++;\n                    }\n                }\n            }\n            return numPenalties * MaskUtil.N3;\n        }\n        static isWhiteHorizontal(rowArray, from /*int*/, to /*int*/) {\n            from = Math.max(from, 0);\n            to = Math.min(to, rowArray.length);\n            for (let i = from; i < to; i++) {\n                if (rowArray[i] === 1) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        static isWhiteVertical(array, col /*int*/, from /*int*/, to /*int*/) {\n            from = Math.max(from, 0);\n            to = Math.min(to, array.length);\n            for (let i = from; i < to; i++) {\n                if (array[i][col] === 1) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        /**\n         * Apply mask penalty rule 4 and return the penalty. Calculate the ratio of dark cells and give\n         * penalty if the ratio is far from 50%. It gives 10 penalty for 5% distance.\n         */\n        static applyMaskPenaltyRule4(matrix) {\n            let numDarkCells = 0;\n            const array = matrix.getArray();\n            const width = matrix.getWidth();\n            const height = matrix.getHeight();\n            for (let y = 0; y < height; y++) {\n                const arrayY = array[y];\n                for (let x = 0; x < width; x++) {\n                    if (arrayY[x] === 1) {\n                        numDarkCells++;\n                    }\n                }\n            }\n            const numTotalCells = matrix.getHeight() * matrix.getWidth();\n            const fivePercentVariances = Math.floor(Math.abs(numDarkCells * 2 - numTotalCells) * 10 / numTotalCells);\n            return fivePercentVariances * MaskUtil.N4;\n        }\n        /**\n         * Return the mask bit for \"getMaskPattern\" at \"x\" and \"y\". See 8.8 of JISX0510:2004 for mask\n         * pattern conditions.\n         */\n        static getDataMaskBit(maskPattern /*int*/, x /*int*/, y /*int*/) {\n            let intermediate; /*int*/\n            let temp; /*int*/\n            switch (maskPattern) {\n                case 0:\n                    intermediate = (y + x) & 0x1;\n                    break;\n                case 1:\n                    intermediate = y & 0x1;\n                    break;\n                case 2:\n                    intermediate = x % 3;\n                    break;\n                case 3:\n                    intermediate = (y + x) % 3;\n                    break;\n                case 4:\n                    intermediate = (Math.floor(y / 2) + Math.floor(x / 3)) & 0x1;\n                    break;\n                case 5:\n                    temp = y * x;\n                    intermediate = (temp & 0x1) + (temp % 3);\n                    break;\n                case 6:\n                    temp = y * x;\n                    intermediate = ((temp & 0x1) + (temp % 3)) & 0x1;\n                    break;\n                case 7:\n                    temp = y * x;\n                    intermediate = ((temp % 3) + ((y + x) & 0x1)) & 0x1;\n                    break;\n                default:\n                    throw new IllegalArgumentException('Invalid mask pattern: ' + maskPattern);\n            }\n            return intermediate === 0;\n        }\n        /**\n         * Helper function for applyMaskPenaltyRule1. We need this for doing this calculation in both\n         * vertical and horizontal orders respectively.\n         */\n        static applyMaskPenaltyRule1Internal(matrix, isHorizontal) {\n            let penalty = 0;\n            const iLimit = isHorizontal ? matrix.getHeight() : matrix.getWidth();\n            const jLimit = isHorizontal ? matrix.getWidth() : matrix.getHeight();\n            const array = matrix.getArray();\n            for (let i = 0; i < iLimit; i++) {\n                let numSameBitCells = 0;\n                let prevBit = -1;\n                for (let j = 0; j < jLimit; j++) {\n                    const bit = isHorizontal ? array[i][j] : array[j][i];\n                    if (bit === prevBit) {\n                        numSameBitCells++;\n                    }\n                    else {\n                        if (numSameBitCells >= 5) {\n                            penalty += MaskUtil.N1 + (numSameBitCells - 5);\n                        }\n                        numSameBitCells = 1; // Include the cell itself.\n                        prevBit = bit;\n                    }\n                }\n                if (numSameBitCells >= 5) {\n                    penalty += MaskUtil.N1 + (numSameBitCells - 5);\n                }\n            }\n            return penalty;\n        }\n    }\n    // Penalty weights from section 6.8.2.1\n    MaskUtil.N1 = 3;\n    MaskUtil.N2 = 3;\n    MaskUtil.N3 = 40;\n    MaskUtil.N4 = 10;\n\n    /**\n     * JAVAPORT: The original code was a 2D array of ints, but since it only ever gets assigned\n     * -1, 0, and 1, I'm going to use less memory and go with bytes.\n     *\n     * @author dswitkin@google.com (Daniel Switkin)\n     */\n    class ByteMatrix {\n        constructor(width /*int*/, height /*int*/) {\n            this.width = width;\n            this.height = height;\n            const bytes = new Array(height); // [height][width]\n            for (let i = 0; i !== height; i++) {\n                bytes[i] = new Uint8Array(width);\n            }\n            this.bytes = bytes;\n        }\n        getHeight() {\n            return this.height;\n        }\n        getWidth() {\n            return this.width;\n        }\n        get(x /*int*/, y /*int*/) {\n            return this.bytes[y][x];\n        }\n        /**\n         * @return an internal representation as bytes, in row-major order. array[y][x] represents point (x,y)\n         */\n        getArray() {\n            return this.bytes;\n        }\n        // TYPESCRIPTPORT: preffer to let two methods instead of override to avoid type comparison inside\n        setNumber(x /*int*/, y /*int*/, value /*byte|int*/) {\n            this.bytes[y][x] = value;\n        }\n        // public set(x: number /*int*/, y: number /*int*/, value: number /*int*/): void {\n        //   bytes[y][x] = (byte) value\n        // }\n        setBoolean(x /*int*/, y /*int*/, value) {\n            this.bytes[y][x] = /*(byte) */ (value ? 1 : 0);\n        }\n        clear(value /*byte*/) {\n            for (const aByte of this.bytes) {\n                Arrays.fill(aByte, value);\n            }\n        }\n        equals(o) {\n            if (!(o instanceof ByteMatrix)) {\n                return false;\n            }\n            const other = o;\n            if (this.width !== other.width) {\n                return false;\n            }\n            if (this.height !== other.height) {\n                return false;\n            }\n            for (let y = 0, height = this.height; y < height; ++y) {\n                const bytesY = this.bytes[y];\n                const otherBytesY = other.bytes[y];\n                for (let x = 0, width = this.width; x < width; ++x) {\n                    if (bytesY[x] !== otherBytesY[x]) {\n                        return false;\n                    }\n                }\n            }\n            return true;\n        }\n        /*@Override*/\n        toString() {\n            const result = new StringBuilder(); // (2 * width * height + 2)\n            for (let y = 0, height = this.height; y < height; ++y) {\n                const bytesY = this.bytes[y];\n                for (let x = 0, width = this.width; x < width; ++x) {\n                    switch (bytesY[x]) {\n                        case 0:\n                            result.append(' 0');\n                            break;\n                        case 1:\n                            result.append(' 1');\n                            break;\n                        default:\n                            result.append('  ');\n                            break;\n                    }\n                }\n                result.append('\\n');\n            }\n            return result.toString();\n        }\n    }\n\n    /**\n     * @author satorux@google.com (Satoru Takabayashi) - creator\n     * @author dswitkin@google.com (Daniel Switkin) - ported from C++\n     */\n    class QRCode {\n        constructor() {\n            this.maskPattern = -1;\n        }\n        getMode() {\n            return this.mode;\n        }\n        getECLevel() {\n            return this.ecLevel;\n        }\n        getVersion() {\n            return this.version;\n        }\n        getMaskPattern() {\n            return this.maskPattern;\n        }\n        getMatrix() {\n            return this.matrix;\n        }\n        /*@Override*/\n        toString() {\n            const result = new StringBuilder(); // (200)\n            result.append('<<\\n');\n            result.append(' mode: ');\n            result.append(this.mode ? this.mode.toString() : 'null');\n            result.append('\\n ecLevel: ');\n            result.append(this.ecLevel ? this.ecLevel.toString() : 'null');\n            result.append('\\n version: ');\n            result.append(this.version ? this.version.toString() : 'null');\n            result.append('\\n maskPattern: ');\n            result.append(this.maskPattern.toString());\n            if (this.matrix) {\n                result.append('\\n matrix:\\n');\n                result.append(this.matrix.toString());\n            }\n            else {\n                result.append('\\n matrix: null\\n');\n            }\n            result.append('>>\\n');\n            return result.toString();\n        }\n        setMode(value) {\n            this.mode = value;\n        }\n        setECLevel(value) {\n            this.ecLevel = value;\n        }\n        setVersion(version) {\n            this.version = version;\n        }\n        setMaskPattern(value /*int*/) {\n            this.maskPattern = value;\n        }\n        setMatrix(value) {\n            this.matrix = value;\n        }\n        // Check if \"mask_pattern\" is valid.\n        static isValidMaskPattern(maskPattern /*int*/) {\n            return maskPattern >= 0 && maskPattern < QRCode.NUM_MASK_PATTERNS;\n        }\n    }\n    QRCode.NUM_MASK_PATTERNS = 8;\n\n    /**\n     * Custom Error class of type Exception.\n     */\n    class WriterException extends Exception {\n    }\n    WriterException.kind = 'WriterException';\n\n    /**\n     * @author satorux@google.com (Satoru Takabayashi) - creator\n     * @author dswitkin@google.com (Daniel Switkin) - ported from C++\n     */\n    class MatrixUtil {\n        constructor() {\n            // do nothing\n        }\n        // Set all cells to -1 (TYPESCRIPTPORT: 255).  -1 (TYPESCRIPTPORT: 255) means that the cell is empty (not set yet).\n        //\n        // JAVAPORT: We shouldn't need to do this at all. The code should be rewritten to begin encoding\n        // with the ByteMatrix initialized all to zero.\n        static clearMatrix(matrix) {\n            // TYPESCRIPTPORT: we use UintArray se changed here from -1 to 255\n            matrix.clear(/*(byte) */ /*-1*/ 255);\n        }\n        // Build 2D matrix of QR Code from \"dataBits\" with \"ecLevel\", \"version\" and \"getMaskPattern\". On\n        // success, store the result in \"matrix\" and return true.\n        static buildMatrix(dataBits, ecLevel, version, maskPattern /*int*/, matrix) {\n            MatrixUtil.clearMatrix(matrix);\n            MatrixUtil.embedBasicPatterns(version, matrix);\n            // Type information appear with any version.\n            MatrixUtil.embedTypeInfo(ecLevel, maskPattern, matrix);\n            // Version info appear if version >= 7.\n            MatrixUtil.maybeEmbedVersionInfo(version, matrix);\n            // Data should be embedded at end.\n            MatrixUtil.embedDataBits(dataBits, maskPattern, matrix);\n        }\n        // Embed basic patterns. On success, modify the matrix and return true.\n        // The basic patterns are:\n        // - Position detection patterns\n        // - Timing patterns\n        // - Dark dot at the left bottom corner\n        // - Position adjustment patterns, if need be\n        static embedBasicPatterns(version, matrix) {\n            // Let's get started with embedding big squares at corners.\n            MatrixUtil.embedPositionDetectionPatternsAndSeparators(matrix);\n            // Then, embed the dark dot at the left bottom corner.\n            MatrixUtil.embedDarkDotAtLeftBottomCorner(matrix);\n            // Position adjustment patterns appear if version >= 2.\n            MatrixUtil.maybeEmbedPositionAdjustmentPatterns(version, matrix);\n            // Timing patterns should be embedded after position adj. patterns.\n            MatrixUtil.embedTimingPatterns(matrix);\n        }\n        // Embed type information. On success, modify the matrix.\n        static embedTypeInfo(ecLevel, maskPattern /*int*/, matrix) {\n            const typeInfoBits = new BitArray();\n            MatrixUtil.makeTypeInfoBits(ecLevel, maskPattern, typeInfoBits);\n            for (let i = 0, size = typeInfoBits.getSize(); i < size; ++i) {\n                // Place bits in LSB to MSB order.  LSB (least significant bit) is the last value in\n                // \"typeInfoBits\".\n                const bit = typeInfoBits.get(typeInfoBits.getSize() - 1 - i);\n                // Type info bits at the left top corner. See 8.9 of JISX0510:2004 (p.46).\n                const coordinates = MatrixUtil.TYPE_INFO_COORDINATES[i];\n                const x1 = coordinates[0];\n                const y1 = coordinates[1];\n                matrix.setBoolean(x1, y1, bit);\n                if (i < 8) {\n                    // Right top corner.\n                    const x2 = matrix.getWidth() - i - 1;\n                    const y2 = 8;\n                    matrix.setBoolean(x2, y2, bit);\n                }\n                else {\n                    // Left bottom corner.\n                    const x2 = 8;\n                    const y2 = matrix.getHeight() - 7 + (i - 8);\n                    matrix.setBoolean(x2, y2, bit);\n                }\n            }\n        }\n        // Embed version information if need be. On success, modify the matrix and return true.\n        // See 8.10 of JISX0510:2004 (p.47) for how to embed version information.\n        static maybeEmbedVersionInfo(version, matrix) {\n            if (version.getVersionNumber() < 7) { // Version info is necessary if version >= 7.\n                return; // Don't need version info.\n            }\n            const versionInfoBits = new BitArray();\n            MatrixUtil.makeVersionInfoBits(version, versionInfoBits);\n            let bitIndex = 6 * 3 - 1; // It will decrease from 17 to 0.\n            for (let i = 0; i < 6; ++i) {\n                for (let j = 0; j < 3; ++j) {\n                    // Place bits in LSB (least significant bit) to MSB order.\n                    const bit = versionInfoBits.get(bitIndex);\n                    bitIndex--;\n                    // Left bottom corner.\n                    matrix.setBoolean(i, matrix.getHeight() - 11 + j, bit);\n                    // Right bottom corner.\n                    matrix.setBoolean(matrix.getHeight() - 11 + j, i, bit);\n                }\n            }\n        }\n        // Embed \"dataBits\" using \"getMaskPattern\". On success, modify the matrix and return true.\n        // For debugging purposes, it skips masking process if \"getMaskPattern\" is -1(TYPESCRIPTPORT: 255).\n        // See 8.7 of JISX0510:2004 (p.38) for how to embed data bits.\n        static embedDataBits(dataBits, maskPattern /*int*/, matrix) {\n            let bitIndex = 0;\n            let direction = -1;\n            // Start from the right bottom cell.\n            let x = matrix.getWidth() - 1;\n            let y = matrix.getHeight() - 1;\n            while (x > 0) {\n                // Skip the vertical timing pattern.\n                if (x === 6) {\n                    x -= 1;\n                }\n                while (y >= 0 && y < matrix.getHeight()) {\n                    for (let i = 0; i < 2; ++i) {\n                        const xx = x - i;\n                        // Skip the cell if it's not empty.\n                        if (!MatrixUtil.isEmpty(matrix.get(xx, y))) {\n                            continue;\n                        }\n                        let bit;\n                        if (bitIndex < dataBits.getSize()) {\n                            bit = dataBits.get(bitIndex);\n                            ++bitIndex;\n                        }\n                        else {\n                            // Padding bit. If there is no bit left, we'll fill the left cells with 0, as described\n                            // in 8.4.9 of JISX0510:2004 (p. 24).\n                            bit = false;\n                        }\n                        // Skip masking if mask_pattern is -1 (TYPESCRIPTPORT: 255).\n                        if (maskPattern !== 255 && MaskUtil.getDataMaskBit(maskPattern, xx, y)) {\n                            bit = !bit;\n                        }\n                        matrix.setBoolean(xx, y, bit);\n                    }\n                    y += direction;\n                }\n                direction = -direction; // Reverse the direction.\n                y += direction;\n                x -= 2; // Move to the left.\n            }\n            // All bits should be consumed.\n            if (bitIndex !== dataBits.getSize()) {\n                throw new WriterException('Not all bits consumed: ' + bitIndex + '/' + dataBits.getSize());\n            }\n        }\n        // Return the position of the most significant bit set (one: to) in the \"value\". The most\n        // significant bit is position 32. If there is no bit set, return 0. Examples:\n        // - findMSBSet(0) => 0\n        // - findMSBSet(1) => 1\n        // - findMSBSet(255) => 8\n        static findMSBSet(value /*int*/) {\n            return 32 - Integer.numberOfLeadingZeros(value);\n        }\n        // Calculate BCH (Bose-Chaudhuri-Hocquenghem) code for \"value\" using polynomial \"poly\". The BCH\n        // code is used for encoding type information and version information.\n        // Example: Calculation of version information of 7.\n        // f(x) is created from 7.\n        //   - 7 = 000111 in 6 bits\n        //   - f(x) = x^2 + x^1 + x^0\n        // g(x) is given by the standard (p. 67)\n        //   - g(x) = x^12 + x^11 + x^10 + x^9 + x^8 + x^5 + x^2 + 1\n        // Multiply f(x) by x^(18 - 6)\n        //   - f'(x) = f(x) * x^(18 - 6)\n        //   - f'(x) = x^14 + x^13 + x^12\n        // Calculate the remainder of f'(x) / g(x)\n        //         x^2\n        //         __________________________________________________\n        //   g(x) )x^14 + x^13 + x^12\n        //         x^14 + x^13 + x^12 + x^11 + x^10 + x^7 + x^4 + x^2\n        //         --------------------------------------------------\n        //                              x^11 + x^10 + x^7 + x^4 + x^2\n        //\n        // The remainder is x^11 + x^10 + x^7 + x^4 + x^2\n        // Encode it in binary: 110010010100\n        // The return value is 0xc94 (1100 1001 0100)\n        //\n        // Since all coefficients in the polynomials are 1 or 0, we can do the calculation by bit\n        // operations. We don't care if coefficients are positive or negative.\n        static calculateBCHCode(value /*int*/, poly /*int*/) {\n            if (poly === 0) {\n                throw new IllegalArgumentException('0 polynomial');\n            }\n            // If poly is \"1 1111 0010 0101\" (version info poly), msbSetInPoly is 13. We'll subtract 1\n            // from 13 to make it 12.\n            const msbSetInPoly = MatrixUtil.findMSBSet(poly);\n            value <<= msbSetInPoly - 1;\n            // Do the division business using exclusive-or operations.\n            while (MatrixUtil.findMSBSet(value) >= msbSetInPoly) {\n                value ^= poly << (MatrixUtil.findMSBSet(value) - msbSetInPoly);\n            }\n            // Now the \"value\" is the remainder (i.e. the BCH code)\n            return value;\n        }\n        // Make bit vector of type information. On success, store the result in \"bits\" and return true.\n        // Encode error correction level and mask pattern. See 8.9 of\n        // JISX0510:2004 (p.45) for details.\n        static makeTypeInfoBits(ecLevel, maskPattern /*int*/, bits) {\n            if (!QRCode.isValidMaskPattern(maskPattern)) {\n                throw new WriterException('Invalid mask pattern');\n            }\n            const typeInfo = (ecLevel.getBits() << 3) | maskPattern;\n            bits.appendBits(typeInfo, 5);\n            const bchCode = MatrixUtil.calculateBCHCode(typeInfo, MatrixUtil.TYPE_INFO_POLY);\n            bits.appendBits(bchCode, 10);\n            const maskBits = new BitArray();\n            maskBits.appendBits(MatrixUtil.TYPE_INFO_MASK_PATTERN, 15);\n            bits.xor(maskBits);\n            if (bits.getSize() !== 15) { // Just in case.\n                throw new WriterException('should not happen but we got: ' + bits.getSize());\n            }\n        }\n        // Make bit vector of version information. On success, store the result in \"bits\" and return true.\n        // See 8.10 of JISX0510:2004 (p.45) for details.\n        static makeVersionInfoBits(version, bits) {\n            bits.appendBits(version.getVersionNumber(), 6);\n            const bchCode = MatrixUtil.calculateBCHCode(version.getVersionNumber(), MatrixUtil.VERSION_INFO_POLY);\n            bits.appendBits(bchCode, 12);\n            if (bits.getSize() !== 18) { // Just in case.\n                throw new WriterException('should not happen but we got: ' + bits.getSize());\n            }\n        }\n        // Check if \"value\" is empty.\n        static isEmpty(value /*int*/) {\n            return value === 255; // -1\n        }\n        static embedTimingPatterns(matrix) {\n            // -8 is for skipping position detection patterns (7: size), and two horizontal/vertical\n            // separation patterns (1: size). Thus, 8 = 7 + 1.\n            for (let i = 8; i < matrix.getWidth() - 8; ++i) {\n                const bit = (i + 1) % 2;\n                // Horizontal line.\n                if (MatrixUtil.isEmpty(matrix.get(i, 6))) {\n                    matrix.setNumber(i, 6, bit);\n                }\n                // Vertical line.\n                if (MatrixUtil.isEmpty(matrix.get(6, i))) {\n                    matrix.setNumber(6, i, bit);\n                }\n            }\n        }\n        // Embed the lonely dark dot at left bottom corner. JISX0510:2004 (p.46)\n        static embedDarkDotAtLeftBottomCorner(matrix) {\n            if (matrix.get(8, matrix.getHeight() - 8) === 0) {\n                throw new WriterException();\n            }\n            matrix.setNumber(8, matrix.getHeight() - 8, 1);\n        }\n        static embedHorizontalSeparationPattern(xStart /*int*/, yStart /*int*/, matrix) {\n            for (let x = 0; x < 8; ++x) {\n                if (!MatrixUtil.isEmpty(matrix.get(xStart + x, yStart))) {\n                    throw new WriterException();\n                }\n                matrix.setNumber(xStart + x, yStart, 0);\n            }\n        }\n        static embedVerticalSeparationPattern(xStart /*int*/, yStart /*int*/, matrix) {\n            for (let y = 0; y < 7; ++y) {\n                if (!MatrixUtil.isEmpty(matrix.get(xStart, yStart + y))) {\n                    throw new WriterException();\n                }\n                matrix.setNumber(xStart, yStart + y, 0);\n            }\n        }\n        static embedPositionAdjustmentPattern(xStart /*int*/, yStart /*int*/, matrix) {\n            for (let y = 0; y < 5; ++y) {\n                const patternY = MatrixUtil.POSITION_ADJUSTMENT_PATTERN[y];\n                for (let x = 0; x < 5; ++x) {\n                    matrix.setNumber(xStart + x, yStart + y, patternY[x]);\n                }\n            }\n        }\n        static embedPositionDetectionPattern(xStart /*int*/, yStart /*int*/, matrix) {\n            for (let y = 0; y < 7; ++y) {\n                const patternY = MatrixUtil.POSITION_DETECTION_PATTERN[y];\n                for (let x = 0; x < 7; ++x) {\n                    matrix.setNumber(xStart + x, yStart + y, patternY[x]);\n                }\n            }\n        }\n        // Embed position detection patterns and surrounding vertical/horizontal separators.\n        static embedPositionDetectionPatternsAndSeparators(matrix) {\n            // Embed three big squares at corners.\n            const pdpWidth = MatrixUtil.POSITION_DETECTION_PATTERN[0].length;\n            // Left top corner.\n            MatrixUtil.embedPositionDetectionPattern(0, 0, matrix);\n            // Right top corner.\n            MatrixUtil.embedPositionDetectionPattern(matrix.getWidth() - pdpWidth, 0, matrix);\n            // Left bottom corner.\n            MatrixUtil.embedPositionDetectionPattern(0, matrix.getWidth() - pdpWidth, matrix);\n            // Embed horizontal separation patterns around the squares.\n            const hspWidth = 8;\n            // Left top corner.\n            MatrixUtil.embedHorizontalSeparationPattern(0, hspWidth - 1, matrix);\n            // Right top corner.\n            MatrixUtil.embedHorizontalSeparationPattern(matrix.getWidth() - hspWidth, hspWidth - 1, matrix);\n            // Left bottom corner.\n            MatrixUtil.embedHorizontalSeparationPattern(0, matrix.getWidth() - hspWidth, matrix);\n            // Embed vertical separation patterns around the squares.\n            const vspSize = 7;\n            // Left top corner.\n            MatrixUtil.embedVerticalSeparationPattern(vspSize, 0, matrix);\n            // Right top corner.\n            MatrixUtil.embedVerticalSeparationPattern(matrix.getHeight() - vspSize - 1, 0, matrix);\n            // Left bottom corner.\n            MatrixUtil.embedVerticalSeparationPattern(vspSize, matrix.getHeight() - vspSize, matrix);\n        }\n        // Embed position adjustment patterns if need be.\n        static maybeEmbedPositionAdjustmentPatterns(version, matrix) {\n            if (version.getVersionNumber() < 2) { // The patterns appear if version >= 2\n                return;\n            }\n            const index = version.getVersionNumber() - 1;\n            const coordinates = MatrixUtil.POSITION_ADJUSTMENT_PATTERN_COORDINATE_TABLE[index];\n            for (let i = 0, length = coordinates.length; i !== length; i++) {\n                const y = coordinates[i];\n                if (y >= 0) {\n                    for (let j = 0; j !== length; j++) {\n                        const x = coordinates[j];\n                        if (x >= 0 && MatrixUtil.isEmpty(matrix.get(x, y))) {\n                            // If the cell is unset, we embed the position adjustment pattern here.\n                            // -2 is necessary since the x/y coordinates point to the center of the pattern, not the\n                            // left top corner.\n                            MatrixUtil.embedPositionAdjustmentPattern(x - 2, y - 2, matrix);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    MatrixUtil.POSITION_DETECTION_PATTERN = Array.from([\n        Int32Array.from([1, 1, 1, 1, 1, 1, 1]),\n        Int32Array.from([1, 0, 0, 0, 0, 0, 1]),\n        Int32Array.from([1, 0, 1, 1, 1, 0, 1]),\n        Int32Array.from([1, 0, 1, 1, 1, 0, 1]),\n        Int32Array.from([1, 0, 1, 1, 1, 0, 1]),\n        Int32Array.from([1, 0, 0, 0, 0, 0, 1]),\n        Int32Array.from([1, 1, 1, 1, 1, 1, 1]),\n    ]);\n    MatrixUtil.POSITION_ADJUSTMENT_PATTERN = Array.from([\n        Int32Array.from([1, 1, 1, 1, 1]),\n        Int32Array.from([1, 0, 0, 0, 1]),\n        Int32Array.from([1, 0, 1, 0, 1]),\n        Int32Array.from([1, 0, 0, 0, 1]),\n        Int32Array.from([1, 1, 1, 1, 1]),\n    ]);\n    // From Appendix E. Table 1, JIS0510X:2004 (71: p). The table was double-checked by komatsu.\n    MatrixUtil.POSITION_ADJUSTMENT_PATTERN_COORDINATE_TABLE = Array.from([\n        Int32Array.from([-1, -1, -1, -1, -1, -1, -1]),\n        Int32Array.from([6, 18, -1, -1, -1, -1, -1]),\n        Int32Array.from([6, 22, -1, -1, -1, -1, -1]),\n        Int32Array.from([6, 26, -1, -1, -1, -1, -1]),\n        Int32Array.from([6, 30, -1, -1, -1, -1, -1]),\n        Int32Array.from([6, 34, -1, -1, -1, -1, -1]),\n        Int32Array.from([6, 22, 38, -1, -1, -1, -1]),\n        Int32Array.from([6, 24, 42, -1, -1, -1, -1]),\n        Int32Array.from([6, 26, 46, -1, -1, -1, -1]),\n        Int32Array.from([6, 28, 50, -1, -1, -1, -1]),\n        Int32Array.from([6, 30, 54, -1, -1, -1, -1]),\n        Int32Array.from([6, 32, 58, -1, -1, -1, -1]),\n        Int32Array.from([6, 34, 62, -1, -1, -1, -1]),\n        Int32Array.from([6, 26, 46, 66, -1, -1, -1]),\n        Int32Array.from([6, 26, 48, 70, -1, -1, -1]),\n        Int32Array.from([6, 26, 50, 74, -1, -1, -1]),\n        Int32Array.from([6, 30, 54, 78, -1, -1, -1]),\n        Int32Array.from([6, 30, 56, 82, -1, -1, -1]),\n        Int32Array.from([6, 30, 58, 86, -1, -1, -1]),\n        Int32Array.from([6, 34, 62, 90, -1, -1, -1]),\n        Int32Array.from([6, 28, 50, 72, 94, -1, -1]),\n        Int32Array.from([6, 26, 50, 74, 98, -1, -1]),\n        Int32Array.from([6, 30, 54, 78, 102, -1, -1]),\n        Int32Array.from([6, 28, 54, 80, 106, -1, -1]),\n        Int32Array.from([6, 32, 58, 84, 110, -1, -1]),\n        Int32Array.from([6, 30, 58, 86, 114, -1, -1]),\n        Int32Array.from([6, 34, 62, 90, 118, -1, -1]),\n        Int32Array.from([6, 26, 50, 74, 98, 122, -1]),\n        Int32Array.from([6, 30, 54, 78, 102, 126, -1]),\n        Int32Array.from([6, 26, 52, 78, 104, 130, -1]),\n        Int32Array.from([6, 30, 56, 82, 108, 134, -1]),\n        Int32Array.from([6, 34, 60, 86, 112, 138, -1]),\n        Int32Array.from([6, 30, 58, 86, 114, 142, -1]),\n        Int32Array.from([6, 34, 62, 90, 118, 146, -1]),\n        Int32Array.from([6, 30, 54, 78, 102, 126, 150]),\n        Int32Array.from([6, 24, 50, 76, 102, 128, 154]),\n        Int32Array.from([6, 28, 54, 80, 106, 132, 158]),\n        Int32Array.from([6, 32, 58, 84, 110, 136, 162]),\n        Int32Array.from([6, 26, 54, 82, 110, 138, 166]),\n        Int32Array.from([6, 30, 58, 86, 114, 142, 170]),\n    ]);\n    // Type info cells at the left top corner.\n    MatrixUtil.TYPE_INFO_COORDINATES = Array.from([\n        Int32Array.from([8, 0]),\n        Int32Array.from([8, 1]),\n        Int32Array.from([8, 2]),\n        Int32Array.from([8, 3]),\n        Int32Array.from([8, 4]),\n        Int32Array.from([8, 5]),\n        Int32Array.from([8, 7]),\n        Int32Array.from([8, 8]),\n        Int32Array.from([7, 8]),\n        Int32Array.from([5, 8]),\n        Int32Array.from([4, 8]),\n        Int32Array.from([3, 8]),\n        Int32Array.from([2, 8]),\n        Int32Array.from([1, 8]),\n        Int32Array.from([0, 8]),\n    ]);\n    // From Appendix D in JISX0510:2004 (p. 67)\n    MatrixUtil.VERSION_INFO_POLY = 0x1f25; // 1 1111 0010 0101\n    // From Appendix C in JISX0510:2004 (p.65).\n    MatrixUtil.TYPE_INFO_POLY = 0x537;\n    MatrixUtil.TYPE_INFO_MASK_PATTERN = 0x5412;\n\n    /*namespace com.google.zxing.qrcode.encoder {*/\n    class BlockPair {\n        constructor(dataBytes, errorCorrectionBytes) {\n            this.dataBytes = dataBytes;\n            this.errorCorrectionBytes = errorCorrectionBytes;\n        }\n        getDataBytes() {\n            return this.dataBytes;\n        }\n        getErrorCorrectionBytes() {\n            return this.errorCorrectionBytes;\n        }\n    }\n\n    /*import java.io.UnsupportedEncodingException;*/\n    /*import java.util.ArrayList;*/\n    /*import java.util.Collection;*/\n    /*import java.util.Map;*/\n    /**\n     * @author satorux@google.com (Satoru Takabayashi) - creator\n     * @author dswitkin@google.com (Daniel Switkin) - ported from C++\n     */\n    class Encoder {\n        // TYPESCRIPTPORT: changed to UTF8, the default for js\n        constructor() { }\n        // The mask penalty calculation is complicated.  See Table 21 of JISX0510:2004 (p.45) for details.\n        // Basically it applies four rules and summate all penalties.\n        static calculateMaskPenalty(matrix) {\n            return MaskUtil.applyMaskPenaltyRule1(matrix)\n                + MaskUtil.applyMaskPenaltyRule2(matrix)\n                + MaskUtil.applyMaskPenaltyRule3(matrix)\n                + MaskUtil.applyMaskPenaltyRule4(matrix);\n        }\n        /**\n         * @param content text to encode\n         * @param ecLevel error correction level to use\n         * @return {@link QRCode} representing the encoded QR code\n         * @throws WriterException if encoding can't succeed, because of for example invalid content\n         *   or configuration\n         */\n        // public static encode(content: string, ecLevel: ErrorCorrectionLevel): QRCode /*throws WriterException*/ {\n        //   return encode(content, ecLevel, null)\n        // }\n        static encode(content, ecLevel, hints = null) {\n            // Determine what character encoding has been specified by the caller, if any\n            let encoding = Encoder.DEFAULT_BYTE_MODE_ENCODING;\n            const hasEncodingHint = hints !== null && undefined !== hints.get(EncodeHintType$1.CHARACTER_SET);\n            if (hasEncodingHint) {\n                encoding = hints.get(EncodeHintType$1.CHARACTER_SET).toString();\n            }\n            // Pick an encoding mode appropriate for the content. Note that this will not attempt to use\n            // multiple modes / segments even if that were more efficient. Twould be nice.\n            const mode = this.chooseMode(content, encoding);\n            // This will store the header information, like mode and\n            // length, as well as \"header\" segments like an ECI segment.\n            const headerBits = new BitArray();\n            // Append ECI segment if applicable\n            if (mode === Mode$1.BYTE && (hasEncodingHint || Encoder.DEFAULT_BYTE_MODE_ENCODING !== encoding)) {\n                const eci = CharacterSetECI.getCharacterSetECIByName(encoding);\n                if (eci !== undefined) {\n                    this.appendECI(eci, headerBits);\n                }\n            }\n            // (With ECI in place,) Write the mode marker\n            this.appendModeInfo(mode, headerBits);\n            // Collect data within the main segment, separately, to count its size if needed. Don't add it to\n            // main payload yet.\n            const dataBits = new BitArray();\n            this.appendBytes(content, mode, dataBits, encoding);\n            let version;\n            if (hints !== null && undefined !== hints.get(EncodeHintType$1.QR_VERSION)) {\n                const versionNumber = Number.parseInt(hints.get(EncodeHintType$1.QR_VERSION).toString(), 10);\n                version = Version$1.getVersionForNumber(versionNumber);\n                const bitsNeeded = this.calculateBitsNeeded(mode, headerBits, dataBits, version);\n                if (!this.willFit(bitsNeeded, version, ecLevel)) {\n                    throw new WriterException('Data too big for requested version');\n                }\n            }\n            else {\n                version = this.recommendVersion(ecLevel, mode, headerBits, dataBits);\n            }\n            const headerAndDataBits = new BitArray();\n            headerAndDataBits.appendBitArray(headerBits);\n            // Find \"length\" of main segment and write it\n            const numLetters = mode === Mode$1.BYTE ? dataBits.getSizeInBytes() : content.length;\n            this.appendLengthInfo(numLetters, version, mode, headerAndDataBits);\n            // Put data together into the overall payload\n            headerAndDataBits.appendBitArray(dataBits);\n            const ecBlocks = version.getECBlocksForLevel(ecLevel);\n            const numDataBytes = version.getTotalCodewords() - ecBlocks.getTotalECCodewords();\n            // Terminate the bits properly.\n            this.terminateBits(numDataBytes, headerAndDataBits);\n            // Interleave data bits with error correction code.\n            const finalBits = this.interleaveWithECBytes(headerAndDataBits, version.getTotalCodewords(), numDataBytes, ecBlocks.getNumBlocks());\n            const qrCode = new QRCode();\n            qrCode.setECLevel(ecLevel);\n            qrCode.setMode(mode);\n            qrCode.setVersion(version);\n            //  Choose the mask pattern and set to \"qrCode\".\n            const dimension = version.getDimensionForVersion();\n            const matrix = new ByteMatrix(dimension, dimension);\n            const maskPattern = this.chooseMaskPattern(finalBits, ecLevel, version, matrix);\n            qrCode.setMaskPattern(maskPattern);\n            // Build the matrix and set it to \"qrCode\".\n            MatrixUtil.buildMatrix(finalBits, ecLevel, version, maskPattern, matrix);\n            qrCode.setMatrix(matrix);\n            return qrCode;\n        }\n        /**\n         * Decides the smallest version of QR code that will contain all of the provided data.\n         *\n         * @throws WriterException if the data cannot fit in any version\n         */\n        static recommendVersion(ecLevel, mode, headerBits, dataBits) {\n            // Hard part: need to know version to know how many bits length takes. But need to know how many\n            // bits it takes to know version. First we take a guess at version by assuming version will be\n            // the minimum, 1:\n            const provisionalBitsNeeded = this.calculateBitsNeeded(mode, headerBits, dataBits, Version$1.getVersionForNumber(1));\n            const provisionalVersion = this.chooseVersion(provisionalBitsNeeded, ecLevel);\n            // Use that guess to calculate the right version. I am still not sure this works in 100% of cases.\n            const bitsNeeded = this.calculateBitsNeeded(mode, headerBits, dataBits, provisionalVersion);\n            return this.chooseVersion(bitsNeeded, ecLevel);\n        }\n        static calculateBitsNeeded(mode, headerBits, dataBits, version) {\n            return headerBits.getSize() + mode.getCharacterCountBits(version) + dataBits.getSize();\n        }\n        /**\n         * @return the code point of the table used in alphanumeric mode or\n         *  -1 if there is no corresponding code in the table.\n         */\n        static getAlphanumericCode(code /*int*/) {\n            if (code < Encoder.ALPHANUMERIC_TABLE.length) {\n                return Encoder.ALPHANUMERIC_TABLE[code];\n            }\n            return -1;\n        }\n        // public static chooseMode(content: string): Mode {\n        //   return chooseMode(content, null);\n        // }\n        /**\n         * Choose the best mode by examining the content. Note that 'encoding' is used as a hint;\n         * if it is Shift_JIS, and the input is only double-byte Kanji, then we return {@link Mode#KANJI}.\n         */\n        static chooseMode(content, encoding = null) {\n            if (CharacterSetECI.SJIS.getName() === encoding && this.isOnlyDoubleByteKanji(content)) {\n                // Choose Kanji mode if all input are double-byte characters\n                return Mode$1.KANJI;\n            }\n            let hasNumeric = false;\n            let hasAlphanumeric = false;\n            for (let i = 0, length = content.length; i < length; ++i) {\n                const c = content.charAt(i);\n                if (Encoder.isDigit(c)) {\n                    hasNumeric = true;\n                }\n                else if (this.getAlphanumericCode(c.charCodeAt(0)) !== -1) {\n                    hasAlphanumeric = true;\n                }\n                else {\n                    return Mode$1.BYTE;\n                }\n            }\n            if (hasAlphanumeric) {\n                return Mode$1.ALPHANUMERIC;\n            }\n            if (hasNumeric) {\n                return Mode$1.NUMERIC;\n            }\n            return Mode$1.BYTE;\n        }\n        static isOnlyDoubleByteKanji(content) {\n            let bytes;\n            try {\n                bytes = StringEncoding.encode(content, CharacterSetECI.SJIS); // content.getBytes(\"Shift_JIS\"))\n            }\n            catch (ignored /*: UnsupportedEncodingException*/) {\n                return false;\n            }\n            const length = bytes.length;\n            if (length % 2 !== 0) {\n                return false;\n            }\n            for (let i = 0; i < length; i += 2) {\n                const byte1 = bytes[i] & 0xFF;\n                if ((byte1 < 0x81 || byte1 > 0x9F) && (byte1 < 0xE0 || byte1 > 0xEB)) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        static chooseMaskPattern(bits, ecLevel, version, matrix) {\n            let minPenalty = Number.MAX_SAFE_INTEGER; // Lower penalty is better.\n            let bestMaskPattern = -1;\n            // We try all mask patterns to choose the best one.\n            for (let maskPattern = 0; maskPattern < QRCode.NUM_MASK_PATTERNS; maskPattern++) {\n                MatrixUtil.buildMatrix(bits, ecLevel, version, maskPattern, matrix);\n                let penalty = this.calculateMaskPenalty(matrix);\n                if (penalty < minPenalty) {\n                    minPenalty = penalty;\n                    bestMaskPattern = maskPattern;\n                }\n            }\n            return bestMaskPattern;\n        }\n        static chooseVersion(numInputBits /*int*/, ecLevel) {\n            for (let versionNum = 1; versionNum <= 40; versionNum++) {\n                const version = Version$1.getVersionForNumber(versionNum);\n                if (Encoder.willFit(numInputBits, version, ecLevel)) {\n                    return version;\n                }\n            }\n            throw new WriterException('Data too big');\n        }\n        /**\n         * @return true if the number of input bits will fit in a code with the specified version and\n         * error correction level.\n         */\n        static willFit(numInputBits /*int*/, version, ecLevel) {\n            // In the following comments, we use numbers of Version 7-H.\n            // numBytes = 196\n            const numBytes = version.getTotalCodewords();\n            // getNumECBytes = 130\n            const ecBlocks = version.getECBlocksForLevel(ecLevel);\n            const numEcBytes = ecBlocks.getTotalECCodewords();\n            // getNumDataBytes = 196 - 130 = 66\n            const numDataBytes = numBytes - numEcBytes;\n            const totalInputBytes = (numInputBits + 7) / 8;\n            return numDataBytes >= totalInputBytes;\n        }\n        /**\n         * Terminate bits as described in 8.4.8 and 8.4.9 of JISX0510:2004 (p.24).\n         */\n        static terminateBits(numDataBytes /*int*/, bits) {\n            const capacity = numDataBytes * 8;\n            if (bits.getSize() > capacity) {\n                throw new WriterException('data bits cannot fit in the QR Code' + bits.getSize() + ' > ' +\n                    capacity);\n            }\n            for (let i = 0; i < 4 && bits.getSize() < capacity; ++i) {\n                bits.appendBit(false);\n            }\n            // Append termination bits. See 8.4.8 of JISX0510:2004 (p.24) for details.\n            // If the last byte isn't 8-bit aligned, we'll add padding bits.\n            const numBitsInLastByte = bits.getSize() & 0x07;\n            if (numBitsInLastByte > 0) {\n                for (let i = numBitsInLastByte; i < 8; i++) {\n                    bits.appendBit(false);\n                }\n            }\n            // If we have more space, we'll fill the space with padding patterns defined in 8.4.9 (p.24).\n            const numPaddingBytes = numDataBytes - bits.getSizeInBytes();\n            for (let i = 0; i < numPaddingBytes; ++i) {\n                bits.appendBits((i & 0x01) === 0 ? 0xEC : 0x11, 8);\n            }\n            if (bits.getSize() !== capacity) {\n                throw new WriterException('Bits size does not equal capacity');\n            }\n        }\n        /**\n         * Get number of data bytes and number of error correction bytes for block id \"blockID\". Store\n         * the result in \"numDataBytesInBlock\", and \"numECBytesInBlock\". See table 12 in 8.5.1 of\n         * JISX0510:2004 (p.30)\n         */\n        static getNumDataBytesAndNumECBytesForBlockID(numTotalBytes /*int*/, numDataBytes /*int*/, numRSBlocks /*int*/, blockID /*int*/, numDataBytesInBlock, numECBytesInBlock) {\n            if (blockID >= numRSBlocks) {\n                throw new WriterException('Block ID too large');\n            }\n            // numRsBlocksInGroup2 = 196 % 5 = 1\n            const numRsBlocksInGroup2 = numTotalBytes % numRSBlocks;\n            // numRsBlocksInGroup1 = 5 - 1 = 4\n            const numRsBlocksInGroup1 = numRSBlocks - numRsBlocksInGroup2;\n            // numTotalBytesInGroup1 = 196 / 5 = 39\n            const numTotalBytesInGroup1 = Math.floor(numTotalBytes / numRSBlocks);\n            // numTotalBytesInGroup2 = 39 + 1 = 40\n            const numTotalBytesInGroup2 = numTotalBytesInGroup1 + 1;\n            // numDataBytesInGroup1 = 66 / 5 = 13\n            const numDataBytesInGroup1 = Math.floor(numDataBytes / numRSBlocks);\n            // numDataBytesInGroup2 = 13 + 1 = 14\n            const numDataBytesInGroup2 = numDataBytesInGroup1 + 1;\n            // numEcBytesInGroup1 = 39 - 13 = 26\n            const numEcBytesInGroup1 = numTotalBytesInGroup1 - numDataBytesInGroup1;\n            // numEcBytesInGroup2 = 40 - 14 = 26\n            const numEcBytesInGroup2 = numTotalBytesInGroup2 - numDataBytesInGroup2;\n            // Sanity checks.\n            // 26 = 26\n            if (numEcBytesInGroup1 !== numEcBytesInGroup2) {\n                throw new WriterException('EC bytes mismatch');\n            }\n            // 5 = 4 + 1.\n            if (numRSBlocks !== numRsBlocksInGroup1 + numRsBlocksInGroup2) {\n                throw new WriterException('RS blocks mismatch');\n            }\n            // 196 = (13 + 26) * 4 + (14 + 26) * 1\n            if (numTotalBytes !==\n                ((numDataBytesInGroup1 + numEcBytesInGroup1) *\n                    numRsBlocksInGroup1) +\n                    ((numDataBytesInGroup2 + numEcBytesInGroup2) *\n                        numRsBlocksInGroup2)) {\n                throw new WriterException('Total bytes mismatch');\n            }\n            if (blockID < numRsBlocksInGroup1) {\n                numDataBytesInBlock[0] = numDataBytesInGroup1;\n                numECBytesInBlock[0] = numEcBytesInGroup1;\n            }\n            else {\n                numDataBytesInBlock[0] = numDataBytesInGroup2;\n                numECBytesInBlock[0] = numEcBytesInGroup2;\n            }\n        }\n        /**\n         * Interleave \"bits\" with corresponding error correction bytes. On success, store the result in\n         * \"result\". The interleave rule is complicated. See 8.6 of JISX0510:2004 (p.37) for details.\n         */\n        static interleaveWithECBytes(bits, numTotalBytes /*int*/, numDataBytes /*int*/, numRSBlocks /*int*/) {\n            // \"bits\" must have \"getNumDataBytes\" bytes of data.\n            if (bits.getSizeInBytes() !== numDataBytes) {\n                throw new WriterException('Number of bits and data bytes does not match');\n            }\n            // Step 1.  Divide data bytes into blocks and generate error correction bytes for them. We'll\n            // store the divided data bytes blocks and error correction bytes blocks into \"blocks\".\n            let dataBytesOffset = 0;\n            let maxNumDataBytes = 0;\n            let maxNumEcBytes = 0;\n            // Since, we know the number of reedsolmon blocks, we can initialize the vector with the number.\n            const blocks = new Array(); // new Array<BlockPair>(numRSBlocks)\n            for (let i = 0; i < numRSBlocks; ++i) {\n                const numDataBytesInBlock = new Int32Array(1);\n                const numEcBytesInBlock = new Int32Array(1);\n                Encoder.getNumDataBytesAndNumECBytesForBlockID(numTotalBytes, numDataBytes, numRSBlocks, i, numDataBytesInBlock, numEcBytesInBlock);\n                const size = numDataBytesInBlock[0];\n                const dataBytes = new Uint8Array(size);\n                bits.toBytes(8 * dataBytesOffset, dataBytes, 0, size);\n                const ecBytes = Encoder.generateECBytes(dataBytes, numEcBytesInBlock[0]);\n                blocks.push(new BlockPair(dataBytes, ecBytes));\n                maxNumDataBytes = Math.max(maxNumDataBytes, size);\n                maxNumEcBytes = Math.max(maxNumEcBytes, ecBytes.length);\n                dataBytesOffset += numDataBytesInBlock[0];\n            }\n            if (numDataBytes !== dataBytesOffset) {\n                throw new WriterException('Data bytes does not match offset');\n            }\n            const result = new BitArray();\n            // First, place data blocks.\n            for (let i = 0; i < maxNumDataBytes; ++i) {\n                for (const block of blocks) {\n                    const dataBytes = block.getDataBytes();\n                    if (i < dataBytes.length) {\n                        result.appendBits(dataBytes[i], 8);\n                    }\n                }\n            }\n            // Then, place error correction blocks.\n            for (let i = 0; i < maxNumEcBytes; ++i) {\n                for (const block of blocks) {\n                    const ecBytes = block.getErrorCorrectionBytes();\n                    if (i < ecBytes.length) {\n                        result.appendBits(ecBytes[i], 8);\n                    }\n                }\n            }\n            if (numTotalBytes !== result.getSizeInBytes()) { // Should be same.\n                throw new WriterException('Interleaving error: ' + numTotalBytes + ' and ' +\n                    result.getSizeInBytes() + ' differ.');\n            }\n            return result;\n        }\n        static generateECBytes(dataBytes, numEcBytesInBlock /*int*/) {\n            const numDataBytes = dataBytes.length;\n            const toEncode = new Int32Array(numDataBytes + numEcBytesInBlock); // int[numDataBytes + numEcBytesInBlock]\n            for (let i = 0; i < numDataBytes; i++) {\n                toEncode[i] = dataBytes[i] & 0xFF;\n            }\n            new ReedSolomonEncoder(GenericGF.QR_CODE_FIELD_256).encode(toEncode, numEcBytesInBlock);\n            const ecBytes = new Uint8Array(numEcBytesInBlock);\n            for (let i = 0; i < numEcBytesInBlock; i++) {\n                ecBytes[i] = /*(byte) */ toEncode[numDataBytes + i];\n            }\n            return ecBytes;\n        }\n        /**\n         * Append mode info. On success, store the result in \"bits\".\n         */\n        static appendModeInfo(mode, bits) {\n            bits.appendBits(mode.getBits(), 4);\n        }\n        /**\n         * Append length info. On success, store the result in \"bits\".\n         */\n        static appendLengthInfo(numLetters /*int*/, version, mode, bits) {\n            const numBits = mode.getCharacterCountBits(version);\n            if (numLetters >= (1 << numBits)) {\n                throw new WriterException(numLetters + ' is bigger than ' + ((1 << numBits) - 1));\n            }\n            bits.appendBits(numLetters, numBits);\n        }\n        /**\n         * Append \"bytes\" in \"mode\" mode (encoding) into \"bits\". On success, store the result in \"bits\".\n         */\n        static appendBytes(content, mode, bits, encoding) {\n            switch (mode) {\n                case Mode$1.NUMERIC:\n                    Encoder.appendNumericBytes(content, bits);\n                    break;\n                case Mode$1.ALPHANUMERIC:\n                    Encoder.appendAlphanumericBytes(content, bits);\n                    break;\n                case Mode$1.BYTE:\n                    Encoder.append8BitBytes(content, bits, encoding);\n                    break;\n                case Mode$1.KANJI:\n                    Encoder.appendKanjiBytes(content, bits);\n                    break;\n                default:\n                    throw new WriterException('Invalid mode: ' + mode);\n            }\n        }\n        static getDigit(singleCharacter) {\n            return singleCharacter.charCodeAt(0) - 48;\n        }\n        static isDigit(singleCharacter) {\n            const cn = Encoder.getDigit(singleCharacter);\n            return cn >= 0 && cn <= 9;\n        }\n        static appendNumericBytes(content, bits) {\n            const length = content.length;\n            let i = 0;\n            while (i < length) {\n                const num1 = Encoder.getDigit(content.charAt(i));\n                if (i + 2 < length) {\n                    // Encode three numeric letters in ten bits.\n                    const num2 = Encoder.getDigit(content.charAt(i + 1));\n                    const num3 = Encoder.getDigit(content.charAt(i + 2));\n                    bits.appendBits(num1 * 100 + num2 * 10 + num3, 10);\n                    i += 3;\n                }\n                else if (i + 1 < length) {\n                    // Encode two numeric letters in seven bits.\n                    const num2 = Encoder.getDigit(content.charAt(i + 1));\n                    bits.appendBits(num1 * 10 + num2, 7);\n                    i += 2;\n                }\n                else {\n                    // Encode one numeric letter in four bits.\n                    bits.appendBits(num1, 4);\n                    i++;\n                }\n            }\n        }\n        static appendAlphanumericBytes(content, bits) {\n            const length = content.length;\n            let i = 0;\n            while (i < length) {\n                const code1 = Encoder.getAlphanumericCode(content.charCodeAt(i));\n                if (code1 === -1) {\n                    throw new WriterException();\n                }\n                if (i + 1 < length) {\n                    const code2 = Encoder.getAlphanumericCode(content.charCodeAt(i + 1));\n                    if (code2 === -1) {\n                        throw new WriterException();\n                    }\n                    // Encode two alphanumeric letters in 11 bits.\n                    bits.appendBits(code1 * 45 + code2, 11);\n                    i += 2;\n                }\n                else {\n                    // Encode one alphanumeric letter in six bits.\n                    bits.appendBits(code1, 6);\n                    i++;\n                }\n            }\n        }\n        static append8BitBytes(content, bits, encoding) {\n            let bytes;\n            try {\n                bytes = StringEncoding.encode(content, encoding);\n            }\n            catch (uee /*: UnsupportedEncodingException*/) {\n                throw new WriterException(uee);\n            }\n            for (let i = 0, length = bytes.length; i !== length; i++) {\n                const b = bytes[i];\n                bits.appendBits(b, 8);\n            }\n        }\n        /**\n         * @throws WriterException\n         */\n        static appendKanjiBytes(content, bits) {\n            let bytes;\n            try {\n                bytes = StringEncoding.encode(content, CharacterSetECI.SJIS);\n            }\n            catch (uee /*: UnsupportedEncodingException*/) {\n                throw new WriterException(uee);\n            }\n            const length = bytes.length;\n            for (let i = 0; i < length; i += 2) {\n                const byte1 = bytes[i] & 0xFF;\n                const byte2 = bytes[i + 1] & 0xFF;\n                const code = ((byte1 << 8) & 0xFFFFFFFF) | byte2;\n                let subtracted = -1;\n                if (code >= 0x8140 && code <= 0x9ffc) {\n                    subtracted = code - 0x8140;\n                }\n                else if (code >= 0xe040 && code <= 0xebbf) {\n                    subtracted = code - 0xc140;\n                }\n                if (subtracted === -1) {\n                    throw new WriterException('Invalid byte sequence');\n                }\n                const encoded = ((subtracted >> 8) * 0xc0) + (subtracted & 0xff);\n                bits.appendBits(encoded, 13);\n            }\n        }\n        static appendECI(eci, bits) {\n            bits.appendBits(Mode$1.ECI.getBits(), 4);\n            // This is correct for values up to 127, which is all we need now.\n            bits.appendBits(eci.getValue(), 8);\n        }\n    }\n    // The original table is defined in the table 5 of JISX0510:2004 (p.19).\n    Encoder.ALPHANUMERIC_TABLE = Int32Array.from([\n        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n        36, -1, -1, -1, 37, 38, -1, -1, -1, -1, 39, 40, -1, 41, 42, 43,\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 44, -1, -1, -1, -1, -1,\n        -1, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n        25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, -1, -1, -1, -1, -1,\n    ]);\n    Encoder.DEFAULT_BYTE_MODE_ENCODING = CharacterSetECI.UTF8.getName(); // \"ISO-8859-1\"\n\n    /**\n     * @deprecated Moving to @zxing/browser\n     */\n    class BrowserQRCodeSvgWriter {\n        /**\n         * Writes and renders a QRCode SVG element.\n         *\n         * @param contents\n         * @param width\n         * @param height\n         * @param hints\n         */\n        write(contents, width, height, hints = null) {\n            if (contents.length === 0) {\n                throw new IllegalArgumentException('Found empty contents');\n            }\n            // if (format != BarcodeFormat.QR_CODE) {\n            //   throw new IllegalArgumentException(\"Can only encode QR_CODE, but got \" + format)\n            // }\n            if (width < 0 || height < 0) {\n                throw new IllegalArgumentException('Requested dimensions are too small: ' + width + 'x' + height);\n            }\n            let errorCorrectionLevel = ErrorCorrectionLevel.L;\n            let quietZone = BrowserQRCodeSvgWriter.QUIET_ZONE_SIZE;\n            if (hints !== null) {\n                if (undefined !== hints.get(EncodeHintType$1.ERROR_CORRECTION)) {\n                    errorCorrectionLevel = ErrorCorrectionLevel.fromString(hints.get(EncodeHintType$1.ERROR_CORRECTION).toString());\n                }\n                if (undefined !== hints.get(EncodeHintType$1.MARGIN)) {\n                    quietZone = Number.parseInt(hints.get(EncodeHintType$1.MARGIN).toString(), 10);\n                }\n            }\n            const code = Encoder.encode(contents, errorCorrectionLevel, hints);\n            return this.renderResult(code, width, height, quietZone);\n        }\n        /**\n         * Renders the result and then appends it to the DOM.\n         */\n        writeToDom(containerElement, contents, width, height, hints = null) {\n            if (typeof containerElement === 'string') {\n                containerElement = document.querySelector(containerElement);\n            }\n            const svgElement = this.write(contents, width, height, hints);\n            if (containerElement)\n                containerElement.appendChild(svgElement);\n        }\n        /**\n         * Note that the input matrix uses 0 == white, 1 == black.\n         * The output matrix uses 0 == black, 255 == white (i.e. an 8 bit greyscale bitmap).\n         */\n        renderResult(code, width /*int*/, height /*int*/, quietZone /*int*/) {\n            const input = code.getMatrix();\n            if (input === null) {\n                throw new IllegalStateException();\n            }\n            const inputWidth = input.getWidth();\n            const inputHeight = input.getHeight();\n            const qrWidth = inputWidth + (quietZone * 2);\n            const qrHeight = inputHeight + (quietZone * 2);\n            const outputWidth = Math.max(width, qrWidth);\n            const outputHeight = Math.max(height, qrHeight);\n            const multiple = Math.min(Math.floor(outputWidth / qrWidth), Math.floor(outputHeight / qrHeight));\n            // Padding includes both the quiet zone and the extra white pixels to accommodate the requested\n            // dimensions. For example, if input is 25x25 the QR will be 33x33 including the quiet zone.\n            // If the requested size is 200x160, the multiple will be 4, for a QR of 132x132. These will\n            // handle all the padding from 100x100 (the actual QR) up to 200x160.\n            const leftPadding = Math.floor((outputWidth - (inputWidth * multiple)) / 2);\n            const topPadding = Math.floor((outputHeight - (inputHeight * multiple)) / 2);\n            const svgElement = this.createSVGElement(outputWidth, outputHeight);\n            for (let inputY = 0, outputY = topPadding; inputY < inputHeight; inputY++, outputY += multiple) {\n                // Write the contents of this row of the barcode\n                for (let inputX = 0, outputX = leftPadding; inputX < inputWidth; inputX++, outputX += multiple) {\n                    if (input.get(inputX, inputY) === 1) {\n                        const svgRectElement = this.createSvgRectElement(outputX, outputY, multiple, multiple);\n                        svgElement.appendChild(svgRectElement);\n                    }\n                }\n            }\n            return svgElement;\n        }\n        /**\n         * Creates a SVG element.\n         *\n         * @param w SVG's width attribute\n         * @param h SVG's height attribute\n         */\n        createSVGElement(w, h) {\n            const svgElement = document.createElementNS(BrowserQRCodeSvgWriter.SVG_NS, 'svg');\n            svgElement.setAttributeNS(null, 'height', w.toString());\n            svgElement.setAttributeNS(null, 'width', h.toString());\n            return svgElement;\n        }\n        /**\n         * Creates a SVG rect element.\n         *\n         * @param x Element's x coordinate\n         * @param y Element's y coordinate\n         * @param w Element's width attribute\n         * @param h Element's height attribute\n         */\n        createSvgRectElement(x, y, w, h) {\n            const rect = document.createElementNS(BrowserQRCodeSvgWriter.SVG_NS, 'rect');\n            rect.setAttributeNS(null, 'x', x.toString());\n            rect.setAttributeNS(null, 'y', y.toString());\n            rect.setAttributeNS(null, 'height', w.toString());\n            rect.setAttributeNS(null, 'width', h.toString());\n            rect.setAttributeNS(null, 'fill', '#000000');\n            return rect;\n        }\n    }\n    BrowserQRCodeSvgWriter.QUIET_ZONE_SIZE = 4;\n    /**\n     * SVG markup NameSpace\n     */\n    BrowserQRCodeSvgWriter.SVG_NS = 'http://www.w3.org/2000/svg';\n\n    /*import java.util.Map;*/\n    /**\n     * This object renders a QR Code as a BitMatrix 2D array of greyscale values.\n     *\n     * @author dswitkin@google.com (Daniel Switkin)\n     */\n    class QRCodeWriter {\n        /*@Override*/\n        // public encode(contents: string, format: BarcodeFormat, width: number /*int*/, height: number /*int*/): BitMatrix\n        //     /*throws WriterException */ {\n        //   return encode(contents, format, width, height, null)\n        // }\n        /*@Override*/\n        encode(contents, format, width /*int*/, height /*int*/, hints) {\n            if (contents.length === 0) {\n                throw new IllegalArgumentException('Found empty contents');\n            }\n            if (format !== BarcodeFormat$1.QR_CODE) {\n                throw new IllegalArgumentException('Can only encode QR_CODE, but got ' + format);\n            }\n            if (width < 0 || height < 0) {\n                throw new IllegalArgumentException(`Requested dimensions are too small: ${width}x${height}`);\n            }\n            let errorCorrectionLevel = ErrorCorrectionLevel.L;\n            let quietZone = QRCodeWriter.QUIET_ZONE_SIZE;\n            if (hints !== null) {\n                if (undefined !== hints.get(EncodeHintType$1.ERROR_CORRECTION)) {\n                    errorCorrectionLevel = ErrorCorrectionLevel.fromString(hints.get(EncodeHintType$1.ERROR_CORRECTION).toString());\n                }\n                if (undefined !== hints.get(EncodeHintType$1.MARGIN)) {\n                    quietZone = Number.parseInt(hints.get(EncodeHintType$1.MARGIN).toString(), 10);\n                }\n            }\n            const code = Encoder.encode(contents, errorCorrectionLevel, hints);\n            return QRCodeWriter.renderResult(code, width, height, quietZone);\n        }\n        // Note that the input matrix uses 0 == white, 1 == black, while the output matrix uses\n        // 0 == black, 255 == white (i.e. an 8 bit greyscale bitmap).\n        static renderResult(code, width /*int*/, height /*int*/, quietZone /*int*/) {\n            const input = code.getMatrix();\n            if (input === null) {\n                throw new IllegalStateException();\n            }\n            const inputWidth = input.getWidth();\n            const inputHeight = input.getHeight();\n            const qrWidth = inputWidth + (quietZone * 2);\n            const qrHeight = inputHeight + (quietZone * 2);\n            const outputWidth = Math.max(width, qrWidth);\n            const outputHeight = Math.max(height, qrHeight);\n            const multiple = Math.min(Math.floor(outputWidth / qrWidth), Math.floor(outputHeight / qrHeight));\n            // Padding includes both the quiet zone and the extra white pixels to accommodate the requested\n            // dimensions. For example, if input is 25x25 the QR will be 33x33 including the quiet zone.\n            // If the requested size is 200x160, the multiple will be 4, for a QR of 132x132. These will\n            // handle all the padding from 100x100 (the actual QR) up to 200x160.\n            const leftPadding = Math.floor((outputWidth - (inputWidth * multiple)) / 2);\n            const topPadding = Math.floor((outputHeight - (inputHeight * multiple)) / 2);\n            const output = new BitMatrix(outputWidth, outputHeight);\n            for (let inputY = 0, outputY = topPadding; inputY < inputHeight; inputY++, outputY += multiple) {\n                // Write the contents of this row of the barcode\n                for (let inputX = 0, outputX = leftPadding; inputX < inputWidth; inputX++, outputX += multiple) {\n                    if (input.get(inputX, inputY) === 1) {\n                        output.setRegion(outputX, outputY, multiple, multiple);\n                    }\n                }\n            }\n            return output;\n        }\n    }\n    QRCodeWriter.QUIET_ZONE_SIZE = 4;\n\n    /*import java.util.Map;*/\n    /**\n     * This is a factory class which finds the appropriate Writer subclass for the BarcodeFormat\n     * requested and encodes the barcode with the supplied contents.\n     *\n     * @author dswitkin@google.com (Daniel Switkin)\n     */\n    class MultiFormatWriter {\n        /*@Override*/\n        // public encode(contents: string,\n        //                         format: BarcodeFormat,\n        //                         width: number /*int*/,\n        //                         height: number /*int*/): BitMatrix /*throws WriterException */ {\n        //   return encode(contents, format, width, height, null)\n        // }\n        /*@Override*/\n        encode(contents, format, width /*int*/, height /*int*/, hints) {\n            let writer;\n            switch (format) {\n                // case BarcodeFormat.EAN_8:\n                //   writer = new EAN8Writer()\n                //   break\n                // case BarcodeFormat.UPC_E:\n                //   writer = new UPCEWriter()\n                //   break\n                // case BarcodeFormat.EAN_13:\n                //   writer = new EAN13Writer()\n                //   break\n                // case BarcodeFormat.UPC_A:\n                //   writer = new UPCAWriter()\n                //   break\n                case BarcodeFormat$1.QR_CODE:\n                    writer = new QRCodeWriter();\n                    break;\n                // case BarcodeFormat.CODE_39:\n                //   writer = new Code39Writer()\n                //   break\n                // case BarcodeFormat.CODE_93:\n                //   writer = new Code93Writer()\n                //   break\n                // case BarcodeFormat.CODE_128:\n                //   writer = new Code128Writer()\n                //   break\n                // case BarcodeFormat.ITF:\n                //   writer = new ITFWriter()\n                //   break\n                // case BarcodeFormat.PDF_417:\n                //   writer = new PDF417Writer()\n                //   break\n                // case BarcodeFormat.CODABAR:\n                //   writer = new CodaBarWriter()\n                //   break\n                // case BarcodeFormat.DATA_MATRIX:\n                //   writer = new DataMatrixWriter()\n                //   break\n                // case BarcodeFormat.AZTEC:\n                //   writer = new AztecWriter()\n                //   break\n                default:\n                    throw new IllegalArgumentException('No encoder available for format ' + format);\n            }\n            return writer.encode(contents, format, width, height, hints);\n        }\n    }\n\n    /*\n     * Copyright 2009 ZXing authors\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n    /**\n     * This object extends LuminanceSource around an array of YUV data returned from the camera driver,\n     * with the option to crop to a rectangle within the full data. This can be used to exclude\n     * superfluous pixels around the perimeter and speed up decoding.\n     *\n     * It works for any pixel format where the Y channel is planar and appears first, including\n     * YCbCr_420_SP and YCbCr_422_SP.\n     *\n     * @author dswitkin@google.com (Daniel Switkin)\n     */\n    class PlanarYUVLuminanceSource extends LuminanceSource {\n        constructor(yuvData, dataWidth /*int*/, dataHeight /*int*/, left /*int*/, top /*int*/, width /*int*/, height /*int*/, reverseHorizontal) {\n            super(width, height);\n            this.yuvData = yuvData;\n            this.dataWidth = dataWidth;\n            this.dataHeight = dataHeight;\n            this.left = left;\n            this.top = top;\n            if (left + width > dataWidth || top + height > dataHeight) {\n                throw new IllegalArgumentException('Crop rectangle does not fit within image data.');\n            }\n            if (reverseHorizontal) {\n                this.reverseHorizontal(width, height);\n            }\n        }\n        /*@Override*/\n        getRow(y /*int*/, row) {\n            if (y < 0 || y >= this.getHeight()) {\n                throw new IllegalArgumentException('Requested row is outside the image: ' + y);\n            }\n            const width = this.getWidth();\n            if (row === null || row === undefined || row.length < width) {\n                row = new Uint8ClampedArray(width);\n            }\n            const offset = (y + this.top) * this.dataWidth + this.left;\n            System.arraycopy(this.yuvData, offset, row, 0, width);\n            return row;\n        }\n        /*@Override*/\n        getMatrix() {\n            const width = this.getWidth();\n            const height = this.getHeight();\n            // If the caller asks for the entire underlying image, save the copy and give them the\n            // original data. The docs specifically warn that result.length must be ignored.\n            if (width === this.dataWidth && height === this.dataHeight) {\n                return this.yuvData;\n            }\n            const area = width * height;\n            const matrix = new Uint8ClampedArray(area);\n            let inputOffset = this.top * this.dataWidth + this.left;\n            // If the width matches the full width of the underlying data, perform a single copy.\n            if (width === this.dataWidth) {\n                System.arraycopy(this.yuvData, inputOffset, matrix, 0, area);\n                return matrix;\n            }\n            // Otherwise copy one cropped row at a time.\n            for (let y = 0; y < height; y++) {\n                const outputOffset = y * width;\n                System.arraycopy(this.yuvData, inputOffset, matrix, outputOffset, width);\n                inputOffset += this.dataWidth;\n            }\n            return matrix;\n        }\n        /*@Override*/\n        isCropSupported() {\n            return true;\n        }\n        /*@Override*/\n        crop(left /*int*/, top /*int*/, width /*int*/, height /*int*/) {\n            return new PlanarYUVLuminanceSource(this.yuvData, this.dataWidth, this.dataHeight, this.left + left, this.top + top, width, height, false);\n        }\n        renderThumbnail() {\n            const width = this.getWidth() / PlanarYUVLuminanceSource.THUMBNAIL_SCALE_FACTOR;\n            const height = this.getHeight() / PlanarYUVLuminanceSource.THUMBNAIL_SCALE_FACTOR;\n            const pixels = new Int32Array(width * height);\n            const yuv = this.yuvData;\n            let inputOffset = this.top * this.dataWidth + this.left;\n            for (let y = 0; y < height; y++) {\n                const outputOffset = y * width;\n                for (let x = 0; x < width; x++) {\n                    const grey = yuv[inputOffset + x * PlanarYUVLuminanceSource.THUMBNAIL_SCALE_FACTOR] & 0xff;\n                    pixels[outputOffset + x] = 0xFF000000 | (grey * 0x00010101);\n                }\n                inputOffset += this.dataWidth * PlanarYUVLuminanceSource.THUMBNAIL_SCALE_FACTOR;\n            }\n            return pixels;\n        }\n        /**\n         * @return width of image from {@link #renderThumbnail()}\n         */\n        getThumbnailWidth() {\n            return this.getWidth() / PlanarYUVLuminanceSource.THUMBNAIL_SCALE_FACTOR;\n        }\n        /**\n         * @return height of image from {@link #renderThumbnail()}\n         */\n        getThumbnailHeight() {\n            return this.getHeight() / PlanarYUVLuminanceSource.THUMBNAIL_SCALE_FACTOR;\n        }\n        reverseHorizontal(width /*int*/, height /*int*/) {\n            const yuvData = this.yuvData;\n            for (let y = 0, rowStart = this.top * this.dataWidth + this.left; y < height; y++, rowStart += this.dataWidth) {\n                const middle = rowStart + width / 2;\n                for (let x1 = rowStart, x2 = rowStart + width - 1; x1 < middle; x1++, x2--) {\n                    const temp = yuvData[x1];\n                    yuvData[x1] = yuvData[x2];\n                    yuvData[x2] = temp;\n                }\n            }\n        }\n        invert() {\n            return new InvertedLuminanceSource(this);\n        }\n    }\n    PlanarYUVLuminanceSource.THUMBNAIL_SCALE_FACTOR = 2;\n\n    /*\n     * Copyright 2009 ZXing authors\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n    /**\n     * This class is used to help decode images from files which arrive as RGB data from\n     * an ARGB pixel array. It does not support rotation.\n     *\n     * @author dswitkin@google.com (Daniel Switkin)\n     * @author Betaminos\n     */\n    class RGBLuminanceSource extends LuminanceSource {\n        constructor(luminances, width /*int*/, height /*int*/, dataWidth /*int*/, dataHeight /*int*/, left /*int*/, top /*int*/) {\n            super(width, height);\n            this.dataWidth = dataWidth;\n            this.dataHeight = dataHeight;\n            this.left = left;\n            this.top = top;\n            if (luminances.BYTES_PER_ELEMENT === 4) { // Int32Array\n                const size = width * height;\n                const luminancesUint8Array = new Uint8ClampedArray(size);\n                for (let offset = 0; offset < size; offset++) {\n                    const pixel = luminances[offset];\n                    const r = (pixel >> 16) & 0xff; // red\n                    const g2 = (pixel >> 7) & 0x1fe; // 2 * green\n                    const b = pixel & 0xff; // blue\n                    // Calculate green-favouring average cheaply\n                    luminancesUint8Array[offset] = /*(byte) */ ((r + g2 + b) / 4) & 0xFF;\n                }\n                this.luminances = luminancesUint8Array;\n            }\n            else {\n                this.luminances = luminances;\n            }\n            if (undefined === dataWidth) {\n                this.dataWidth = width;\n            }\n            if (undefined === dataHeight) {\n                this.dataHeight = height;\n            }\n            if (undefined === left) {\n                this.left = 0;\n            }\n            if (undefined === top) {\n                this.top = 0;\n            }\n            if (this.left + width > this.dataWidth || this.top + height > this.dataHeight) {\n                throw new IllegalArgumentException('Crop rectangle does not fit within image data.');\n            }\n        }\n        /*@Override*/\n        getRow(y /*int*/, row) {\n            if (y < 0 || y >= this.getHeight()) {\n                throw new IllegalArgumentException('Requested row is outside the image: ' + y);\n            }\n            const width = this.getWidth();\n            if (row === null || row === undefined || row.length < width) {\n                row = new Uint8ClampedArray(width);\n            }\n            const offset = (y + this.top) * this.dataWidth + this.left;\n            System.arraycopy(this.luminances, offset, row, 0, width);\n            return row;\n        }\n        /*@Override*/\n        getMatrix() {\n            const width = this.getWidth();\n            const height = this.getHeight();\n            // If the caller asks for the entire underlying image, save the copy and give them the\n            // original data. The docs specifically warn that result.length must be ignored.\n            if (width === this.dataWidth && height === this.dataHeight) {\n                return this.luminances;\n            }\n            const area = width * height;\n            const matrix = new Uint8ClampedArray(area);\n            let inputOffset = this.top * this.dataWidth + this.left;\n            // If the width matches the full width of the underlying data, perform a single copy.\n            if (width === this.dataWidth) {\n                System.arraycopy(this.luminances, inputOffset, matrix, 0, area);\n                return matrix;\n            }\n            // Otherwise copy one cropped row at a time.\n            for (let y = 0; y < height; y++) {\n                const outputOffset = y * width;\n                System.arraycopy(this.luminances, inputOffset, matrix, outputOffset, width);\n                inputOffset += this.dataWidth;\n            }\n            return matrix;\n        }\n        /*@Override*/\n        isCropSupported() {\n            return true;\n        }\n        /*@Override*/\n        crop(left /*int*/, top /*int*/, width /*int*/, height /*int*/) {\n            return new RGBLuminanceSource(this.luminances, width, height, this.dataWidth, this.dataHeight, this.left + left, this.top + top);\n        }\n        invert() {\n            return new InvertedLuminanceSource(this);\n        }\n    }\n\n    /**\n     * Just to make a shortcut between Java code and TS code.\n     */\n    class Charset extends CharacterSetECI {\n        static forName(name) {\n            return this.getCharacterSetECIByName(name);\n        }\n    }\n\n    /**\n     * Just to make a shortcut between Java code and TS code.\n     */\n    class StandardCharsets {\n    }\n    StandardCharsets.ISO_8859_1 = CharacterSetECI.ISO8859_1;\n\n    /*\n    * Copyright 2013 ZXing authors\n    *\n    * Licensed under the Apache License, Version 2.0 (the \"License\");\n    * you may not use this file except in compliance with the License.\n    * You may obtain a copy of the License at\n    *\n    *      http://www.apache.org/licenses/LICENSE-2.0\n    *\n    * Unless required by applicable law or agreed to in writing, software\n    * distributed under the License is distributed on an \"AS IS\" BASIS,\n    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    * See the License for the specific language governing permissions and\n    * limitations under the License.\n    */\n    /**\n     * Aztec 2D code representation\n     *\n     * @author Rustam Abdullaev\n     */\n    /*public final*/ class AztecCode {\n        /**\n         * @return {@code true} if compact instead of full mode\n         */\n        isCompact() {\n            return this.compact;\n        }\n        setCompact(compact) {\n            this.compact = compact;\n        }\n        /**\n         * @return size in pixels (width and height)\n         */\n        getSize() {\n            return this.size;\n        }\n        setSize(size) {\n            this.size = size;\n        }\n        /**\n         * @return number of levels\n         */\n        getLayers() {\n            return this.layers;\n        }\n        setLayers(layers) {\n            this.layers = layers;\n        }\n        /**\n         * @return number of data codewords\n         */\n        getCodeWords() {\n            return this.codeWords;\n        }\n        setCodeWords(codeWords) {\n            this.codeWords = codeWords;\n        }\n        /**\n         * @return the symbol image\n         */\n        getMatrix() {\n            return this.matrix;\n        }\n        setMatrix(matrix) {\n            this.matrix = matrix;\n        }\n    }\n\n    class Collections {\n        /**\n         * The singletonList(T) method is used to return an immutable list containing only the specified object.\n         */\n        static singletonList(item) {\n            return [item];\n        }\n        /**\n         * The min(Collection<? extends T>, Comparator<? super T>) method is used to return the minimum element of the given collection, according to the order induced by the specified comparator.\n         */\n        static min(collection, comparator) {\n            return collection.sort(comparator)[0];\n        }\n    }\n\n    /*\n    * Copyright 2013 ZXing authors\n    *\n    * Licensed under the Apache License, Version 2.0 (the \"License\");\n    * you may not use this file except in compliance with the License.\n    * You may obtain a copy of the License at\n    *\n    *      http://www.apache.org/licenses/LICENSE-2.0\n    *\n    * Unless required by applicable law or agreed to in writing, software\n    * distributed under the License is distributed on an \"AS IS\" BASIS,\n    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    * See the License for the specific language governing permissions and\n    * limitations under the License.\n    */\n    class Token {\n        constructor(previous) {\n            this.previous = previous;\n        }\n        getPrevious() {\n            return this.previous;\n        }\n    }\n\n    /*\n    * Copyright 2013 ZXing authors\n    *\n    * Licensed under the Apache License, Version 2.0 (the \"License\");\n    * you may not use this file except in compliance with the License.\n    * You may obtain a copy of the License at\n    *\n    *      http://www.apache.org/licenses/LICENSE-2.0\n    *\n    * Unless required by applicable law or agreed to in writing, software\n    * distributed under the License is distributed on an \"AS IS\" BASIS,\n    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    * See the License for the specific language governing permissions and\n    * limitations under the License.\n    */\n    /*final*/ class SimpleToken extends Token {\n        constructor(previous, value, bitCount) {\n            super(previous);\n            this.value = value;\n            this.bitCount = bitCount;\n        }\n        /**\n         * @Override\n         */\n        appendTo(bitArray, text) {\n            bitArray.appendBits(this.value, this.bitCount);\n        }\n        add(value, bitCount) {\n            return new SimpleToken(this, value, bitCount);\n        }\n        addBinaryShift(start, byteCount) {\n            // no-op can't binary shift a simple token\n            console.warn('addBinaryShift on SimpleToken, this simply returns a copy of this token');\n            return new SimpleToken(this, start, byteCount);\n        }\n        /**\n         * @Override\n         */\n        toString() {\n            let value = this.value & ((1 << this.bitCount) - 1);\n            value |= 1 << this.bitCount;\n            return '<' + Integer.toBinaryString(value | (1 << this.bitCount)).substring(1) + '>';\n        }\n    }\n\n    /*\n    * Copyright 2013 ZXing authors\n    *\n    * Licensed under the Apache License, Version 2.0 (the \"License\");\n    * you may not use this file except in compliance with the License.\n    * You may obtain a copy of the License at\n    *\n    *      http://www.apache.org/licenses/LICENSE-2.0\n    *\n    * Unless required by applicable law or agreed to in writing, software\n    * distributed under the License is distributed on an \"AS IS\" BASIS,\n    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    * See the License for the specific language governing permissions and\n    * limitations under the License.\n    */\n    /*final*/ class BinaryShiftToken extends SimpleToken {\n        constructor(previous, binaryShiftStart, binaryShiftByteCount) {\n            super(previous, 0, 0);\n            this.binaryShiftStart = binaryShiftStart;\n            this.binaryShiftByteCount = binaryShiftByteCount;\n        }\n        /**\n         * @Override\n         */\n        appendTo(bitArray, text) {\n            for (let i = 0; i < this.binaryShiftByteCount; i++) {\n                if (i === 0 || (i === 31 && this.binaryShiftByteCount <= 62)) {\n                    // We need a header before the first character, and before\n                    // character 31 when the total byte code is <= 62\n                    bitArray.appendBits(31, 5); // BINARY_SHIFT\n                    if (this.binaryShiftByteCount > 62) {\n                        bitArray.appendBits(this.binaryShiftByteCount - 31, 16);\n                    }\n                    else if (i === 0) {\n                        // 1 <= binaryShiftByteCode <= 62\n                        bitArray.appendBits(Math.min(this.binaryShiftByteCount, 31), 5);\n                    }\n                    else {\n                        // 32 <= binaryShiftCount <= 62 and i == 31\n                        bitArray.appendBits(this.binaryShiftByteCount - 31, 5);\n                    }\n                }\n                bitArray.appendBits(text[this.binaryShiftStart + i], 8);\n            }\n        }\n        addBinaryShift(start, byteCount) {\n            // int bitCount = (byteCount * 8) + (byteCount <= 31 ? 10 : byteCount <= 62 ? 20 : 21);\n            return new BinaryShiftToken(this, start, byteCount);\n        }\n        /**\n         * @Override\n         */\n        toString() {\n            return '<' + this.binaryShiftStart + '::' + (this.binaryShiftStart + this.binaryShiftByteCount - 1) + '>';\n        }\n    }\n\n    function addBinaryShift(token, start, byteCount) {\n        // int bitCount = (byteCount * 8) + (byteCount <= 31 ? 10 : byteCount <= 62 ? 20 : 21);\n        return new BinaryShiftToken(token, start, byteCount);\n    }\n    function add(token, value, bitCount) {\n        return new SimpleToken(token, value, bitCount);\n    }\n\n    const /*final*/ MODE_NAMES = [\n        'UPPER',\n        'LOWER',\n        'DIGIT',\n        'MIXED',\n        'PUNCT'\n    ];\n    const /*final*/ MODE_UPPER = 0; // 5 bits\n    const /*final*/ MODE_LOWER = 1; // 5 bits\n    const /*final*/ MODE_DIGIT = 2; // 4 bits\n    const /*final*/ MODE_MIXED = 3; // 5 bits\n    const /*final*/ MODE_PUNCT = 4; // 5 bits\n    const EMPTY_TOKEN = new SimpleToken(null, 0, 0);\n\n    // The Latch Table shows, for each pair of Modes, the optimal method for\n    // getting from one mode to another.  In the worst possible case, this can\n    // be up to 14 bits.  In the best possible case, we are already there!\n    // The high half-word of each entry gives the number of bits.\n    // The low half-word of each entry are the actual bits necessary to change\n    const LATCH_TABLE = [\n        Int32Array.from([\n            0,\n            (5 << 16) + 28,\n            (5 << 16) + 30,\n            (5 << 16) + 29,\n            (10 << 16) + (29 << 5) + 30 // UPPER -> MIXED -> PUNCT\n        ]),\n        Int32Array.from([\n            (9 << 16) + (30 << 4) + 14,\n            0,\n            (5 << 16) + 30,\n            (5 << 16) + 29,\n            (10 << 16) + (29 << 5) + 30 // LOWER -> MIXED -> PUNCT\n        ]),\n        Int32Array.from([\n            (4 << 16) + 14,\n            (9 << 16) + (14 << 5) + 28,\n            0,\n            (9 << 16) + (14 << 5) + 29,\n            (14 << 16) + (14 << 10) + (29 << 5) + 30\n            // DIGIT -> UPPER -> MIXED -> PUNCT\n        ]),\n        Int32Array.from([\n            (5 << 16) + 29,\n            (5 << 16) + 28,\n            (10 << 16) + (29 << 5) + 30,\n            0,\n            (5 << 16) + 30 // MIXED -> PUNCT\n        ]),\n        Int32Array.from([\n            (5 << 16) + 31,\n            (10 << 16) + (31 << 5) + 28,\n            (10 << 16) + (31 << 5) + 30,\n            (10 << 16) + (31 << 5) + 29,\n            0\n        ])\n    ];\n\n    function static_SHIFT_TABLE(SHIFT_TABLE) {\n        for (let table /*Int32Array*/ of SHIFT_TABLE) {\n            Arrays.fill(table, -1);\n        }\n        SHIFT_TABLE[MODE_UPPER][MODE_PUNCT] = 0;\n        SHIFT_TABLE[MODE_LOWER][MODE_PUNCT] = 0;\n        SHIFT_TABLE[MODE_LOWER][MODE_UPPER] = 28;\n        SHIFT_TABLE[MODE_MIXED][MODE_PUNCT] = 0;\n        SHIFT_TABLE[MODE_DIGIT][MODE_PUNCT] = 0;\n        SHIFT_TABLE[MODE_DIGIT][MODE_UPPER] = 15;\n        return SHIFT_TABLE;\n    }\n    const /*final*/ SHIFT_TABLE = static_SHIFT_TABLE(Arrays.createInt32Array(6, 6)); // mode shift codes, per table\n\n    /*\n     * Copyright 2013 ZXing authors\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n    /**\n     * State represents all information about a sequence necessary to generate the current output.\n     * Note that a state is immutable.\n     */\n    /*final*/ class State {\n        constructor(token, mode, binaryBytes, bitCount) {\n            this.token = token;\n            this.mode = mode;\n            this.binaryShiftByteCount = binaryBytes;\n            this.bitCount = bitCount;\n            // Make sure we match the token\n            // int binaryShiftBitCount = (binaryShiftByteCount * 8) +\n            //    (binaryShiftByteCount === 0 ? 0 :\n            //     binaryShiftByteCount <= 31 ? 10 :\n            //     binaryShiftByteCount <= 62 ? 20 : 21);\n            // assert this.bitCount === token.getTotalBitCount() + binaryShiftBitCount;\n        }\n        getMode() {\n            return this.mode;\n        }\n        getToken() {\n            return this.token;\n        }\n        getBinaryShiftByteCount() {\n            return this.binaryShiftByteCount;\n        }\n        getBitCount() {\n            return this.bitCount;\n        }\n        // Create a new state representing this state with a latch to a (not\n        // necessary different) mode, and then a code.\n        latchAndAppend(mode, value) {\n            // assert binaryShiftByteCount === 0;\n            let bitCount = this.bitCount;\n            let token = this.token;\n            if (mode !== this.mode) {\n                let latch = LATCH_TABLE[this.mode][mode];\n                token = add(token, latch & 0xffff, latch >> 16);\n                bitCount += latch >> 16;\n            }\n            let latchModeBitCount = mode === MODE_DIGIT ? 4 : 5;\n            token = add(token, value, latchModeBitCount);\n            return new State(token, mode, 0, bitCount + latchModeBitCount);\n        }\n        // Create a new state representing this state, with a temporary shift\n        // to a different mode to output a single value.\n        shiftAndAppend(mode, value) {\n            // assert binaryShiftByteCount === 0 && this.mode !== mode;\n            let token = this.token;\n            let thisModeBitCount = this.mode === MODE_DIGIT ? 4 : 5;\n            // Shifts exist only to UPPER and PUNCT, both with tokens size 5.\n            token = add(token, SHIFT_TABLE[this.mode][mode], thisModeBitCount);\n            token = add(token, value, 5);\n            return new State(token, this.mode, 0, this.bitCount + thisModeBitCount + 5);\n        }\n        // Create a new state representing this state, but an additional character\n        // output in Binary Shift mode.\n        addBinaryShiftChar(index) {\n            let token = this.token;\n            let mode = this.mode;\n            let bitCount = this.bitCount;\n            if (this.mode === MODE_PUNCT || this.mode === MODE_DIGIT) {\n                // assert binaryShiftByteCount === 0;\n                let latch = LATCH_TABLE[mode][MODE_UPPER];\n                token = add(token, latch & 0xffff, latch >> 16);\n                bitCount += latch >> 16;\n                mode = MODE_UPPER;\n            }\n            let deltaBitCount = this.binaryShiftByteCount === 0 || this.binaryShiftByteCount === 31\n                ? 18\n                : this.binaryShiftByteCount === 62\n                    ? 9\n                    : 8;\n            let result = new State(token, mode, this.binaryShiftByteCount + 1, bitCount + deltaBitCount);\n            if (result.binaryShiftByteCount === 2047 + 31) {\n                // The string is as long as it's allowed to be.  We should end it.\n                result = result.endBinaryShift(index + 1);\n            }\n            return result;\n        }\n        // Create the state identical to this one, but we are no longer in\n        // Binary Shift mode.\n        endBinaryShift(index) {\n            if (this.binaryShiftByteCount === 0) {\n                return this;\n            }\n            let token = this.token;\n            token = addBinaryShift(token, index - this.binaryShiftByteCount, this.binaryShiftByteCount);\n            // assert token.getTotalBitCount() === this.bitCount;\n            return new State(token, this.mode, 0, this.bitCount);\n        }\n        // Returns true if \"this\" state is better (equal: or) to be in than \"that\"\n        // state under all possible circumstances.\n        isBetterThanOrEqualTo(other) {\n            let newModeBitCount = this.bitCount + (LATCH_TABLE[this.mode][other.mode] >> 16);\n            if (this.binaryShiftByteCount < other.binaryShiftByteCount) {\n                // add additional B/S encoding cost of other, if any\n                newModeBitCount +=\n                    State.calculateBinaryShiftCost(other) -\n                        State.calculateBinaryShiftCost(this);\n            }\n            else if (this.binaryShiftByteCount > other.binaryShiftByteCount &&\n                other.binaryShiftByteCount > 0) {\n                // maximum possible additional cost (it: h)\n                newModeBitCount += 10;\n            }\n            return newModeBitCount <= other.bitCount;\n        }\n        toBitArray(text) {\n            // Reverse the tokens, so that they are in the order that they should\n            // be output\n            let symbols = [];\n            for (let token = this.endBinaryShift(text.length).token; token !== null; token = token.getPrevious()) {\n                symbols.unshift(token);\n            }\n            let bitArray = new BitArray();\n            // Add each token to the result.\n            for (const symbol of symbols) {\n                symbol.appendTo(bitArray, text);\n            }\n            // assert bitArray.getSize() === this.bitCount;\n            return bitArray;\n        }\n        /**\n         * @Override\n         */\n        toString() {\n            return StringUtils.format('%s bits=%d bytes=%d', MODE_NAMES[this.mode], this.bitCount, this.binaryShiftByteCount);\n        }\n        static calculateBinaryShiftCost(state) {\n            if (state.binaryShiftByteCount > 62) {\n                return 21; // B/S with extended length\n            }\n            if (state.binaryShiftByteCount > 31) {\n                return 20; // two B/S\n            }\n            if (state.binaryShiftByteCount > 0) {\n                return 10; // one B/S\n            }\n            return 0;\n        }\n    }\n    State.INITIAL_STATE = new State(EMPTY_TOKEN, MODE_UPPER, 0, 0);\n\n    function static_CHAR_MAP(CHAR_MAP) {\n        const spaceCharCode = StringUtils.getCharCode(' ');\n        const pointCharCode = StringUtils.getCharCode('.');\n        const commaCharCode = StringUtils.getCharCode(',');\n        CHAR_MAP[MODE_UPPER][spaceCharCode] = 1;\n        const zUpperCharCode = StringUtils.getCharCode('Z');\n        const aUpperCharCode = StringUtils.getCharCode('A');\n        for (let c = aUpperCharCode; c <= zUpperCharCode; c++) {\n            CHAR_MAP[MODE_UPPER][c] = c - aUpperCharCode + 2;\n        }\n        CHAR_MAP[MODE_LOWER][spaceCharCode] = 1;\n        const zLowerCharCode = StringUtils.getCharCode('z');\n        const aLowerCharCode = StringUtils.getCharCode('a');\n        for (let c = aLowerCharCode; c <= zLowerCharCode; c++) {\n            CHAR_MAP[MODE_LOWER][c] = c - aLowerCharCode + 2;\n        }\n        CHAR_MAP[MODE_DIGIT][spaceCharCode] = 1;\n        const nineCharCode = StringUtils.getCharCode('9');\n        const zeroCharCode = StringUtils.getCharCode('0');\n        for (let c = zeroCharCode; c <= nineCharCode; c++) {\n            CHAR_MAP[MODE_DIGIT][c] = c - zeroCharCode + 2;\n        }\n        CHAR_MAP[MODE_DIGIT][commaCharCode] = 12;\n        CHAR_MAP[MODE_DIGIT][pointCharCode] = 13;\n        const mixedTable = [\n            '\\x00',\n            ' ',\n            '\\x01',\n            '\\x02',\n            '\\x03',\n            '\\x04',\n            '\\x05',\n            '\\x06',\n            '\\x07',\n            '\\b',\n            '\\t',\n            '\\n',\n            '\\x0b',\n            '\\f',\n            '\\r',\n            '\\x1b',\n            '\\x1c',\n            '\\x1d',\n            '\\x1e',\n            '\\x1f',\n            '@',\n            '\\\\',\n            '^',\n            '_',\n            '`',\n            '|',\n            '~',\n            '\\x7f'\n        ];\n        for (let i = 0; i < mixedTable.length; i++) {\n            CHAR_MAP[MODE_MIXED][StringUtils.getCharCode(mixedTable[i])] = i;\n        }\n        const punctTable = [\n            '\\x00',\n            '\\r',\n            '\\x00',\n            '\\x00',\n            '\\x00',\n            '\\x00',\n            '!',\n            '\\'',\n            '#',\n            '$',\n            '%',\n            '&',\n            '\\'',\n            '(',\n            ')',\n            '*',\n            '+',\n            ',',\n            '-',\n            '.',\n            '/',\n            ':',\n            ';',\n            '<',\n            '=',\n            '>',\n            '?',\n            '[',\n            ']',\n            '{',\n            '}'\n        ];\n        for (let i = 0; i < punctTable.length; i++) {\n            if (StringUtils.getCharCode(punctTable[i]) > 0) {\n                CHAR_MAP[MODE_PUNCT][StringUtils.getCharCode(punctTable[i])] = i;\n            }\n        }\n        return CHAR_MAP;\n    }\n    const CHAR_MAP = static_CHAR_MAP(Arrays.createInt32Array(5, 256));\n\n    /*\n     * Copyright 2013 ZXing authors\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n    /**\n     * This produces nearly optimal encodings of text into the first-level of\n     * encoding used by Aztec code.\n     *\n     * It uses a dynamic algorithm.  For each prefix of the string, it determines\n     * a set of encodings that could lead to this prefix.  We repeatedly add a\n     * character and generate a new set of optimal encodings until we have read\n     * through the entire input.\n     *\n     * @author Frank Yellin\n     * @author Rustam Abdullaev\n     */\n    /*public final*/ class HighLevelEncoder {\n        constructor(text) {\n            this.text = text;\n        }\n        /**\n         * @return text represented by this encoder encoded as a {@link BitArray}\n         */\n        encode() {\n            const spaceCharCode = StringUtils.getCharCode(' ');\n            const lineBreakCharCode = StringUtils.getCharCode('\\n');\n            let states = Collections.singletonList(State.INITIAL_STATE);\n            for (let index = 0; index < this.text.length; index++) {\n                let pairCode;\n                let nextChar = index + 1 < this.text.length ? this.text[index + 1] : 0;\n                switch (this.text[index]) {\n                    case StringUtils.getCharCode('\\r'):\n                        pairCode = nextChar === lineBreakCharCode ? 2 : 0;\n                        break;\n                    case StringUtils.getCharCode('.'):\n                        pairCode = nextChar === spaceCharCode ? 3 : 0;\n                        break;\n                    case StringUtils.getCharCode(','):\n                        pairCode = nextChar === spaceCharCode ? 4 : 0;\n                        break;\n                    case StringUtils.getCharCode(':'):\n                        pairCode = nextChar === spaceCharCode ? 5 : 0;\n                        break;\n                    default:\n                        pairCode = 0;\n                }\n                if (pairCode > 0) {\n                    // We have one of the four special PUNCT pairs.  Treat them specially.\n                    // Get a new set of states for the two new characters.\n                    states = HighLevelEncoder.updateStateListForPair(states, index, pairCode);\n                    index++;\n                }\n                else {\n                    // Get a new set of states for the new character.\n                    states = this.updateStateListForChar(states, index);\n                }\n            }\n            // We are left with a set of states.  Find the shortest one.\n            const minState = Collections.min(states, (a, b) => {\n                return a.getBitCount() - b.getBitCount();\n            });\n            // Convert it to a bit array, and return.\n            return minState.toBitArray(this.text);\n        }\n        // We update a set of states for a new character by updating each state\n        // for the new character, merging the results, and then removing the\n        // non-optimal states.\n        updateStateListForChar(states, index) {\n            const result = [];\n            for (let state /*State*/ of states) {\n                this.updateStateForChar(state, index, result);\n            }\n            return HighLevelEncoder.simplifyStates(result);\n        }\n        // Return a set of states that represent the possible ways of updating this\n        // state for the next character.  The resulting set of states are added to\n        // the \"result\" list.\n        updateStateForChar(state, index, result) {\n            let ch = (this.text[index] & 0xff);\n            let charInCurrentTable = CHAR_MAP[state.getMode()][ch] > 0;\n            let stateNoBinary = null;\n            for (let mode /*int*/ = 0; mode <= MODE_PUNCT; mode++) {\n                let charInMode = CHAR_MAP[mode][ch];\n                if (charInMode > 0) {\n                    if (stateNoBinary == null) {\n                        // Only create stateNoBinary the first time it's required.\n                        stateNoBinary = state.endBinaryShift(index);\n                    }\n                    // Try generating the character by latching to its mode\n                    if (!charInCurrentTable ||\n                        mode === state.getMode() ||\n                        mode === MODE_DIGIT) {\n                        // If the character is in the current table, we don't want to latch to\n                        // any other mode except possibly digit (which uses only 4 bits).  Any\n                        // other latch would be equally successful *after* this character, and\n                        // so wouldn't save any bits.\n                        const latchState = stateNoBinary.latchAndAppend(mode, charInMode);\n                        result.push(latchState);\n                    }\n                    // Try generating the character by switching to its mode.\n                    if (!charInCurrentTable &&\n                        SHIFT_TABLE[state.getMode()][mode] >= 0) {\n                        // It never makes sense to temporarily shift to another mode if the\n                        // character exists in the current mode.  That can never save bits.\n                        const shiftState = stateNoBinary.shiftAndAppend(mode, charInMode);\n                        result.push(shiftState);\n                    }\n                }\n            }\n            if (state.getBinaryShiftByteCount() > 0 ||\n                CHAR_MAP[state.getMode()][ch] === 0) {\n                // It's never worthwhile to go into binary shift mode if you're not already\n                // in binary shift mode, and the character exists in your current mode.\n                // That can never save bits over just outputting the char in the current mode.\n                let binaryState = state.addBinaryShiftChar(index);\n                result.push(binaryState);\n            }\n        }\n        static updateStateListForPair(states, index, pairCode) {\n            const result = [];\n            for (let state /*State*/ of states) {\n                this.updateStateForPair(state, index, pairCode, result);\n            }\n            return this.simplifyStates(result);\n        }\n        static updateStateForPair(state, index, pairCode, result) {\n            let stateNoBinary = state.endBinaryShift(index);\n            // Possibility 1.  Latch to C.MODE_PUNCT, and then append this code\n            result.push(stateNoBinary.latchAndAppend(MODE_PUNCT, pairCode));\n            if (state.getMode() !== MODE_PUNCT) {\n                // Possibility 2.  Shift to C.MODE_PUNCT, and then append this code.\n                // Every state except C.MODE_PUNCT (handled above) can shift\n                result.push(stateNoBinary.shiftAndAppend(MODE_PUNCT, pairCode));\n            }\n            if (pairCode === 3 || pairCode === 4) {\n                // both characters are in DIGITS.  Sometimes better to just add two digits\n                let digitState = stateNoBinary\n                    .latchAndAppend(MODE_DIGIT, 16 - pairCode) // period or comma in DIGIT\n                    .latchAndAppend(MODE_DIGIT, 1); // space in DIGIT\n                result.push(digitState);\n            }\n            if (state.getBinaryShiftByteCount() > 0) {\n                // It only makes sense to do the characters as binary if we're already\n                // in binary mode.\n                let binaryState = state\n                    .addBinaryShiftChar(index)\n                    .addBinaryShiftChar(index + 1);\n                result.push(binaryState);\n            }\n        }\n        static simplifyStates(states) {\n            let result = [];\n            for (const newState of states) {\n                let add = true;\n                for (const oldState of result) {\n                    if (oldState.isBetterThanOrEqualTo(newState)) {\n                        add = false;\n                        break;\n                    }\n                    if (newState.isBetterThanOrEqualTo(oldState)) {\n                        // iterator.remove();\n                        result = result.filter(x => x !== oldState); // remove old state\n                    }\n                }\n                if (add) {\n                    result.push(newState);\n                }\n            }\n            return result;\n        }\n    }\n\n    /*\n     * Copyright 2013 ZXing authors\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n    // package com.google.zxing.aztec.encoder;\n    // import com.google.zxing.common.BitArray;\n    // import com.google.zxing.common.BitMatrix;\n    // import com.google.zxing.common.reedsolomon.GenericGF;\n    // import com.google.zxing.common.reedsolomon.ReedSolomonEncoder;\n    /**\n     * Generates Aztec 2D barcodes.\n     *\n     * @author Rustam Abdullaev\n     */\n    /*public final*/ class Encoder$1 {\n        constructor() {\n        }\n        /**\n         * Encodes the given binary content as an Aztec symbol\n         *\n         * @param data input data string\n         * @return Aztec symbol matrix with metadata\n         */\n        static encodeBytes(data) {\n            return Encoder$1.encode(data, Encoder$1.DEFAULT_EC_PERCENT, Encoder$1.DEFAULT_AZTEC_LAYERS);\n        }\n        /**\n         * Encodes the given binary content as an Aztec symbol\n         *\n         * @param data input data string\n         * @param minECCPercent minimal percentage of error check words (According to ISO/IEC 24778:2008,\n         *                      a minimum of 23% + 3 words is recommended)\n         * @param userSpecifiedLayers if non-zero, a user-specified value for the number of layers\n         * @return Aztec symbol matrix with metadata\n         */\n        static encode(data, minECCPercent, userSpecifiedLayers) {\n            // High-level encode\n            let bits = new HighLevelEncoder(data).encode();\n            // stuff bits and choose symbol size\n            let eccBits = Integer.truncDivision((bits.getSize() * minECCPercent), 100) + 11;\n            let totalSizeBits = bits.getSize() + eccBits;\n            let compact;\n            let layers;\n            let totalBitsInLayer;\n            let wordSize;\n            let stuffedBits;\n            if (userSpecifiedLayers !== Encoder$1.DEFAULT_AZTEC_LAYERS) {\n                compact = userSpecifiedLayers < 0;\n                layers = Math.abs(userSpecifiedLayers);\n                if (layers > (compact ? Encoder$1.MAX_NB_BITS_COMPACT : Encoder$1.MAX_NB_BITS)) {\n                    throw new IllegalArgumentException(StringUtils.format('Illegal value %s for layers', userSpecifiedLayers));\n                }\n                totalBitsInLayer = Encoder$1.totalBitsInLayer(layers, compact);\n                wordSize = Encoder$1.WORD_SIZE[layers];\n                let usableBitsInLayers = totalBitsInLayer - (totalBitsInLayer % wordSize);\n                stuffedBits = Encoder$1.stuffBits(bits, wordSize);\n                if (stuffedBits.getSize() + eccBits > usableBitsInLayers) {\n                    throw new IllegalArgumentException('Data to large for user specified layer');\n                }\n                if (compact && stuffedBits.getSize() > wordSize * 64) {\n                    // Compact format only allows 64 data words, though C4 can hold more words than that\n                    throw new IllegalArgumentException('Data to large for user specified layer');\n                }\n            }\n            else {\n                wordSize = 0;\n                stuffedBits = null;\n                // We look at the possible table sizes in the order Compact1, Compact2, Compact3,\n                // Compact4, Normal4,...  Normal(i) for i < 4 isn't typically used since Compact(i+1)\n                // is the same size, but has more data.\n                for (let i /*int*/ = 0;; i++) {\n                    if (i > Encoder$1.MAX_NB_BITS) {\n                        throw new IllegalArgumentException('Data too large for an Aztec code');\n                    }\n                    compact = i <= 3;\n                    layers = compact ? i + 1 : i;\n                    totalBitsInLayer = Encoder$1.totalBitsInLayer(layers, compact);\n                    if (totalSizeBits > totalBitsInLayer) {\n                        continue;\n                    }\n                    // [Re]stuff the bits if this is the first opportunity, or if the\n                    // wordSize has changed\n                    if (stuffedBits == null || wordSize !== Encoder$1.WORD_SIZE[layers]) {\n                        wordSize = Encoder$1.WORD_SIZE[layers];\n                        stuffedBits = Encoder$1.stuffBits(bits, wordSize);\n                    }\n                    let usableBitsInLayers = totalBitsInLayer - (totalBitsInLayer % wordSize);\n                    if (compact && stuffedBits.getSize() > wordSize * 64) {\n                        // Compact format only allows 64 data words, though C4 can hold more words than that\n                        continue;\n                    }\n                    if (stuffedBits.getSize() + eccBits <= usableBitsInLayers) {\n                        break;\n                    }\n                }\n            }\n            let messageBits = Encoder$1.generateCheckWords(stuffedBits, totalBitsInLayer, wordSize);\n            // generate mode message\n            let messageSizeInWords = stuffedBits.getSize() / wordSize;\n            let modeMessage = Encoder$1.generateModeMessage(compact, layers, messageSizeInWords);\n            // allocate symbol\n            let baseMatrixSize = (compact ? 11 : 14) + layers * 4; // not including alignment lines\n            let alignmentMap = new Int32Array(baseMatrixSize);\n            let matrixSize;\n            if (compact) {\n                // no alignment marks in compact mode, alignmentMap is a no-op\n                matrixSize = baseMatrixSize;\n                for (let i /*int*/ = 0; i < alignmentMap.length; i++) {\n                    alignmentMap[i] = i;\n                }\n            }\n            else {\n                matrixSize = baseMatrixSize + 1 + 2 * Integer.truncDivision((Integer.truncDivision(baseMatrixSize, 2) - 1), 15);\n                let origCenter = Integer.truncDivision(baseMatrixSize, 2);\n                let center = Integer.truncDivision(matrixSize, 2);\n                for (let i /*int*/ = 0; i < origCenter; i++) {\n                    let newOffset = i + Integer.truncDivision(i, 15);\n                    alignmentMap[origCenter - i - 1] = center - newOffset - 1;\n                    alignmentMap[origCenter + i] = center + newOffset + 1;\n                }\n            }\n            let matrix = new BitMatrix(matrixSize);\n            // draw data bits\n            for (let i /*int*/ = 0, rowOffset = 0; i < layers; i++) {\n                let rowSize = (layers - i) * 4 + (compact ? 9 : 12);\n                for (let j /*int*/ = 0; j < rowSize; j++) {\n                    let columnOffset = j * 2;\n                    for (let k /*int*/ = 0; k < 2; k++) {\n                        if (messageBits.get(rowOffset + columnOffset + k)) {\n                            matrix.set(alignmentMap[i * 2 + k], alignmentMap[i * 2 + j]);\n                        }\n                        if (messageBits.get(rowOffset + rowSize * 2 + columnOffset + k)) {\n                            matrix.set(alignmentMap[i * 2 + j], alignmentMap[baseMatrixSize - 1 - i * 2 - k]);\n                        }\n                        if (messageBits.get(rowOffset + rowSize * 4 + columnOffset + k)) {\n                            matrix.set(alignmentMap[baseMatrixSize - 1 - i * 2 - k], alignmentMap[baseMatrixSize - 1 - i * 2 - j]);\n                        }\n                        if (messageBits.get(rowOffset + rowSize * 6 + columnOffset + k)) {\n                            matrix.set(alignmentMap[baseMatrixSize - 1 - i * 2 - j], alignmentMap[i * 2 + k]);\n                        }\n                    }\n                }\n                rowOffset += rowSize * 8;\n            }\n            // draw mode message\n            Encoder$1.drawModeMessage(matrix, compact, matrixSize, modeMessage);\n            // draw alignment marks\n            if (compact) {\n                Encoder$1.drawBullsEye(matrix, Integer.truncDivision(matrixSize, 2), 5);\n            }\n            else {\n                Encoder$1.drawBullsEye(matrix, Integer.truncDivision(matrixSize, 2), 7);\n                for (let i /*int*/ = 0, j = 0; i < Integer.truncDivision(baseMatrixSize, 2) - 1; i += 15, j += 16) {\n                    for (let k /*int*/ = Integer.truncDivision(matrixSize, 2) & 1; k < matrixSize; k += 2) {\n                        matrix.set(Integer.truncDivision(matrixSize, 2) - j, k);\n                        matrix.set(Integer.truncDivision(matrixSize, 2) + j, k);\n                        matrix.set(k, Integer.truncDivision(matrixSize, 2) - j);\n                        matrix.set(k, Integer.truncDivision(matrixSize, 2) + j);\n                    }\n                }\n            }\n            let aztec = new AztecCode();\n            aztec.setCompact(compact);\n            aztec.setSize(matrixSize);\n            aztec.setLayers(layers);\n            aztec.setCodeWords(messageSizeInWords);\n            aztec.setMatrix(matrix);\n            return aztec;\n        }\n        static drawBullsEye(matrix, center, size) {\n            for (let i /*int*/ = 0; i < size; i += 2) {\n                for (let j /*int*/ = center - i; j <= center + i; j++) {\n                    matrix.set(j, center - i);\n                    matrix.set(j, center + i);\n                    matrix.set(center - i, j);\n                    matrix.set(center + i, j);\n                }\n            }\n            matrix.set(center - size, center - size);\n            matrix.set(center - size + 1, center - size);\n            matrix.set(center - size, center - size + 1);\n            matrix.set(center + size, center - size);\n            matrix.set(center + size, center - size + 1);\n            matrix.set(center + size, center + size - 1);\n        }\n        static generateModeMessage(compact, layers, messageSizeInWords) {\n            let modeMessage = new BitArray();\n            if (compact) {\n                modeMessage.appendBits(layers - 1, 2);\n                modeMessage.appendBits(messageSizeInWords - 1, 6);\n                modeMessage = Encoder$1.generateCheckWords(modeMessage, 28, 4);\n            }\n            else {\n                modeMessage.appendBits(layers - 1, 5);\n                modeMessage.appendBits(messageSizeInWords - 1, 11);\n                modeMessage = Encoder$1.generateCheckWords(modeMessage, 40, 4);\n            }\n            return modeMessage;\n        }\n        static drawModeMessage(matrix, compact, matrixSize, modeMessage) {\n            let center = Integer.truncDivision(matrixSize, 2);\n            if (compact) {\n                for (let i /*int*/ = 0; i < 7; i++) {\n                    let offset = center - 3 + i;\n                    if (modeMessage.get(i)) {\n                        matrix.set(offset, center - 5);\n                    }\n                    if (modeMessage.get(i + 7)) {\n                        matrix.set(center + 5, offset);\n                    }\n                    if (modeMessage.get(20 - i)) {\n                        matrix.set(offset, center + 5);\n                    }\n                    if (modeMessage.get(27 - i)) {\n                        matrix.set(center - 5, offset);\n                    }\n                }\n            }\n            else {\n                for (let i /*int*/ = 0; i < 10; i++) {\n                    let offset = center - 5 + i + Integer.truncDivision(i, 5);\n                    if (modeMessage.get(i)) {\n                        matrix.set(offset, center - 7);\n                    }\n                    if (modeMessage.get(i + 10)) {\n                        matrix.set(center + 7, offset);\n                    }\n                    if (modeMessage.get(29 - i)) {\n                        matrix.set(offset, center + 7);\n                    }\n                    if (modeMessage.get(39 - i)) {\n                        matrix.set(center - 7, offset);\n                    }\n                }\n            }\n        }\n        static generateCheckWords(bitArray, totalBits, wordSize) {\n            // bitArray is guaranteed to be a multiple of the wordSize, so no padding needed\n            let messageSizeInWords = bitArray.getSize() / wordSize;\n            let rs = new ReedSolomonEncoder(Encoder$1.getGF(wordSize));\n            let totalWords = Integer.truncDivision(totalBits, wordSize);\n            let messageWords = Encoder$1.bitsToWords(bitArray, wordSize, totalWords);\n            rs.encode(messageWords, totalWords - messageSizeInWords);\n            let startPad = totalBits % wordSize;\n            let messageBits = new BitArray();\n            messageBits.appendBits(0, startPad);\n            for (const messageWord /*: int*/ of Array.from(messageWords)) {\n                messageBits.appendBits(messageWord, wordSize);\n            }\n            return messageBits;\n        }\n        static bitsToWords(stuffedBits, wordSize, totalWords) {\n            let message = new Int32Array(totalWords);\n            let i;\n            let n;\n            for (i = 0, n = stuffedBits.getSize() / wordSize; i < n; i++) {\n                let value = 0;\n                for (let j /*int*/ = 0; j < wordSize; j++) {\n                    value |= stuffedBits.get(i * wordSize + j) ? (1 << wordSize - j - 1) : 0;\n                }\n                message[i] = value;\n            }\n            return message;\n        }\n        static getGF(wordSize) {\n            switch (wordSize) {\n                case 4:\n                    return GenericGF.AZTEC_PARAM;\n                case 6:\n                    return GenericGF.AZTEC_DATA_6;\n                case 8:\n                    return GenericGF.AZTEC_DATA_8;\n                case 10:\n                    return GenericGF.AZTEC_DATA_10;\n                case 12:\n                    return GenericGF.AZTEC_DATA_12;\n                default:\n                    throw new IllegalArgumentException('Unsupported word size ' + wordSize);\n            }\n        }\n        static stuffBits(bits, wordSize) {\n            let out = new BitArray();\n            let n = bits.getSize();\n            let mask = (1 << wordSize) - 2;\n            for (let i /*int*/ = 0; i < n; i += wordSize) {\n                let word = 0;\n                for (let j /*int*/ = 0; j < wordSize; j++) {\n                    if (i + j >= n || bits.get(i + j)) {\n                        word |= 1 << (wordSize - 1 - j);\n                    }\n                }\n                if ((word & mask) === mask) {\n                    out.appendBits(word & mask, wordSize);\n                    i--;\n                }\n                else if ((word & mask) === 0) {\n                    out.appendBits(word | 1, wordSize);\n                    i--;\n                }\n                else {\n                    out.appendBits(word, wordSize);\n                }\n            }\n            return out;\n        }\n        static totalBitsInLayer(layers, compact) {\n            return ((compact ? 88 : 112) + 16 * layers) * layers;\n        }\n    }\n    Encoder$1.DEFAULT_EC_PERCENT = 33; // default minimal percentage of error check words\n    Encoder$1.DEFAULT_AZTEC_LAYERS = 0;\n    Encoder$1.MAX_NB_BITS = 32;\n    Encoder$1.MAX_NB_BITS_COMPACT = 4;\n    Encoder$1.WORD_SIZE = Int32Array.from([\n        4, 6, 6, 8, 8, 8, 8, 8, 8, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n        12, 12, 12, 12, 12, 12, 12, 12, 12, 12\n    ]);\n\n    /*\n    * Copyright 2013 ZXing authors\n    *\n    * Licensed under the Apache License, Version 2.0 (the \"License\");\n    * you may not use this file except in compliance with the License.\n    * You may obtain a copy of the License at\n    *\n    *      http://www.apache.org/licenses/LICENSE-2.0\n    *\n    * Unless required by applicable law or agreed to in writing, software\n    * distributed under the License is distributed on an \"AS IS\" BASIS,\n    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    * See the License for the specific language governing permissions and\n    * limitations under the License.\n    */\n    /**\n     * Renders an Aztec code as a {@link BitMatrix}.\n     */\n    /*public final*/ class AztecWriter {\n        // @Override\n        encode(contents, format, width, height) {\n            return this.encodeWithHints(contents, format, width, height, null);\n        }\n        // @Override\n        encodeWithHints(contents, format, width, height, hints) {\n            let charset = StandardCharsets.ISO_8859_1;\n            let eccPercent = Encoder$1.DEFAULT_EC_PERCENT;\n            let layers = Encoder$1.DEFAULT_AZTEC_LAYERS;\n            if (hints != null) {\n                if (hints.has(EncodeHintType$1.CHARACTER_SET)) {\n                    charset = Charset.forName(hints.get(EncodeHintType$1.CHARACTER_SET).toString());\n                }\n                if (hints.has(EncodeHintType$1.ERROR_CORRECTION)) {\n                    eccPercent = Integer.parseInt(hints.get(EncodeHintType$1.ERROR_CORRECTION).toString());\n                }\n                if (hints.has(EncodeHintType$1.AZTEC_LAYERS)) {\n                    layers = Integer.parseInt(hints.get(EncodeHintType$1.AZTEC_LAYERS).toString());\n                }\n            }\n            return AztecWriter.encodeLayers(contents, format, width, height, charset, eccPercent, layers);\n        }\n        static encodeLayers(contents, format, width, height, charset, eccPercent, layers) {\n            if (format !== BarcodeFormat$1.AZTEC) {\n                throw new IllegalArgumentException('Can only encode AZTEC, but got ' + format);\n            }\n            let aztec = Encoder$1.encode(StringUtils.getBytes(contents, charset), eccPercent, layers);\n            return AztecWriter.renderResult(aztec, width, height);\n        }\n        static renderResult(code, width, height) {\n            let input = code.getMatrix();\n            if (input == null) {\n                throw new IllegalStateException();\n            }\n            let inputWidth = input.getWidth();\n            let inputHeight = input.getHeight();\n            let outputWidth = Math.max(width, inputWidth);\n            let outputHeight = Math.max(height, inputHeight);\n            let multiple = Math.min(outputWidth / inputWidth, outputHeight / inputHeight);\n            let leftPadding = (outputWidth - (inputWidth * multiple)) / 2;\n            let topPadding = (outputHeight - (inputHeight * multiple)) / 2;\n            let output = new BitMatrix(outputWidth, outputHeight);\n            for (let inputY /*int*/ = 0, outputY = topPadding; inputY < inputHeight; inputY++, outputY += multiple) {\n                // Write the contents of this row of the barcode\n                for (let inputX /*int*/ = 0, outputX = leftPadding; inputX < inputWidth; inputX++, outputX += multiple) {\n                    if (input.get(inputX, inputY)) {\n                        output.setRegion(outputX, outputY, multiple, multiple);\n                    }\n                }\n            }\n            return output;\n        }\n    }\n\n    exports.AbstractExpandedDecoder = AbstractExpandedDecoder;\n    exports.ArgumentException = ArgumentException;\n    exports.ArithmeticException = ArithmeticException;\n    exports.AztecCode = AztecCode;\n    exports.AztecCodeReader = AztecReader;\n    exports.AztecCodeWriter = AztecWriter;\n    exports.AztecDecoder = Decoder;\n    exports.AztecDetector = Detector;\n    exports.AztecDetectorResult = AztecDetectorResult;\n    exports.AztecEncoder = Encoder$1;\n    exports.AztecHighLevelEncoder = HighLevelEncoder;\n    exports.AztecPoint = Point;\n    exports.BarcodeFormat = BarcodeFormat$1;\n    exports.Binarizer = Binarizer;\n    exports.BinaryBitmap = BinaryBitmap;\n    exports.BitArray = BitArray;\n    exports.BitMatrix = BitMatrix;\n    exports.BitSource = BitSource;\n    exports.BrowserAztecCodeReader = BrowserAztecCodeReader;\n    exports.BrowserBarcodeReader = BrowserBarcodeReader;\n    exports.BrowserCodeReader = BrowserCodeReader;\n    exports.BrowserDatamatrixCodeReader = BrowserDatamatrixCodeReader;\n    exports.BrowserMultiFormatReader = BrowserMultiFormatReader;\n    exports.BrowserPDF417Reader = BrowserPDF417Reader;\n    exports.BrowserQRCodeReader = BrowserQRCodeReader;\n    exports.BrowserQRCodeSvgWriter = BrowserQRCodeSvgWriter;\n    exports.CharacterSetECI = CharacterSetECI;\n    exports.ChecksumException = ChecksumException;\n    exports.Code128Reader = Code128Reader;\n    exports.Code39Reader = Code39Reader;\n    exports.DataMatrixDecodedBitStreamParser = DecodedBitStreamParser;\n    exports.DataMatrixReader = DataMatrixReader;\n    exports.DecodeHintType = DecodeHintType$1;\n    exports.DecoderResult = DecoderResult;\n    exports.DefaultGridSampler = DefaultGridSampler;\n    exports.DetectorResult = DetectorResult;\n    exports.EAN13Reader = EAN13Reader;\n    exports.EncodeHintType = EncodeHintType$1;\n    exports.Exception = Exception;\n    exports.FormatException = FormatException;\n    exports.GenericGF = GenericGF;\n    exports.GenericGFPoly = GenericGFPoly;\n    exports.GlobalHistogramBinarizer = GlobalHistogramBinarizer;\n    exports.GridSampler = GridSampler;\n    exports.GridSamplerInstance = GridSamplerInstance;\n    exports.HTMLCanvasElementLuminanceSource = HTMLCanvasElementLuminanceSource;\n    exports.HybridBinarizer = HybridBinarizer;\n    exports.ITFReader = ITFReader;\n    exports.IllegalArgumentException = IllegalArgumentException;\n    exports.IllegalStateException = IllegalStateException;\n    exports.InvertedLuminanceSource = InvertedLuminanceSource;\n    exports.LuminanceSource = LuminanceSource;\n    exports.MathUtils = MathUtils;\n    exports.MultiFormatOneDReader = MultiFormatOneDReader;\n    exports.MultiFormatReader = MultiFormatReader;\n    exports.MultiFormatWriter = MultiFormatWriter;\n    exports.NotFoundException = NotFoundException;\n    exports.OneDReader = OneDReader;\n    exports.PDF417DecodedBitStreamParser = DecodedBitStreamParser$2;\n    exports.PDF417DecoderErrorCorrection = ErrorCorrection;\n    exports.PDF417Reader = PDF417Reader;\n    exports.PDF417ResultMetadata = PDF417ResultMetadata;\n    exports.PerspectiveTransform = PerspectiveTransform;\n    exports.PlanarYUVLuminanceSource = PlanarYUVLuminanceSource;\n    exports.QRCodeByteMatrix = ByteMatrix;\n    exports.QRCodeDataMask = DataMask;\n    exports.QRCodeDecodedBitStreamParser = DecodedBitStreamParser$1;\n    exports.QRCodeDecoderErrorCorrectionLevel = ErrorCorrectionLevel;\n    exports.QRCodeDecoderFormatInformation = FormatInformation;\n    exports.QRCodeEncoder = Encoder;\n    exports.QRCodeEncoderQRCode = QRCode;\n    exports.QRCodeMaskUtil = MaskUtil;\n    exports.QRCodeMatrixUtil = MatrixUtil;\n    exports.QRCodeMode = Mode$1;\n    exports.QRCodeReader = QRCodeReader;\n    exports.QRCodeVersion = Version$1;\n    exports.QRCodeWriter = QRCodeWriter;\n    exports.RGBLuminanceSource = RGBLuminanceSource;\n    exports.RSS14Reader = RSS14Reader;\n    exports.RSSExpandedReader = RSSExpandedReader;\n    exports.ReaderException = ReaderException;\n    exports.ReedSolomonDecoder = ReedSolomonDecoder;\n    exports.ReedSolomonEncoder = ReedSolomonEncoder;\n    exports.ReedSolomonException = ReedSolomonException;\n    exports.Result = Result;\n    exports.ResultMetadataType = ResultMetadataType$1;\n    exports.ResultPoint = ResultPoint;\n    exports.StringUtils = StringUtils;\n    exports.UnsupportedOperationException = UnsupportedOperationException;\n    exports.VideoInputDevice = VideoInputDevice;\n    exports.WhiteRectangleDetector = WhiteRectangleDetector;\n    exports.WriterException = WriterException;\n    exports.ZXingArrays = Arrays;\n    exports.ZXingCharset = Charset;\n    exports.ZXingInteger = Integer;\n    exports.ZXingStandardCharsets = StandardCharsets;\n    exports.ZXingStringBuilder = StringBuilder;\n    exports.ZXingStringEncoding = StringEncoding;\n    exports.ZXingSystem = System;\n    exports.createAbstractExpandedDecoder = createDecoder;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n", "import {useEffect, useState} from 'react';\nimport {\n  reactExtension,\n  useApi,\n  AdminAction,\n  BlockStack,\n  Button,\n  Text,\n} from '@shopify/ui-extensions-react/admin';\nimport { Html5Qrcode } from 'html5-qrcode';\n\n// The target used here must match the target used in the extension's toml file (./shopify.extension.toml)\nconst TARGET = 'admin.product-details.action.render';\n\nexport default reactExtension(TARGET, () => <App />);\n\nfunction App() {\n  // The useApi hook provides access to several useful APIs like i18n, close, and data.\n  const {extension: {target}, i18n, close, data} = useApi(TARGET);\n\n  const [productTitle, setProductTitle] = useState('');\n\n  const [detectedQRCode, setDetectedQRCode] = useState(null);\n\n  // Function to handle QR code detection\n  const handleQRCodeDetected = (qrcode) => {\n    // Perform actions with the detected QR code\n    setDetectedQRCode(qrcode);\n  };\n\n  // Use direct API calls to fetch data from Shopify.\n  // See https://shopify.dev/docs/api/admin-graphql for more information about Shopify's GraphQL API\n  useEffect(() => {\n    (async function getProductInfo() {\n      const getProductQuery = {\n        query: `query Product($id: ID!) {\n          product(id: $id) {\n            title\n          }\n        }`,\n        variables: {id: data.selected[0].id},\n      };\n\n      const res = await fetch(\"shopify:admin/api/graphql.json\", {\n        method: \"POST\",\n        body: JSON.stringify(getProductQuery),\n      });\n\n      if (!res.ok) {\n        console.error('Network error');\n      }\n\n      const productData = await res.json();\n      setProductTitle(productData.data.product.title);\n    })();\n  }, []);\n\n  return (\n    // The AdminAction component provides an API for setting the title and actions of the Action extension wrapper.\n      <AdminAction\n        primaryAction={\n          <Button\n            onPress={() => {\n              console.log('saving');\n              close();\n            }}\n          >\n            Done\n          </Button>\n        }\n        secondaryAction={\n          <Button\n            onPress={() => {\n              console.log('closing');\n              close();\n            }}\n          >\n            Close\n          </Button>\n        }\n      >\n        <BlockStack>\n          {/* Set the translation values for each supported language in the locales directory */}\n          <Text fontWeight=\"bold\">{i18n.translate('welcome', {target})}</Text>\n          <Text>Current product: {productTitle}</Text>\n          <QRCodeScanner handleQRCodeDetected={handleQRCodeDetected} />\n        </BlockStack>\n      </AdminAction>\n  );\n}\n\nfunction QRCodeScanner({ handleQRCodeDetected }) {\n\n  const reader = (\n      <div id=\"reader\"></div>\n  );\n\n  useEffect(() => {\n    // Create instance of the object. The only argument is the \"id\" of HTML element created above.\n    const html5QrCode = new Html5Qrcode(\"reader\");\n    // const cameraId = await enumerateAvailableCameras();\n\n    html5QrCode.start(\n      { facingMode: \"environment\" },\n      // cameraId,     // retreived in the previous step.\n      {\n        fps: 10,    // sets the framerate to 10 frame per second\n        qrbox: 250  // sets only 250 X 250 region of viewfinder to\n                    // scannable, rest shaded.\n      },\n      qrCodeMessage => {\n        // do something when code is read. For example:\n        console.log(`QR Code detected: ${qrCodeMessage}`);\n      },\n      errorMessage => {\n        // parse error, ideally ignore it. For example:\n        console.log(`QR Code no longer in front of camera.`);\n      })\n    .catch(err => {\n      // Start failed, handle it. For example,\n      console.log(`Unable to start scanning, error: ${err}`);\n    });\n\n    return () => {\n      // Cleanup\n      html5QrCode.stop();\n    };\n  }, [handleQRCodeDetected]);\n\n  // return (\n  //   <div>\n  //     <div id=\"reader\"></div>\n  //   </div>\n  // );\n  // return <div id=\"reader\"></div>;\n  return (\n    <BlockStack>\n      {reader}\n    </BlockStack>\n  );\n}\n\n\n// function enumerateAvailableCameras() {\n//   var cameraId = \"\";\n//   // This method will trigger user permissions\n//   await Html5Qrcode.getCameras().then(devices => {\n//     /**\n//      * devices would be an array of objects of type:\n//      * { id: \"id\", label: \"label\" }\n//      */\n//     if (devices && devices.length) {\n//       cameraId = devices[0].id;\n//       // .. use this to start scanning.\n//     }\n//   }).catch(err => {\n//     // handle err\n//   });\n\n//   return cameraId;\n// }\n", "function createRemoteComponent(componentType) {\n  return componentType;\n}\n\nexport { createRemoteComponent };\n", "const ACTION_MOUNT = 0;\nconst ACTION_INSERT_CHILD = 1;\nconst ACTION_REMOVE_CHILD = 2;\nconst ACTION_UPDATE_TEXT = 3;\nconst ACTION_UPDATE_PROPS = 4;\nconst KIND_ROOT = 0;\nconst KIND_COMPONENT = 1;\nconst KIND_TEXT = 2;\nconst KIND_FRAGMENT = 3;\n\nexport { ACTION_INSERT_CHILD, ACTION_MOUNT, ACTION_REMOVE_CHILD, ACTION_UPDATE_PROPS, ACTION_UPDATE_TEXT, KIND_COMPONENT, KIND_FRAGMENT, KIND_ROOT, KIND_TEXT };\n", "import { KIND_COMPONENT, KIND_TEXT, KIND_FRAGMENT } from './types.mjs';\n\nfunction isRemoteComponent(child) {\n  return child != null && child.kind === KIND_COMPONENT;\n}\nfunction isRemoteText(child) {\n  return child != null && child.kind === KIND_TEXT;\n}\nfunction isRemoteFragment(object) {\n  return object != null && object.kind === KIND_FRAGMENT;\n}\n\nexport { isRemoteComponent, isRemoteFragment, isRemoteText };\n", "import { KIND_ROOT, ACTION_MOUNT, ACTION_INSERT_CHILD, KIND_TEXT, ACTION_REMOVE_CHILD, KIND_COMPONENT, KIND_FRAGMENT, ACTION_UPDATE_PROPS, ACTION_UPDATE_TEXT } from './types.mjs';\nimport { isRemoteFragment } from './utilities.mjs';\n\nconst FUNCTION_CURRENT_IMPLEMENTATION_KEY = '__current';\nconst EMPTY_OBJECT = {};\nconst EMPTY_ARRAY = [];\nfunction createRemoteRoot(channel, {\n  strict = true,\n  components\n} = {}) {\n  let currentId = 0;\n  const rootInternals = {\n    strict,\n    mounted: false,\n    channel,\n    children: EMPTY_ARRAY,\n    nodes: new WeakSet(),\n    parents: new WeakMap(),\n    tops: new WeakMap(),\n    components: new WeakMap(),\n    fragments: new WeakMap()\n  };\n  if (strict) Object.freeze(components);\n  const remoteRoot = {\n    kind: KIND_ROOT,\n    options: strict ? Object.freeze({\n      strict,\n      components\n    }) : {\n      strict,\n      components\n    },\n\n    get children() {\n      return rootInternals.children;\n    },\n\n    createComponent(type, ...rest) {\n      if (components && components.indexOf(type) < 0) {\n        throw new Error(`Unsupported component: ${type}`);\n      }\n\n      const [initialProps, initialChildren, ...moreChildren] = rest;\n      const normalizedInitialProps = initialProps !== null && initialProps !== void 0 ? initialProps : {};\n      const normalizedInitialChildren = [];\n      const normalizedInternalProps = {};\n\n      if (initialProps) {\n        for (const key of Object.keys(initialProps)) {\n          // \"children\" as a prop can be extremely confusing with the \"children\" of\n          // a component. In React, a \"child\" can be anything, but once it reaches\n          // a host environment (like this remote `Root`), we want \"children\" to have\n          // only one meaning: the actual, resolved children components and text.\n          //\n          // To enforce this, we delete any prop named \"children\". We don\u2019t take a copy\n          // of the props for performance, so a user calling this function must do so\n          // with an object that can handle being mutated.\n          if (key === 'children') continue;\n          normalizedInternalProps[key] = makeValueHotSwappable(serializeProp(initialProps[key]));\n        }\n      }\n\n      if (initialChildren) {\n        if (Array.isArray(initialChildren)) {\n          for (const child of initialChildren) {\n            normalizedInitialChildren.push(normalizeChild(child, remoteRoot));\n          }\n        } else {\n          normalizedInitialChildren.push(normalizeChild(initialChildren, remoteRoot)); // The complex tuple type of `rest` makes it so `moreChildren` is\n          // incorrectly inferred as potentially being the props of the component,\n          // lazy casting since we know it will be an array of child elements\n          // (or empty).\n\n          for (const child of moreChildren) {\n            normalizedInitialChildren.push(normalizeChild(child, remoteRoot));\n          }\n        }\n      }\n\n      const id = `${currentId++}`;\n      const internals = {\n        externalProps: strict ? Object.freeze(normalizedInitialProps) : normalizedInitialProps,\n        internalProps: normalizedInternalProps,\n        children: strict ? Object.freeze(normalizedInitialChildren) : normalizedInitialChildren\n      };\n      const component = {\n        kind: KIND_COMPONENT,\n\n        get children() {\n          return internals.children;\n        },\n\n        get props() {\n          return internals.externalProps;\n        },\n\n        get remoteProps() {\n          return internals.internalProps;\n        },\n\n        updateProps: newProps => updateProps(component, newProps, internals, rootInternals),\n        appendChild: child => appendChild(component, normalizeChild(child, remoteRoot), internals, rootInternals),\n        removeChild: child => removeChild(component, child, internals, rootInternals),\n        insertChildBefore: (child, before) => insertChildBefore(component, normalizeChild(child, remoteRoot), before, internals, rootInternals),\n        // Just satisfying the type definition, since we need to write\n        // some properties manually, which we do below. If we just `as any`\n        // the whole object, we lose the implicit argument types for the\n        // methods above.\n        ...EMPTY_OBJECT\n      };\n      rootInternals.components.set(component, internals);\n      Object.defineProperty(component, 'type', {\n        value: type,\n        configurable: false,\n        writable: false,\n        enumerable: true\n      });\n      makePartOfTree(component, rootInternals);\n      makeRemote(component, id, remoteRoot);\n\n      for (const child of internals.children) {\n        moveNodeToContainer(component, child, rootInternals);\n      }\n\n      return component;\n    },\n\n    createText(content = '') {\n      const id = `${currentId++}`;\n      const internals = {\n        text: content\n      };\n      const text = {\n        kind: KIND_TEXT,\n\n        get text() {\n          return internals.text;\n        },\n\n        updateText: newText => updateText(text, newText, internals, rootInternals),\n        // Just satisfying the type definition, since we need to write\n        // some properties manually.\n        ...EMPTY_OBJECT\n      };\n      makePartOfTree(text, rootInternals);\n      makeRemote(text, id, remoteRoot);\n      return text;\n    },\n\n    createFragment() {\n      const id = `${currentId++}`;\n      const internals = {\n        children: strict ? Object.freeze([]) : []\n      };\n      const fragment = {\n        kind: KIND_FRAGMENT,\n\n        get children() {\n          return internals.children;\n        },\n\n        appendChild: child => appendChild(fragment, normalizeChild(child, remoteRoot), internals, rootInternals),\n        removeChild: child => removeChild(fragment, child, internals, rootInternals),\n        insertChildBefore: (child, before) => insertChildBefore(fragment, normalizeChild(child, remoteRoot), before, internals, rootInternals),\n        // Just satisfying the type definition, since we need to write\n        // some properties manually.\n        ...EMPTY_OBJECT\n      };\n      rootInternals.fragments.set(fragment, internals);\n      makePartOfTree(fragment, rootInternals);\n      makeRemote(fragment, id, remoteRoot);\n      return fragment;\n    },\n\n    appendChild: child => appendChild(remoteRoot, normalizeChild(child, remoteRoot), rootInternals, rootInternals),\n    removeChild: child => removeChild(remoteRoot, child, rootInternals, rootInternals),\n    insertChildBefore: (child, before) => insertChildBefore(remoteRoot, normalizeChild(child, remoteRoot), before, rootInternals, rootInternals),\n\n    mount() {\n      if (rootInternals.mounted) return Promise.resolve();\n      rootInternals.mounted = true;\n      return Promise.resolve(channel(ACTION_MOUNT, rootInternals.children.map(serializeChild)));\n    }\n\n  };\n  return remoteRoot;\n}\n\nfunction connected(element, {\n  tops\n}) {\n  var _tops$get;\n\n  return ((_tops$get = tops.get(element)) === null || _tops$get === void 0 ? void 0 : _tops$get.kind) === KIND_ROOT;\n}\n\nfunction allDescendants(element, withEach) {\n  const recurse = element => {\n    if ('children' in element) {\n      for (const child of element.children) {\n        withEach(child);\n        recurse(child);\n      }\n    }\n  };\n\n  recurse(element);\n}\n\nfunction perform(element, rootInternals, {\n  remote,\n  local\n}) {\n  const {\n    mounted,\n    channel\n  } = rootInternals;\n\n  if (mounted && (element.kind === KIND_ROOT || connected(element, rootInternals))) {\n    // should only create context once async queue is cleared\n    remote(channel); // technically, we should be waiting for the remote update to apply,\n    // then apply it locally. The implementation below is too naive because\n    // it allows local updates to get out of sync with remote ones.\n    // if (remoteResult == null || !('then' in remoteResult)) {\n    //   local();\n    //   return;\n    // } else {\n    //   return remoteResult.then(() => {\n    //     local();\n    //   });\n    // }\n  }\n\n  local();\n}\n\nfunction updateText(text, newText, internals, rootInternals) {\n  return perform(text, rootInternals, {\n    remote: channel => channel(ACTION_UPDATE_TEXT, text.id, newText),\n    local: () => {\n      internals.text = newText;\n    }\n  });\n}\n\nconst IGNORE = Symbol('ignore');\n\nfunction updateProps(component, newProps, internals, rootInternals) {\n  const {\n    strict\n  } = rootInternals;\n  const {\n    internalProps: currentProps,\n    externalProps: currentExternalProps\n  } = internals;\n  const normalizedNewProps = {};\n  const hotSwapFunctions = [];\n  let hasRemoteChange = false;\n\n  for (const key of Object.keys(newProps)) {\n    // See notes above for why we treat `children` as a reserved prop.\n    if (key === 'children') continue;\n    const currentExternalValue = currentExternalProps[key];\n    const newExternalValue = newProps[key];\n    const currentValue = currentProps[key];\n    const newValue = serializeProp(newExternalValue); // Bail out if we have equal, primitive types\n\n    if (currentValue === newValue && (newValue == null || typeof newValue !== 'object')) {\n      continue;\n    }\n\n    const [value, hotSwaps] = tryHotSwappingValues(currentValue, newValue);\n\n    if (hotSwaps) {\n      hotSwapFunctions.push(...hotSwaps);\n    }\n\n    if (value === IGNORE) continue;\n    hasRemoteChange = true;\n    normalizedNewProps[key] = value;\n\n    if (isRemoteFragment(currentExternalValue)) {\n      removeNodeFromContainer(currentExternalValue, rootInternals);\n    }\n\n    if (isRemoteFragment(newExternalValue)) {\n      moveNodeToContainer(component, newExternalValue, rootInternals);\n    }\n  }\n\n  return perform(component, rootInternals, {\n    remote: channel => {\n      if (hasRemoteChange) {\n        channel(ACTION_UPDATE_PROPS, component.id, normalizedNewProps);\n      }\n    },\n    local: () => {\n      const mergedExternalProps = { ...currentExternalProps,\n        ...newProps\n      };\n      internals.externalProps = strict ? Object.freeze(mergedExternalProps) : mergedExternalProps;\n      internals.internalProps = { ...internals.internalProps,\n        ...normalizedNewProps\n      };\n\n      for (const [hotSwappable, newValue] of hotSwapFunctions) {\n        hotSwappable[FUNCTION_CURRENT_IMPLEMENTATION_KEY] = newValue;\n      }\n    }\n  });\n} // Imagine the following remote-ui components we might render in a remote context:\n//\n// const root = createRemoteRoot();\n// const {value, onChange, onPress} = getPropsForValue();\n//\n// const textField = root.createComponent('TextField', {value, onChange});\n// const button = root.createComponent('Button', {onPress});\n//\n// root.appendChild(textField);\n// root.appendChild(button);\n//\n// function getPropsForValue(value = '') {\n//   return {\n//     value,\n//     onChange: () => {\n//       const {value, onChange, onPress} = getPropsForValue();\n//       textField.updateProps({value, onChange});\n//       button.updateProps({onPress});\n//     },\n//     onPress: () => console.log(value),\n//   };\n// }\n//\n//\n// In this example, assume that the `TextField` `onChange` prop is run on blur.\n// If this were running on the host, the following steps would happen if you pressed\n// on the button:\n//\n// 1. The text field blurs, and so calls `onChange()` with its current value, which\n//    then calls `setValue()` with the updated value.\n// 2. We synchronously update the `value`, `onChange`, and `onPress` props to point at\n//    the most current `value`.\n// 3. Handling blur is finished, so the browser now handles the click by calling the\n//    (newly-updated) `Button` `onPress()`, which logs out the new value.\n//\n// Because remote-ui reproduces a UI tree asynchronously from the remote context, the\n// steps above run in a different order:\n//\n// 1. The text field blurs, and so calls `onChange()` with its current value.\n// 2. Handling blur is finished **from the perspective of the main thread**, so the\n//    browser now handles the click by calling the (original) `Button` `onPress()`, which\n//    logs out the **initial** value.\n// 3. In the remote context, we receive the `onChange()` call, which calls updates the props\n//    on the `Button` and `TextField` to be based on the new `value`, but by now it\u2019s\n//    already too late for `onPress` \u2014 the old version has already been called!\n//\n// As you can see, the timing issue introduced by the asynchronous nature of remote-ui\n// can cause \u201Cold props\u201D to be called from the main thread. This example may seem like\n// an unusual pattern, and it is if you are using `@remote-ui/core` directly; you\u2019d generally\n// keep a mutable reference to the state, instead of closing over the state with new props.\n// However, abstractions on top of `@remote-ui/core`, like the React reconciler in\n// `@remote-ui/react`, work almost entirely by closing over state, so this issue is\n// much more common with those declarative libraries.\n//\n// To protect against this, we handle function props a bit differently. When we have a\n// function prop, we replace it with a new function that calls the original. However,\n// we make the original mutable, by making it a property on the function itself. When\n// this function subsequently updates, we don\u2019t send the update to the main thread (as\n// we just saw, this can often be \"too late\" to be of any use). Instead, we swap out\n// the mutable reference to the current implementation of the function prop, which can\n// be done synchronously. In the example above, this would all happen synchronously in\n// the remote context; in our handling of `TextField onChange()`, we update `Button onPress()`,\n// and swap out the implementations. Now, when the main thread attempts to call `Button onPress()`,\n// it instead calls our wrapper around the function, which can refer to, and call, the\n// most recently-applied implementation, instead of directly calling the old implementation.\n\n\nfunction tryHotSwappingValues(currentValue, newValue) {\n  if (typeof currentValue === 'function' && FUNCTION_CURRENT_IMPLEMENTATION_KEY in currentValue) {\n    return [typeof newValue === 'function' ? IGNORE : makeValueHotSwappable(newValue), [[currentValue, newValue]]];\n  }\n\n  if (Array.isArray(currentValue)) {\n    return tryHotSwappingArrayValues(currentValue, newValue);\n  }\n\n  if (typeof currentValue === 'object' && currentValue != null && !isRemoteFragment(currentValue)) {\n    return tryHotSwappingObjectValues(currentValue, newValue);\n  }\n\n  return [currentValue === newValue ? IGNORE : newValue];\n}\n\nfunction makeValueHotSwappable(value) {\n  if (isRemoteFragment(value)) {\n    return value;\n  }\n\n  if (typeof value === 'function') {\n    const wrappedFunction = (...args) => {\n      return wrappedFunction[FUNCTION_CURRENT_IMPLEMENTATION_KEY](...args);\n    };\n\n    Object.defineProperty(wrappedFunction, FUNCTION_CURRENT_IMPLEMENTATION_KEY, {\n      enumerable: false,\n      configurable: false,\n      writable: true,\n      value\n    });\n    return wrappedFunction;\n  } else if (Array.isArray(value)) {\n    return value.map(makeValueHotSwappable);\n  } else if (typeof value === 'object' && value != null) {\n    return Object.keys(value).reduce((newValue, key) => {\n      newValue[key] = makeValueHotSwappable(value[key]);\n      return newValue;\n    }, {});\n  }\n\n  return value;\n} // eslint-disable-next-line consistent-return\n\n\nfunction collectNestedHotSwappableValues(value) {\n  if (typeof value === 'function') {\n    if (FUNCTION_CURRENT_IMPLEMENTATION_KEY in value) return [value];\n  } else if (Array.isArray(value)) {\n    return value.reduce((all, element) => {\n      const nested = collectNestedHotSwappableValues(element);\n      return nested ? [...all, ...nested] : all;\n    }, []);\n  } else if (typeof value === 'object' && value != null) {\n    return Object.keys(value).reduce((all, key) => {\n      const nested = collectNestedHotSwappableValues(value[key]);\n      return nested ? [...all, ...nested] : all;\n    }, []);\n  }\n}\n\nfunction appendChild(container, child, internals, rootInternals) {\n  var _currentParent$childr;\n\n  const {\n    nodes,\n    strict\n  } = rootInternals;\n\n  if (!nodes.has(child)) {\n    throw new Error(`Cannot append a node that was not created by this remote root`);\n  }\n\n  const currentParent = child.parent;\n  const existingIndex = (_currentParent$childr = currentParent === null || currentParent === void 0 ? void 0 : currentParent.children.indexOf(child)) !== null && _currentParent$childr !== void 0 ? _currentParent$childr : -1;\n  return perform(container, rootInternals, {\n    remote: channel => {\n      channel(ACTION_INSERT_CHILD, container.id, existingIndex < 0 ? container.children.length : container.children.length - 1, serializeChild(child), currentParent ? currentParent.id : false);\n    },\n    local: () => {\n      moveNodeToContainer(container, child, rootInternals);\n      let newChildren;\n\n      if (currentParent) {\n        const currentInternals = getCurrentInternals(currentParent, rootInternals);\n        const currentChildren = [...currentInternals.children];\n        currentChildren.splice(existingIndex, 1);\n\n        if (currentParent === container) {\n          newChildren = currentChildren;\n        } else {\n          currentInternals.children = strict ? Object.freeze(currentChildren) : currentChildren;\n          newChildren = [...internals.children];\n        }\n      } else {\n        newChildren = [...internals.children];\n      }\n\n      newChildren.push(child);\n      internals.children = strict ? Object.freeze(newChildren) : newChildren;\n    }\n  });\n} // there is a problem with this, because when multiple children\n// are removed, there is no guarantee the messages will arrive in the\n// order we need them to on the host side (it depends how React\n// calls our reconciler). If it calls with, for example, the removal of\n// the second last item, then the removal of the last item, it will fail\n// because the indexes moved around.\n//\n// Might need to send the removed child ID, or find out if we\n// can collect removals into a single update.\n\n\nfunction removeChild(container, child, internals, rootInternals) {\n  const {\n    strict\n  } = rootInternals;\n  return perform(container, rootInternals, {\n    remote: channel => channel(ACTION_REMOVE_CHILD, container.id, container.children.indexOf(child)),\n    local: () => {\n      removeNodeFromContainer(child, rootInternals);\n      const newChildren = [...internals.children];\n      newChildren.splice(newChildren.indexOf(child), 1);\n      internals.children = strict ? Object.freeze(newChildren) : newChildren;\n    }\n  });\n}\n\nfunction insertChildBefore(container, child, before, internals, rootInternals) {\n  var _currentParent$childr2;\n\n  const {\n    strict,\n    nodes\n  } = rootInternals;\n\n  if (!nodes.has(child)) {\n    throw new Error(`Cannot insert a node that was not created by this remote root`);\n  }\n\n  const currentParent = child.parent;\n  const existingIndex = (_currentParent$childr2 = currentParent === null || currentParent === void 0 ? void 0 : currentParent.children.indexOf(child)) !== null && _currentParent$childr2 !== void 0 ? _currentParent$childr2 : -1;\n  return perform(container, rootInternals, {\n    remote: channel => {\n      const beforeIndex = container.children.indexOf(before);\n      channel(ACTION_INSERT_CHILD, container.id, beforeIndex < existingIndex || existingIndex < 0 ? beforeIndex : beforeIndex - 1, serializeChild(child), currentParent ? currentParent.id : false);\n    },\n    local: () => {\n      moveNodeToContainer(container, child, rootInternals);\n      let newChildren;\n\n      if (currentParent) {\n        const currentInternals = getCurrentInternals(currentParent, rootInternals);\n        const currentChildren = [...currentInternals.children];\n        currentChildren.splice(existingIndex, 1);\n\n        if (currentParent === container) {\n          newChildren = currentChildren;\n        } else {\n          currentInternals.children = strict ? Object.freeze(currentChildren) : currentChildren;\n          newChildren = [...internals.children];\n        }\n      } else {\n        newChildren = [...internals.children];\n      }\n\n      newChildren.splice(newChildren.indexOf(before), 0, child);\n      internals.children = strict ? Object.freeze(newChildren) : newChildren;\n    }\n  });\n}\n\nfunction normalizeChild(child, root) {\n  return typeof child === 'string' ? root.createText(child) : child;\n}\n\nfunction moveNodeToContainer(container, node, rootInternals) {\n  const {\n    tops,\n    parents\n  } = rootInternals;\n  const newTop = container.kind === KIND_ROOT ? container : tops.get(container);\n  tops.set(node, newTop);\n  parents.set(node, container);\n  moveFragmentToContainer(node, rootInternals);\n  allDescendants(node, descendant => {\n    tops.set(descendant, newTop);\n    moveFragmentToContainer(descendant, rootInternals);\n  });\n}\n\nfunction moveFragmentToContainer(node, rootInternals) {\n  if (node.kind !== KIND_COMPONENT) return;\n  const props = node.props;\n  if (!props) return;\n  Object.values(props).forEach(prop => {\n    if (!isRemoteFragment(prop)) return;\n    moveNodeToContainer(node, prop, rootInternals);\n  });\n}\n\nfunction removeNodeFromContainer(node, rootInternals) {\n  const {\n    tops,\n    parents\n  } = rootInternals;\n  tops.delete(node);\n  parents.delete(node);\n  allDescendants(node, descendant => {\n    tops.delete(descendant);\n    removeFragmentFromContainer(descendant, rootInternals);\n  });\n  removeFragmentFromContainer(node, rootInternals);\n}\n\nfunction removeFragmentFromContainer(node, rootInternals) {\n  if (node.kind !== KIND_COMPONENT) return;\n  const props = node.remoteProps;\n\n  for (const key of Object.keys(props !== null && props !== void 0 ? props : {})) {\n    const prop = props[key];\n    if (!isRemoteFragment(prop)) continue;\n    removeNodeFromContainer(prop, rootInternals);\n  }\n}\n\nfunction makePartOfTree(node, {\n  parents,\n  tops,\n  nodes\n}) {\n  nodes.add(node);\n  Object.defineProperty(node, 'parent', {\n    get() {\n      return parents.get(node);\n    },\n\n    configurable: true,\n    enumerable: true\n  });\n  Object.defineProperty(node, 'top', {\n    get() {\n      return tops.get(node);\n    },\n\n    configurable: true,\n    enumerable: true\n  });\n}\n\nfunction serializeChild(value) {\n  return value.kind === KIND_TEXT ? {\n    id: value.id,\n    kind: value.kind,\n    text: value.text\n  } : {\n    id: value.id,\n    kind: value.kind,\n    type: value.type,\n    props: value.remoteProps,\n    children: value.children.map(child => serializeChild(child))\n  };\n}\n\nfunction serializeProp(prop) {\n  if (isRemoteFragment(prop)) {\n    return serializeFragment(prop);\n  }\n\n  return prop;\n}\n\nfunction serializeFragment(value) {\n  return {\n    id: value.id,\n    kind: value.kind,\n\n    get children() {\n      return value.children.map(child => serializeChild(child));\n    }\n\n  };\n}\n\nfunction getCurrentInternals(currentParent, rootInternals) {\n  if (currentParent.kind === KIND_ROOT) {\n    return rootInternals;\n  }\n\n  if (currentParent.kind === KIND_FRAGMENT) {\n    return rootInternals.fragments.get(currentParent);\n  }\n\n  return rootInternals.components.get(currentParent);\n}\n\nfunction makeRemote(value, id, root) {\n  Object.defineProperty(value, 'id', {\n    value: id,\n    configurable: true,\n    writable: false,\n    enumerable: false\n  });\n  Object.defineProperty(value, 'root', {\n    value: root,\n    configurable: true,\n    writable: false,\n    enumerable: false\n  });\n}\n\nfunction tryHotSwappingObjectValues(currentValue, newValue) {\n  if (typeof newValue !== 'object' || newValue == null) {\n    var _collectNestedHotSwap;\n\n    return [makeValueHotSwappable(newValue), (_collectNestedHotSwap = collectNestedHotSwappableValues(currentValue)) === null || _collectNestedHotSwap === void 0 ? void 0 : _collectNestedHotSwap.map(hotSwappable => [hotSwappable, undefined])];\n  }\n\n  let hasChanged = false;\n  const hotSwaps = [];\n  const normalizedNewValue = {}; // eslint-disable-next-line guard-for-in\n\n  for (const key in currentValue) {\n    const currentObjectValue = currentValue[key];\n\n    if (!(key in newValue)) {\n      hasChanged = true;\n      const nestedHotSwappables = collectNestedHotSwappableValues(currentObjectValue);\n\n      if (nestedHotSwappables) {\n        hotSwaps.push(...nestedHotSwappables.map(hotSwappable => [hotSwappable, undefined]));\n      }\n    }\n\n    const newObjectValue = newValue[key];\n    const [updatedValue, elementHotSwaps] = tryHotSwappingValues(currentObjectValue, newObjectValue);\n    if (elementHotSwaps) hotSwaps.push(...elementHotSwaps);\n\n    if (updatedValue !== IGNORE) {\n      hasChanged = true;\n      normalizedNewValue[key] = updatedValue;\n    }\n  }\n\n  for (const key in newValue) {\n    if (key in normalizedNewValue) continue;\n    hasChanged = true;\n    normalizedNewValue[key] = makeValueHotSwappable(newValue[key]);\n  }\n\n  return [hasChanged ? normalizedNewValue : IGNORE, hotSwaps];\n}\n\nfunction tryHotSwappingArrayValues(currentValue, newValue) {\n  if (!Array.isArray(newValue)) {\n    var _collectNestedHotSwap2;\n\n    return [makeValueHotSwappable(newValue), (_collectNestedHotSwap2 = collectNestedHotSwappableValues(currentValue)) === null || _collectNestedHotSwap2 === void 0 ? void 0 : _collectNestedHotSwap2.map(hotSwappable => [hotSwappable, undefined])];\n  }\n\n  let hasChanged = false;\n  const hotSwaps = [];\n  const newLength = newValue.length;\n  const currentLength = currentValue.length;\n  const maxLength = Math.max(currentLength, newLength);\n  const normalizedNewValue = [];\n\n  for (let i = 0; i < maxLength; i++) {\n    const currentArrayValue = currentValue[i];\n    const newArrayValue = newValue[i];\n\n    if (i < newLength) {\n      if (i >= currentLength) {\n        hasChanged = true;\n        normalizedNewValue[i] = makeValueHotSwappable(newArrayValue);\n        continue;\n      }\n\n      const [updatedValue, elementHotSwaps] = tryHotSwappingValues(currentArrayValue, newArrayValue);\n      if (elementHotSwaps) hotSwaps.push(...elementHotSwaps);\n\n      if (updatedValue === IGNORE) {\n        normalizedNewValue[i] = currentArrayValue;\n        continue;\n      }\n\n      hasChanged = true;\n      normalizedNewValue[i] = updatedValue;\n    } else {\n      hasChanged = true;\n      const nestedHotSwappables = collectNestedHotSwappableValues(currentArrayValue);\n\n      if (nestedHotSwappables) {\n        hotSwaps.push(...nestedHotSwappables.map(hotSwappable => [hotSwappable, undefined]));\n      }\n    }\n  }\n\n  return [hasChanged ? normalizedNewValue : IGNORE, hotSwaps];\n}\n\nexport { createRemoteRoot };\n", "import { createRemoteRoot } from '@remote-ui/core';\n\n/**\n * This function takes an extension function that is expecting a `RemoteRoot` as its\n * first argument, and returns a new function that accepts a `RemoteChannel` instead.\n * This is a convenience that allows the raw UI extension API to only expose the simpler\n * `RemoteChannel` type, while allowing the extension to use the more powerful `RemoteRoot`,\n * provided by a version of `@remote-ui/core` that the extension controls.\n */\nfunction createExtensionRegistrationFunction() {\n  const extensionWrapper = (target, implementation) => {\n    var _shopify;\n    async function extension(...args) {\n      // Rendering extensions have two arguments. Non-rendering extensions don\u2019t have\n      // a `RemoteChannel` that needs to be normalized, so we can just pass the arguments\n      // through.\n      if (args.length === 1) {\n        return implementation(...args);\n      }\n      const [{\n        channel,\n        components\n      }, api] = args;\n      const root = createRemoteRoot(channel, {\n        components,\n        strict: true\n      });\n      let renderResult = implementation(root, api);\n      if (typeof renderResult === 'object' && renderResult != null && 'then' in renderResult) {\n        renderResult = await renderResult;\n      }\n      root.mount();\n      return renderResult;\n    }\n    (_shopify = globalThis.shopify) === null || _shopify === void 0 ? void 0 : _shopify.extend(target, extension);\n    return extension;\n  };\n  return extensionWrapper;\n}\n\nexport { createExtensionRegistrationFunction };\n", "import { createExtensionRegistrationFunction } from '../../utilities/registration.mjs';\n\nconst extension = createExtensionRegistrationFunction();\nconst extend = extension;\n\nexport { extend, extension };\n", "import { createRemoteComponent } from '@remote-ui/core';\n\n/**\n * AdminAction is a component used by Admin Action extensions to configure a primary and secondary action and title.\n */\nconst AdminAction = createRemoteComponent('AdminAction');\n\nexport { AdminAction };\n", "import { createRemoteComponent } from '@remote-ui/core';\n\nconst BlockStack = createRemoteComponent('BlockStack');\n\nexport { BlockStack };\n", "import { createRemoteComponent } from '@remote-ui/core';\n\nconst Button = createRemoteComponent('Button');\n\nexport { Button };\n", "import { createRemoteComponent } from '@remote-ui/core';\n\nconst Text = createRemoteComponent('Text');\n\nexport { Text };\n", "const ACTION_MOUNT = 0;\nconst ACTION_INSERT_CHILD = 1;\nconst ACTION_REMOVE_CHILD = 2;\nconst ACTION_UPDATE_TEXT = 3;\nconst ACTION_UPDATE_PROPS = 4;\nconst KIND_ROOT = 0;\nconst KIND_COMPONENT = 1;\nconst KIND_TEXT = 2;\nconst KIND_FRAGMENT = 3;\n\nexport { ACTION_INSERT_CHILD, ACTION_MOUNT, ACTION_REMOVE_CHILD, ACTION_UPDATE_PROPS, ACTION_UPDATE_TEXT, KIND_COMPONENT, KIND_FRAGMENT, KIND_ROOT, KIND_TEXT };\n", "import { KIND_COMPONENT, KIND_TEXT, KIND_FRAGMENT } from './types.mjs';\n\nfunction isRemoteComponent(child) {\n  return child != null && child.kind === KIND_COMPONENT;\n}\nfunction isRemoteText(child) {\n  return child != null && child.kind === KIND_TEXT;\n}\nfunction isRemoteFragment(object) {\n  return object != null && object.kind === KIND_FRAGMENT;\n}\n\nexport { isRemoteComponent, isRemoteFragment, isRemoteText };\n", "import reactReconciler from 'react-reconciler';\n\nconst createReconciler = options => {\n  var _options$primary;\n\n  return reactReconciler({\n    now: Date.now,\n    // Timeout\n    scheduleTimeout: setTimeout,\n    cancelTimeout: clearTimeout,\n    noTimeout: false,\n    // @see https://github.com/facebook/react/blob/master/packages/react-dom/src/client/ReactDOMHostConfig.js#L408\n    queueMicrotask: callback => Promise.resolve(null).then(callback).catch(handleErrorInNextTick),\n    isPrimaryRenderer: (_options$primary = options === null || options === void 0 ? void 0 : options.primary) !== null && _options$primary !== void 0 ? _options$primary : true,\n    supportsMutation: true,\n    supportsHydration: false,\n    supportsPersistence: false,\n\n    // Context\n    getRootHostContext() {\n      return {};\n    },\n\n    getChildHostContext(context) {\n      return context;\n    },\n\n    // Instances\n    createTextInstance(text, root) {\n      return root.createText(text);\n    },\n\n    createInstance(type, allProps, root) {\n      const {\n        children: _children,\n        ...props\n      } = allProps;\n      return root.createComponent(type, props);\n    },\n\n    // Updates\n    commitTextUpdate(text, _oldText, newText) {\n      text.updateText(newText);\n    },\n\n    prepareUpdate(_instance, _type, oldProps, newProps) {\n      const updateProps = {};\n      let needsUpdate = false;\n\n      for (const key in oldProps) {\n        if (!has(oldProps, key) || key === 'children') {\n          continue;\n        }\n\n        if (!(key in newProps)) {\n          needsUpdate = true;\n          updateProps[key] = undefined; // } else if (typeof oldProps[key] === 'function') {\n          //   if (typeof newProps[key] === 'function') {\n          //     fragment.controller.functions.exchange(\n          //       oldProps[key] as Function,\n          //       newProps[key] as Function,\n          //     );\n          //   } else {\n          //     needsUpdate = true;\n          //     fragment.controller.functions.revoke(oldProps[key] as Function);\n          //     updateProps[key] = newProps[key];\n          //   }\n        } else if (oldProps[key] !== newProps[key]) {\n          needsUpdate = true;\n          updateProps[key] = newProps[key];\n        }\n      }\n\n      for (const key in newProps) {\n        if (!has(newProps, key) || key === 'children') {\n          continue;\n        }\n\n        if (!(key in oldProps)) {\n          needsUpdate = true;\n          updateProps[key] = newProps[key];\n        }\n      }\n\n      return needsUpdate ? updateProps : null;\n    },\n\n    commitUpdate(instance, payload) {\n      instance.updateProps(payload);\n    },\n\n    // Update root\n    appendChildToContainer(remoteRoot, child) {\n      remoteRoot.appendChild(child);\n    },\n\n    insertInContainerBefore(remoteRoot, child, beforeChild) {\n      remoteRoot.insertChildBefore(child, beforeChild);\n    },\n\n    removeChildFromContainer(remoteRoot, child) {\n      remoteRoot.removeChild(child);\n    },\n\n    clearContainer(remoteRoot) {\n      for (const child of remoteRoot.children) {\n        remoteRoot.removeChild(child);\n      }\n    },\n\n    // Update children\n    appendInitialChild(parent, child) {\n      parent.appendChild(child);\n    },\n\n    appendChild(parent, child) {\n      parent.appendChild(child);\n    },\n\n    insertBefore(parent, newChild, beforeChild) {\n      parent.insertChildBefore(newChild, beforeChild);\n    },\n\n    removeChild(parent, child) {\n      parent.removeChild(child);\n    },\n\n    // Unknown\n    finalizeInitialChildren() {\n      return false;\n    },\n\n    shouldSetTextContent() {\n      return false;\n    },\n\n    getPublicInstance() {},\n\n    prepareForCommit() {\n      return null;\n    },\n\n    resetAfterCommit() {},\n\n    commitMount() {},\n\n    preparePortalMount() {}\n\n  });\n};\n\nfunction handleErrorInNextTick(error) {\n  setTimeout(() => {\n    throw error;\n  });\n}\n\nconst {\n  hasOwnProperty\n} = {};\n\nfunction has(object, property) {\n  return hasOwnProperty.call(object, property);\n}\n\nexport { createReconciler };\n", "import { createContext } from 'react';\n\nconst RenderContext = /*#__PURE__*/createContext(null);\n\nexport { RenderContext };\n", "import { createReconciler } from './reconciler.mjs';\nimport { RenderContext } from './context.mjs';\nimport { jsx } from 'react/jsx-runtime';\n\nconst cache = new WeakMap(); // @see https://github.com/facebook/react/blob/993ca533b42756811731f6b7791ae06a35ee6b4d/packages/react-reconciler/src/ReactRootTags.js\n// I think we are a legacy root?\n\nconst LEGACY_ROOT = 0;\nconst defaultReconciler = createReconciler();\nfunction render(element, root, callback, reconciler = defaultReconciler) {\n  // First, check if we've already cached a container and render context for this root\n  let cached = cache.get(root);\n\n  if (!cached) {\n    // Since we haven't created a container for this root yet, create a new one\n    const value = {\n      container: reconciler.createContainer(root, LEGACY_ROOT, false, null),\n      // We also cache the render context to avoid re-creating it on subsequent render calls\n      renderContext: {\n        root,\n        reconciler\n      }\n    }; // Store the container and render context for retrieval on subsequent render calls\n\n    cache.set(root, value);\n    cached = value;\n  }\n\n  const {\n    container,\n    renderContext\n  } = cached; // callback is cast here because the typings do not mark that argument\n  // as optional, even though it is.\n\n  reconciler.updateContainer( /*#__PURE__*/jsx(RenderContext.Provider, {\n    value: renderContext,\n    children: element\n  }), container, null, callback); // Did not work for me because (I think?) it is done by the worker\n  // and therefore has an entirely different React.\n  //\n  // Original code was from:\n  // @see https://github.com/facebook/react/issues/16666\n  // @see https://github.com/michalochman/react-pixi-fiber/pull/148\n  //\n  // reconciler.injectIntoDevTools({\n  //   bundleType: 1,\n  //   findFiberByHostInstance: reconciler.findFiberByHostInstance,\n  //   rendererPackageName: '@remote-ui/react',\n  //   version: '16.9.0',\n  // });\n}\n\nexport { render };\n", "import { memo, useRef, useMemo, isValidElement, Children } from 'react';\nimport { isRemoteFragment } from '@remote-ui/core';\nimport { jsx } from 'react/jsx-runtime';\nimport { useRender } from './hooks/render.mjs';\n\nfunction createRemoteReactComponent(componentType, {\n  fragmentProps\n} = {}) {\n  if (!fragmentProps || !fragmentProps.length) {\n    return componentType;\n  }\n\n  const wrapper = createComponentWrapper(componentType, fragmentProps);\n  wrapper.displayName = componentType;\n  return wrapper;\n}\n\nfunction createComponentWrapper(componentType, fragmentProps) {\n  const Component = componentType;\n  return /*#__PURE__*/memo(function ComponentWrapper({\n    children: externalChildren = [],\n    ...externalProps\n  }) {\n    const fragments = useRef({});\n    const {\n      root,\n      reconciler\n    } = useRender();\n    const {\n      props,\n      children\n    } = useMemo(() => {\n      // React portals need to be attached to the tree after intialize in order to render.\n      // It's usually done by appending them as children of a parent node.\n      // @see https://reactjs.org/docs/portals.html\n      const portals = [];\n      const props = {};\n\n      for (const key of Object.keys(externalProps)) {\n        const element = externalProps[key];\n\n        if (fragmentProps.includes(key) && /*#__PURE__*/isValidElement(element)) {\n          const currentFragment = fragments.current[key];\n          const fragment = isRemoteFragment(currentFragment) ? currentFragment : root.createFragment();\n          fragments.current[key] = fragment; // Assign createText and createComponent to fragment\n          // so that it can become a React container to render the portal\n\n          Object.assign(fragment, {\n            createText(...args) {\n              return root.createText(...args);\n            },\n\n            createComponent(type, ...args) {\n              return root.createComponent(type, ...args);\n            }\n\n          });\n          const portal = reconciler.createPortal(element, fragment, null, null);\n          portals.push(portal);\n          props[key] = fragment;\n        } else {\n          props[key] = element;\n          delete fragments.current[key];\n        }\n      }\n\n      return {\n        props,\n        children: [...Children.toArray(externalChildren), ...portals]\n      };\n    }, [externalChildren, externalProps, root, reconciler, fragments]);\n    return /*#__PURE__*/jsx(Component, { ...props,\n      children: children\n    });\n  });\n}\n\nexport { createRemoteReactComponent };\n", "import { useContext } from 'react';\nimport { RenderContext } from '../context.mjs';\n\nfunction useRender() {\n  const render = useContext(RenderContext);\n\n  if (render == null) {\n    throw new Error('No remote-ui Render instance found in context');\n  }\n\n  return render;\n}\n\nexport { useRender };\n", "import { createContext } from 'react';\n\nconst ExtensionApiContext = /*#__PURE__*/createContext(null);\n\nexport { ExtensionApiContext };\n", "import { render } from '@remote-ui/react';\nimport { extension } from '@shopify/ui-extensions/admin';\nimport { ExtensionApiContext } from './context.mjs';\nimport { jsx } from 'react/jsx-runtime';\n\nfunction reactExtension(target, render$1) {\n  // TypeScript can\u2019t infer the type of the callback because it\u2019s a big union\n  // type. To get around it, we\u2019ll just fake like we are rendering the\n  // Playground extension, since all render extensions have the same general\n  // shape (`RenderExtension`).\n  return extension(target, (root, api) => {\n    return new Promise((resolve, reject) => {\n      try {\n        render( /*#__PURE__*/jsx(ExtensionApiContext.Provider, {\n          value: api,\n          children: render$1(api)\n        }), root, () => {\n          resolve();\n        });\n      } catch (error) {\n        // Workaround for https://github.com/Shopify/ui-extensions/issues/325\n        // eslint-disable-next-line no-console\n        console.error(error);\n        reject(error);\n      }\n    });\n  });\n}\n\nexport { reactExtension, reactExtension as render };\n", "import { AdminAction as AdminAction$1 } from '@shopify/ui-extensions/admin';\nimport { createRemoteReactComponent } from '@remote-ui/react';\n\nconst AdminAction = createRemoteReactComponent(AdminAction$1, {\n  fragmentProps: ['primaryAction', 'secondaryAction']\n});\n\nexport { AdminAction };\n", "import { BlockStack as BlockStack$1 } from '@shopify/ui-extensions/admin';\nimport { createRemoteReactComponent } from '@remote-ui/react';\n\nconst BlockStack = createRemoteReactComponent(BlockStack$1);\n\nexport { BlockStack };\n", "import { Button as Button$1 } from '@shopify/ui-extensions/admin';\nimport { createRemoteReactComponent } from '@remote-ui/react';\n\nconst Button = createRemoteReactComponent(Button$1);\n\nexport { Button };\n", "import { Text as Text$1 } from '@shopify/ui-extensions/admin';\nimport { createRemoteReactComponent } from '@remote-ui/react';\n\nconst Text = createRemoteReactComponent(Text$1);\n\nexport { Text };\n", "import { useContext } from 'react';\nimport { ExtensionApiContext } from '../context.mjs';\nimport { AdminUIExtensionError } from '../errors.mjs';\n\n/**\n * Returns the full API object that was passed in to your\n * extension when it was created.\n */\nfunction useApi(_target) {\n  const api = useContext(ExtensionApiContext);\n  if (api == null) {\n    throw new AdminUIExtensionError('No extension api found.');\n  }\n  return api;\n}\n\n/**\n * Returns the full API object that was passed in to your\n * extension when it was created.\n * @deprecated you shoud be importing useApi instead\n */\nfunction useExtensionApi() {\n  return useApi();\n}\n\nexport { useApi, useExtensionApi };\n", "class AdminUIExtensionError extends Error {\n  constructor(...args) {\n    super(...args);\n    this.name = 'AdminUIExtensionError';\n  }\n}\n\nexport { AdminUIExtensionError };\n", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null],
  "mappings": "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C,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;AAAA,UAClC,WAAW,KAAK,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;AAAA,UAClC,WAAW,KAAK,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;AAAA,UAClC,WAAW,KAAK,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;AAAA,UAClC,WAAW,KAAK,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;AAAA,UAClC,WAAW,KAAK,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;AAAA,UAClC,WAAW,KAAK,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;AAAA,UAClC,WAAW,KAAK,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;AAAA,UAClC,WAAW,KAAK,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;AAAA,UAClC,WAAW,KAAK,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;AAAA,UAClC,WAAW,KAAK,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;AAAA,UAClC,WAAW,KAAK,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;AAAA,UAClC,WAAW,KAAK,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;AAAA,UAClC,WAAW,KAAK,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;AAAA,UAClC,WAAW,KAAK,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;AAAA,UAClC,WAAW,KAAK,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;AAAA,UAClC,WAAW,KAAK,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;AAAA,UAClC,WAAW,KAAK,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;AAAA,UAClC,WAAW,KAAK,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;AAAA,UAClC,WAAW,KAAK,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;AAAA,UAClC,WAAW,KAAK,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;AAAA,UAClC,WAAW,KAAK,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;AAAA,UAClC,WAAW,KAAK,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;AAAA,UAClC,WAAW,KAAK,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;AAAA,UAClC,WAAW,KAAK,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;AAAA,UAClC,WAAW,KAAK,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;AAAA,UAClC,WAAW,KAAK,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;AAAA,UAClC,WAAW,KAAK,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;AAAA,UAClC,WAAW,KAAK,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;AAAA,UAClC,WAAW,KAAK,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;AAAA,UAClC,WAAW,KAAK,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;AAAA,UAClC,WAAW,KAAK,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;AAAA,UAClC,WAAW,KAAK,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;AAAA,UAClC,WAAW,KAAK,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;AAAA,UAClC,WAAW,KAAK,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;AAAA,UAClC,WAAW,KAAK,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;AAAA,UAClC,WAAW,KAAK,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;AAAA,UAClC,WAAW,KAAK,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;AAAA,UAClC,WAAW,KAAK,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;AAAA,UAClC,WAAW,KAAK,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;AAAA,UAClC,WAAW,KAAK,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;AAAA,UAClC,WAAW,KAAK,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;AAAA,UAClC,WAAW,KAAK,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;AAAA,UAClC,WAAW,KAAK,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;AAAA,UAClC,WAAW,KAAK,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;AAAA,UAClC,WAAW,KAAK,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;AAAA,UAClC,WAAW,KAAK,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;AAAA,UAClC,WAAW,KAAK,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;AAAA,UAClC,WAAW,KAAK,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;AAAA,UAClC,WAAW,KAAK,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;AAAA,UAClC,WAAW,KAAK,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;AAAA,UAClC,WAAW,KAAK,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;AAAA,UAClC,WAAW,KAAK,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;AAAA,UAClC,WAAW,KAAK,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;AAAA,UAClC,WAAW,KAAK,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;AAAA,UAClC,WAAW,KAAK,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;AAAA,UAClC,WAAW,KAAK,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;AAAA,UAClC,WAAW,KAAK,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;AAAA,UAClC,WAAW,KAAK,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;AAAA,UAClC,WAAW,KAAK,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;AAAA,UAClC,WAAW,KAAK,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;AAAA,UAClC,WAAW,KAAK,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;AAAA,UAClC,WAAW,KAAK,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;AAAA,UAClC,WAAW,KAAK,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;AAAA,UAClC,WAAW,KAAK,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;AAAA,UAClC,WAAW,KAAK,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;AAAA,UAClC,WAAW,KAAK,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;AAAA,UAClC,WAAW,KAAK,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;AAAA,UAClC,WAAW,KAAK,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;AAAA,UAClC,WAAW,KAAK,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;AAAA,UAClC,WAAW,KAAK,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;AAAA,UAClC,WAAW,KAAK,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;AAAA,UAClC,WAAW,KAAK,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;AAAA,UAClC,WAAW,KAAK,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;AAAA,UAClC,WAAW,KAAK,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;AAAA,UAClC,WAAW,KAAK,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;AAAA,UAClC,WAAW,KAAK,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;AAAA,UAClC,WAAW,KAAK,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;AAAA,UAClC,WAAW,KAAK,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;AAAA,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S;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UACnG;AAAA,UAAS;AAAA,UAAS;AAAA,QACtB,CAAC;AAID,qBAAa,iBAAivG;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAK;AAAA,UAAK;AAAA,UAAK;AAAA,UAAK;AAAA,UAAK;AAAA,UAAM;AAAA,UAAK;AAAA,UAC5G;AAAA,UAAM;AAAA,UAAK;AAAA,UAAK;AAAA,UAAK;AAAA,UAAM;AAAA,UAAK;AAAA,UAAM;AAAA,UAAK;AAAA,UAAK;AAAA,UAAK;AAAA,UAAK;AAAA,UAAM;AAAA,UAAM;AAAA,UAAK;AAAA,UAAK;AAAA,UAAM;AAAA,UAAK;AAAA,UAAM;AAAA,UAAK;AAAA,UAAM;AAAA,UAC5G;AAAA,UAAK;AAAA,UAAK;AAAA,UAAM;AAAA,UAAK;AAAA,UAAK;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAK;AAAA,UAAK;AAAA,UAAM;AAAA,UAAK;AAAA,UAAM;AAAA,UAAK;AAAA,UAAM;AAAA,UAAM;AAAA,UAAK;AAAA,UAAK;AAAA,UAAK;AAAA,UAC7G;AAAA,UAAM;AAAA,UAAK;AAAA,UAAM;AAAA,UAAK;AAAA,UAAK;AAAA,UAAK;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAK;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAK;AAAA,UAAK;AAAA,UAAK;AAAA,UAC1G;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAK;AAAA,UAAK;AAAA,UAAK;AAAA,UAAK;AAAA,UAAM;AAAA,UAAK;AAAA,UAAK;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAK;AAAA,UAAK;AAAA,UAAK;AAAA,UACzG;AAAA,UAAM;AAAA,UAAK;AAAA,UAAM;AAAA,UAAK;AAAA,UAAK;AAAA,UAAK;AAAA,UAAK;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UACvzG;AAAA,UAAM;AAAA,UAAK;AAAA,UAAM;AAAA,UAAK;AAAA,UAAK;AAAA,UAAK;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAK;AAAA,UAAM;AAAA,UAAM;AAAA,UAAK;AAAA,UAAK;AAAA,UAAM;AAAA,UAAK;AAAA,UAAM;AAAA,UAAK;AAAA,UAAM;AAAA,UACzG;AAAA,UAAM;AAAA,UAAK;AAAA,UAAK;AAAA,UAAK;AAAA,UAAM;AAAA,UAAK;AAAA,UAAM;AAAA,UAAK;AAAA,UAAM;AAAA,UAAK;AAAA,UAAK;AAAA,UAAK;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAK;AAAA,UAAM;AAAA,UACzG;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAK;AAAA,UAAM;AAAA,UAAM;AAAA,UAAK;AAAA,UAAK;AAAA,UAAK;AAAA,UAAK;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAK;AAAA,UAAK;AAAA,UAAK;AAAA,UAAM;AAAA,UAC1G;AAAA,UAAK;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAK;AAAA,UAAK;AAAA,UAAK;AAAA,UAAM;AAAA,UAAK;AAAA,UAAM;AAAA,UAAK;AAAA,UAAK;AAAA,UAAK;AAAA,UAAK;AAAA,UAAM;AAAA,UAAM;AAAA,UACzG;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAK;AAAA,UAAK;AAAA,UAAM;AAAA,UAAK;AAAA,UAAM;AAAA,UAAK;AAAA,UAAM;AAAA,UAAK;AAAA,UAAK;AAAA,UAAK;AAAA,UAAM;AAAA,UAAK;AAAA,UAAK;AAAA,UACzxG;AAAA,UAAK;AAAA,UAAM;AAAA,UAAK;AAAA,UAAM;AAAA,UAAM;AAAA,UAAK;AAAA,UAAM;AAAA,UAAK;AAAA,UAAM;AAAA,UAAK;AAAA,UAAM;AAAA,UAAK;AAAA,UAAK;AAAA,UAAK;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAC1G;AAAA,UAAK;AAAA,UAAM;AAAA,UAAK;AAAA,UAAM;AAAA,UAAM;AAAA,UAAK;AAAA,UAAK;AAAA,UAAK;AAAA,UAAM;AAAA,UAAK;AAAA,UAAM;AAAA,UAAK;AAAA,UAAK;AAAA,UAAK;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UACzvzG;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAK;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAK;AAAA,UAAK;AAAA,UACzG;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAK;AAAA,UAAK;AAAA,UAAM;AAAA,UAAK;AAAA,UAAK;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UACxG;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAK;AAAA,UAAK;AAAA,UAAM;AAAA,UAAK;AAAA,UAAM;AAAA,UAAK;AAAA,UAAK;AAAA,UAAK;AAAA,UAAM;AAAA,UAC5G;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAC5G;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAC5G;AAAA,UAAK;AAAA,UAAK;AAAA,UAAK;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UACzG;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAK;AAAA,UAAM;AAAA,UAAK;AAAA,UAAM;AAAA,UAAK;AAAA,UACzG;AAAA,UAAK;AAAA,UAAM;AAAA,UAAK;AAAA,UAAM;AAAA,UAAK;AAAA,UAAM;AAAA,UAAK;AAAA,UAAK;AAAA,UAAK;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAK;AAAA,UAAK;AAAA,UAAM;AAAA,UAAK;AAAA,UAAM;AAAA,UAAK;AAAA,UACxG;AAAA,UAAM;AAAA,UAAK;AAAA,UAAK;AAAA,UAAK;AAAA,UAAK;AAAA,UAAM;AAAA,UAAK;AAAA,UAAM;AAAA,UAAK;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAI;AAAA,UAAI;AAAA,UAAM;AAAA,UAAI;AAAA,UAAM;AAAA,UAC5G;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAI;AAAA,UAAI;AAAA,UAAI;AAAA,UAAM;AAAA,UAAI;AAAA,UAAM;AAAA,UAAI;AAAA,UAAM;AAAA,UAAI;AAAA,UAAI;AAAA,UAAI;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UACxxG;AAAA,UAAK;AAAA,UAAK;AAAA,UAAK;AAAA,UAAM;AAAA,UAAK;AAAA,UAAM;AAAA,UAAK;AAAA,UAAK;AAAA,UAAK;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAK;AAAA,UAC1G;AAAA,UAAK;AAAA,UAAM;AAAA,UAAK;AAAA,UAAM;AAAA,UAAK;AAAA,UAAM;AAAA,UAAK;AAAA,UAAK;AAAA,UAAK;AAAA,UAAK;AAAA,UAAM;AAAA,UAAK;AAAA,UAAK;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UACzG;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAK;AAAA,UAAM;AAAA,UAAK;AAAA,UAAM;AAAA,UAAK;AAAA,UAAM;AAAA,UAAM;AAAA,UAAK;AAAA,UAAK;AAAA,UAAM;AAAA,UAAK;AAAA,UAAM;AAAA,UAAK;AAAA,UAC3G;AAAA,UAAK;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAK;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAK;AAAA,UAAM;AAAA,UACzxG;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAC5G;AAAA,UAAK;AAAA,UAAK;AAAA,UAAM;AAAA,UAAK;AAAA,UAAK;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UACxxzxG;AAAA,UAAK;AAAA,UAAK;AAAA,UAAK;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAK;AAAA,UAAK;AAAA,UAAK;AAAA,UAAK;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAC3G;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAK;AAAA,UAAM;AAAA,UAAK;AAAA,UAAK;AAAA,UAAK;AAAA,UAAM;AAAA,UAAM;AAAA,UAAK;AAAA,UAAK;AAAA,UAAK;AAAA,UAAM;AAAA,UAAK;AAAA,UAAK;AAAA,UAAM;AAAA,UACzG;AAAA,UAAM;AAAA,UAAK;AAAA,UAAK;AAAA,UAAK;AAAA,UAAM;AAAA,UAAK;AAAA,UAAM;AAAA,UAAK;AAAA,UAAK;AAAA,UAAK;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAK;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAK;AAAA,UAAM;AAAA,UACzxG;AAAA,UAAK;AAAA,UAAM;AAAA,UAAK;AAAA,UAAM;AAAA,UAAM;AAAA,UAAK;AAAA,UAAK;AAAA,UAAM;AAAA,UAAK;AAAA,UAAM;AAAA,UAAK;AAAA,UAAM;AAAA,UAAK;AAAA,UAAK;AAAA,UAAK;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAK;AAAA,UACxxzzvG;AAAA,UAAM;AAAA,UAAK;AAAA,UAAK;AAAA,UAAK;AAAA,UAAK;AAAA,UAAK;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAK;AAAA,UAAK;AAAA,UAAK;AAAA,UAAK;AAAA,UAAM;AAAA,UAAK;AAAA,UAAK;AAAA,UACvG;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAK;AAAA,UAAK;AAAA,UAAK;AAAA,UAAM;AAAA,UAAK;AAAA,UAAK;AAAA,UAAK;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAC5G;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAK;AAAA,UAAK;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAK;AAAA,UAAK;AAAA,UAAK;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UACvG;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAK;AAAA,UAAK;AAAA,UAAK;AAAA,UAAK;AAAA,UAAK;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UACvxG;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAK;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAK;AAAA,UAAK;AAAA,UAAK;AAAA,UAAM;AAAA,UAAK;AAAA,UAAK;AAAA,UAAM;AAAA,UAAM;AAAA,UAC5G;AAAA,UAAK;AAAA,UAAM;AAAA,UAAK;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAK;AAAA,UAAK;AAAA,UAAK;AAAA,UAAK;AAAA,UAAM;AAAA,UAAK;AAAA,UAAM;AAAA,UAAK;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAK;AAAA,UACzzzG;AAAA,UAAK;AAAA,UAAM;AAAA,UAAM;AAAA,UAAK;AAAA,UAAK;AAAA,UAAK;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAK;AAAA,UAAK;AAAA,UAAK;AAAA,UAAK;AAAA,UAAK;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UACzG;AAAA,UAAM;AAAA,UAAK;AAAA,UAAK;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAC1G;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAC5G;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAK;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAK;AAAA,UAAM;AAAA,UAAM;AAAA,UAC1G;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAK;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAC3G;AAAA,UAAM;AAAA,UAAK;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAK;AAAA,UAAM;AAAA,UAAK;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UACzG;AAAA,UAAM;AAAA,UAAM;AAAA,UAAK;AAAA,UAAM;AAAA,UAAK;AAAA,UAAM;AAAA,UAAK;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAK;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UACxG;AAAA,UAAK;AAAA,UAAM;AAAA,UAAM;AAAA,UAAK;AAAA,UAAK;AAAA,UAAM;AAAA,UAAM;AAAA,UAAK;AAAA,UAAK;AAAA,UAAK;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAK;AAAA,UAAK;AAAA,UAAK;AAAA,UACzG;AAAA,UAAK;AAAA,UAAK;AAAA,UAAK;AAAA,UAAM;AAAA,UAAM;AAAA,UAAK;AAAA,UAAK;AAAA,UAAK;AAAA,UAAK;AAAA,UAAK;AAAA,UAAK;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UACzG;AAAA,UAAM;AAAA,UAAK;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAI;AAAA,UAAM;AAAA,UAAI;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UACvG;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAK;AAAA,UAAI;AAAA,UAAK;AAAA,UAAI;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAI;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAK;AAAA,UACzG;AAAA,UAAK;AAAA,UAAK;AAAA,UAAK;AAAA,UAAG;AAAA,UAAG;AAAA,UAAK;AAAA,UAAK;AAAA,UAAK;AAAA,UAAK;AAAA,UAAI;AAAA,UAAK;AAAA,UAAI;AAAA,UAAK;AAAA,UAAK;AAAA,UAAK;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAK;AAAA,UAAM;AAAA,UACxG;AAAA,UAAM;AAAA,UAAK;AAAA,UAAM;AAAA,UAAM;AAAA,UAAK;AAAA,UAAK;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAK;AAAA,UAAK;AAAA,UAAK;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAK;AAAA,UAC3G;AAAA,UAAK;AAAA,UAAK;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAK;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAM;AAAA,UAAK;AAAA,UAAK;AAAA,UAAK;AAAA,UAAM;AAA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",
  "names": ["hasOwnProperty", "ReactDebugCurrentFrame", "hasOwnProperty", "self", "isValidElement", "createContext", "error", "render", "memo", "useContext", "useState", "useRef", "useEffect", "useMemo", "Component", "location", "has", "Children", "initialTime", "exports", "ReactDebugCurrentFrame", "appendChild", "removeChild", "location", "has", "workInProgress", "index", "set", "error", "hasOwnProperty", "renderLanes", "current", "updateFragment", "child", "reconcileChildFibers", "render", "subtreeRenderLanes", "isArray", "error$1", "callCallback", "commitTime", "RenderContext", "currentHook", "ReactCurrentDispatcher", "ReactDebugCurrentFrame", "location", "has", "hasOwnProperty", "self", "isValidElement", "jsx", "jsxs", "require_react_jsx_runtime_development", "ReactDebugCurrentFrame", "location", "has", "hasOwnProperty", "self", "isValidElement", "jsx", "jsxs", "require_jsx_runtime", "global", "exports", "isNullOrUndefined", "__extends", "CustomError", "BinaryBitmap", "DecodeHintType", "CharacterSetValueIdentifiers", "localLuminances", "HybridBinarizer", "HTMLCanvasElementLuminanceSource", "__awaiter", "BarcodeFormat", "ResultMetadataType", "Table", "cx", "cy", "resultPoint", "numeric", "value", "Mode", "ErrorCorrectionLevelValues", "DataMaskValues", "ModeValues", "column", "MultiFormatReader", "EncodeHintType", "SHIFT_TABLE", "CHAR_MAP", "add", "import_react", "element", "extension", "KIND_FRAGMENT", "isRemoteFragment", "KIND_FRAGMENT", "reactReconciler", "updateProps", "import_react", "import_jsx_runtime", "import_react", "render", "props", "isRemoteFragment", "import_react", "import_jsx_runtime", "AdminAction", "BlockStack", "Button", "Text", "import_react", "Html5QrcodeSupportedFormats", "DecodedTextType", "Html5QrcodeScanType", "Html5QrcodeConstants", "QrcodeResultFormat", "Html5QrcodeResultFactory", "Html5QrcodeErrorTypes", "Html5QrcodeErrorFactory", "BaseLoggger", "Html5QrcodeStrings", "Html5QrcodeScannerStrings", "LibraryInfoStrings", "VideoConstraintsUtil", "ZXingHtml5QrcodeDecoder", "BarcodeDetectorDelegate", "Html5QrcodeShim", "AbstractCameraCapability", "AbstractRangeCameraCapability", "ZoomFeatureImpl", "TorchFeatureImpl", "CameraCapabilitiesImpl", "RenderedCameraImpl", "CameraImpl", "CameraFactory", "CameraRetriever", "_i", "Html5QrcodeScannerState", "StateManagerImpl", "StateManagerProxy", "StateManagerFactory", "__extends", "Constants", "InternalHtml5QrcodeConfig", "Html5Qrcode", "PersistedDataFactory", "PersistedDataManager", "LibraryInfoDiv", "LibraryInfoIcon", "LibraryInfoContainer", "CameraPermissions", "ScanTypeSelector", "PublicUiElementIdAndClasses", "BaseUiElementFactory", "TorchController", "TorchButton", "__awaiter", "FileSelectionUi", "CameraSelectionUi", "CameraZoomUi", "Html5QrcodeScannerStatus", "Html5QrcodeScanner", "cameraId", "_", "import_jsx_runtime", "AdminAction", "Button", "BlockStack", "Text"]
}
